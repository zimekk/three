(self.webpackChunk_dev_web=self.webpackChunk_dev_web||[]).push([[181],{2800:(t,e,o)=>{"use strict";o.d(e,{q:()=>c});var n=o(7560),r=o(2784),i=o(1119),a=o(2955);class l extends a.Mesh{constructor(){super(new a.BoxGeometry(1,1,1),l.material)}}function s(t,e,o=new a.Vector3){const n=Math.PI*(t-.5),r=2*Math.PI*(e-.5);return o.x=Math.cos(r),o.y=Math.sin(n),o.z=Math.sin(r),o}(0,i.Z)(l,"SkyShader",{uniforms:{turbidity:{value:2},rayleigh:{value:1},mieCoefficient:{value:.005},mieDirectionalG:{value:.8},sunPosition:{value:new a.Vector3},up:{value:new a.Vector3(0,1,0)}},vertexShader:["uniform vec3 sunPosition;","uniform float rayleigh;","uniform float turbidity;","uniform float mieCoefficient;","uniform vec3 up;","varying vec3 vWorldPosition;","varying vec3 vSunDirection;","varying float vSunfade;","varying vec3 vBetaR;","varying vec3 vBetaM;","varying float vSunE;","const float e = 2.71828182845904523536028747135266249775724709369995957;","const float pi = 3.141592653589793238462643383279502884197169;","const vec3 lambda = vec3( 680E-9, 550E-9, 450E-9 );","const vec3 totalRayleigh = vec3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );","const float v = 4.0;","const vec3 K = vec3( 0.686, 0.678, 0.666 );","const vec3 MieConst = vec3( 1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );","const float cutoffAngle = 1.6110731556870734;","const float steepness = 1.5;","const float EE = 1000.0;","float sunIntensity( float zenithAngleCos ) {","\tzenithAngleCos = clamp( zenithAngleCos, -1.0, 1.0 );","\treturn EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos ) ) / steepness ) ) );","}","vec3 totalMie( float T ) {","\tfloat c = ( 0.2 * T ) * 10E-18;","\treturn 0.434 * c * MieConst;","}","void main() {","\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );","\tvWorldPosition = worldPosition.xyz;","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","\tgl_Position.z = gl_Position.w;","\tvSunDirection = normalize( sunPosition );","\tvSunE = sunIntensity( dot( vSunDirection, up ) );","\tvSunfade = 1.0 - clamp( 1.0 - exp( ( sunPosition.y / 450000.0 ) ), 0.0, 1.0 );","\tfloat rayleighCoefficient = rayleigh - ( 1.0 * ( 1.0 - vSunfade ) );","\tvBetaR = totalRayleigh * rayleighCoefficient;","\tvBetaM = totalMie( turbidity ) * mieCoefficient;","}"].join("\n"),fragmentShader:["varying vec3 vWorldPosition;","varying vec3 vSunDirection;","varying float vSunfade;","varying vec3 vBetaR;","varying vec3 vBetaM;","varying float vSunE;","uniform float mieDirectionalG;","uniform vec3 up;","const vec3 cameraPos = vec3( 0.0, 0.0, 0.0 );","const float pi = 3.141592653589793238462643383279502884197169;","const float n = 1.0003;","const float N = 2.545E25;","const float rayleighZenithLength = 8.4E3;","const float mieZenithLength = 1.25E3;","const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;","const float THREE_OVER_SIXTEENPI = 0.05968310365946075;","const float ONE_OVER_FOURPI = 0.07957747154594767;","float rayleighPhase( float cosTheta ) {","\treturn THREE_OVER_SIXTEENPI * ( 1.0 + pow( cosTheta, 2.0 ) );","}","float hgPhase( float cosTheta, float g ) {","\tfloat g2 = pow( g, 2.0 );","\tfloat inverse = 1.0 / pow( 1.0 - 2.0 * g * cosTheta + g2, 1.5 );","\treturn ONE_OVER_FOURPI * ( ( 1.0 - g2 ) * inverse );","}","void main() {","\tvec3 direction = normalize( vWorldPosition - cameraPos );","\tfloat zenithAngle = acos( max( 0.0, dot( up, direction ) ) );","\tfloat inverse = 1.0 / ( cos( zenithAngle ) + 0.15 * pow( 93.885 - ( ( zenithAngle * 180.0 ) / pi ), -1.253 ) );","\tfloat sR = rayleighZenithLength * inverse;","\tfloat sM = mieZenithLength * inverse;","\tvec3 Fex = exp( -( vBetaR * sR + vBetaM * sM ) );","\tfloat cosTheta = dot( direction, vSunDirection );","\tfloat rPhase = rayleighPhase( cosTheta * 0.5 + 0.5 );","\tvec3 betaRTheta = vBetaR * rPhase;","\tfloat mPhase = hgPhase( cosTheta, mieDirectionalG );","\tvec3 betaMTheta = vBetaM * mPhase;","\tvec3 Lin = pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * ( 1.0 - Fex ), vec3( 1.5 ) );","\tLin *= mix( vec3( 1.0 ), pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * Fex, vec3( 1.0 / 2.0 ) ), clamp( pow( 1.0 - dot( up, vSunDirection ), 5.0 ), 0.0, 1.0 ) );","\tfloat theta = acos( direction.y ); // elevation --\x3e y-axis, [-pi/2, pi/2]","\tfloat phi = atan( direction.z, direction.x ); // azimuth --\x3e x-axis [-pi/2, pi/2]","\tvec2 uv = vec2( phi, theta ) / vec2( 2.0 * pi, pi ) + vec2( 0.5, 0.0 );","\tvec3 L0 = vec3( 0.1 ) * Fex;","\tfloat sundisk = smoothstep( sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta );","\tL0 += ( vSunE * 19000.0 * Fex ) * sundisk;","\tvec3 texColor = ( Lin + L0 ) * 0.04 + vec3( 0.0, 0.0003, 0.00075 );","\tvec3 retColor = pow( texColor, vec3( 1.0 / ( 1.2 + ( 1.2 * vSunfade ) ) ) );","\tgl_FragColor = vec4( retColor, 1.0 );","#include <tonemapping_fragment>","#include <encodings_fragment>","}"].join("\n")}),(0,i.Z)(l,"material",new a.ShaderMaterial({name:"SkyShader",fragmentShader:l.SkyShader.fragmentShader,vertexShader:l.SkyShader.vertexShader,uniforms:a.UniformsUtils.clone(l.SkyShader.uniforms),side:a.BackSide,depthWrite:!1}));const c=r.forwardRef((({inclination:t=0,azimuth:e=.25,distance:o=100,mieCoefficient:i=.005,mieDirectionalG:c=.8,rayleigh:u=1,turbidity:m=2,sunPosition:v=s(t,e),...f},d)=>{const p=r.useMemo((()=>(new a.Vector3).setScalar(o)),[o]),[h]=r.useState((()=>new l));return r.createElement("primitive",(0,n.Z)({dispose:void 0,object:h,ref:d,"material-uniforms-mieCoefficient-value":i,"material-uniforms-mieDirectionalG-value":c,"material-uniforms-rayleigh-value":u,"material-uniforms-sunPosition-value":v,"material-uniforms-turbidity-value":m,scale:p},f))}))},7181:(t,e,o)=>{"use strict";o.r(e),o.d(e,{default:()=>v});var n=o(2955),r=o(2784),i=o(4380),a=o(2800),l=o(7539);class s extends n.Mesh{constructor(t,e={}){super(t);const o=this,r=void 0!==e.textureWidth?e.textureWidth:512,i=void 0!==e.textureHeight?e.textureHeight:512,a=void 0!==e.clipBias?e.clipBias:0,l=void 0!==e.alpha?e.alpha:1,s=void 0!==e.time?e.time:0,c=void 0!==e.waterNormals?e.waterNormals:null,u=void 0!==e.sunDirection?e.sunDirection:new n.Vector3(.70707,.70707,0),m=new n.Color(void 0!==e.sunColor?e.sunColor:16777215),v=new n.Color(void 0!==e.waterColor?e.waterColor:8355711),f=void 0!==e.eye?e.eye:new n.Vector3(0,0,0),d=void 0!==e.distortionScale?e.distortionScale:20,p=void 0!==e.side?e.side:n.FrontSide,h=void 0!==e.fog&&e.fog,g=void 0!==e.format?e.format:n.RGBFormat,x=new n.Plane,w=new n.Vector3,y=new n.Vector3,S=new n.Vector3,M=new n.Matrix4,C=new n.Vector3(0,0,-1),E=new n.Vector4,P=new n.Vector3,_=new n.Vector3,b=new n.Vector4,D=new n.Matrix4,R=new n.PerspectiveCamera,z={minFilter:n.LinearFilter,magFilter:n.LinearFilter,format:g},T=new n.WebGLRenderTarget(r,i,z);n.MathUtils.isPowerOfTwo(r)&&n.MathUtils.isPowerOfTwo(i)||(T.texture.generateMipmaps=!1);const L={uniforms:n.UniformsUtils.merge([n.UniformsLib.fog,n.UniformsLib.lights,{normalSampler:{value:null},mirrorSampler:{value:null},alpha:{value:1},time:{value:0},size:{value:1},distortionScale:{value:20},textureMatrix:{value:new n.Matrix4},sunColor:{value:new n.Color(8355711)},sunDirection:{value:new n.Vector3(.70707,.70707,0)},eye:{value:new n.Vector3},waterColor:{value:new n.Color(5592405)}}]),vertexShader:"\n\t\t\t\tuniform mat4 textureMatrix;\n\t\t\t\tuniform float time;\n\n\t\t\t\tvarying vec4 mirrorCoord;\n\t\t\t\tvarying vec4 worldPosition;\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <fog_pars_vertex>\n\t\t\t\t#include <shadowmap_pars_vertex>\n\t\t\t\t#include <logdepthbuf_pars_vertex>\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tmirrorCoord = modelMatrix * vec4( position, 1.0 );\n\t\t\t\t\tworldPosition = mirrorCoord.xyzw;\n\t\t\t\t\tmirrorCoord = textureMatrix * mirrorCoord;\n\t\t\t\t\tvec4 mvPosition =  modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t\t#include <beginnormal_vertex>\n\t\t\t\t#include <defaultnormal_vertex>\n\t\t\t\t#include <logdepthbuf_vertex>\n\t\t\t\t#include <fog_vertex>\n\t\t\t\t#include <shadowmap_vertex>\n\t\t\t}",fragmentShader:"\n\t\t\t\tuniform sampler2D mirrorSampler;\n\t\t\t\tuniform float alpha;\n\t\t\t\tuniform float time;\n\t\t\t\tuniform float size;\n\t\t\t\tuniform float distortionScale;\n\t\t\t\tuniform sampler2D normalSampler;\n\t\t\t\tuniform vec3 sunColor;\n\t\t\t\tuniform vec3 sunDirection;\n\t\t\t\tuniform vec3 eye;\n\t\t\t\tuniform vec3 waterColor;\n\n\t\t\t\tvarying vec4 mirrorCoord;\n\t\t\t\tvarying vec4 worldPosition;\n\n\t\t\t\tvec4 getNoise( vec2 uv ) {\n\t\t\t\t\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);\n\t\t\t\t\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );\n\t\t\t\t\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );\n\t\t\t\t\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );\n\t\t\t\t\tvec4 noise = texture2D( normalSampler, uv0 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv1 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv2 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv3 );\n\t\t\t\t\treturn noise * 0.5 - 1.0;\n\t\t\t\t}\n\n\t\t\t\tvoid sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {\n\t\t\t\t\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );\n\t\t\t\t\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );\n\t\t\t\t\tspecularColor += pow( direction, shiny ) * sunColor * spec;\n\t\t\t\t\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;\n\t\t\t\t}\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <packing>\n\t\t\t\t#include <bsdfs>\n\t\t\t\t#include <fog_pars_fragment>\n\t\t\t\t#include <logdepthbuf_pars_fragment>\n\t\t\t\t#include <lights_pars_begin>\n\t\t\t\t#include <shadowmap_pars_fragment>\n\t\t\t\t#include <shadowmask_pars_fragment>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#include <logdepthbuf_fragment>\n\t\t\t\t\tvec4 noise = getNoise( worldPosition.xz * size );\n\t\t\t\t\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );\n\n\t\t\t\t\tvec3 diffuseLight = vec3(0.0);\n\t\t\t\t\tvec3 specularLight = vec3(0.0);\n\n\t\t\t\t\tvec3 worldToEye = eye-worldPosition.xyz;\n\t\t\t\t\tvec3 eyeDirection = normalize( worldToEye );\n\t\t\t\t\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );\n\n\t\t\t\t\tfloat distance = length(worldToEye);\n\n\t\t\t\t\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;\n\t\t\t\t\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );\n\n\t\t\t\t\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );\n\t\t\t\t\tfloat rf0 = 0.3;\n\t\t\t\t\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );\n\t\t\t\t\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;\n\t\t\t\t\tvec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);\n\t\t\t\t\tvec3 outgoingLight = albedo;\n\t\t\t\t\tgl_FragColor = vec4( outgoingLight, alpha );\n\n\t\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t\t#include <fog_fragment>\n\t\t\t\t}"},V=new n.ShaderMaterial({fragmentShader:L.fragmentShader,vertexShader:L.vertexShader,uniforms:n.UniformsUtils.clone(L.uniforms),lights:!0,side:p,fog:h});V.uniforms.mirrorSampler.value=T.texture,V.uniforms.textureMatrix.value=D,V.uniforms.alpha.value=l,V.uniforms.time.value=s,V.uniforms.normalSampler.value=c,V.uniforms.sunColor.value=m,V.uniforms.waterColor.value=v,V.uniforms.sunDirection.value=u,V.uniforms.distortionScale.value=d,V.uniforms.eye.value=f,o.material=V,o.onBeforeRender=function(t,e,n){if(y.setFromMatrixPosition(o.matrixWorld),S.setFromMatrixPosition(n.matrixWorld),M.extractRotation(o.matrixWorld),w.set(0,0,1),w.applyMatrix4(M),P.subVectors(y,S),P.dot(w)>0)return;P.reflect(w).negate(),P.add(y),M.extractRotation(n.matrixWorld),C.set(0,0,-1),C.applyMatrix4(M),C.add(S),_.subVectors(y,C),_.reflect(w).negate(),_.add(y),R.position.copy(P),R.up.set(0,1,0),R.up.applyMatrix4(M),R.up.reflect(w),R.lookAt(_),R.far=n.far,R.updateMatrixWorld(),R.projectionMatrix.copy(n.projectionMatrix),D.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),D.multiply(R.projectionMatrix),D.multiply(R.matrixWorldInverse),x.setFromNormalAndCoplanarPoint(w,y),x.applyMatrix4(R.matrixWorldInverse),E.set(x.normal.x,x.normal.y,x.normal.z,x.constant);const r=R.projectionMatrix;b.x=(Math.sign(E.x)+r.elements[8])/r.elements[0],b.y=(Math.sign(E.y)+r.elements[9])/r.elements[5],b.z=-1,b.w=(1+r.elements[10])/r.elements[14],E.multiplyScalar(2/E.dot(b)),r.elements[2]=E.x,r.elements[6]=E.y,r.elements[10]=E.z+1-a,r.elements[14]=E.w,f.setFromMatrixPosition(n.matrixWorld);const i=t.getRenderTarget(),l=t.xr.enabled,s=t.shadowMap.autoUpdate;o.visible=!1,t.xr.enabled=!1,t.shadowMap.autoUpdate=!1,t.setRenderTarget(T),t.state.buffers.depth.setMask(!0),!1===t.autoClear&&t.clear(),t.render(e,R),o.visible=!0,t.xr.enabled=l,t.shadowMap.autoUpdate=s,t.setRenderTarget(i);const c=n.viewport;void 0!==c&&t.state.viewport(c)}}}s.prototype.isWater=!0;var c=o(8790);function u(){const t=(0,r.useRef)(),e=(0,i.Ky)((t=>t.gl)),a=(0,i.U2)(n.TextureLoader,o(5430).Z);a.wrapS=a.wrapT=n.RepeatWrapping;const l=(0,r.useMemo)((()=>new n.PlaneGeometry(1e4,1e4)),[]),s=(0,r.useMemo)((()=>({textureWidth:512,textureHeight:512,waterNormals:a,sunDirection:new n.Vector3,sunColor:16777215,waterColor:7695,distortionScale:3.7,fog:!1,format:e.encoding})),[a]);return(0,i.xQ)(((e,o)=>t.current.material.uniforms.time.value+=o)),r.createElement("water",{ref:t,args:[l,s],"rotation-x":-Math.PI/2})}function m(){const t=(0,r.useRef)();return(0,i.xQ)(((e,o)=>{t.current.position.y=10+20*Math.sin(e.clock.elapsedTime),t.current.rotation.x=t.current.rotation.y=t.current.rotation.z+=o})),r.createElement("mesh",{ref:t,scale:20},r.createElement("boxGeometry",null),r.createElement("meshStandardMaterial",null))}function v(){return r.createElement("section",{className:c.Z.Demo},r.createElement(i.Xz,{camera:{position:[0,5,100],fov:55,near:1,far:2e4}},r.createElement("pointLight",{position:[100,100,100]}),r.createElement("pointLight",{position:[-100,-100,-100]}),r.createElement(r.Suspense,{fallback:null},r.createElement(u,null),r.createElement(m,null)),r.createElement(a.q,{scale:1e3,sunPosition:[500,150,-1e3],turbidity:.1}),r.createElement(l.z,null)))}(0,i.l7)({Water:s})},5430:(t,e,o)=>{"use strict";o.d(e,{Z:()=>n});const n=o.p+"537ec85b965d414829ab56e82a783970.jpeg"}}]);