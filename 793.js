/*! For license information please see 793.js.LICENSE.txt */
(self.webpackChunk_dev_web=self.webpackChunk_dev_web||[]).push([[793],{678:()=>{},654:(t,e,i)=>{"use strict";function n(){return(n=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}return t}).apply(this,arguments)}i.d(e,{Z:()=>n})},360:(t,e,i)=>{"use strict";i.d(e,{V:()=>l});var n=i(994),s=function(t){return(0,n.U7)(t)},l=function(t){void 0===t&&(t=s);var e=!0,i=!1,l=0,a=[],g=0,I=new Set,d=new Set,o=new Set,r=function(t){var e=a.indexOf(t);e<0&&(e=a.findIndex((function(e){return e.priority>t.priority})),a.splice(~e?e:a.length,0,t))},b=function(){if(!e)try{F(),t(b)}catch(t){console.error(t)}},u=function(){e&&(e=!1,0==l&&(l=n.zO(),t(b)))},B=[];this.setTimeout=function(t,e){var i=n.zO()+e,s=function(){var t=B.findIndex((function(t){return t.cancel==s}));t>=0&&B.splice(t,1)},l=c(B,(function(t){return t.time>i})),a={time:i,handler:t,cancel:s};return B.splice(l,0,a),u(),a};var F=this.advance=function(){var t=n.zO();if(I.size&&(I.forEach(r),I.clear()),B.length&&n.MA((function(){var e=c(B,(function(e){return e.time>t}));B.splice(0,e).forEach((function(t){return t.handler()}))})),t>l){var e=Math.min(64,t-l);l=t,n.MA((function(){a.length&&(n.uI(a),a=a.filter((function(t){return g=t.priority,t.idle||t.advance(e),!t.idle})),g=0),d.size&&(d.forEach((function(e){return e(t)})),d.clear()),o.size&&(i=!0,o.forEach((function(e){return e(t)})),o.clear(),i=!1)}))}};this.start=function(t){g>t.priority?I.add(t):(r(t),u())},this.onFrame=function(t){d.add(t),u()},this.onWrite=function(t){i?t(l):o.add(t)}};function c(t,e){var i=t.findIndex(e);return i<0?t.length:i}},994:(t,e,i)=>{"use strict";i.d(e,{qS:()=>n,fT:()=>a,zO:()=>g,Yf:()=>I,U7:()=>o,MA:()=>r,uI:()=>b,f0:()=>u});var n,s,l=i(360),c=i(986),a=new l.V,g=function(){return performance.now()},I=null,d=!1,o="undefined"!=typeof window?window.requestAnimationFrame:function(){return-1},r=function(t){return t()},b=c.ZT,u=function(t){var e;return e=Object.assign({to:s,now:g,frameLoop:a,colorNames:I,skipAnimation:d,createStringInterpolator:n,requestAnimationFrame:o,batchedUpdates:r,willAdvance:b},function(t){var e={};for(var i in t)void 0!==t[i]&&(e[i]=t[i]);return e}(t)),s=e.to,g=e.now,a=e.frameLoop,I=e.colorNames,d=e.skipAnimation,n=e.createStringInterpolator,o=e.requestAnimationFrame,r=e.batchedUpdates,b=e.willAdvance,e}},986:(t,e,i)=>{"use strict";i.d(e,{ZT:()=>n,dE:()=>s,is:()=>l,S6:()=>c});var n=function(){},s=function(t,e,i){return Object.defineProperty(t,e,{value:i,writable:!0,configurable:!0})},l={arr:Array.isArray,obj:function(t){return!!t&&"Object"===t.constructor.name},fun:function(t){return"function"==typeof t},str:function(t){return"string"==typeof t},num:function(t){return"number"==typeof t},und:function(t){return void 0===t}},c=function(t,e,i){l.fun(t.forEach)?t.forEach(e,i):Object.keys(t).forEach((function(n){return e.call(i,t[n],n)}))}},446:(t,e,i)=>{"use strict";i.d(e,{NW:()=>s});var n=i(784),s=function(){var t,e=(0,n.useState)(0)[1],i=(0,n.useRef)(!1);return t=function(){return function(){i.current=!0}},(0,n.useEffect)(t,[]),function(){i.current||e({})}}},136:(t,e,i)=>{"use strict";i.d(e,{useForceUpdate:()=>s.NW,defineHidden:()=>l.dE,each:()=>l.S6,is:()=>l.is,FrameLoop:()=>c.V,getFluidConfig:()=>a.Qb});var n=i(150);i.o(n,"FrameLoop")&&i.d(e,{FrameLoop:function(){return n.FrameLoop}}),i.o(n,"defineHidden")&&i.d(e,{defineHidden:function(){return n.defineHidden}}),i.o(n,"each")&&i.d(e,{each:function(){return n.each}}),i.o(n,"getFluidConfig")&&i.d(e,{getFluidConfig:function(){return n.getFluidConfig}}),i.o(n,"is")&&i.d(e,{is:function(){return n.is}}),i.o(n,"useForceUpdate")&&i.d(e,{useForceUpdate:function(){return n.useForceUpdate}});var s=i(446),l=i(986),c=i(360),a=i(853)},150:(t,e,i)=>{"use strict";var n=i(678);i.o(n,"FrameLoop")&&i.d(e,{FrameLoop:function(){return n.FrameLoop}}),i.o(n,"defineHidden")&&i.d(e,{defineHidden:function(){return n.defineHidden}}),i.o(n,"each")&&i.d(e,{each:function(){return n.each}}),i.o(n,"getFluidConfig")&&i.d(e,{getFluidConfig:function(){return n.getFluidConfig}}),i.o(n,"is")&&i.d(e,{is:function(){return n.is}}),i.o(n,"useForceUpdate")&&i.d(e,{useForceUpdate:function(){return n.useForceUpdate}})},491:(t,e,i)=>{"use strict";i.d(e,{a:()=>T});var n=i(803),s=i(136),l=i(994),c=i(654),a=i(784),g="undefined"!=typeof window&&window.document&&window.document.createElement?a.useLayoutEffect:a.useEffect;const I=Symbol.for("Animated:node");const d={current:null};class o extends class{constructor(){this.payload=void 0,(0,s.defineHidden)(this,I,this)}getPayload(){return this.payload||[]}}{constructor(t=null){super(),this.source=void 0,this.setValue(t)}getValue(t){if(!this.source)return null;const e={};return(0,s.each)(this.source,((i,n)=>{if((l=i)&&l[I]===l)e[n]=i.getValue(t);else{const l=(0,s.getFluidConfig)(i);l?e[n]=l.get():t||(e[n]=i)}var l})),e}setValue(t){this.source=t,this.payload=this._makePayload(t)}reset(){this.payload&&(0,s.each)(this.payload,(t=>t.reset()))}_makePayload(t){if(t){const e=new Set;return(0,s.each)(t,this._addToPayload,e),Array.from(e)}}_addToPayload(t){(0,s.getFluidConfig)(t)&&d.current&&d.current.dependencies.add(t);const e=(i=t)&&i[I]&&i[I].getPayload();var i;e&&(0,s.each)(e,(t=>this.add(t)))}}class r extends o{constructor(t){super(null),this.update=t,this.dirty=!1}setValue(t,e){if(t){if(e&&(d.current=e,t.style)){const{createAnimatedStyle:i}=e.host;t=(0,c.Z)((0,c.Z)({},t),{},{style:i(t.style)})}super.setValue(t),d.current=null}}onParentChange({type:t}){this.dirty||"change"!==t||(this.dirty=!0,l.fT.onFrame((()=>{this.dirty=!1,this.update()})))}}const b=(t,e)=>(0,a.forwardRef)(((i,n)=>{const l=(0,a.useRef)(null),I=!s.is.fun(t)||t.prototype&&t.prototype.isReactComponent,d=(0,s.useForceUpdate)(),o=new r((()=>{const t=l.current;I&&!t||!1===(!!t&&e.applyAnimatedValues(t,o.getValue(!0)))&&d()})),b=new Set;return o.setValue(i,{dependencies:b,host:e}),g((()=>((0,s.each)(b,(t=>t.addChild(o))),()=>(0,s.each)(b,(t=>t.removeChild(o)))))),(0,a.createElement)(t,(0,c.Z)({},e.getComponentProps(o.getValue()),{ref:I&&(t=>{l.current=function(t,e){return t&&(s.is.fun(t)?t(e):t.current=e),e}(n,t)})}))})),u=Symbol.for("AnimatedComponent"),B=t=>s.is.str(t)?t:t&&s.is.str(t.displayName)?t.displayName:s.is.fun(t)&&t.name||null;var F=function(){return(F=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var s in e=arguments[i])Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s]);return t}).apply(this,arguments)},C=i(853),G=i(986),U=function(t,e,i){if(G.is.fun(t))return t;if(G.is.arr(t))return U({range:t,output:e,extrapolate:i});if(G.is.str(t.output[0]))return l.qS(t);var n=t,s=n.output,c=n.range||[0,1],a=n.extrapolateLeft||n.extrapolate||"extend",g=n.extrapolateRight||n.extrapolate||"extend",I=n.easing||function(t){return t};return function(t){var e=function(t,e){for(var i=1;i<e.length-1&&!(e[i]>=t);++i);return i-1}(t,c);return function(t,e,i,n,s,l,c,a,g){var I=g?g(t):t;if(I<e){if("identity"===c)return I;"clamp"===c&&(I=e)}if(I>i){if("identity"===a)return I;"clamp"===a&&(I=i)}return n===s?n:e===i?t<=e?n:s:(e===-1/0?I=-I:i===1/0?I-=e:I=(I-e)/(i-e),I=l(I),n===-1/0?I=-I:s===1/0?I+=n:I=I*(s-n)+n,I)}(t,c[e],c[e+1],s[e],s[e+1],I,a,g,n.map)}},Q="[-+]?\\d*\\.?\\d+",h=Q+"%";function m(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return"\\(\\s*("+t.join(")\\s*,\\s*(")+")\\s*\\)"}var x=new RegExp("rgb"+m(Q,Q,Q)),p=new RegExp("rgba"+m(Q,Q,Q,Q)),V=new RegExp("hsl"+m(Q,h,h)),Z=new RegExp("hsla"+m(Q,h,h,Q)),R=/^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,y=/^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,L=/^#([0-9a-fA-F]{6})$/,X=/^#([0-9a-fA-F]{8})$/;function A(t,e,i){var n=(1-Math.abs(2*i-1))*e,s=i-n/2,l=function(t,e,i){return t<60?[e,i,0]:t<120?[i,e,0]:t<180?[0,e,i]:t<240?[0,i,e]:t<300?[i,0,e]:[e,0,i]}(t,n,n*(1-Math.abs(t/60%2-1))),c=l[0],a=l[1],g=l[2];return Math.round(255*(c+s))<<24|Math.round(255*(a+s))<<16|Math.round(255*(g+s))<<8}function W(t){var e=parseInt(t,10);return e<0?0:e>255?255:e}function S(t){return(parseFloat(t)%360+360)%360/360}function E(t){var e=parseFloat(t);return e<0?0:e>1?255:Math.round(255*e)}function N(t){var e=parseFloat(t);return e<0?0:e>100?1:e/100}function v(t){var e,i,n="number"==typeof(e=t)?e>>>0===e&&e>=0&&e<=4294967295?e:null:(i=L.exec(e))?parseInt(i[1]+"ff",16)>>>0:l.Yf&&void 0!==l.Yf[e]?l.Yf[e]:(i=x.exec(e))?(W(i[1])<<24|W(i[2])<<16|W(i[3])<<8|255)>>>0:(i=p.exec(e))?(W(i[1])<<24|W(i[2])<<16|W(i[3])<<8|E(i[4]))>>>0:(i=R.exec(e))?parseInt(i[1]+i[1]+i[2]+i[2]+i[3]+i[3]+"ff",16)>>>0:(i=X.exec(e))?parseInt(i[1],16)>>>0:(i=y.exec(e))?parseInt(i[1]+i[1]+i[2]+i[2]+i[3]+i[3]+i[4]+i[4],16)>>>0:(i=V.exec(e))?(255|A(S(i[1]),N(i[2]),N(i[3])))>>>0:(i=Z.exec(e))?(A(S(i[1]),N(i[2]),N(i[3]))|E(i[4]))>>>0:null;return null===n?t:"rgba("+((4278190080&(n=n||0))>>>24)+", "+((16711680&n)>>>16)+", "+((65280&n)>>>8)+", "+(255&n)/255+")"}var Y,H=/[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,J=/(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d\.]+%?\))/gi,M=/rgba\(([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+)\)/gi,f=function(t,e,i,n,s){return"rgba("+Math.round(e)+", "+Math.round(i)+", "+Math.round(n)+", "+s+")"};var k=i(955);const z=["primitive"].concat(Object.keys(k).filter((t=>/^[A-Z]/.test(t))).map((t=>t[0].toLowerCase()+t.slice(1)))),w=new s.FrameLoop((()=>(0,n.z6)()));(0,n.gy)((()=>(w.advance(),!0))),l.f0({createStringInterpolator:function(t){Y||(Y=l.Yf?new RegExp("("+Object.keys(l.Yf).join("|")+")","g"):/^\b$/);var e=t.output.map((function(t){return(0,C.je)(t).replace(J,v).replace(Y,v)})),i=e.map((function(t){return t.match(H).map(Number)})),n=i[0].map((function(t,e){return i.map((function(t){if(!(e in t))throw Error('The arity of each "output" value must be equal');return t[e]}))})).map((function(e){return U(F(F({},t),{output:e}))}));return function(t){var i=0;return e[0].replace(H,(function(){return String(n[i++](t))})).replace(M,f)}},colorNames:{transparent:0,aliceblue:4042850303,antiquewhite:4209760255,aqua:16777215,aquamarine:2147472639,azure:4043309055,beige:4126530815,bisque:4293182719,black:255,blanchedalmond:4293643775,blue:65535,blueviolet:2318131967,brown:2771004159,burlywood:3736635391,burntsienna:3934150143,cadetblue:1604231423,chartreuse:2147418367,chocolate:3530104575,coral:4286533887,cornflowerblue:1687547391,cornsilk:4294499583,crimson:3692313855,cyan:16777215,darkblue:35839,darkcyan:9145343,darkgoldenrod:3095792639,darkgray:2846468607,darkgreen:6553855,darkgrey:2846468607,darkkhaki:3182914559,darkmagenta:2332068863,darkolivegreen:1433087999,darkorange:4287365375,darkorchid:2570243327,darkred:2332033279,darksalmon:3918953215,darkseagreen:2411499519,darkslateblue:1211993087,darkslategray:793726975,darkslategrey:793726975,darkturquoise:13554175,darkviolet:2483082239,deeppink:4279538687,deepskyblue:12582911,dimgray:1768516095,dimgrey:1768516095,dodgerblue:512819199,firebrick:2988581631,floralwhite:4294635775,forestgreen:579543807,fuchsia:4278255615,gainsboro:3705462015,ghostwhite:4177068031,gold:4292280575,goldenrod:3668254975,gray:2155905279,green:8388863,greenyellow:2919182335,grey:2155905279,honeydew:4043305215,hotpink:4285117695,indianred:3445382399,indigo:1258324735,ivory:4294963455,khaki:4041641215,lavender:3873897215,lavenderblush:4293981695,lawngreen:2096890111,lemonchiffon:4294626815,lightblue:2916673279,lightcoral:4034953471,lightcyan:3774873599,lightgoldenrodyellow:4210742015,lightgray:3553874943,lightgreen:2431553791,lightgrey:3553874943,lightpink:4290167295,lightsalmon:4288707327,lightseagreen:548580095,lightskyblue:2278488831,lightslategray:2005441023,lightslategrey:2005441023,lightsteelblue:2965692159,lightyellow:4294959359,lime:16711935,limegreen:852308735,linen:4210091775,magenta:4278255615,maroon:2147483903,mediumaquamarine:1724754687,mediumblue:52735,mediumorchid:3126187007,mediumpurple:2473647103,mediumseagreen:1018393087,mediumslateblue:2070474495,mediumspringgreen:16423679,mediumturquoise:1221709055,mediumvioletred:3340076543,midnightblue:421097727,mintcream:4127193855,mistyrose:4293190143,moccasin:4293178879,navajowhite:4292783615,navy:33023,oldlace:4260751103,olive:2155872511,olivedrab:1804477439,orange:4289003775,orangered:4282712319,orchid:3664828159,palegoldenrod:4008225535,palegreen:2566625535,paleturquoise:2951671551,palevioletred:3681588223,papayawhip:4293907967,peachpuff:4292524543,peru:3448061951,pink:4290825215,plum:3718307327,powderblue:2967529215,purple:2147516671,rebeccapurple:1714657791,red:4278190335,rosybrown:3163525119,royalblue:1097458175,saddlebrown:2336560127,salmon:4202722047,sandybrown:4104413439,seagreen:780883967,seashell:4294307583,sienna:2689740287,silver:3233857791,skyblue:2278484991,slateblue:1784335871,slategray:1887473919,slategrey:1887473919,snow:4294638335,springgreen:16744447,steelblue:1182971135,tan:3535047935,teal:8421631,thistle:3636451583,tomato:4284696575,turquoise:1088475391,violet:4001558271,wheat:4125012991,white:4294967295,whitesmoke:4126537215,yellow:4294902015,yellowgreen:2597139199},frameLoop:w});const T=((t,{applyAnimatedValues:e=(()=>!1),createAnimatedStyle:i=(t=>new o(t)),getComponentProps:n=(t=>t)}={})=>{const l={applyAnimatedValues:e,createAnimatedStyle:i,getComponentProps:n},c=t=>{const e=B(t)||"Anonymous";return(t=s.is.str(t)?b(t,l):t[u]||(t[u]=b(t,l))).displayName="Animated("+e+")",t};return(0,s.each)(t,((t,e)=>{s.is.str(e)||(e=B(t)),c[e]=c(t)})),{animated:c}})(z,{applyAnimatedValues:n.nH}).animated},248:(t,e,i)=>{"use strict";i.d(e,{wI:()=>C,EJ:()=>F,xK:()=>B});var n=i(784),s=i(803),l=i(955);const c=(0,n.createContext)({});var a,g=function(t){return a=a||(i="data:application/json;charset=utf-8;base64,",e=atob(""),s=(n=e).indexOf("\n",10)+1,l=n.substring(s)+"//# sourceMappingURL="+i,c=new Blob([l],{type:"application/javascript"}),URL.createObjectURL(c)),new Worker(a,t);var e,i,n,s,l,c};function I({children:t,step:e=1/60,gravity:i=[0,-10,0],tolerance:l=.001,iterations:a=5,allowSleep:I=!1,broadphase:d="Naive",axisIndex:o=0,defaultContactMaterial:r={contactEquationStiffness:1e6},size:b=1e3}){const{gl:u,invalidate:B}=(0,s.Ky)(),[F]=(0,n.useState)((()=>new g)),[C]=(0,n.useState)({}),[G]=(0,n.useState)((()=>({positions:new Float32Array(3*b),quaternions:new Float32Array(4*b)}))),[U]=(0,n.useState)({}),[Q]=(0,n.useState)({}),h=(0,n.useRef)({}),m=(0,n.useMemo)((()=>()=>{0!==G.positions.byteLength&&0!==G.quaternions.byteLength&&F.postMessage({op:"step",...G},[G.positions.buffer,G.quaternions.buffer])}),[]),x=(0,n.useRef)(!1);(0,s.xQ)((()=>{var t,e,i;null!=(t=u.xr)&&t.isPresenting&&!x.current&&u.xr.getSession().requestAnimationFrame(m),null!=(e=u.xr)&&e.isPresenting||!x.current||requestAnimationFrame(m),x.current=null==(i=u.xr)?void 0:i.isPresenting})),(0,n.useEffect)((()=>(F.postMessage({op:"init",props:{gravity:i,tolerance:l,step:e,iterations:a,broadphase:d,allowSleep:I,axisIndex:o,defaultContactMaterial:r}}),F.onmessage=t=>{switch(t.data.op){case"frame":t.data.bodies&&(h.current=t.data.bodies.reduce(((e,i)=>({...e,[i]:t.data.bodies.indexOf(i)})),{})),G.positions=t.data.positions,G.quaternions=t.data.quaternions,t.data.observations.forEach((([t,e])=>Q[t](e))),u.xr&&u.xr.isPresenting?u.xr.getSession().requestAnimationFrame(m):requestAnimationFrame(m),t.data.active&&B();break;case"event":switch(t.data.type){case"collide":U[t.data.target]({...t.data,target:C[t.data.target],body:C[t.data.body]});break;case"rayhit":U[t.data.ray.uuid]({...t.data,body:t.data.body?C[t.data.body]:null})}}},m(),()=>F.terminate())),[]);const p=(0,n.useMemo)((()=>({worker:F,bodies:h,refs:C,buffers:G,events:U,subscriptions:Q})),[F,h,C,G,U,Q]);return n.createElement(c.Provider,{value:p},t)}const d=new l.Object3D;function o(t,e,i){return e.args=i(e.args),t.userData=e.userData||{},t.position.set(...e.position||[0,0,0]),t.rotation.set(...e.rotation||[0,0,0]),e}function r(t,e,i){void 0!==e&&(t.position.fromArray(i.positions,3*e),t.quaternion.fromArray(i.quaternions,4*e))}let b=0;function u(t,e,i,a){const g=(0,n.useRef)(null),I=a||g,{worker:u,bodies:B,buffers:F,refs:C,events:G,subscriptions:U}=(0,n.useContext)(c);(0,n.useLayoutEffect)((()=>{I.current||(I.current=new l.Object3D);const n=I.current,s=u;let c,a=[n.uuid];return n instanceof l.InstancedMesh?(n.instanceMatrix.setUsage(l.DynamicDrawUsage),a=new Array(n.count).fill(0).map(((t,e)=>n.uuid+"/"+e)),c=a.map(((t,s)=>{const l=o(d,e(s),i);return d.updateMatrix(),n.setMatrixAt(s,d.matrix),n.instanceMatrix.needsUpdate=!0,l}))):c=[o(n,e(0),i)],c.forEach(((t,e)=>{C[a[e]]=n,t.onCollide&&(G[a[e]]=t.onCollide,t.onCollide=!0)})),s.postMessage({op:"addBodies",type:t,uuid:a,props:c}),()=>{c.forEach(((t,e)=>{delete C[a[e]],t.onCollide&&delete G[a[e]]})),s.postMessage({op:"removeBodies",uuid:a})}}),[]),(0,s.xQ)((()=>{if(I.current&&F.positions.length&&F.quaternions.length)if(I.current instanceof l.InstancedMesh)for(let t=0;t<I.current.count;t++){const e=B.current[I.current.uuid+"/"+t];void 0!==e&&(r(d,e,F),d.updateMatrix(),I.current.setMatrixAt(t,d.matrix)),I.current.instanceMatrix.needsUpdate=!0}else r(I.current,B.current[I.current.uuid],F)}));const Q=(0,n.useMemo)((()=>{const t=t=>void 0!==t?I.current.uuid+"/"+t:I.current.uuid,e=(e,i,n)=>I.current&&u.postMessage({op:e,uuid:t(i),props:n}),i=(t,i)=>n=>{const s=b++;return U[s]=n,e("subscribe",i,{id:s,type:t}),()=>{delete U[s],e("unsubscribe",i,s)}},n=(t,e)=>t+e.charAt(0).toUpperCase()+e.slice(1),s=(t,s)=>({set:(i,l,c)=>e(n("set",t),s,[i,l,c]),copy:({x:i,y:l,z:c})=>e(n("set",t),s,[i,l,c]),subscribe:i(t,s)}),l=(t,s)=>({set:i=>e(n("set",t),s,i),subscribe:i(t,s)});function c(t){return{position:s("position",t),rotation:s("quaternion",t),velocity:s("velocity",t),angularVelocity:s("angularVelocity",t),linearFactor:s("linearFactor",t),angularFactor:s("angularFactor",t),mass:l("mass",t),linearDamping:l("linearDamping",t),angularDamping:l("angularDamping",t),allowSleep:l("allowSleep",t),sleepSpeedLimit:l("sleepSpeedLimit",t),sleepTimeLimit:l("sleepTimeLimit",t),collisionFilterGroup:l("collisionFilterGroup",t),collisionFilterMask:l("collisionFilterMask",t),collisionResponse:l("collisionResponse",t),fixedRotation:l("fixedRotation",t),userData:l("userData",t),applyForce(i,n){e("applyForce",t,[i,n])},applyImpulse(i,n){e("applyImpulse",t,[i,n])},applyLocalForce(i,n){e("applyLocalForce",t,[i,n])},applyLocalImpulse(i,n){e("applyLocalImpulse",t,[i,n])}}}const a={};return{...c(void 0),at:t=>a[t]||(a[t]=c(t))}}),[]);return[I,Q]}function B(t,e){return u("Plane",t,(()=>[]),e)}function F(t,e){return u("Box",t,(t=>t||[1,1,1]),e)}function C(t){return n.createElement(n.Suspense,{fallback:null},n.createElement(I,t))}},16:(t,e,i)=>{"use strict";i.d(e,{z:()=>d});var n=i(654),s=i(784),l=i(803);function c(t,e){"function"==typeof t?t(e):null!=t&&(t.current=e)}var a=i(955),g=function(t,e){var i,n,s,l,c,g;void 0===e&&console.warn('THREE.OrbitControls: The second parameter "domElement" is now mandatory.'),e===document&&console.error('THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.'),this.object=t,this.domElement=e,this.enabled=!0,this.target=new a.Vector3,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={LEFT:a.MOUSE.ROTATE,MIDDLE:a.MOUSE.DOLLY,RIGHT:a.MOUSE.PAN},this.touches={ONE:a.TOUCH.ROTATE,TWO:a.TOUCH.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return F.phi},this.getAzimuthalAngle=function(){return F.theta},this.listenToKeyEvents=function(t){t.addEventListener("keydown",_),this._domElementKeyEvents=t},this.saveState=function(){I.target0.copy(I.target),I.position0.copy(I.object.position),I.zoom0=I.object.zoom},this.reset=function(){I.target.copy(I.target0),I.object.position.copy(I.position0),I.object.zoom=I.zoom0,I.object.updateProjectionMatrix(),I.dispatchEvent(d),I.update(),u=b.NONE},this.update=(i=new a.Vector3,n=(new a.Quaternion).setFromUnitVectors(t.up,new a.Vector3(0,1,0)),s=n.clone().invert(),l=new a.Vector3,c=new a.Quaternion,g=2*Math.PI,function(){var t=I.object.position;i.copy(t).sub(I.target),i.applyQuaternion(n),F.setFromVector3(i),I.autoRotate&&u===b.NONE&&A(2*Math.PI/60/60*I.autoRotateSpeed),I.enableDamping?(F.theta+=C.theta*I.dampingFactor,F.phi+=C.phi*I.dampingFactor):(F.theta+=C.theta,F.phi+=C.phi);var e=I.minAzimuthAngle,a=I.maxAzimuthAngle;return isFinite(e)&&isFinite(a)&&(e<-Math.PI?e+=g:e>Math.PI&&(e-=g),a<-Math.PI?a+=g:a>Math.PI&&(a-=g),F.theta=e<=a?Math.max(e,Math.min(a,F.theta)):F.theta>(e+a)/2?Math.max(e,F.theta):Math.min(a,F.theta)),F.phi=Math.max(I.minPolarAngle,Math.min(I.maxPolarAngle,F.phi)),F.makeSafe(),F.radius*=G,F.radius=Math.max(I.minDistance,Math.min(I.maxDistance,F.radius)),!0===I.enableDamping?I.target.addScaledVector(U,I.dampingFactor):I.target.add(U),i.setFromSpherical(F),i.applyQuaternion(s),t.copy(I.target).add(i),I.object.lookAt(I.target),!0===I.enableDamping?(C.theta*=1-I.dampingFactor,C.phi*=1-I.dampingFactor,U.multiplyScalar(1-I.dampingFactor)):(C.set(0,0,0),U.set(0,0,0)),G=1,!!(Q||l.distanceToSquared(I.object.position)>B||8*(1-c.dot(I.object.quaternion))>B)&&(I.dispatchEvent(d),l.copy(I.object.position),c.copy(I.object.quaternion),Q=!1,!0)}),this.dispose=function(){I.domElement.removeEventListener("contextmenu",et),I.domElement.removeEventListener("pointerdown",K),I.domElement.removeEventListener("wheel",O),I.domElement.removeEventListener("touchstart",q),I.domElement.removeEventListener("touchend",tt),I.domElement.removeEventListener("touchmove",$),I.domElement.ownerDocument.removeEventListener("pointermove",j),I.domElement.ownerDocument.removeEventListener("pointerup",P),null!==I._domElementKeyEvents&&I._domElementKeyEvents.removeEventListener("keydown",_)};var I=this,d={type:"change"},o={type:"start"},r={type:"end"},b={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6},u=b.NONE,B=1e-6,F=new a.Spherical,C=new a.Spherical,G=1,U=new a.Vector3,Q=!1,h=new a.Vector2,m=new a.Vector2,x=new a.Vector2,p=new a.Vector2,V=new a.Vector2,Z=new a.Vector2,R=new a.Vector2,y=new a.Vector2,L=new a.Vector2;function X(){return Math.pow(.95,I.zoomSpeed)}function A(t){C.theta-=t}function W(t){C.phi-=t}var S,E=(S=new a.Vector3,function(t,e){S.setFromMatrixColumn(e,0),S.multiplyScalar(-t),U.add(S)}),N=function(){var t=new a.Vector3;return function(e,i){!0===I.screenSpacePanning?t.setFromMatrixColumn(i,1):(t.setFromMatrixColumn(i,0),t.crossVectors(I.object.up,t)),t.multiplyScalar(e),U.add(t)}}(),v=function(){var t=new a.Vector3;return function(e,i){var n=I.domElement;if(I.object.isPerspectiveCamera){var s=I.object.position;t.copy(s).sub(I.target);var l=t.length();l*=Math.tan(I.object.fov/2*Math.PI/180),E(2*e*l/n.clientHeight,I.object.matrix),N(2*i*l/n.clientHeight,I.object.matrix)}else I.object.isOrthographicCamera?(E(e*(I.object.right-I.object.left)/I.object.zoom/n.clientWidth,I.object.matrix),N(i*(I.object.top-I.object.bottom)/I.object.zoom/n.clientHeight,I.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),I.enablePan=!1)}}();function Y(t){I.object.isPerspectiveCamera?G/=t:I.object.isOrthographicCamera?(I.object.zoom=Math.max(I.minZoom,Math.min(I.maxZoom,I.object.zoom*t)),I.object.updateProjectionMatrix(),Q=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),I.enableZoom=!1)}function H(t){I.object.isPerspectiveCamera?G*=t:I.object.isOrthographicCamera?(I.object.zoom=Math.max(I.minZoom,Math.min(I.maxZoom,I.object.zoom/t)),I.object.updateProjectionMatrix(),Q=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),I.enableZoom=!1)}function J(t){h.set(t.clientX,t.clientY)}function M(t){p.set(t.clientX,t.clientY)}function f(t){if(1==t.touches.length)h.set(t.touches[0].pageX,t.touches[0].pageY);else{var e=.5*(t.touches[0].pageX+t.touches[1].pageX),i=.5*(t.touches[0].pageY+t.touches[1].pageY);h.set(e,i)}}function k(t){if(1==t.touches.length)p.set(t.touches[0].pageX,t.touches[0].pageY);else{var e=.5*(t.touches[0].pageX+t.touches[1].pageX),i=.5*(t.touches[0].pageY+t.touches[1].pageY);p.set(e,i)}}function z(t){var e=t.touches[0].pageX-t.touches[1].pageX,i=t.touches[0].pageY-t.touches[1].pageY,n=Math.sqrt(e*e+i*i);R.set(0,n)}function w(t){if(1==t.touches.length)m.set(t.touches[0].pageX,t.touches[0].pageY);else{var e=.5*(t.touches[0].pageX+t.touches[1].pageX),i=.5*(t.touches[0].pageY+t.touches[1].pageY);m.set(e,i)}x.subVectors(m,h).multiplyScalar(I.rotateSpeed);var n=I.domElement;A(2*Math.PI*x.x/n.clientHeight),W(2*Math.PI*x.y/n.clientHeight),h.copy(m)}function T(t){if(1==t.touches.length)V.set(t.touches[0].pageX,t.touches[0].pageY);else{var e=.5*(t.touches[0].pageX+t.touches[1].pageX),i=.5*(t.touches[0].pageY+t.touches[1].pageY);V.set(e,i)}Z.subVectors(V,p).multiplyScalar(I.panSpeed),v(Z.x,Z.y),p.copy(V)}function D(t){var e=t.touches[0].pageX-t.touches[1].pageX,i=t.touches[0].pageY-t.touches[1].pageY,n=Math.sqrt(e*e+i*i);y.set(0,n),L.set(0,Math.pow(y.y/R.y,I.zoomSpeed)),Y(L.y),R.copy(y)}function K(t){if(!1!==I.enabled)switch(t.pointerType){case"mouse":case"pen":!function(t){var e;switch(t.preventDefault(),I.domElement.focus?I.domElement.focus():window.focus(),t.button){case 0:e=I.mouseButtons.LEFT;break;case 1:e=I.mouseButtons.MIDDLE;break;case 2:e=I.mouseButtons.RIGHT;break;default:e=-1}switch(e){case a.MOUSE.DOLLY:if(!1===I.enableZoom)return;!function(t){R.set(t.clientX,t.clientY)}(t),u=b.DOLLY;break;case a.MOUSE.ROTATE:if(t.ctrlKey||t.metaKey||t.shiftKey){if(!1===I.enablePan)return;M(t),u=b.PAN}else{if(!1===I.enableRotate)return;J(t),u=b.ROTATE}break;case a.MOUSE.PAN:if(t.ctrlKey||t.metaKey||t.shiftKey){if(!1===I.enableRotate)return;J(t),u=b.ROTATE}else{if(!1===I.enablePan)return;M(t),u=b.PAN}break;default:u=b.NONE}u!==b.NONE&&(I.domElement.ownerDocument.addEventListener("pointermove",j),I.domElement.ownerDocument.addEventListener("pointerup",P),I.dispatchEvent(o))}(t)}}function j(t){if(!1!==I.enabled)switch(t.pointerType){case"mouse":case"pen":!function(t){if(!1!==I.enabled)switch(t.preventDefault(),u){case b.ROTATE:if(!1===I.enableRotate)return;!function(t){m.set(t.clientX,t.clientY),x.subVectors(m,h).multiplyScalar(I.rotateSpeed);var e=I.domElement;A(2*Math.PI*x.x/e.clientHeight),W(2*Math.PI*x.y/e.clientHeight),h.copy(m),I.update()}(t);break;case b.DOLLY:if(!1===I.enableZoom)return;!function(t){y.set(t.clientX,t.clientY),L.subVectors(y,R),L.y>0?Y(X()):L.y<0&&H(X()),R.copy(y),I.update()}(t);break;case b.PAN:if(!1===I.enablePan)return;!function(t){V.set(t.clientX,t.clientY),Z.subVectors(V,p).multiplyScalar(I.panSpeed),v(Z.x,Z.y),p.copy(V),I.update()}(t)}}(t)}}function P(t){switch(t.pointerType){case"mouse":case"pen":I.domElement.ownerDocument.removeEventListener("pointermove",j),I.domElement.ownerDocument.removeEventListener("pointerup",P),!1!==I.enabled&&(I.dispatchEvent(r),u=b.NONE)}}function O(t){!1===I.enabled||!1===I.enableZoom||u!==b.NONE&&u!==b.ROTATE||(t.preventDefault(),t.stopPropagation(),I.dispatchEvent(o),function(t){t.deltaY<0?H(X()):t.deltaY>0&&Y(X()),I.update()}(t),I.dispatchEvent(r))}function _(t){!1!==I.enabled&&!1!==I.enablePan&&function(t){var e=!1;switch(t.keyCode){case I.keys.UP:v(0,I.keyPanSpeed),e=!0;break;case I.keys.BOTTOM:v(0,-I.keyPanSpeed),e=!0;break;case I.keys.LEFT:v(I.keyPanSpeed,0),e=!0;break;case I.keys.RIGHT:v(-I.keyPanSpeed,0),e=!0}e&&(t.preventDefault(),I.update())}(t)}function q(t){if(!1!==I.enabled){switch(t.preventDefault(),t.touches.length){case 1:switch(I.touches.ONE){case a.TOUCH.ROTATE:if(!1===I.enableRotate)return;f(t),u=b.TOUCH_ROTATE;break;case a.TOUCH.PAN:if(!1===I.enablePan)return;k(t),u=b.TOUCH_PAN;break;default:u=b.NONE}break;case 2:switch(I.touches.TWO){case a.TOUCH.DOLLY_PAN:if(!1===I.enableZoom&&!1===I.enablePan)return;!function(t){I.enableZoom&&z(t),I.enablePan&&k(t)}(t),u=b.TOUCH_DOLLY_PAN;break;case a.TOUCH.DOLLY_ROTATE:if(!1===I.enableZoom&&!1===I.enableRotate)return;!function(t){I.enableZoom&&z(t),I.enableRotate&&f(t)}(t),u=b.TOUCH_DOLLY_ROTATE;break;default:u=b.NONE}break;default:u=b.NONE}u!==b.NONE&&I.dispatchEvent(o)}}function $(t){if(!1!==I.enabled)switch(t.preventDefault(),t.stopPropagation(),u){case b.TOUCH_ROTATE:if(!1===I.enableRotate)return;w(t),I.update();break;case b.TOUCH_PAN:if(!1===I.enablePan)return;T(t),I.update();break;case b.TOUCH_DOLLY_PAN:if(!1===I.enableZoom&&!1===I.enablePan)return;!function(t){I.enableZoom&&D(t),I.enablePan&&T(t)}(t),I.update();break;case b.TOUCH_DOLLY_ROTATE:if(!1===I.enableZoom&&!1===I.enableRotate)return;!function(t){I.enableZoom&&D(t),I.enableRotate&&w(t)}(t),I.update();break;default:u=b.NONE}}function tt(t){!1!==I.enabled&&(I.dispatchEvent(r),u=b.NONE)}function et(t){!1!==I.enabled&&t.preventDefault()}I.domElement.addEventListener("contextmenu",et),I.domElement.addEventListener("pointerdown",K),I.domElement.addEventListener("wheel",O),I.domElement.addEventListener("touchstart",q),I.domElement.addEventListener("touchend",tt),I.domElement.addEventListener("touchmove",$),this.update()};(g.prototype=Object.create(a.EventDispatcher.prototype)).constructor=g;var I=function(t,e){g.call(this,t,e),this.screenSpacePanning=!1,this.mouseButtons.LEFT=a.MOUSE.PAN,this.mouseButtons.RIGHT=a.MOUSE.ROTATE,this.touches.ONE=a.TOUCH.PAN,this.touches.TWO=a.TOUCH.DOLLY_ROTATE};(I.prototype=Object.create(a.EventDispatcher.prototype)).constructor=I;const d=(0,s.forwardRef)(((t={enableDamping:!0},e)=>{const{camera:i,gl:a,invalidate:I}=(0,l.Ky)(),d=function(t,e=[],i){const[n,l]=(0,s.useState)();return(0,s.useLayoutEffect)((()=>{const e=t();return l(e),c(i,e),()=>c(i,null)}),e),n}((()=>new g(i,a.domElement)),[i,a],e);return(0,l.xQ)((()=>null==d?void 0:d.update())),(0,s.useEffect)((()=>(null==d||null==d.addEventListener||d.addEventListener("change",I),()=>null==d||null==d.removeEventListener?void 0:d.removeEventListener("change",I))),[d,I]),d?(0,s.createElement)("primitive",(0,n.Z)({dispose:void 0,object:d,enableDamping:!0},t)):null}))},386:t=>{function e(t,e,i){var n,s,l,c,a;function g(){var I=Date.now()-c;I<e&&I>=0?n=setTimeout(g,e-I):(n=null,i||(a=t.apply(l,s),l=s=null))}null==e&&(e=100);var I=function(){l=this,s=arguments,c=Date.now();var I=i&&!n;return n||(n=setTimeout(g,e)),I&&(a=t.apply(l,s),l=s=null),a};return I.clear=function(){n&&(clearTimeout(n),n=null)},I.flush=function(){n&&(a=t.apply(l,s),l=s=null,clearTimeout(n),n=null)},I}e.debounce=e,t.exports=e},378:t=>{"use strict";t.exports=function t(e,i){if(e===i)return!0;if(e&&i&&"object"==typeof e&&"object"==typeof i){if(e.constructor!==i.constructor)return!1;var n,s,l;if(Array.isArray(e)){if((n=e.length)!=i.length)return!1;for(s=n;0!=s--;)if(!t(e[s],i[s]))return!1;return!0}if(e.constructor===RegExp)return e.source===i.source&&e.flags===i.flags;if(e.valueOf!==Object.prototype.valueOf)return e.valueOf()===i.valueOf();if(e.toString!==Object.prototype.toString)return e.toString()===i.toString();if((n=(l=Object.keys(e)).length)!==Object.keys(i).length)return!1;for(s=n;0!=s--;)if(!Object.prototype.hasOwnProperty.call(i,l[s]))return!1;for(s=n;0!=s--;){var c=l[s];if(!t(e[c],i[c]))return!1}return!0}return e!=e&&i!=i}},853:(t,e,i)=>{"use strict";i.d(e,{je:()=>s,Qb:()=>l});var n=Symbol.for("FluidValue:config");function s(t){var e=l(t);return e?e.get():t}function l(t){if(t)return t[n]}},166:(t,e,i)=>{(t=i.nmd(t)).exports=function(e){var n={},s=i(320),l=i(784),c=i(616);function a(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,i=1;i<arguments.length;i++)e+="&args[]="+encodeURIComponent(arguments[i]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g=l.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,I=60103,d=60106,o=60107,r=60108,b=60114,u=60109,B=60110,F=60112,C=60113,G=60120,U=60115,Q=60116,h=60121,m=60129,x=60130,p=60131;if("function"==typeof Symbol&&Symbol.for){var V=Symbol.for;I=V("react.element"),d=V("react.portal"),o=V("react.fragment"),r=V("react.strict_mode"),b=V("react.profiler"),u=V("react.provider"),B=V("react.context"),F=V("react.forward_ref"),C=V("react.suspense"),G=V("react.suspense_list"),U=V("react.memo"),Q=V("react.lazy"),h=V("react.block"),V("react.scope"),m=V("react.debug_trace_mode"),x=V("react.offscreen"),p=V("react.legacy_hidden")}var Z="function"==typeof Symbol&&Symbol.iterator;function R(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=Z&&t[Z]||t["@@iterator"])?t:null}function y(t){if(null==t)return null;if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t;switch(t){case o:return"Fragment";case d:return"Portal";case b:return"Profiler";case r:return"StrictMode";case C:return"Suspense";case G:return"SuspenseList"}if("object"==typeof t)switch(t.$$typeof){case B:return(t.displayName||"Context")+".Consumer";case u:return(t._context.displayName||"Context")+".Provider";case F:var e=t.render;return e=e.displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case U:return y(t.type);case h:return y(t._render);case Q:e=t._payload,t=t._init;try{return y(t(e))}catch(t){}}return null}function L(t){var e=t,i=t;if(t.alternate)for(;e.return;)e=e.return;else{t=e;do{0!=(1026&(e=t).flags)&&(i=e.return),t=e.return}while(t)}return 3===e.tag?i:null}function X(t){if(L(t)!==t)throw Error(a(188))}function A(t){var e=t.alternate;if(!e){if(null===(e=L(t)))throw Error(a(188));return e!==t?null:t}for(var i=t,n=e;;){var s=i.return;if(null===s)break;var l=s.alternate;if(null===l){if(null!==(n=s.return)){i=n;continue}break}if(s.child===l.child){for(l=s.child;l;){if(l===i)return X(s),t;if(l===n)return X(s),e;l=l.sibling}throw Error(a(188))}if(i.return!==n.return)i=s,n=l;else{for(var c=!1,g=s.child;g;){if(g===i){c=!0,i=s,n=l;break}if(g===n){c=!0,n=s,i=l;break}g=g.sibling}if(!c){for(g=l.child;g;){if(g===i){c=!0,i=l,n=s;break}if(g===n){c=!0,n=l,i=s;break}g=g.sibling}if(!c)throw Error(a(189))}}if(i.alternate!==n)throw Error(a(190))}if(3!==i.tag)throw Error(a(188));return i.stateNode.current===i?t:e}function W(t){if(!(t=A(t)))return null;for(var e=t;;){if(5===e.tag||6===e.tag)return e;if(e.child)e.child.return=e,e=e.child;else{if(e===t)break;for(;!e.sibling;){if(!e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}}return null}function S(t,e){for(var i=t.alternate;null!==e;){if(e===t||e===i)return!0;e=e.return}return!1}var E,N=e.getPublicInstance,v=e.getRootHostContext,Y=e.getChildHostContext,H=e.prepareForCommit,J=e.resetAfterCommit,M=e.createInstance,f=e.appendInitialChild,k=e.finalizeInitialChildren,z=e.prepareUpdate,w=e.shouldSetTextContent,T=e.createTextInstance,D=e.scheduleTimeout,K=e.cancelTimeout,j=e.noTimeout,P=e.isPrimaryRenderer,O=e.supportsMutation,_=e.supportsPersistence,q=e.supportsHydration,$=e.getInstanceFromNode,tt=e.makeOpaqueHydratingObject,et=e.makeClientId,it=e.beforeActiveInstanceBlur,nt=e.afterActiveInstanceBlur,st=e.preparePortalMount,lt=e.supportsTestSelectors,ct=e.findFiberRoot,at=e.getBoundingRect,gt=e.getTextContent,It=e.isHiddenSubtree,dt=e.matchAccessibilityRole,ot=e.setFocusIfFocusable,rt=e.setupIntersectionObserver,bt=e.appendChild,ut=e.appendChildToContainer,Bt=e.commitTextUpdate,Ft=e.commitMount,Ct=e.commitUpdate,Gt=e.insertBefore,Ut=e.insertInContainerBefore,Qt=e.removeChild,ht=e.removeChildFromContainer,mt=e.resetTextContent,xt=e.hideInstance,pt=e.hideTextInstance,Vt=e.unhideInstance,Zt=e.unhideTextInstance,Rt=e.clearContainer,yt=e.cloneInstance,Lt=e.createContainerChildSet,Xt=e.appendChildToContainerChildSet,At=e.finalizeContainerChildren,Wt=e.replaceContainerChildren,St=e.cloneHiddenInstance,Et=e.cloneHiddenTextInstance,Nt=e.canHydrateInstance,vt=e.canHydrateTextInstance,Yt=e.isSuspenseInstancePending,Ht=e.isSuspenseInstanceFallback,Jt=e.getNextHydratableSibling,Mt=e.getFirstHydratableChild,ft=e.hydrateInstance,kt=e.hydrateTextInstance,zt=e.getNextHydratableInstanceAfterSuspenseInstance,wt=e.commitHydratedContainer,Tt=e.commitHydratedSuspenseInstance;function Dt(t){if(void 0===E)try{throw Error()}catch(t){var e=t.stack.trim().match(/\n( *(at )?)/);E=e&&e[1]||""}return"\n"+E+t}var Kt=!1;function jt(t,e){if(!t||Kt)return"";Kt=!0;var i=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(e)if(e=function(){throw Error()},Object.defineProperty(e.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(e,[])}catch(t){var n=t}Reflect.construct(t,[],e)}else{try{e.call()}catch(t){n=t}t.call(e.prototype)}else{try{throw Error()}catch(t){n=t}t()}}catch(t){if(t&&n&&"string"==typeof t.stack){for(var s=t.stack.split("\n"),l=n.stack.split("\n"),c=s.length-1,a=l.length-1;1<=c&&0<=a&&s[c]!==l[a];)a--;for(;1<=c&&0<=a;c--,a--)if(s[c]!==l[a]){if(1!==c||1!==a)do{if(c--,0>--a||s[c]!==l[a])return"\n"+s[c].replace(" at new "," at ")}while(1<=c&&0<=a);break}}}finally{Kt=!1,Error.prepareStackTrace=i}return(t=t?t.displayName||t.name:"")?Dt(t):""}var Pt=[],Ot=-1;function _t(t){return{current:t}}function qt(t){0>Ot||(t.current=Pt[Ot],Pt[Ot]=null,Ot--)}function $t(t,e){Ot++,Pt[Ot]=t.current,t.current=e}var te={},ee=_t(te),ie=_t(!1),ne=te;function se(t,e){var i=t.type.contextTypes;if(!i)return te;var n=t.stateNode;if(n&&n.__reactInternalMemoizedUnmaskedChildContext===e)return n.__reactInternalMemoizedMaskedChildContext;var s,l={};for(s in i)l[s]=e[s];return n&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=e,t.__reactInternalMemoizedMaskedChildContext=l),l}function le(t){return null!=t.childContextTypes}function ce(){qt(ie),qt(ee)}function ae(t,e,i){if(ee.current!==te)throw Error(a(168));$t(ee,e),$t(ie,i)}function ge(t,e,i){var n=t.stateNode;if(t=e.childContextTypes,"function"!=typeof n.getChildContext)return i;for(var l in n=n.getChildContext())if(!(l in t))throw Error(a(108,y(e)||"Unknown",l));return s({},i,n)}function Ie(t){return t=(t=t.stateNode)&&t.__reactInternalMemoizedMergedChildContext||te,ne=ee.current,$t(ee,t),$t(ie,ie.current),!0}function de(t,e,i){var n=t.stateNode;if(!n)throw Error(a(169));i?(t=ge(t,e,ne),n.__reactInternalMemoizedMergedChildContext=t,qt(ie),qt(ee),$t(ee,t)):qt(ie),$t(ie,i)}var oe=null,re=null;(0,c.unstable_now)();var be=0,ue=8;function Be(t){if(0!=(1&t))return ue=15,1;if(0!=(2&t))return ue=14,2;if(0!=(4&t))return ue=13,4;var e=24&t;return 0!==e?(ue=12,e):0!=(32&t)?(ue=11,32):0!=(e=192&t)?(ue=10,e):0!=(256&t)?(ue=9,256):0!=(e=3584&t)?(ue=8,e):0!=(4096&t)?(ue=7,4096):0!=(e=4186112&t)?(ue=6,e):0!=(e=62914560&t)?(ue=5,e):67108864&t?(ue=4,67108864):0!=(134217728&t)?(ue=3,134217728):0!=(e=805306368&t)?(ue=2,e):0!=(1073741824&t)?(ue=1,1073741824):(ue=8,t)}function Fe(t,e){var i=t.pendingLanes;if(0===i)return ue=0;var n=0,s=0,l=t.expiredLanes,c=t.suspendedLanes,a=t.pingedLanes;if(0!==l)n=l,s=ue=15;else if(0!=(l=134217727&i)){var g=l&~c;0!==g?(n=Be(g),s=ue):0!=(a&=l)&&(n=Be(a),s=ue)}else 0!=(l=i&~c)?(n=Be(l),s=ue):0!==a&&(n=Be(a),s=ue);if(0===n)return 0;if(n=i&((0>(n=31-me(n))?0:1<<n)<<1)-1,0!==e&&e!==n&&0==(e&c)){if(Be(e),s<=ue)return e;ue=s}if(0!==(e=t.entangledLanes))for(t=t.entanglements,e&=n;0<e;)s=1<<(i=31-me(e)),n|=t[i],e&=~s;return n}function Ce(t){return 0!=(t=-1073741825&t.pendingLanes)?t:1073741824&t?1073741824:0}function Ge(t,e){switch(t){case 15:return 1;case 14:return 2;case 12:return 0===(t=Ue(24&~e))?Ge(10,e):t;case 10:return 0===(t=Ue(192&~e))?Ge(8,e):t;case 8:return 0===(t=Ue(3584&~e))&&0===(t=Ue(4186112&~e))&&(t=512),t;case 2:return 0===(e=Ue(805306368&~e))&&(e=268435456),e}throw Error(a(358,t))}function Ue(t){return t&-t}function Qe(t){for(var e=[],i=0;31>i;i++)e.push(t);return e}function he(t,e,i){t.pendingLanes|=e;var n=e-1;t.suspendedLanes&=n,t.pingedLanes&=n,(t=t.eventTimes)[e=31-me(e)]=i}var me=Math.clz32?Math.clz32:function(t){return 0===t?32:31-(xe(t)/pe|0)|0},xe=Math.log,pe=Math.LN2,Ve=c.unstable_runWithPriority,Ze=c.unstable_scheduleCallback,Re=c.unstable_cancelCallback,ye=c.unstable_shouldYield,Le=c.unstable_requestPaint,Xe=c.unstable_now,Ae=c.unstable_getCurrentPriorityLevel,We=c.unstable_ImmediatePriority,Se=c.unstable_UserBlockingPriority,Ee=c.unstable_NormalPriority,Ne=c.unstable_LowPriority,ve=c.unstable_IdlePriority,Ye={},He=void 0!==Le?Le:function(){},Je=null,Me=null,fe=!1,ke=Xe(),ze=1e4>ke?Xe:function(){return Xe()-ke};function we(){switch(Ae()){case We:return 99;case Se:return 98;case Ee:return 97;case Ne:return 96;case ve:return 95;default:throw Error(a(332))}}function Te(t){switch(t){case 99:return We;case 98:return Se;case 97:return Ee;case 96:return Ne;case 95:return ve;default:throw Error(a(332))}}function De(t,e){return t=Te(t),Ve(t,e)}function Ke(t,e,i){return t=Te(t),Ze(t,e,i)}function je(){if(null!==Me){var t=Me;Me=null,Re(t)}Pe()}function Pe(){if(!fe&&null!==Je){fe=!0;var t=0;try{var e=Je;De(99,(function(){for(;t<e.length;t++){var i=e[t];do{i=i(!0)}while(null!==i)}})),Je=null}catch(e){throw null!==Je&&(Je=Je.slice(t+1)),Ze(We,je),e}finally{fe=!1}}}var Oe=g.ReactCurrentBatchConfig,_e="function"==typeof Object.is?Object.is:function(t,e){return t===e&&(0!==t||1/t==1/e)||t!=t&&e!=e},qe=Object.prototype.hasOwnProperty;function $e(t,e){if(_e(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var i=Object.keys(t),n=Object.keys(e);if(i.length!==n.length)return!1;for(n=0;n<i.length;n++)if(!qe.call(e,i[n])||!_e(t[i[n]],e[i[n]]))return!1;return!0}function ti(t){switch(t.tag){case 5:return Dt(t.type);case 16:return Dt("Lazy");case 13:return Dt("Suspense");case 19:return Dt("SuspenseList");case 0:case 2:case 15:return jt(t.type,!1);case 11:return jt(t.type.render,!1);case 22:return jt(t.type._render,!1);case 1:return jt(t.type,!0);default:return""}}function ei(t,e){if(t&&t.defaultProps){for(var i in e=s({},e),t=t.defaultProps)void 0===e[i]&&(e[i]=t[i]);return e}return e}var ii=_t(null),ni=null,si=null,li=null;function ci(){li=si=ni=null}function ai(t,e){t=t.type._context,P?($t(ii,t._currentValue),t._currentValue=e):($t(ii,t._currentValue2),t._currentValue2=e)}function gi(t){var e=ii.current;qt(ii),t=t.type._context,P?t._currentValue=e:t._currentValue2=e}function Ii(t,e){for(;null!==t;){var i=t.alternate;if((t.childLanes&e)===e){if(null===i||(i.childLanes&e)===e)break;i.childLanes|=e}else t.childLanes|=e,null!==i&&(i.childLanes|=e);t=t.return}}function di(t,e){ni=t,li=si=null,null!==(t=t.dependencies)&&null!==t.firstContext&&(0!=(t.lanes&e)&&(kn=!0),t.firstContext=null)}function oi(t,e){if(li!==t&&!1!==e&&0!==e)if("number"==typeof e&&1073741823!==e||(li=t,e=1073741823),e={context:t,observedBits:e,next:null},null===si){if(null===ni)throw Error(a(308));si=e,ni.dependencies={lanes:0,firstContext:e,responders:null}}else si=si.next=e;return P?t._currentValue:t._currentValue2}var ri=!1;function bi(t){t.updateQueue={baseState:t.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ui(t,e){t=t.updateQueue,e.updateQueue===t&&(e.updateQueue={baseState:t.baseState,firstBaseUpdate:t.firstBaseUpdate,lastBaseUpdate:t.lastBaseUpdate,shared:t.shared,effects:t.effects})}function Bi(t,e){return{eventTime:t,lane:e,tag:0,payload:null,callback:null,next:null}}function Fi(t,e){if(null!==(t=t.updateQueue)){var i=(t=t.shared).pending;null===i?e.next=e:(e.next=i.next,i.next=e),t.pending=e}}function Ci(t,e){var i=t.updateQueue,n=t.alternate;if(null!==n&&i===(n=n.updateQueue)){var s=null,l=null;if(null!==(i=i.firstBaseUpdate)){do{var c={eventTime:i.eventTime,lane:i.lane,tag:i.tag,payload:i.payload,callback:i.callback,next:null};null===l?s=l=c:l=l.next=c,i=i.next}while(null!==i);null===l?s=l=e:l=l.next=e}else s=l=e;return i={baseState:n.baseState,firstBaseUpdate:s,lastBaseUpdate:l,shared:n.shared,effects:n.effects},void(t.updateQueue=i)}null===(t=i.lastBaseUpdate)?i.firstBaseUpdate=e:t.next=e,i.lastBaseUpdate=e}function Gi(t,e,i,n){var l=t.updateQueue;ri=!1;var c=l.firstBaseUpdate,a=l.lastBaseUpdate,g=l.shared.pending;if(null!==g){l.shared.pending=null;var I=g,d=I.next;I.next=null,null===a?c=d:a.next=d,a=I;var o=t.alternate;if(null!==o){var r=(o=o.updateQueue).lastBaseUpdate;r!==a&&(null===r?o.firstBaseUpdate=d:r.next=d,o.lastBaseUpdate=I)}}if(null!==c){for(r=l.baseState,a=0,o=d=I=null;;){g=c.lane;var b=c.eventTime;if((n&g)===g){null!==o&&(o=o.next={eventTime:b,lane:0,tag:c.tag,payload:c.payload,callback:c.callback,next:null});t:{var u=t,B=c;switch(g=e,b=i,B.tag){case 1:if("function"==typeof(u=B.payload)){r=u.call(b,r,g);break t}r=u;break t;case 3:u.flags=-4097&u.flags|64;case 0:if(null==(g="function"==typeof(u=B.payload)?u.call(b,r,g):u))break t;r=s({},r,g);break t;case 2:ri=!0}}null!==c.callback&&(t.flags|=32,null===(g=l.effects)?l.effects=[c]:g.push(c))}else b={eventTime:b,lane:g,tag:c.tag,payload:c.payload,callback:c.callback,next:null},null===o?(d=o=b,I=r):o=o.next=b,a|=g;if(null===(c=c.next)){if(null===(g=l.shared.pending))break;c=g.next,g.next=null,l.lastBaseUpdate=g,l.shared.pending=null}}null===o&&(I=r),l.baseState=I,l.firstBaseUpdate=d,l.lastBaseUpdate=o,Il|=a,t.lanes=a,t.memoizedState=r}}function Ui(t,e,i){if(t=e.effects,e.effects=null,null!==t)for(e=0;e<t.length;e++){var n=t[e],s=n.callback;if(null!==s){if(n.callback=null,n=i,"function"!=typeof s)throw Error(a(191,s));s.call(n)}}}var Qi=(new l.Component).refs;function hi(t,e,i,n){i=null==(i=i(n,e=t.memoizedState))?e:s({},e,i),t.memoizedState=i,0===t.lanes&&(t.updateQueue.baseState=i)}var mi={isMounted:function(t){return!!(t=t._reactInternals)&&L(t)===t},enqueueSetState:function(t,e,i){t=t._reactInternals;var n=El(),s=Nl(t),l=Bi(n,s);l.payload=e,null!=i&&(l.callback=i),Fi(t,l),vl(t,s,n)},enqueueReplaceState:function(t,e,i){t=t._reactInternals;var n=El(),s=Nl(t),l=Bi(n,s);l.tag=1,l.payload=e,null!=i&&(l.callback=i),Fi(t,l),vl(t,s,n)},enqueueForceUpdate:function(t,e){t=t._reactInternals;var i=El(),n=Nl(t),s=Bi(i,n);s.tag=2,null!=e&&(s.callback=e),Fi(t,s),vl(t,n,i)}};function xi(t,e,i,n,s,l,c){return"function"==typeof(t=t.stateNode).shouldComponentUpdate?t.shouldComponentUpdate(n,l,c):!(e.prototype&&e.prototype.isPureReactComponent&&$e(i,n)&&$e(s,l))}function pi(t,e,i){var n=!1,s=te,l=e.contextType;return"object"==typeof l&&null!==l?l=oi(l):(s=le(e)?ne:ee.current,l=(n=null!=(n=e.contextTypes))?se(t,s):te),e=new e(i,l),t.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,e.updater=mi,t.stateNode=e,e._reactInternals=t,n&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=s,t.__reactInternalMemoizedMaskedChildContext=l),e}function Vi(t,e,i,n){t=e.state,"function"==typeof e.componentWillReceiveProps&&e.componentWillReceiveProps(i,n),"function"==typeof e.UNSAFE_componentWillReceiveProps&&e.UNSAFE_componentWillReceiveProps(i,n),e.state!==t&&mi.enqueueReplaceState(e,e.state,null)}function Zi(t,e,i,n){var s=t.stateNode;s.props=i,s.state=t.memoizedState,s.refs=Qi,bi(t);var l=e.contextType;"object"==typeof l&&null!==l?s.context=oi(l):(l=le(e)?ne:ee.current,s.context=se(t,l)),Gi(t,i,s,n),s.state=t.memoizedState,"function"==typeof(l=e.getDerivedStateFromProps)&&(hi(t,e,l,i),s.state=t.memoizedState),"function"==typeof e.getDerivedStateFromProps||"function"==typeof s.getSnapshotBeforeUpdate||"function"!=typeof s.UNSAFE_componentWillMount&&"function"!=typeof s.componentWillMount||(e=s.state,"function"==typeof s.componentWillMount&&s.componentWillMount(),"function"==typeof s.UNSAFE_componentWillMount&&s.UNSAFE_componentWillMount(),e!==s.state&&mi.enqueueReplaceState(s,s.state,null),Gi(t,i,s,n),s.state=t.memoizedState),"function"==typeof s.componentDidMount&&(t.flags|=4)}var Ri=Array.isArray;function yi(t,e,i){if(null!==(t=i.ref)&&"function"!=typeof t&&"object"!=typeof t){if(i._owner){if(i=i._owner){if(1!==i.tag)throw Error(a(309));var n=i.stateNode}if(!n)throw Error(a(147,t));var s=""+t;return null!==e&&null!==e.ref&&"function"==typeof e.ref&&e.ref._stringRef===s?e.ref:((e=function(t){var e=n.refs;e===Qi&&(e=n.refs={}),null===t?delete e[s]:e[s]=t})._stringRef=s,e)}if("string"!=typeof t)throw Error(a(284));if(!i._owner)throw Error(a(290,t))}return t}function Li(t,e){if("textarea"!==t.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(e)?"object with keys {"+Object.keys(e).join(", ")+"}":e))}function Xi(t){function e(e,i){if(t){var n=e.lastEffect;null!==n?(n.nextEffect=i,e.lastEffect=i):e.firstEffect=e.lastEffect=i,i.nextEffect=null,i.flags=8}}function i(i,n){if(!t)return null;for(;null!==n;)e(i,n),n=n.sibling;return null}function n(t,e){for(t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function s(t,e){return(t=hc(t,e)).index=0,t.sibling=null,t}function l(e,i,n){return e.index=n,t?null!==(n=e.alternate)?(n=n.index)<i?(e.flags=2,i):n:(e.flags=2,i):i}function c(e){return t&&null===e.alternate&&(e.flags=2),e}function g(t,e,i,n){return null===e||6!==e.tag?((e=Vc(i,t.mode,n)).return=t,e):((e=s(e,i)).return=t,e)}function r(t,e,i,n){return null!==e&&e.elementType===i.type?((n=s(e,i.props)).ref=yi(t,e,i),n.return=t,n):((n=mc(i.type,i.key,i.props,null,t.mode,n)).ref=yi(t,e,i),n.return=t,n)}function b(t,e,i,n){return null===e||4!==e.tag||e.stateNode.containerInfo!==i.containerInfo||e.stateNode.implementation!==i.implementation?((e=Zc(i,t.mode,n)).return=t,e):((e=s(e,i.children||[])).return=t,e)}function u(t,e,i,n,l){return null===e||7!==e.tag?((e=xc(i,t.mode,n,l)).return=t,e):((e=s(e,i)).return=t,e)}function B(t,e,i){if("string"==typeof e||"number"==typeof e)return(e=Vc(""+e,t.mode,i)).return=t,e;if("object"==typeof e&&null!==e){switch(e.$$typeof){case I:return(i=mc(e.type,e.key,e.props,null,t.mode,i)).ref=yi(t,null,e),i.return=t,i;case d:return(e=Zc(e,t.mode,i)).return=t,e}if(Ri(e)||R(e))return(e=xc(e,t.mode,i,null)).return=t,e;Li(t,e)}return null}function F(t,e,i,n){var s=null!==e?e.key:null;if("string"==typeof i||"number"==typeof i)return null!==s?null:g(t,e,""+i,n);if("object"==typeof i&&null!==i){switch(i.$$typeof){case I:return i.key===s?i.type===o?u(t,e,i.props.children,n,s):r(t,e,i,n):null;case d:return i.key===s?b(t,e,i,n):null}if(Ri(i)||R(i))return null!==s?null:u(t,e,i,n,null);Li(t,i)}return null}function C(t,e,i,n,s){if("string"==typeof n||"number"==typeof n)return g(e,t=t.get(i)||null,""+n,s);if("object"==typeof n&&null!==n){switch(n.$$typeof){case I:return t=t.get(null===n.key?i:n.key)||null,n.type===o?u(e,t,n.props.children,s,n.key):r(e,t,n,s);case d:return b(e,t=t.get(null===n.key?i:n.key)||null,n,s)}if(Ri(n)||R(n))return u(e,t=t.get(i)||null,n,s,null);Li(e,n)}return null}function G(s,c,a,g){for(var I=null,d=null,o=c,r=c=0,b=null;null!==o&&r<a.length;r++){o.index>r?(b=o,o=null):b=o.sibling;var u=F(s,o,a[r],g);if(null===u){null===o&&(o=b);break}t&&o&&null===u.alternate&&e(s,o),c=l(u,c,r),null===d?I=u:d.sibling=u,d=u,o=b}if(r===a.length)return i(s,o),I;if(null===o){for(;r<a.length;r++)null!==(o=B(s,a[r],g))&&(c=l(o,c,r),null===d?I=o:d.sibling=o,d=o);return I}for(o=n(s,o);r<a.length;r++)null!==(b=C(o,s,r,a[r],g))&&(t&&null!==b.alternate&&o.delete(null===b.key?r:b.key),c=l(b,c,r),null===d?I=b:d.sibling=b,d=b);return t&&o.forEach((function(t){return e(s,t)})),I}function U(s,c,g,I){var d=R(g);if("function"!=typeof d)throw Error(a(150));if(null==(g=d.call(g)))throw Error(a(151));for(var o=d=null,r=c,b=c=0,u=null,G=g.next();null!==r&&!G.done;b++,G=g.next()){r.index>b?(u=r,r=null):u=r.sibling;var U=F(s,r,G.value,I);if(null===U){null===r&&(r=u);break}t&&r&&null===U.alternate&&e(s,r),c=l(U,c,b),null===o?d=U:o.sibling=U,o=U,r=u}if(G.done)return i(s,r),d;if(null===r){for(;!G.done;b++,G=g.next())null!==(G=B(s,G.value,I))&&(c=l(G,c,b),null===o?d=G:o.sibling=G,o=G);return d}for(r=n(s,r);!G.done;b++,G=g.next())null!==(G=C(r,s,b,G.value,I))&&(t&&null!==G.alternate&&r.delete(null===G.key?b:G.key),c=l(G,c,b),null===o?d=G:o.sibling=G,o=G);return t&&r.forEach((function(t){return e(s,t)})),d}return function(t,n,l,g){var r="object"==typeof l&&null!==l&&l.type===o&&null===l.key;r&&(l=l.props.children);var b="object"==typeof l&&null!==l;if(b)switch(l.$$typeof){case I:t:{for(b=l.key,r=n;null!==r;){if(r.key===b){switch(r.tag){case 7:if(l.type===o){i(t,r.sibling),(n=s(r,l.props.children)).return=t,t=n;break t}break;default:if(r.elementType===l.type){i(t,r.sibling),(n=s(r,l.props)).ref=yi(t,r,l),n.return=t,t=n;break t}}i(t,r);break}e(t,r),r=r.sibling}l.type===o?((n=xc(l.props.children,t.mode,g,l.key)).return=t,t=n):((g=mc(l.type,l.key,l.props,null,t.mode,g)).ref=yi(t,n,l),g.return=t,t=g)}return c(t);case d:t:{for(r=l.key;null!==n;){if(n.key===r){if(4===n.tag&&n.stateNode.containerInfo===l.containerInfo&&n.stateNode.implementation===l.implementation){i(t,n.sibling),(n=s(n,l.children||[])).return=t,t=n;break t}i(t,n);break}e(t,n),n=n.sibling}(n=Zc(l,t.mode,g)).return=t,t=n}return c(t)}if("string"==typeof l||"number"==typeof l)return l=""+l,null!==n&&6===n.tag?(i(t,n.sibling),(n=s(n,l)).return=t,t=n):(i(t,n),(n=Vc(l,t.mode,g)).return=t,t=n),c(t);if(Ri(l))return G(t,n,l,g);if(R(l))return U(t,n,l,g);if(b&&Li(t,l),void 0===l&&!r)switch(t.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,y(t.type)||"Component"))}return i(t,n)}}var Ai=Xi(!0),Wi=Xi(!1),Si={},Ei=_t(Si),Ni=_t(Si),vi=_t(Si);function Yi(t){if(t===Si)throw Error(a(174));return t}function Hi(t,e){$t(vi,e),$t(Ni,t),$t(Ei,Si),t=v(e),qt(Ei),$t(Ei,t)}function Ji(){qt(Ei),qt(Ni),qt(vi)}function Mi(t){var e=Yi(vi.current),i=Yi(Ei.current);i!==(e=Y(i,t.type,e))&&($t(Ni,t),$t(Ei,e))}function fi(t){Ni.current===t&&(qt(Ei),qt(Ni))}var ki=_t(0);function zi(t){for(var e=t;null!==e;){if(13===e.tag){var i=e.memoizedState;if(null!==i&&(null===(i=i.dehydrated)||Yt(i)||Ht(i)))return e}else if(19===e.tag&&void 0!==e.memoizedProps.revealOrder){if(0!=(64&e.flags))return e}else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}return null}var wi=null,Ti=null,Di=!1;function Ki(t,e){var i=Uc(5,null,null,0);i.elementType="DELETED",i.type="DELETED",i.stateNode=e,i.return=t,i.flags=8,null!==t.lastEffect?(t.lastEffect.nextEffect=i,t.lastEffect=i):t.firstEffect=t.lastEffect=i}function ji(t,e){switch(t.tag){case 5:return null!==(e=Nt(e,t.type,t.pendingProps))&&(t.stateNode=e,!0);case 6:return null!==(e=vt(e,t.pendingProps))&&(t.stateNode=e,!0);case 13:default:return!1}}function Pi(t){if(Di){var e=Ti;if(e){var i=e;if(!ji(t,e)){if(!(e=Jt(i))||!ji(t,e))return t.flags=-1025&t.flags|2,Di=!1,void(wi=t);Ki(wi,i)}wi=t,Ti=Mt(e)}else t.flags=-1025&t.flags|2,Di=!1,wi=t}}function Oi(t){for(t=t.return;null!==t&&5!==t.tag&&3!==t.tag&&13!==t.tag;)t=t.return;wi=t}function _i(t){if(!q||t!==wi)return!1;if(!Di)return Oi(t),Di=!0,!1;var e=t.type;if(5!==t.tag||"head"!==e&&"body"!==e&&!w(e,t.memoizedProps))for(e=Ti;e;)Ki(t,e),e=Jt(e);if(Oi(t),13===t.tag){if(!q)throw Error(a(316));if(!(t=null!==(t=t.memoizedState)?t.dehydrated:null))throw Error(a(317));Ti=zt(t)}else Ti=wi?Jt(t.stateNode):null;return!0}function qi(){q&&(Ti=wi=null,Di=!1)}var $i=[];function tn(){for(var t=0;t<$i.length;t++){var e=$i[t];P?e._workInProgressVersionPrimary=null:e._workInProgressVersionSecondary=null}$i.length=0}var en=g.ReactCurrentDispatcher,nn=g.ReactCurrentBatchConfig,sn=0,ln=null,cn=null,an=null,gn=!1,In=!1;function dn(){throw Error(a(321))}function on(t,e){if(null===e)return!1;for(var i=0;i<e.length&&i<t.length;i++)if(!_e(t[i],e[i]))return!1;return!0}function rn(t,e,i,n,s,l){if(sn=l,ln=e,e.memoizedState=null,e.updateQueue=null,e.lanes=0,en.current=null===t||null===t.memoizedState?Hn:Jn,t=i(n,s),In){l=0;do{if(In=!1,!(25>l))throw Error(a(301));l+=1,an=cn=null,e.updateQueue=null,en.current=Mn,t=i(n,s)}while(In)}if(en.current=Yn,e=null!==cn&&null!==cn.next,sn=0,an=cn=ln=null,gn=!1,e)throw Error(a(300));return t}function bn(){var t={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===an?ln.memoizedState=an=t:an=an.next=t,an}function un(){if(null===cn){var t=ln.alternate;t=null!==t?t.memoizedState:null}else t=cn.next;var e=null===an?ln.memoizedState:an.next;if(null!==e)an=e,cn=t;else{if(null===t)throw Error(a(310));t={memoizedState:(cn=t).memoizedState,baseState:cn.baseState,baseQueue:cn.baseQueue,queue:cn.queue,next:null},null===an?ln.memoizedState=an=t:an=an.next=t}return an}function Bn(t,e){return"function"==typeof e?e(t):e}function Fn(t){var e=un(),i=e.queue;if(null===i)throw Error(a(311));i.lastRenderedReducer=t;var n=cn,s=n.baseQueue,l=i.pending;if(null!==l){if(null!==s){var c=s.next;s.next=l.next,l.next=c}n.baseQueue=s=l,i.pending=null}if(null!==s){s=s.next,n=n.baseState;var g=c=l=null,I=s;do{var d=I.lane;if((sn&d)===d)null!==g&&(g=g.next={lane:0,action:I.action,eagerReducer:I.eagerReducer,eagerState:I.eagerState,next:null}),n=I.eagerReducer===t?I.eagerState:t(n,I.action);else{var o={lane:d,action:I.action,eagerReducer:I.eagerReducer,eagerState:I.eagerState,next:null};null===g?(c=g=o,l=n):g=g.next=o,ln.lanes|=d,Il|=d}I=I.next}while(null!==I&&I!==s);null===g?l=n:g.next=c,_e(n,e.memoizedState)||(kn=!0),e.memoizedState=n,e.baseState=l,e.baseQueue=g,i.lastRenderedState=n}return[e.memoizedState,i.dispatch]}function Cn(t){var e=un(),i=e.queue;if(null===i)throw Error(a(311));i.lastRenderedReducer=t;var n=i.dispatch,s=i.pending,l=e.memoizedState;if(null!==s){i.pending=null;var c=s=s.next;do{l=t(l,c.action),c=c.next}while(c!==s);_e(l,e.memoizedState)||(kn=!0),e.memoizedState=l,null===e.baseQueue&&(e.baseState=l),i.lastRenderedState=l}return[l,n]}function Gn(t,e,i){var n=e._getVersion;n=n(e._source);var s=P?e._workInProgressVersionPrimary:e._workInProgressVersionSecondary;if(null!==s?t=s===n:(t=t.mutableReadLanes,(t=(sn&t)===t)&&(P?e._workInProgressVersionPrimary=n:e._workInProgressVersionSecondary=n,$i.push(e))),t)return i(e._source);throw $i.push(e),Error(a(350))}function Un(t,e,i,n){var s=el;if(null===s)throw Error(a(349));var l=e._getVersion,c=l(e._source),g=en.current,I=g.useState((function(){return Gn(s,e,i)})),d=I[1],o=I[0];I=an;var r=t.memoizedState,b=r.refs,u=b.getSnapshot,B=r.source;r=r.subscribe;var F=ln;return t.memoizedState={refs:b,source:e,subscribe:n},g.useEffect((function(){b.getSnapshot=i,b.setSnapshot=d;var t=l(e._source);if(!_e(c,t)){t=i(e._source),_e(o,t)||(d(t),t=Nl(F),s.mutableReadLanes|=t&s.pendingLanes),t=s.mutableReadLanes,s.entangledLanes|=t;for(var n=s.entanglements,a=t;0<a;){var g=31-me(a),I=1<<g;n[g]|=t,a&=~I}}}),[i,e,n]),g.useEffect((function(){return n(e._source,(function(){var t=b.getSnapshot,i=b.setSnapshot;try{i(t(e._source));var n=Nl(F);s.mutableReadLanes|=n&s.pendingLanes}catch(t){i((function(){throw t}))}}))}),[e,n]),_e(u,i)&&_e(B,e)&&_e(r,n)||((t={pending:null,dispatch:null,lastRenderedReducer:Bn,lastRenderedState:o}).dispatch=d=vn.bind(null,ln,t),I.queue=t,I.baseQueue=null,o=Gn(s,e,i),I.memoizedState=I.baseState=o),o}function Qn(t,e,i){return Un(un(),t,e,i)}function hn(t){var e=bn();return"function"==typeof t&&(t=t()),e.memoizedState=e.baseState=t,t=(t=e.queue={pending:null,dispatch:null,lastRenderedReducer:Bn,lastRenderedState:t}).dispatch=vn.bind(null,ln,t),[e.memoizedState,t]}function mn(t,e,i,n){return t={tag:t,create:e,destroy:i,deps:n,next:null},null===(e=ln.updateQueue)?(e={lastEffect:null},ln.updateQueue=e,e.lastEffect=t.next=t):null===(i=e.lastEffect)?e.lastEffect=t.next=t:(n=i.next,i.next=t,t.next=n,e.lastEffect=t),t}function xn(t){return t={current:t},bn().memoizedState=t}function pn(){return un().memoizedState}function Vn(t,e,i,n){var s=bn();ln.flags|=t,s.memoizedState=mn(1|e,i,void 0,void 0===n?null:n)}function Zn(t,e,i,n){var s=un();n=void 0===n?null:n;var l=void 0;if(null!==cn){var c=cn.memoizedState;if(l=c.destroy,null!==n&&on(n,c.deps))return void mn(e,i,l,n)}ln.flags|=t,s.memoizedState=mn(1|e,i,l,n)}function Rn(t,e){return Vn(516,4,t,e)}function yn(t,e){return Zn(516,4,t,e)}function Ln(t,e){return Zn(4,2,t,e)}function Xn(t,e){return"function"==typeof e?(t=t(),e(t),function(){e(null)}):null!=e?(t=t(),e.current=t,function(){e.current=null}):void 0}function An(t,e,i){return i=null!=i?i.concat([t]):null,Zn(4,2,Xn.bind(null,e,t),i)}function Wn(){}function Sn(t,e){var i=un();e=void 0===e?null:e;var n=i.memoizedState;return null!==n&&null!==e&&on(e,n[1])?n[0]:(i.memoizedState=[t,e],t)}function En(t,e){var i=un();e=void 0===e?null:e;var n=i.memoizedState;return null!==n&&null!==e&&on(e,n[1])?n[0]:(t=t(),i.memoizedState=[t,e],t)}function Nn(t,e){var i=we();De(98>i?98:i,(function(){t(!0)})),De(97<i?97:i,(function(){var i=nn.transition;nn.transition=1;try{t(!1),e()}finally{nn.transition=i}}))}function vn(t,e,i){var n=El(),s=Nl(t),l={lane:s,action:i,eagerReducer:null,eagerState:null,next:null},c=e.pending;if(null===c?l.next=l:(l.next=c.next,c.next=l),e.pending=l,c=t.alternate,t===ln||null!==c&&c===ln)In=gn=!0;else{if(0===t.lanes&&(null===c||0===c.lanes)&&null!==(c=e.lastRenderedReducer))try{var a=e.lastRenderedState,g=c(a,i);if(l.eagerReducer=c,l.eagerState=g,_e(g,a))return}catch(t){}vl(t,s,n)}}var Yn={readContext:oi,useCallback:dn,useContext:dn,useEffect:dn,useImperativeHandle:dn,useLayoutEffect:dn,useMemo:dn,useReducer:dn,useRef:dn,useState:dn,useDebugValue:dn,useDeferredValue:dn,useTransition:dn,useMutableSource:dn,useOpaqueIdentifier:dn,unstable_isNewReconciler:!1},Hn={readContext:oi,useCallback:function(t,e){return bn().memoizedState=[t,void 0===e?null:e],t},useContext:oi,useEffect:Rn,useImperativeHandle:function(t,e,i){return i=null!=i?i.concat([t]):null,Vn(4,2,Xn.bind(null,e,t),i)},useLayoutEffect:function(t,e){return Vn(4,2,t,e)},useMemo:function(t,e){var i=bn();return e=void 0===e?null:e,t=t(),i.memoizedState=[t,e],t},useReducer:function(t,e,i){var n=bn();return e=void 0!==i?i(e):e,n.memoizedState=n.baseState=e,t=(t=n.queue={pending:null,dispatch:null,lastRenderedReducer:t,lastRenderedState:e}).dispatch=vn.bind(null,ln,t),[n.memoizedState,t]},useRef:xn,useState:hn,useDebugValue:Wn,useDeferredValue:function(t){var e=hn(t),i=e[0],n=e[1];return Rn((function(){var e=nn.transition;nn.transition=1;try{n(t)}finally{nn.transition=e}}),[t]),i},useTransition:function(){var t=hn(!1),e=t[0];return xn(t=Nn.bind(null,t[1])),[t,e]},useMutableSource:function(t,e,i){var n=bn();return n.memoizedState={refs:{getSnapshot:e,setSnapshot:null},source:t,subscribe:i},Un(n,t,e,i)},useOpaqueIdentifier:function(){if(Di){var t=!1,e=tt((function(){throw t||(t=!0,i(et())),Error(a(355))})),i=hn(e)[1];return 0==(2&ln.mode)&&(ln.flags|=516,mn(5,(function(){i(et())}),void 0,null)),e}return hn(e=et()),e},unstable_isNewReconciler:!1},Jn={readContext:oi,useCallback:Sn,useContext:oi,useEffect:yn,useImperativeHandle:An,useLayoutEffect:Ln,useMemo:En,useReducer:Fn,useRef:pn,useState:function(){return Fn(Bn)},useDebugValue:Wn,useDeferredValue:function(t){var e=Fn(Bn),i=e[0],n=e[1];return yn((function(){var e=nn.transition;nn.transition=1;try{n(t)}finally{nn.transition=e}}),[t]),i},useTransition:function(){var t=Fn(Bn)[0];return[pn().current,t]},useMutableSource:Qn,useOpaqueIdentifier:function(){return Fn(Bn)[0]},unstable_isNewReconciler:!1},Mn={readContext:oi,useCallback:Sn,useContext:oi,useEffect:yn,useImperativeHandle:An,useLayoutEffect:Ln,useMemo:En,useReducer:Cn,useRef:pn,useState:function(){return Cn(Bn)},useDebugValue:Wn,useDeferredValue:function(t){var e=Cn(Bn),i=e[0],n=e[1];return yn((function(){var e=nn.transition;nn.transition=1;try{n(t)}finally{nn.transition=e}}),[t]),i},useTransition:function(){var t=Cn(Bn)[0];return[pn().current,t]},useMutableSource:Qn,useOpaqueIdentifier:function(){return Cn(Bn)[0]},unstable_isNewReconciler:!1},fn=g.ReactCurrentOwner,kn=!1;function zn(t,e,i,n){e.child=null===t?Wi(e,null,i,n):Ai(e,t.child,i,n)}function wn(t,e,i,n,s){i=i.render;var l=e.ref;return di(e,s),n=rn(t,e,i,n,l,s),null===t||kn?(e.flags|=1,zn(t,e,n,s),e.child):(e.updateQueue=t.updateQueue,e.flags&=-517,t.lanes&=~s,Is(t,e,s))}function Tn(t,e,i,n,s,l){if(null===t){var c=i.type;return"function"!=typeof c||Qc(c)||void 0!==c.defaultProps||null!==i.compare||void 0!==i.defaultProps?((t=mc(i.type,null,n,e,e.mode,l)).ref=e.ref,t.return=e,e.child=t):(e.tag=15,e.type=c,Dn(t,e,c,n,s,l))}return c=t.child,0==(s&l)&&(s=c.memoizedProps,(i=null!==(i=i.compare)?i:$e)(s,n)&&t.ref===e.ref)?Is(t,e,l):(e.flags|=1,(t=hc(c,n)).ref=e.ref,t.return=e,e.child=t)}function Dn(t,e,i,n,s,l){if(null!==t&&$e(t.memoizedProps,n)&&t.ref===e.ref){if(kn=!1,0==(l&s))return e.lanes=t.lanes,Is(t,e,l);0!=(16384&t.flags)&&(kn=!0)}return Pn(t,e,i,n,l)}function Kn(t,e,i){var n=e.pendingProps,s=n.children,l=null!==t?t.memoizedState:null;if("hidden"===n.mode||"unstable-defer-without-hiding"===n.mode)if(0==(4&e.mode))e.memoizedState={baseLanes:0},wl(0,i);else{if(0==(1073741824&i))return t=null!==l?l.baseLanes|i:i,e.lanes=e.childLanes=1073741824,e.memoizedState={baseLanes:t},wl(0,t),null;e.memoizedState={baseLanes:0},wl(0,null!==l?l.baseLanes:i)}else null!==l?(n=l.baseLanes|i,e.memoizedState=null):n=i,wl(0,n);return zn(t,e,s,i),e.child}function jn(t,e){var i=e.ref;(null===t&&null!==i||null!==t&&t.ref!==i)&&(e.flags|=128)}function Pn(t,e,i,n,s){var l=le(i)?ne:ee.current;return l=se(e,l),di(e,s),i=rn(t,e,i,n,l,s),null===t||kn?(e.flags|=1,zn(t,e,i,s),e.child):(e.updateQueue=t.updateQueue,e.flags&=-517,t.lanes&=~s,Is(t,e,s))}function On(t,e,i,n,s){if(le(i)){var l=!0;Ie(e)}else l=!1;if(di(e,s),null===e.stateNode)null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),pi(e,i,n),Zi(e,i,n,s),n=!0;else if(null===t){var c=e.stateNode,a=e.memoizedProps;c.props=a;var g=c.context,I=i.contextType;I="object"==typeof I&&null!==I?oi(I):se(e,I=le(i)?ne:ee.current);var d=i.getDerivedStateFromProps,o="function"==typeof d||"function"==typeof c.getSnapshotBeforeUpdate;o||"function"!=typeof c.UNSAFE_componentWillReceiveProps&&"function"!=typeof c.componentWillReceiveProps||(a!==n||g!==I)&&Vi(e,c,n,I),ri=!1;var r=e.memoizedState;c.state=r,Gi(e,n,c,s),g=e.memoizedState,a!==n||r!==g||ie.current||ri?("function"==typeof d&&(hi(e,i,d,n),g=e.memoizedState),(a=ri||xi(e,i,a,n,r,g,I))?(o||"function"!=typeof c.UNSAFE_componentWillMount&&"function"!=typeof c.componentWillMount||("function"==typeof c.componentWillMount&&c.componentWillMount(),"function"==typeof c.UNSAFE_componentWillMount&&c.UNSAFE_componentWillMount()),"function"==typeof c.componentDidMount&&(e.flags|=4)):("function"==typeof c.componentDidMount&&(e.flags|=4),e.memoizedProps=n,e.memoizedState=g),c.props=n,c.state=g,c.context=I,n=a):("function"==typeof c.componentDidMount&&(e.flags|=4),n=!1)}else{c=e.stateNode,ui(t,e),a=e.memoizedProps,I=e.type===e.elementType?a:ei(e.type,a),c.props=I,o=e.pendingProps,r=c.context,g="object"==typeof(g=i.contextType)&&null!==g?oi(g):se(e,g=le(i)?ne:ee.current);var b=i.getDerivedStateFromProps;(d="function"==typeof b||"function"==typeof c.getSnapshotBeforeUpdate)||"function"!=typeof c.UNSAFE_componentWillReceiveProps&&"function"!=typeof c.componentWillReceiveProps||(a!==o||r!==g)&&Vi(e,c,n,g),ri=!1,r=e.memoizedState,c.state=r,Gi(e,n,c,s);var u=e.memoizedState;a!==o||r!==u||ie.current||ri?("function"==typeof b&&(hi(e,i,b,n),u=e.memoizedState),(I=ri||xi(e,i,I,n,r,u,g))?(d||"function"!=typeof c.UNSAFE_componentWillUpdate&&"function"!=typeof c.componentWillUpdate||("function"==typeof c.componentWillUpdate&&c.componentWillUpdate(n,u,g),"function"==typeof c.UNSAFE_componentWillUpdate&&c.UNSAFE_componentWillUpdate(n,u,g)),"function"==typeof c.componentDidUpdate&&(e.flags|=4),"function"==typeof c.getSnapshotBeforeUpdate&&(e.flags|=256)):("function"!=typeof c.componentDidUpdate||a===t.memoizedProps&&r===t.memoizedState||(e.flags|=4),"function"!=typeof c.getSnapshotBeforeUpdate||a===t.memoizedProps&&r===t.memoizedState||(e.flags|=256),e.memoizedProps=n,e.memoizedState=u),c.props=n,c.state=u,c.context=g,n=I):("function"!=typeof c.componentDidUpdate||a===t.memoizedProps&&r===t.memoizedState||(e.flags|=4),"function"!=typeof c.getSnapshotBeforeUpdate||a===t.memoizedProps&&r===t.memoizedState||(e.flags|=256),n=!1)}return _n(t,e,i,n,l,s)}function _n(t,e,i,n,s,l){jn(t,e);var c=0!=(64&e.flags);if(!n&&!c)return s&&de(e,i,!1),Is(t,e,l);n=e.stateNode,fn.current=e;var a=c&&"function"!=typeof i.getDerivedStateFromError?null:n.render();return e.flags|=1,null!==t&&c?(e.child=Ai(e,t.child,null,l),e.child=Ai(e,null,a,l)):zn(t,e,a,l),e.memoizedState=n.state,s&&de(e,i,!0),e.child}function qn(t){var e=t.stateNode;e.pendingContext?ae(0,e.pendingContext,e.pendingContext!==e.context):e.context&&ae(0,e.context,!1),Hi(t,e.containerInfo)}var $n,ts,es,is,ns={dehydrated:null,retryLane:0};function ss(t,e,i){var n,s=e.pendingProps,l=ki.current,c=!1;return(n=0!=(64&e.flags))||(n=(null===t||null!==t.memoizedState)&&0!=(2&l)),n?(c=!0,e.flags&=-65):null!==t&&null===t.memoizedState||void 0===s.fallback||!0===s.unstable_avoidThisFallback||(l|=1),$t(ki,1&l),null===t?(void 0!==s.fallback&&Pi(e),t=s.children,l=s.fallback,c?(t=ls(e,t,l,i),e.child.memoizedState={baseLanes:i},e.memoizedState=ns,t):"number"==typeof s.unstable_expectedLoadTime?(t=ls(e,t,l,i),e.child.memoizedState={baseLanes:i},e.memoizedState=ns,e.lanes=33554432,t):((i=pc({mode:"visible",children:t},e.mode,i,null)).return=e,e.child=i)):(t.memoizedState,c?(s=function(t,e,i,n,s){var l=e.mode,c=t.child;t=c.sibling;var a={mode:"hidden",children:i};return 0==(2&l)&&e.child!==c?((i=e.child).childLanes=0,i.pendingProps=a,null!==(c=i.lastEffect)?(e.firstEffect=i.firstEffect,e.lastEffect=c,c.nextEffect=null):e.firstEffect=e.lastEffect=null):i=hc(c,a),null!==t?n=hc(t,n):(n=xc(n,l,s,null)).flags|=2,n.return=e,i.return=e,i.sibling=n,e.child=i,n}(t,e,s.children,s.fallback,i),c=e.child,l=t.child.memoizedState,c.memoizedState=null===l?{baseLanes:i}:{baseLanes:l.baseLanes|i},c.childLanes=t.childLanes&~i,e.memoizedState=ns,s):(i=function(t,e,i,n){var s=t.child;return t=s.sibling,i=hc(s,{mode:"visible",children:i}),0==(2&e.mode)&&(i.lanes=n),i.return=e,i.sibling=null,null!==t&&(t.nextEffect=null,t.flags=8,e.firstEffect=e.lastEffect=t),e.child=i}(t,e,s.children,i),e.memoizedState=null,i))}function ls(t,e,i,n){var s=t.mode,l=t.child;return e={mode:"hidden",children:e},0==(2&s)&&null!==l?(l.childLanes=0,l.pendingProps=e):l=pc(e,s,0,null),i=xc(i,s,n,null),l.return=t,i.return=t,l.sibling=i,t.child=l,i}function cs(t,e){t.lanes|=e;var i=t.alternate;null!==i&&(i.lanes|=e),Ii(t.return,e)}function as(t,e,i,n,s,l){var c=t.memoizedState;null===c?t.memoizedState={isBackwards:e,rendering:null,renderingStartTime:0,last:n,tail:i,tailMode:s,lastEffect:l}:(c.isBackwards=e,c.rendering=null,c.renderingStartTime=0,c.last=n,c.tail=i,c.tailMode=s,c.lastEffect=l)}function gs(t,e,i){var n=e.pendingProps,s=n.revealOrder,l=n.tail;if(zn(t,e,n.children,i),0!=(2&(n=ki.current)))n=1&n|2,e.flags|=64;else{if(null!==t&&0!=(64&t.flags))t:for(t=e.child;null!==t;){if(13===t.tag)null!==t.memoizedState&&cs(t,i);else if(19===t.tag)cs(t,i);else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break t;for(;null===t.sibling;){if(null===t.return||t.return===e)break t;t=t.return}t.sibling.return=t.return,t=t.sibling}n&=1}if($t(ki,n),0==(2&e.mode))e.memoizedState=null;else switch(s){case"forwards":for(i=e.child,s=null;null!==i;)null!==(t=i.alternate)&&null===zi(t)&&(s=i),i=i.sibling;null===(i=s)?(s=e.child,e.child=null):(s=i.sibling,i.sibling=null),as(e,!1,s,i,l,e.lastEffect);break;case"backwards":for(i=null,s=e.child,e.child=null;null!==s;){if(null!==(t=s.alternate)&&null===zi(t)){e.child=s;break}t=s.sibling,s.sibling=i,i=s,s=t}as(e,!0,i,null,l,e.lastEffect);break;case"together":as(e,!1,null,null,void 0,e.lastEffect);break;default:e.memoizedState=null}return e.child}function Is(t,e,i){if(null!==t&&(e.dependencies=t.dependencies),Il|=e.lanes,0!=(i&e.childLanes)){if(null!==t&&e.child!==t.child)throw Error(a(153));if(null!==e.child){for(i=hc(t=e.child,t.pendingProps),e.child=i,i.return=e;null!==t.sibling;)t=t.sibling,(i=i.sibling=hc(t,t.pendingProps)).return=e;i.sibling=null}return e.child}return null}function ds(t){t.flags|=4}if(O)$n=function(t,e){for(var i=e.child;null!==i;){if(5===i.tag||6===i.tag)f(t,i.stateNode);else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;i=i.return}i.sibling.return=i.return,i=i.sibling}},ts=function(){},es=function(t,e,i,n,s){if((t=t.memoizedProps)!==n){var l=e.stateNode,c=Yi(Ei.current);i=z(l,i,t,n,s,c),(e.updateQueue=i)&&ds(e)}},is=function(t,e,i,n){i!==n&&ds(e)};else if(_){$n=function(t,e,i,n){for(var s=e.child;null!==s;){if(5===s.tag){var l=s.stateNode;i&&n&&(l=St(l,s.type,s.memoizedProps,s)),f(t,l)}else if(6===s.tag)l=s.stateNode,i&&n&&(l=Et(l,s.memoizedProps,s)),f(t,l);else if(4!==s.tag){if(13===s.tag&&0!=(4&s.flags)&&(l=null!==s.memoizedState)){var c=s.child;if(null!==c&&(null!==c.child&&(c.child.return=c,$n(t,c,!0,l)),null!==(l=c.sibling))){l.return=s,s=l;continue}}if(null!==s.child){s.child.return=s,s=s.child;continue}}if(s===e)break;for(;null===s.sibling;){if(null===s.return||s.return===e)return;s=s.return}s.sibling.return=s.return,s=s.sibling}};var os=function(t,e,i,n){for(var s=e.child;null!==s;){if(5===s.tag){var l=s.stateNode;i&&n&&(l=St(l,s.type,s.memoizedProps,s)),Xt(t,l)}else if(6===s.tag)l=s.stateNode,i&&n&&(l=Et(l,s.memoizedProps,s)),Xt(t,l);else if(4!==s.tag){if(13===s.tag&&0!=(4&s.flags)&&(l=null!==s.memoizedState)){var c=s.child;if(null!==c&&(null!==c.child&&(c.child.return=c,os(t,c,!0,l)),null!==(l=c.sibling))){l.return=s,s=l;continue}}if(null!==s.child){s.child.return=s,s=s.child;continue}}if(s===e)break;for(;null===s.sibling;){if(null===s.return||s.return===e)return;s=s.return}s.sibling.return=s.return,s=s.sibling}};ts=function(t){var e=t.stateNode;if(null!==t.firstEffect){var i=e.containerInfo,n=Lt(i);os(n,t,!1,!1),e.pendingChildren=n,ds(t),At(i,n)}},es=function(t,e,i,n,s){var l=t.stateNode,c=t.memoizedProps;if((t=null===e.firstEffect)&&c===n)e.stateNode=l;else{var a=e.stateNode,g=Yi(Ei.current),I=null;c!==n&&(I=z(a,i,c,n,s,g)),t&&null===I?e.stateNode=l:(l=yt(l,I,i,c,n,e,t,a),k(l,i,n,s,g)&&ds(e),e.stateNode=l,t?ds(e):$n(l,e,!1,!1))}},is=function(t,e,i,n){i!==n?(t=Yi(vi.current),i=Yi(Ei.current),e.stateNode=T(n,t,i,e),ds(e)):e.stateNode=t.stateNode}}else ts=function(){},es=function(){},is=function(){};function rs(t,e){if(!Di)switch(t.tailMode){case"hidden":e=t.tail;for(var i=null;null!==e;)null!==e.alternate&&(i=e),e=e.sibling;null===i?t.tail=null:i.sibling=null;break;case"collapsed":i=t.tail;for(var n=null;null!==i;)null!==i.alternate&&(n=i),i=i.sibling;null===n?e||null===t.tail?t.tail=null:t.tail.sibling=null:n.sibling=null}}function bs(t,e,i){var n=e.pendingProps;switch(e.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return le(e.type)&&ce(),null;case 3:return Ji(),qt(ie),qt(ee),tn(),(n=e.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==t&&null!==t.child||(_i(e)?ds(e):n.hydrate||(e.flags|=256)),ts(e),null;case 5:fi(e);var s=Yi(vi.current);if(i=e.type,null!==t&&null!=e.stateNode)es(t,e,i,n,s),t.ref!==e.ref&&(e.flags|=128);else{if(!n){if(null===e.stateNode)throw Error(a(166));return null}if(t=Yi(Ei.current),_i(e)){if(!q)throw Error(a(175));t=ft(e.stateNode,e.type,e.memoizedProps,s,t,e),e.updateQueue=t,null!==t&&ds(e)}else{var l=M(i,n,s,t,e);$n(l,e,!1,!1),e.stateNode=l,k(l,i,n,s,t)&&ds(e)}null!==e.ref&&(e.flags|=128)}return null;case 6:if(t&&null!=e.stateNode)is(t,e,t.memoizedProps,n);else{if("string"!=typeof n&&null===e.stateNode)throw Error(a(166));if(t=Yi(vi.current),s=Yi(Ei.current),_i(e)){if(!q)throw Error(a(176));kt(e.stateNode,e.memoizedProps,e)&&ds(e)}else e.stateNode=T(n,t,s,e)}return null;case 13:return qt(ki),n=e.memoizedState,0!=(64&e.flags)?(e.lanes=i,e):(n=null!==n,s=!1,null===t?void 0!==e.memoizedProps.fallback&&_i(e):s=null!==t.memoizedState,n&&!s&&0!=(2&e.mode)&&(null===t&&!0!==e.memoizedProps.unstable_avoidThisFallback||0!=(1&ki.current)?0===cl&&(cl=3):(0!==cl&&3!==cl||(cl=4),null===el||0==(134217727&Il)&&0==(134217727&dl)||Ml(el,nl))),_&&n&&(e.flags|=4),O&&(n||s)&&(e.flags|=4),null);case 4:return Ji(),ts(e),null===t&&st(e.stateNode.containerInfo),null;case 10:return gi(e),null;case 17:return le(e.type)&&ce(),null;case 19:if(qt(ki),null===(n=e.memoizedState))return null;if(s=0!=(64&e.flags),null===(l=n.rendering))if(s)rs(n,!1);else{if(0!==cl||null!==t&&0!=(64&t.flags))for(t=e.child;null!==t;){if(null!==(l=zi(t))){for(e.flags|=64,rs(n,!1),null!==(t=l.updateQueue)&&(e.updateQueue=t,e.flags|=4),null===n.lastEffect&&(e.firstEffect=null),e.lastEffect=n.lastEffect,t=i,n=e.child;null!==n;)i=t,(s=n).flags&=2,s.nextEffect=null,s.firstEffect=null,s.lastEffect=null,null===(l=s.alternate)?(s.childLanes=0,s.lanes=i,s.child=null,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=l.childLanes,s.lanes=l.lanes,s.child=l.child,s.memoizedProps=l.memoizedProps,s.memoizedState=l.memoizedState,s.updateQueue=l.updateQueue,s.type=l.type,i=l.dependencies,s.dependencies=null===i?null:{lanes:i.lanes,firstContext:i.firstContext}),n=n.sibling;return $t(ki,1&ki.current|2),e.child}t=t.sibling}null!==n.tail&&ze()>ul&&(e.flags|=64,s=!0,rs(n,!1),e.lanes=33554432)}else{if(!s)if(null!==(t=zi(l))){if(e.flags|=64,s=!0,null!==(t=t.updateQueue)&&(e.updateQueue=t,e.flags|=4),rs(n,!0),null===n.tail&&"hidden"===n.tailMode&&!l.alternate&&!Di)return null!==(e=e.lastEffect=n.lastEffect)&&(e.nextEffect=null),null}else 2*ze()-n.renderingStartTime>ul&&1073741824!==i&&(e.flags|=64,s=!0,rs(n,!1),e.lanes=33554432);n.isBackwards?(l.sibling=e.child,e.child=l):(null!==(t=n.last)?t.sibling=l:e.child=l,n.last=l)}return null!==n.tail?(t=n.tail,n.rendering=t,n.tail=t.sibling,n.lastEffect=e.lastEffect,n.renderingStartTime=ze(),t.sibling=null,e=ki.current,$t(ki,s?1&e|2:1&e),t):null;case 23:case 24:return Tl(),null!==t&&null!==t.memoizedState!=(null!==e.memoizedState)&&"unstable-defer-without-hiding"!==n.mode&&(e.flags|=4),null}throw Error(a(156,e.tag))}function us(t){switch(t.tag){case 1:le(t.type)&&ce();var e=t.flags;return 4096&e?(t.flags=-4097&e|64,t):null;case 3:if(Ji(),qt(ie),qt(ee),tn(),0!=(64&(e=t.flags)))throw Error(a(285));return t.flags=-4097&e|64,t;case 5:return fi(t),null;case 13:return qt(ki),4096&(e=t.flags)?(t.flags=-4097&e|64,t):null;case 19:return qt(ki),null;case 4:return Ji(),null;case 10:return gi(t),null;case 23:case 24:return Tl(),null;default:return null}}function Bs(t,e){try{var i="",n=e;do{i+=ti(n),n=n.return}while(n);var s=i}catch(t){s="\nError generating stack: "+t.message+"\n"+t.stack}return{value:t,source:e,stack:s}}function Fs(t,e){try{console.error(e.value)}catch(t){setTimeout((function(){throw t}))}}var Cs="function"==typeof WeakMap?WeakMap:Map;function Gs(t,e,i){(i=Bi(-1,i)).tag=3,i.payload={element:null};var n=e.value;return i.callback=function(){Gl||(Gl=!0,Ul=n),Fs(0,e)},i}function Us(t,e,i){(i=Bi(-1,i)).tag=3;var n=t.type.getDerivedStateFromError;if("function"==typeof n){var s=e.value;i.payload=function(){return Fs(0,e),n(s)}}var l=t.stateNode;return null!==l&&"function"==typeof l.componentDidCatch&&(i.callback=function(){"function"!=typeof n&&(null===Ql?Ql=new Set([this]):Ql.add(this),Fs(0,e));var t=e.stack;this.componentDidCatch(e.value,{componentStack:null!==t?t:""})}),i}var Qs="function"==typeof WeakSet?WeakSet:Set;function hs(t){var e=t.ref;if(null!==e)if("function"==typeof e)try{e(null)}catch(e){gc(t,e)}else e.current=null}function ms(t,e){switch(e.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&e.flags&&null!==t){var i=t.memoizedProps,n=t.memoizedState;e=(t=e.stateNode).getSnapshotBeforeUpdate(e.elementType===e.type?i:ei(e.type,i),n),t.__reactInternalSnapshotBeforeUpdate=e}return;case 3:return void(O&&256&e.flags&&Rt(e.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(a(163))}function xs(t,e){if(null!==(e=null!==(e=e.updateQueue)?e.lastEffect:null)){var i=e=e.next;do{if((i.tag&t)===t){var n=i.destroy;i.destroy=void 0,void 0!==n&&n()}i=i.next}while(i!==e)}}function ps(t,e,i){switch(i.tag){case 0:case 11:case 15:case 22:if(null!==(e=null!==(e=i.updateQueue)?e.lastEffect:null)){t=e=e.next;do{if(3==(3&t.tag)){var n=t.create;t.destroy=n()}t=t.next}while(t!==e)}if(null!==(e=null!==(e=i.updateQueue)?e.lastEffect:null)){t=e=e.next;do{var s=t;n=s.next,0!=(4&(s=s.tag))&&0!=(1&s)&&(lc(i,t),sc(i,t)),t=n}while(t!==e)}return;case 1:return t=i.stateNode,4&i.flags&&(null===e?t.componentDidMount():(n=i.elementType===i.type?e.memoizedProps:ei(i.type,e.memoizedProps),t.componentDidUpdate(n,e.memoizedState,t.__reactInternalSnapshotBeforeUpdate))),void(null!==(e=i.updateQueue)&&Ui(i,e,t));case 3:if(null!==(e=i.updateQueue)){if(t=null,null!==i.child)switch(i.child.tag){case 5:t=N(i.child.stateNode);break;case 1:t=i.child.stateNode}Ui(i,e,t)}return;case 5:return t=i.stateNode,void(null===e&&4&i.flags&&Ft(t,i.type,i.memoizedProps,i));case 6:case 4:case 12:return;case 13:return void(q&&null===i.memoizedState&&(i=i.alternate,null!==i&&(i=i.memoizedState,null!==i&&(i=i.dehydrated,null!==i&&Tt(i)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(a(163))}function Vs(t,e){if(O)for(var i=t;;){if(5===i.tag){var n=i.stateNode;e?xt(n):Vt(i.stateNode,i.memoizedProps)}else if(6===i.tag)n=i.stateNode,e?pt(n):Zt(n,i.memoizedProps);else if((23!==i.tag&&24!==i.tag||null===i.memoizedState||i===t)&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;i=i.return}i.sibling.return=i.return,i=i.sibling}}function Zs(t,e){if(re&&"function"==typeof re.onCommitFiberUnmount)try{re.onCommitFiberUnmount(oe,e)}catch(t){}switch(e.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(t=e.updateQueue)&&null!==(t=t.lastEffect)){var i=t=t.next;do{var n=i,s=n.destroy;if(n=n.tag,void 0!==s)if(0!=(4&n))lc(e,i);else{n=e;try{s()}catch(t){gc(n,t)}}i=i.next}while(i!==t)}break;case 1:if(hs(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){gc(e,t)}break;case 5:hs(e);break;case 4:O?Ss(t,e):_&&_&&(e=e.stateNode.containerInfo,t=Lt(e),Wt(e,t))}}function Rs(t,e){for(var i=e;;)if(Zs(t,i),null===i.child||O&&4===i.tag){if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;i=i.return}i.sibling.return=i.return,i=i.sibling}else i.child.return=i,i=i.child}function ys(t){t.alternate=null,t.child=null,t.dependencies=null,t.firstEffect=null,t.lastEffect=null,t.memoizedProps=null,t.memoizedState=null,t.pendingProps=null,t.return=null,t.updateQueue=null}function Ls(t){return 5===t.tag||3===t.tag||4===t.tag}function Xs(t){if(O){t:{for(var e=t.return;null!==e;){if(Ls(e))break t;e=e.return}throw Error(a(160))}var i=e;switch(e=i.stateNode,i.tag){case 5:var n=!1;break;case 3:case 4:e=e.containerInfo,n=!0;break;default:throw Error(a(161))}16&i.flags&&(mt(e),i.flags&=-17);t:e:for(i=t;;){for(;null===i.sibling;){if(null===i.return||Ls(i.return)){i=null;break t}i=i.return}for(i.sibling.return=i.return,i=i.sibling;5!==i.tag&&6!==i.tag&&18!==i.tag;){if(2&i.flags)continue e;if(null===i.child||4===i.tag)continue e;i.child.return=i,i=i.child}if(!(2&i.flags)){i=i.stateNode;break t}}n?As(t,i,e):Ws(t,i,e)}}function As(t,e,i){var n=t.tag,s=5===n||6===n;if(s)t=s?t.stateNode:t.stateNode.instance,e?Ut(i,t,e):ut(i,t);else if(4!==n&&null!==(t=t.child))for(As(t,e,i),t=t.sibling;null!==t;)As(t,e,i),t=t.sibling}function Ws(t,e,i){var n=t.tag,s=5===n||6===n;if(s)t=s?t.stateNode:t.stateNode.instance,e?Gt(i,t,e):bt(i,t);else if(4!==n&&null!==(t=t.child))for(Ws(t,e,i),t=t.sibling;null!==t;)Ws(t,e,i),t=t.sibling}function Ss(t,e){for(var i,n,s=e,l=!1;;){if(!l){l=s.return;t:for(;;){if(null===l)throw Error(a(160));switch(i=l.stateNode,l.tag){case 5:n=!1;break t;case 3:case 4:i=i.containerInfo,n=!0;break t}l=l.return}l=!0}if(5===s.tag||6===s.tag)Rs(t,s),n?ht(i,s.stateNode):Qt(i,s.stateNode);else if(4===s.tag){if(null!==s.child){i=s.stateNode.containerInfo,n=!0,s.child.return=s,s=s.child;continue}}else if(Zs(t,s),null!==s.child){s.child.return=s,s=s.child;continue}if(s===e)break;for(;null===s.sibling;){if(null===s.return||s.return===e)return;4===(s=s.return).tag&&(l=!1)}s.sibling.return=s.return,s=s.sibling}}function Es(t,e){if(O){switch(e.tag){case 0:case 11:case 14:case 15:case 22:return void xs(3,e);case 1:return;case 5:var i=e.stateNode;if(null!=i){var n=e.memoizedProps;t=null!==t?t.memoizedProps:n;var s=e.type,l=e.updateQueue;e.updateQueue=null,null!==l&&Ct(i,l,s,t,n,e)}return;case 6:if(null===e.stateNode)throw Error(a(162));return i=e.memoizedProps,void Bt(e.stateNode,null!==t?t.memoizedProps:i,i);case 3:return void(q&&(e=e.stateNode,e.hydrate&&(e.hydrate=!1,wt(e.containerInfo))));case 12:return;case 13:return Ns(e),void vs(e);case 19:return void vs(e);case 17:return;case 23:case 24:return void Vs(e,null!==e.memoizedState)}throw Error(a(163))}switch(e.tag){case 0:case 11:case 14:case 15:case 22:return void xs(3,e);case 12:return;case 13:return Ns(e),void vs(e);case 19:return void vs(e);case 3:q&&(i=e.stateNode).hydrate&&(i.hydrate=!1,wt(i.containerInfo));break;case 23:case 24:return}t:if(_){switch(e.tag){case 1:case 5:case 6:case 20:break t;case 3:case 4:e=e.stateNode,Wt(e.containerInfo,e.pendingChildren);break t}throw Error(a(163))}}function Ns(t){null!==t.memoizedState&&(bl=ze(),O&&Vs(t.child,!0))}function vs(t){var e=t.updateQueue;if(null!==e){t.updateQueue=null;var i=t.stateNode;null===i&&(i=t.stateNode=new Qs),e.forEach((function(e){var n=dc.bind(null,t,e);i.has(e)||(i.add(e),e.then(n,n))}))}}function Ys(t,e){return null!==t&&(null===(t=t.memoizedState)||null!==t.dehydrated)&&null!==(e=e.memoizedState)&&null===e.dehydrated}var Hs=0,Js=1,Ms=2,fs=3,ks=4;if("function"==typeof Symbol&&Symbol.for){var zs=Symbol.for;Hs=zs("selector.component"),Js=zs("selector.has_pseudo_class"),Ms=zs("selector.role"),fs=zs("selector.test_id"),ks=zs("selector.text")}function ws(t){var e=$(t);if(null!=e){if("string"!=typeof e.memoizedProps["data-testname"])throw Error(a(364));return e}if(null===(t=ct(t)))throw Error(a(362));return t.stateNode.current}function Ts(t,e){switch(e.$$typeof){case Hs:if(t.type===e.value)return!0;break;case Js:t:{e=e.value,t=[t,0];for(var i=0;i<t.length;){var n=t[i++],s=t[i++],l=e[s];if(5!==n.tag||!It(n)){for(;null!=l&&Ts(n,l);)l=e[++s];if(s===e.length){e=!0;break t}for(n=n.child;null!==n;)t.push(n,s),n=n.sibling}}e=!1}return e;case Ms:if(5===t.tag&&dt(t.stateNode,e.value))return!0;break;case ks:if((5===t.tag||6===t.tag)&&null!==(t=gt(t))&&0<=t.indexOf(e.value))return!0;break;case fs:if(5===t.tag&&"string"==typeof(t=t.memoizedProps["data-testname"])&&t.toLowerCase()===e.value.toLowerCase())return!0;break;default:throw Error(a(365,e))}return!1}function Ds(t){switch(t.$$typeof){case Hs:return"<"+(y(t.value)||"Unknown")+">";case Js:return":has("+(Ds(t)||"")+")";case Ms:return'[role="'+t.value+'"]';case ks:return'"'+t.value+'"';case fs:return'[data-testname="'+t.value+'"]';default:throw Error(a(365,t))}}function Ks(t,e){var i=[];t=[t,0];for(var n=0;n<t.length;){var s=t[n++],l=t[n++],c=e[l];if(5!==s.tag||!It(s)){for(;null!=c&&Ts(s,c);)c=e[++l];if(l===e.length)i.push(s);else for(s=s.child;null!==s;)t.push(s,l),s=s.sibling}}return i}function js(t,e){if(!lt)throw Error(a(363));t=Ks(t=ws(t),e),e=[],t=Array.from(t);for(var i=0;i<t.length;){var n=t[i++];if(5===n.tag)It(n)||e.push(n.stateNode);else for(n=n.child;null!==n;)t.push(n),n=n.sibling}return e}var Ps=null,Os=Math.ceil,_s=g.ReactCurrentDispatcher,qs=g.ReactCurrentOwner,$s=g.IsSomeRendererActing,tl=0,el=null,il=null,nl=0,sl=0,ll=_t(0),cl=0,al=null,gl=0,Il=0,dl=0,ol=0,rl=null,bl=0,ul=1/0;function Bl(){ul=ze()+500}var Fl,Cl=null,Gl=!1,Ul=null,Ql=null,hl=!1,ml=null,xl=90,pl=[],Vl=[],Zl=null,Rl=0,yl=null,Ll=-1,Xl=0,Al=0,Wl=null,Sl=!1;function El(){return 0!=(48&tl)?ze():-1!==Ll?Ll:Ll=ze()}function Nl(t){if(0==(2&(t=t.mode)))return 1;if(0==(4&t))return 99===we()?1:2;if(0===Xl&&(Xl=gl),0!==Oe.transition){0!==Al&&(Al=null!==rl?rl.pendingLanes:0),t=Xl;var e=4186112&~Al;return 0==(e&=-e)&&0==(e=(t=4186112&~t)&-t)&&(e=8192),e}return t=we(),t=Ge(0!=(4&tl)&&98===t?12:t=function(t){switch(t){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(t),Xl)}function vl(t,e,i){if(50<Rl)throw Rl=0,yl=null,Error(a(185));if(null===(t=Yl(t,e)))return null;he(t,e,i),t===el&&(dl|=e,4===cl&&Ml(t,nl));var n=we();1===e?0!=(8&tl)&&0==(48&tl)?fl(t):(Hl(t,i),0===tl&&(Bl(),je())):(0==(4&tl)||98!==n&&99!==n||(null===Zl?Zl=new Set([t]):Zl.add(t)),Hl(t,i)),rl=t}function Yl(t,e){t.lanes|=e;var i=t.alternate;for(null!==i&&(i.lanes|=e),i=t,t=t.return;null!==t;)t.childLanes|=e,null!==(i=t.alternate)&&(i.childLanes|=e),i=t,t=t.return;return 3===i.tag?i.stateNode:null}function Hl(t,e){for(var i=t.callbackNode,n=t.suspendedLanes,s=t.pingedLanes,l=t.expirationTimes,c=t.pendingLanes;0<c;){var g=31-me(c),I=1<<g,d=l[g];if(-1===d){if(0==(I&n)||0!=(I&s)){d=e,Be(I);var o=ue;l[g]=10<=o?d+250:6<=o?d+5e3:-1}}else d<=e&&(t.expiredLanes|=I);c&=~I}if(n=Fe(t,t===el?nl:0),e=ue,0===n)null!==i&&(i!==Ye&&Re(i),t.callbackNode=null,t.callbackPriority=0);else{if(null!==i){if(t.callbackPriority===e)return;i!==Ye&&Re(i)}15===e?(i=fl.bind(null,t),null===Je?(Je=[i],Me=Ze(We,Pe)):Je.push(i),i=Ye):i=14===e?Ke(99,fl.bind(null,t)):Ke(i=function(t){switch(t){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,t))}}(e),Jl.bind(null,t)),t.callbackPriority=e,t.callbackNode=i}}function Jl(t){if(Ll=-1,Al=Xl=0,0!=(48&tl))throw Error(a(327));var e=t.callbackNode;if(nc()&&t.callbackNode!==e)return null;var i=Fe(t,t===el?nl:0);if(0===i)return null;var n=i,s=tl;tl|=16;var l=jl();for(el===t&&nl===n||(Bl(),Dl(t,n));;)try{_l();break}catch(e){Kl(t,e)}if(ci(),_s.current=l,tl=s,null!==il?n=0:(el=null,nl=0,n=cl),0!=(gl&dl))Dl(t,0);else if(0!==n){if(2===n&&(tl|=64,t.hydrate&&(t.hydrate=!1,Rt(t.containerInfo)),0!==(i=Ce(t))&&(n=Pl(t,i))),1===n)throw e=al,Dl(t,0),Ml(t,i),Hl(t,ze()),e;switch(t.finishedWork=t.current.alternate,t.finishedLanes=i,n){case 0:case 1:throw Error(a(345));case 2:tc(t);break;case 3:if(Ml(t,i),(62914560&i)===i&&10<(n=bl+500-ze())){if(0!==Fe(t,0))break;if(((s=t.suspendedLanes)&i)!==i){El(),t.pingedLanes|=t.suspendedLanes&s;break}t.timeoutHandle=D(tc.bind(null,t),n);break}tc(t);break;case 4:if(Ml(t,i),(4186112&i)===i)break;for(n=t.eventTimes,s=-1;0<i;){var c=31-me(i);l=1<<c,(c=n[c])>s&&(s=c),i&=~l}if(i=s,10<(i=(120>(i=ze()-i)?120:480>i?480:1080>i?1080:1920>i?1920:3e3>i?3e3:4320>i?4320:1960*Os(i/1960))-i)){t.timeoutHandle=D(tc.bind(null,t),i);break}tc(t);break;case 5:tc(t);break;default:throw Error(a(329))}}return Hl(t,ze()),t.callbackNode===e?Jl.bind(null,t):null}function Ml(t,e){for(e&=~ol,e&=~dl,t.suspendedLanes|=e,t.pingedLanes&=~e,t=t.expirationTimes;0<e;){var i=31-me(e),n=1<<i;t[i]=-1,e&=~n}}function fl(t){if(0!=(48&tl))throw Error(a(327));if(nc(),t===el&&0!=(t.expiredLanes&nl)){var e=nl,i=Pl(t,e);0!=(gl&dl)&&(i=Pl(t,e=Fe(t,e)))}else i=Pl(t,e=Fe(t,0));if(0!==t.tag&&2===i&&(tl|=64,t.hydrate&&(t.hydrate=!1,Rt(t.containerInfo)),0!==(e=Ce(t))&&(i=Pl(t,e))),1===i)throw i=al,Dl(t,0),Ml(t,e),Hl(t,ze()),i;return t.finishedWork=t.current.alternate,t.finishedLanes=e,tc(t),Hl(t,ze()),null}function kl(t,e){var i=tl;tl|=1;try{return t(e)}finally{0===(tl=i)&&(Bl(),je())}}function zl(t,e){var i=tl;if(0!=(48&i))return t(e);tl|=1;try{if(t)return De(99,t.bind(null,e))}finally{tl=i,je()}}function wl(t,e){$t(ll,sl),sl|=e,gl|=e}function Tl(){sl=ll.current,qt(ll)}function Dl(t,e){t.finishedWork=null,t.finishedLanes=0;var i=t.timeoutHandle;if(i!==j&&(t.timeoutHandle=j,K(i)),null!==il)for(i=il.return;null!==i;){var n=i;switch(n.tag){case 1:null!=(n=n.type.childContextTypes)&&ce();break;case 3:Ji(),qt(ie),qt(ee),tn();break;case 5:fi(n);break;case 4:Ji();break;case 13:case 19:qt(ki);break;case 10:gi(n);break;case 23:case 24:Tl()}i=i.return}el=t,il=hc(t.current,null),nl=sl=gl=e,cl=0,al=null,ol=dl=Il=0}function Kl(t,e){for(;;){var i=il;try{if(ci(),en.current=Yn,gn){for(var n=ln.memoizedState;null!==n;){var s=n.queue;null!==s&&(s.pending=null),n=n.next}gn=!1}if(sn=0,an=cn=ln=null,In=!1,qs.current=null,null===i||null===i.return){cl=1,al=e,il=null;break}t:{var l=t,c=i.return,a=i,g=e;if(e=nl,a.flags|=2048,a.firstEffect=a.lastEffect=null,null!==g&&"object"==typeof g&&"function"==typeof g.then){var I=g;if(0==(2&a.mode)){var d=a.alternate;d?(a.updateQueue=d.updateQueue,a.memoizedState=d.memoizedState,a.lanes=d.lanes):(a.updateQueue=null,a.memoizedState=null)}var o=0!=(1&ki.current),r=c;do{var b;if(b=13===r.tag){var u=r.memoizedState;if(null!==u)b=null!==u.dehydrated;else{var B=r.memoizedProps;b=void 0!==B.fallback&&(!0!==B.unstable_avoidThisFallback||!o)}}if(b){var F=r.updateQueue;if(null===F){var C=new Set;C.add(I),r.updateQueue=C}else F.add(I);if(0==(2&r.mode)){if(r.flags|=64,a.flags|=16384,a.flags&=-2981,1===a.tag)if(null===a.alternate)a.tag=17;else{var G=Bi(-1,1);G.tag=2,Fi(a,G)}a.lanes|=1;break t}g=void 0,a=e;var U=l.pingCache;if(null===U?(U=l.pingCache=new Cs,g=new Set,U.set(I,g)):void 0===(g=U.get(I))&&(g=new Set,U.set(I,g)),!g.has(a)){g.add(a);var Q=Ic.bind(null,l,I,a);I.then(Q,Q)}r.flags|=4096,r.lanes=e;break t}r=r.return}while(null!==r);g=Error((y(a.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==cl&&(cl=2),g=Bs(g,a),r=c;do{switch(r.tag){case 3:l=g,r.flags|=4096,e&=-e,r.lanes|=e,Ci(r,Gs(0,l,e));break t;case 1:l=g;var h=r.type,m=r.stateNode;if(0==(64&r.flags)&&("function"==typeof h.getDerivedStateFromError||null!==m&&"function"==typeof m.componentDidCatch&&(null===Ql||!Ql.has(m)))){r.flags|=4096,e&=-e,r.lanes|=e,Ci(r,Us(r,l,e));break t}}r=r.return}while(null!==r)}$l(i)}catch(t){e=t,il===i&&null!==i&&(il=i=i.return);continue}break}}function jl(){var t=_s.current;return _s.current=Yn,null===t?Yn:t}function Pl(t,e){var i=tl;tl|=16;var n=jl();for(el===t&&nl===e||Dl(t,e);;)try{Ol();break}catch(e){Kl(t,e)}if(ci(),tl=i,_s.current=n,null!==il)throw Error(a(261));return el=null,nl=0,cl}function Ol(){for(;null!==il;)ql(il)}function _l(){for(;null!==il&&!ye();)ql(il)}function ql(t){var e=Fl(t.alternate,t,sl);t.memoizedProps=t.pendingProps,null===e?$l(t):il=e,qs.current=null}function $l(t){var e=t;do{var i=e.alternate;if(t=e.return,0==(2048&e.flags)){if(null!==(i=bs(i,e,sl)))return void(il=i);if(24!==(i=e).tag&&23!==i.tag||null===i.memoizedState||0!=(1073741824&sl)||0==(4&i.mode)){for(var n=0,s=i.child;null!==s;)n|=s.lanes|s.childLanes,s=s.sibling;i.childLanes=n}null!==t&&0==(2048&t.flags)&&(null===t.firstEffect&&(t.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==t.lastEffect&&(t.lastEffect.nextEffect=e.firstEffect),t.lastEffect=e.lastEffect),1<e.flags&&(null!==t.lastEffect?t.lastEffect.nextEffect=e:t.firstEffect=e,t.lastEffect=e))}else{if(null!==(i=us(e)))return i.flags&=2047,void(il=i);null!==t&&(t.firstEffect=t.lastEffect=null,t.flags|=2048)}if(null!==(e=e.sibling))return void(il=e);il=e=t}while(null!==e);0===cl&&(cl=5)}function tc(t){var e=we();return De(99,ec.bind(null,t,e)),null}function ec(t,e){do{nc()}while(null!==ml);if(0!=(48&tl))throw Error(a(327));var i=t.finishedWork;if(null===i)return null;if(t.finishedWork=null,t.finishedLanes=0,i===t.current)throw Error(a(177));t.callbackNode=null;var n=i.lanes|i.childLanes,s=n,l=t.pendingLanes&~s;t.pendingLanes=s,t.suspendedLanes=0,t.pingedLanes=0,t.expiredLanes&=s,t.mutableReadLanes&=s,t.entangledLanes&=s,s=t.entanglements;for(var c=t.eventTimes,g=t.expirationTimes;0<l;){var I=31-me(l),d=1<<I;s[I]=0,c[I]=-1,g[I]=-1,l&=~d}if(null!==Zl&&0==(24&n)&&Zl.has(t)&&Zl.delete(t),t===el&&(il=el=null,nl=0),1<i.flags?null!==i.lastEffect?(i.lastEffect.nextEffect=i,n=i.firstEffect):n=i:n=i.firstEffect,null!==n){s=tl,tl|=32,qs.current=null,Wl=H(t.containerInfo),Sl=!1,Cl=n;do{try{ic()}catch(t){if(null===Cl)throw Error(a(330));gc(Cl,t),Cl=Cl.nextEffect}}while(null!==Cl);Wl=null,Cl=n;do{try{for(c=t;null!==Cl;){var o=Cl.flags;if(16&o&&O&&mt(Cl.stateNode),128&o){var r=Cl.alternate;if(null!==r){var b=r.ref;null!==b&&("function"==typeof b?b(null):b.current=null)}}switch(1038&o){case 2:Xs(Cl),Cl.flags&=-3;break;case 6:Xs(Cl),Cl.flags&=-3,Es(Cl.alternate,Cl);break;case 1024:Cl.flags&=-1025;break;case 1028:Cl.flags&=-1025,Es(Cl.alternate,Cl);break;case 4:Es(Cl.alternate,Cl);break;case 8:g=c,l=Cl,O?Ss(g,l):Rs(g,l);var u=l.alternate;ys(l),null!==u&&ys(u)}Cl=Cl.nextEffect}}catch(t){if(null===Cl)throw Error(a(330));gc(Cl,t),Cl=Cl.nextEffect}}while(null!==Cl);Sl&&nt(),J(t.containerInfo),t.current=i,Cl=n;do{try{for(o=t;null!==Cl;){var B=Cl.flags;if(36&B&&ps(o,Cl.alternate,Cl),128&B){r=void 0;var F=Cl.ref;if(null!==F){var C=Cl.stateNode;switch(Cl.tag){case 5:r=N(C);break;default:r=C}"function"==typeof F?F(r):F.current=r}}Cl=Cl.nextEffect}}catch(t){if(null===Cl)throw Error(a(330));gc(Cl,t),Cl=Cl.nextEffect}}while(null!==Cl);Cl=null,He(),tl=s}else t.current=i;if(hl)hl=!1,ml=t,xl=e;else for(Cl=n;null!==Cl;)e=Cl.nextEffect,Cl.nextEffect=null,8&Cl.flags&&((B=Cl).sibling=null,B.stateNode=null),Cl=e;if(0===(n=t.pendingLanes)&&(Ql=null),1===n?t===yl?Rl++:(Rl=0,yl=t):Rl=0,i=i.stateNode,re&&"function"==typeof re.onCommitFiberRoot)try{re.onCommitFiberRoot(oe,i,void 0,64==(64&i.current.flags))}catch(t){}if(Hl(t,ze()),Gl)throw Gl=!1,t=Ul,Ul=null,t;return 0!=(8&tl)||je(),null}function ic(){for(;null!==Cl;){var t=Cl.alternate;Sl||null===Wl||(0!=(8&Cl.flags)?S(Cl,Wl)&&(Sl=!0,it()):13===Cl.tag&&Ys(t,Cl)&&S(Cl,Wl)&&(Sl=!0,it()));var e=Cl.flags;0!=(256&e)&&ms(t,Cl),0==(512&e)||hl||(hl=!0,Ke(97,(function(){return nc(),null}))),Cl=Cl.nextEffect}}function nc(){if(90!==xl){var t=97<xl?97:xl;return xl=90,De(t,cc)}return!1}function sc(t,e){pl.push(e,t),hl||(hl=!0,Ke(97,(function(){return nc(),null})))}function lc(t,e){Vl.push(e,t),hl||(hl=!0,Ke(97,(function(){return nc(),null})))}function cc(){if(null===ml)return!1;var t=ml;if(ml=null,0!=(48&tl))throw Error(a(331));var e=tl;tl|=32;var i=Vl;Vl=[];for(var n=0;n<i.length;n+=2){var s=i[n],l=i[n+1],c=s.destroy;if(s.destroy=void 0,"function"==typeof c)try{c()}catch(t){if(null===l)throw Error(a(330));gc(l,t)}}for(i=pl,pl=[],n=0;n<i.length;n+=2){s=i[n],l=i[n+1];try{var g=s.create;s.destroy=g()}catch(t){if(null===l)throw Error(a(330));gc(l,t)}}for(g=t.current.firstEffect;null!==g;)t=g.nextEffect,g.nextEffect=null,8&g.flags&&(g.sibling=null,g.stateNode=null),g=t;return tl=e,je(),!0}function ac(t,e,i){Fi(t,e=Gs(0,e=Bs(i,e),1)),e=El(),null!==(t=Yl(t,1))&&(he(t,1,e),Hl(t,e))}function gc(t,e){if(3===t.tag)ac(t,t,e);else for(var i=t.return;null!==i;){if(3===i.tag){ac(i,t,e);break}if(1===i.tag){var n=i.stateNode;if("function"==typeof i.type.getDerivedStateFromError||"function"==typeof n.componentDidCatch&&(null===Ql||!Ql.has(n))){var s=Us(i,t=Bs(e,t),1);if(Fi(i,s),s=El(),null!==(i=Yl(i,1)))he(i,1,s),Hl(i,s);else if("function"==typeof n.componentDidCatch&&(null===Ql||!Ql.has(n)))try{n.componentDidCatch(e,t)}catch(t){}break}}i=i.return}}function Ic(t,e,i){var n=t.pingCache;null!==n&&n.delete(e),e=El(),t.pingedLanes|=t.suspendedLanes&i,el===t&&(nl&i)===i&&(4===cl||3===cl&&(62914560&nl)===nl&&500>ze()-bl?Dl(t,0):ol|=i),Hl(t,e)}function dc(t,e){var i=t.stateNode;null!==i&&i.delete(e),0==(e=0)&&(0==(2&(e=t.mode))?e=1:0==(4&e)?e=99===we()?1:2:(0===Xl&&(Xl=gl),0===(e=Ue(62914560&~Xl))&&(e=4194304))),i=El(),null!==(t=Yl(t,e))&&(he(t,e,i),Hl(t,i))}Fl=function(t,e,i){var n=e.lanes;if(null!==t)if(t.memoizedProps!==e.pendingProps||ie.current)kn=!0;else{if(0==(i&n)){switch(kn=!1,e.tag){case 3:qn(e),qi();break;case 5:Mi(e);break;case 1:le(e.type)&&Ie(e);break;case 4:Hi(e,e.stateNode.containerInfo);break;case 10:ai(e,e.memoizedProps.value);break;case 13:if(null!==e.memoizedState)return 0!=(i&e.child.childLanes)?ss(t,e,i):($t(ki,1&ki.current),null!==(e=Is(t,e,i))?e.sibling:null);$t(ki,1&ki.current);break;case 19:if(n=0!=(i&e.childLanes),0!=(64&t.flags)){if(n)return gs(t,e,i);e.flags|=64}var s=e.memoizedState;if(null!==s&&(s.rendering=null,s.tail=null,s.lastEffect=null),$t(ki,ki.current),n)break;return null;case 23:case 24:return e.lanes=0,Kn(t,e,i)}return Is(t,e,i)}kn=0!=(16384&t.flags)}else kn=!1;switch(e.lanes=0,e.tag){case 2:if(n=e.type,null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),t=e.pendingProps,s=se(e,ee.current),di(e,i),s=rn(null,e,n,t,s,i),e.flags|=1,"object"==typeof s&&null!==s&&"function"==typeof s.render&&void 0===s.$$typeof){if(e.tag=1,e.memoizedState=null,e.updateQueue=null,le(n)){var l=!0;Ie(e)}else l=!1;e.memoizedState=null!==s.state&&void 0!==s.state?s.state:null,bi(e);var c=n.getDerivedStateFromProps;"function"==typeof c&&hi(e,n,c,t),s.updater=mi,e.stateNode=s,s._reactInternals=e,Zi(e,n,t,i),e=_n(null,e,n,!0,l,i)}else e.tag=0,zn(null,e,s,i),e=e.child;return e;case 16:s=e.elementType;t:{switch(null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),t=e.pendingProps,s=(l=s._init)(s._payload),e.type=s,l=e.tag=function(t){if("function"==typeof t)return Qc(t)?1:0;if(null!=t){if((t=t.$$typeof)===F)return 11;if(t===U)return 14}return 2}(s),t=ei(s,t),l){case 0:e=Pn(null,e,s,t,i);break t;case 1:e=On(null,e,s,t,i);break t;case 11:e=wn(null,e,s,t,i);break t;case 14:e=Tn(null,e,s,ei(s.type,t),n,i);break t}throw Error(a(306,s,""))}return e;case 0:return n=e.type,s=e.pendingProps,Pn(t,e,n,s=e.elementType===n?s:ei(n,s),i);case 1:return n=e.type,s=e.pendingProps,On(t,e,n,s=e.elementType===n?s:ei(n,s),i);case 3:if(qn(e),n=e.updateQueue,null===t||null===n)throw Error(a(282));if(n=e.pendingProps,s=null!==(s=e.memoizedState)?s.element:null,ui(t,e),Gi(e,n,null,i),(n=e.memoizedState.element)===s)qi(),e=Is(t,e,i);else{if((l=(s=e.stateNode).hydrate)&&(q?(Ti=Mt(e.stateNode.containerInfo),wi=e,l=Di=!0):l=!1),l){if(q&&null!=(t=s.mutableSourceEagerHydrationData))for(s=0;s<t.length;s+=2)l=t[s],c=t[s+1],P?l._workInProgressVersionPrimary=c:l._workInProgressVersionSecondary=c,$i.push(l);for(i=Wi(e,null,n,i),e.child=i;i;)i.flags=-3&i.flags|1024,i=i.sibling}else zn(t,e,n,i),qi();e=e.child}return e;case 5:return Mi(e),null===t&&Pi(e),n=e.type,s=e.pendingProps,l=null!==t?t.memoizedProps:null,c=s.children,w(n,s)?c=null:null!==l&&w(n,l)&&(e.flags|=16),jn(t,e),zn(t,e,c,i),e.child;case 6:return null===t&&Pi(e),null;case 13:return ss(t,e,i);case 4:return Hi(e,e.stateNode.containerInfo),n=e.pendingProps,null===t?e.child=Ai(e,null,n,i):zn(t,e,n,i),e.child;case 11:return n=e.type,s=e.pendingProps,wn(t,e,n,s=e.elementType===n?s:ei(n,s),i);case 7:return zn(t,e,e.pendingProps,i),e.child;case 8:case 12:return zn(t,e,e.pendingProps.children,i),e.child;case 10:t:{if(n=e.type._context,s=e.pendingProps,c=e.memoizedProps,ai(e,l=s.value),null!==c){var g=c.value;if(0==(l=_e(g,l)?0:0|("function"==typeof n._calculateChangedBits?n._calculateChangedBits(g,l):1073741823))){if(c.children===s.children&&!ie.current){e=Is(t,e,i);break t}}else for(null!==(g=e.child)&&(g.return=e);null!==g;){var I=g.dependencies;if(null!==I){c=g.child;for(var d=I.firstContext;null!==d;){if(d.context===n&&0!=(d.observedBits&l)){1===g.tag&&((d=Bi(-1,i&-i)).tag=2,Fi(g,d)),g.lanes|=i,null!==(d=g.alternate)&&(d.lanes|=i),Ii(g.return,i),I.lanes|=i;break}d=d.next}}else c=10===g.tag&&g.type===e.type?null:g.child;if(null!==c)c.return=g;else for(c=g;null!==c;){if(c===e){c=null;break}if(null!==(g=c.sibling)){g.return=c.return,c=g;break}c=c.return}g=c}}zn(t,e,s.children,i),e=e.child}return e;case 9:return s=e.type,n=(l=e.pendingProps).children,di(e,i),n=n(s=oi(s,l.unstable_observedBits)),e.flags|=1,zn(t,e,n,i),e.child;case 14:return l=ei(s=e.type,e.pendingProps),Tn(t,e,s,l=ei(s.type,l),n,i);case 15:return Dn(t,e,e.type,e.pendingProps,n,i);case 17:return n=e.type,s=e.pendingProps,s=e.elementType===n?s:ei(n,s),null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),e.tag=1,le(n)?(t=!0,Ie(e)):t=!1,di(e,i),pi(e,n,s),Zi(e,n,s,i),_n(null,e,n,!0,t,i);case 19:return gs(t,e,i);case 23:case 24:return Kn(t,e,i)}throw Error(a(156,e.tag))};var oc={current:!1},rc=c.unstable_flushAllWithoutAsserting,bc="function"==typeof rc;function uc(){if(void 0!==rc)return rc();for(var t=!1;nc();)t=!0;return t}function Bc(e){try{uc(),function(e){if(null===Ps)try{var i=("require"+Math.random()).slice(0,7);Ps=(t&&t[i]).call(t,"timers").setImmediate}catch(t){Ps=function(t){var e=new MessageChannel;e.port1.onmessage=t,e.port2.postMessage(void 0)}}Ps(e)}((function(){uc()?Bc(e):e()}))}catch(t){e(t)}}var Fc=0,Cc=!1;function Gc(t,e,i,n){this.tag=t,this.key=i,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=e,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=n,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Uc(t,e,i,n){return new Gc(t,e,i,n)}function Qc(t){return!(!(t=t.prototype)||!t.isReactComponent)}function hc(t,e){var i=t.alternate;return null===i?((i=Uc(t.tag,e,t.key,t.mode)).elementType=t.elementType,i.type=t.type,i.stateNode=t.stateNode,i.alternate=t,t.alternate=i):(i.pendingProps=e,i.type=t.type,i.flags=0,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null),i.childLanes=t.childLanes,i.lanes=t.lanes,i.child=t.child,i.memoizedProps=t.memoizedProps,i.memoizedState=t.memoizedState,i.updateQueue=t.updateQueue,e=t.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext},i.sibling=t.sibling,i.index=t.index,i.ref=t.ref,i}function mc(t,e,i,n,s,l){var c=2;if(n=t,"function"==typeof t)Qc(t)&&(c=1);else if("string"==typeof t)c=5;else t:switch(t){case o:return xc(i.children,s,l,e);case m:c=8,s|=16;break;case r:c=8,s|=1;break;case b:return(t=Uc(12,i,e,8|s)).elementType=b,t.type=b,t.lanes=l,t;case C:return(t=Uc(13,i,e,s)).type=C,t.elementType=C,t.lanes=l,t;case G:return(t=Uc(19,i,e,s)).elementType=G,t.lanes=l,t;case x:return pc(i,s,l,e);case p:return(t=Uc(24,i,e,s)).elementType=p,t.lanes=l,t;default:if("object"==typeof t&&null!==t)switch(t.$$typeof){case u:c=10;break t;case B:c=9;break t;case F:c=11;break t;case U:c=14;break t;case Q:c=16,n=null;break t;case h:c=22;break t}throw Error(a(130,null==t?t:typeof t,""))}return(e=Uc(c,i,e,s)).elementType=t,e.type=n,e.lanes=l,e}function xc(t,e,i,n){return(t=Uc(7,t,n,e)).lanes=i,t}function pc(t,e,i,n){return(t=Uc(23,t,n,e)).elementType=x,t.lanes=i,t}function Vc(t,e,i){return(t=Uc(6,t,null,e)).lanes=i,t}function Zc(t,e,i){return(e=Uc(4,null!==t.children?t.children:[],t.key,e)).lanes=i,e.stateNode={containerInfo:t.containerInfo,pendingChildren:null,implementation:t.implementation},e}function Rc(t,e,i){this.tag=e,this.containerInfo=t,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=j,this.pendingContext=this.context=null,this.hydrate=i,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Qe(0),this.expirationTimes=Qe(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Qe(0),q&&(this.mutableSourceEagerHydrationData=null)}function yc(t){var e=t._reactInternals;if(void 0===e){if("function"==typeof t.render)throw Error(a(188));throw Error(a(268,Object.keys(t)))}return null===(t=W(e))?null:t.stateNode}function Lc(t,e){if(null!==(t=t.memoizedState)&&null!==t.dehydrated){var i=t.retryLane;t.retryLane=0!==i&&i<e?i:e}}function Xc(t,e){Lc(t,e),(t=t.alternate)&&Lc(t,e)}function Ac(t){return null===(t=W(t))?null:t.stateNode}function Wc(){return null}return n.IsThisRendererActing=oc,n.act=function(t){function e(){Fc--,$s.current=i,oc.current=n}!1===Cc&&(Cc=!0,console.error("act(...) is not supported in production builds of React, and might not behave as expected.")),Fc++;var i=$s.current,n=oc.current;$s.current=!0,oc.current=!0;try{var s=kl(t)}catch(t){throw e(),t}if(null!==s&&"object"==typeof s&&"function"==typeof s.then)return{then:function(t,n){s.then((function(){1<Fc||!0===bc&&!0===i?(e(),t()):Bc((function(i){e(),i?n(i):t()}))}),(function(t){e(),n(t)}))}};try{1!==Fc||!1!==bc&&!1!==i||uc(),e()}catch(t){throw e(),t}return{then:function(t){t()}}},n.attemptContinuousHydration=function(t){13===t.tag&&(vl(t,67108864,El()),Xc(t,67108864))},n.attemptHydrationAtCurrentPriority=function(t){if(13===t.tag){var e=El(),i=Nl(t);vl(t,i,e),Xc(t,i)}},n.attemptSynchronousHydration=function(t){switch(t.tag){case 3:var e=t.stateNode;if(e.hydrate){var i=Be(e.pendingLanes);e.expiredLanes|=i&e.pendingLanes,Hl(e,ze()),0==(48&tl)&&(Bl(),je())}break;case 13:var n=El();zl((function(){return vl(t,1,n)})),Xc(t,4)}},n.attemptUserBlockingHydration=function(t){13===t.tag&&(vl(t,4,El()),Xc(t,4))},n.batchedEventUpdates=function(t,e){var i=tl;tl|=2;try{return t(e)}finally{0===(tl=i)&&(Bl(),je())}},n.batchedUpdates=kl,n.createComponentSelector=function(t){return{$$typeof:Hs,value:t}},n.createContainer=function(t,e,i){return t=new Rc(t,e,i),e=Uc(3,null,null,2===e?7:1===e?3:0),t.current=e,e.stateNode=t,bi(e),t},n.createHasPsuedoClassSelector=function(t){return{$$typeof:Js,value:t}},n.createPortal=function(t,e,i){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:d,key:null==n?null:""+n,children:t,containerInfo:e,implementation:i}},n.createRoleSelector=function(t){return{$$typeof:Ms,value:t}},n.createTestNameSelector=function(t){return{$$typeof:fs,value:t}},n.createTextSelector=function(t){return{$$typeof:ks,value:t}},n.deferredUpdates=function(t){return De(97,t)},n.discreteUpdates=function(t,e,i,n,s){var l=tl;tl|=4;try{return De(98,t.bind(null,e,i,n,s))}finally{0===(tl=l)&&(Bl(),je())}},n.findAllNodes=js,n.findBoundingRects=function(t,e){if(!lt)throw Error(a(363));e=js(t,e),t=[];for(var i=0;i<e.length;i++)t.push(at(e[i]));for(e=t.length-1;0<e;e--)for(var n=(i=t[e]).x,s=n+i.width,l=i.y,c=l+i.height,g=e-1;0<=g;g--)if(e!==g){var I=t[g],d=I.x,o=d+I.width,r=I.y,b=r+I.height;if(n>=d&&l>=r&&s<=o&&c<=b){t.splice(e,1);break}if(!(n!==d||i.width!==I.width||b<l||r>c)){r>l&&(I.height+=r-l,I.y=l),b<c&&(I.height=c-r),t.splice(e,1);break}if(!(l!==r||i.height!==I.height||o<n||d>s)){d>n&&(I.width+=d-n,I.x=n),o<s&&(I.width=s-d),t.splice(e,1);break}}return t},n.findHostInstance=yc,n.findHostInstanceWithNoPortals=function(t){return null===(t=function(t){if(!(t=A(t)))return null;for(var e=t;;){if(5===e.tag||6===e.tag)return e;if(e.child&&4!==e.tag)e.child.return=e,e=e.child;else{if(e===t)break;for(;!e.sibling;){if(!e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}}return null}(t))?null:20===t.tag?t.stateNode.instance:t.stateNode},n.findHostInstanceWithWarning=function(t){return yc(t)},n.flushControlled=function(t){var e=tl;tl|=1;try{De(99,t)}finally{0===(tl=e)&&(Bl(),je())}},n.flushDiscreteUpdates=function(){0==(49&tl)&&(function(){if(null!==Zl){var t=Zl;Zl=null,t.forEach((function(t){t.expiredLanes|=24&t.pendingLanes,Hl(t,ze())}))}je()}(),nc())},n.flushPassiveEffects=nc,n.flushSync=zl,n.focusWithin=function(t,e){if(!lt)throw Error(a(363));for(e=Ks(t=ws(t),e),e=Array.from(e),t=0;t<e.length;){var i=e[t++];if(!It(i)){if(5===i.tag&&ot(i.stateNode))return!0;for(i=i.child;null!==i;)e.push(i),i=i.sibling}}return!1},n.getCurrentUpdateLanePriority=function(){return be},n.getFindAllNodesFailureDescription=function(t,e){if(!lt)throw Error(a(363));var i=0,n=[];t=[ws(t),0];for(var s=0;s<t.length;){var l=t[s++],c=t[s++],g=e[c];if((5!==l.tag||!It(l))&&(Ts(l,g)&&(n.push(Ds(g)),++c>i&&(i=c)),c<e.length))for(l=l.child;null!==l;)t.push(l,c),l=l.sibling}if(i<e.length){for(t=[];i<e.length;i++)t.push(Ds(e[i]));return"findAllNodes was able to match part of the selector:\n  "+n.join(" > ")+"\n\nNo matching component was found for:\n  "+t.join(" > ")}return null},n.getPublicRootInstance=function(t){if(!(t=t.current).child)return null;switch(t.child.tag){case 5:return N(t.child.stateNode);default:return t.child.stateNode}},n.injectIntoDevTools=function(t){if(t={bundleType:t.bundleType,version:t.version,rendererPackageName:t.rendererPackageName,rendererConfig:t.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:g.ReactCurrentDispatcher,findHostInstanceByFiber:Ac,findFiberByHostInstance:t.findFiberByHostInstance||Wc,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null},"undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)t=!1;else{var e=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!e.isDisabled&&e.supportsFiber)try{oe=e.inject(t),re=e}catch(t){}t=!0}return t},n.observeVisibleRects=function(t,e,i,n){if(!lt)throw Error(a(363));t=js(t,e);var s=rt(t,i,n).disconnect;return{disconnect:function(){s()}}},n.registerMutableSourceForHydration=function(t,e){var i=e._getVersion;i=i(e._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[e,i]:t.mutableSourceEagerHydrationData.push(e,i)},n.runWithPriority=function(t,e){var i=be;try{return be=t,e()}finally{be=i}},n.shouldSuspend=function(){return!1},n.unbatchedUpdates=function(t,e){var i=tl;tl&=-2,tl|=8;try{return t(e)}finally{0===(tl=i)&&(Bl(),je())}},n.updateContainer=function(t,e,i,n){var s=e.current,l=El(),c=Nl(s);t:if(i){e:{if(L(i=i._reactInternals)!==i||1!==i.tag)throw Error(a(170));var g=i;do{switch(g.tag){case 3:g=g.stateNode.context;break e;case 1:if(le(g.type)){g=g.stateNode.__reactInternalMemoizedMergedChildContext;break e}}g=g.return}while(null!==g);throw Error(a(171))}if(1===i.tag){var I=i.type;if(le(I)){i=ge(i,I,g);break t}}i=g}else i=te;return null===e.context?e.context=i:e.pendingContext=i,(e=Bi(l,c)).payload={element:t},null!==(n=void 0===n?null:n)&&(e.callback=n),Fi(s,e),vl(s,c,l),c},n}},962:(t,e,i)=>{"use strict";t.exports=i(166)},803:(t,e,i)=>{"use strict";i.d(e,{Xz:()=>_,gy:()=>m,nH:()=>y,z6:()=>Z,xQ:()=>w,U2:()=>K,Ky:()=>T});var n=i(654),s=i(955),l=i(962),c=i.n(l),a=i(616),g=i(784),I=i(723),d=i(378),o=i.n(d);const r=[];function b(t,e,i,n=0,s=!1){for(const t of e)if(o()(i,t.args)){if(s)return;if(t.error)throw t.error;if(t.response)return t.response;throw t.promise}const l={args:i,promise:t(...i).then((t=>l.response=null==t||t)).catch((t=>l.error=null!=t?t:"unknown error")).then((()=>{n>0&&setTimeout((()=>{const t=e.indexOf(l);-1!==t&&e.splice(t,1)}),n)}))};if(e.push(l),!s)throw l.promise}function u(t,...e){return(0,g.useMemo)((()=>b(t,r,e,u.lifespan)),e)}u.lifespan=0,u.clear=(...t)=>function(t,...e){if(void 0===e)t.splice(0,t.length);else{const i=t.find((t=>o()(e,t.args)));if(i){const e=t.indexOf(i);-1!==e&&t.splice(e,1)}}}(r,...t),u.preload=(t,...e)=>{b(t,r,e,u.lifespan,!0)},u.peek=(...t)=>{var e;return null==(e=r.find((e=>o()(t,e.args))))?void 0:e.response};var B=i(731);const F=new Map,C={},G={obj:t=>t===Object(t)&&!G.arr(t),fun:t=>"function"==typeof t,str:t=>"string"==typeof t,num:t=>"number"==typeof t,und:t=>void 0===t,arr:t=>Array.isArray(t),equ(t,e){if(typeof t!=typeof e||!!t!=!!e)return!1;if(G.str(t)||G.num(t)||G.obj(t))return t===e;if(G.arr(t)&&t==e)return!0;let i;for(i in t)if(!(i in e))return!1;for(i in e)if(t[i]!==e[i])return!1;return!G.und(i)||t===e}};let U=[],Q=[],h=[];const m=t=>function(t,e){const i=e.length;return e.push(t),()=>{e.splice(i,1)}}(t,U);function x(t,e,i=0,n=!1){let s;if(n)for(s=0;s<U.length;s++)U[s](e),i++;const l=t.current.clock.getDelta();for(s=0;s<t.current.subscribers.length;s++)t.current.subscribers[s].ref.current(t.current,l);if(t.current.frames=Math.max(0,t.current.frames-1),i+=t.current.invalidateFrameloop?t.current.frames:1,!t.current.manual&&t.current.gl.render&&t.current.gl.render(t.current.scene,t.current.camera),n)for(s=0;s<Q.length;s++)Q[s](e);return i}let p=!1;function V(t){p=!0;let e,i=0;for(e=0;e<U.length;e++)U[e](t),i++;for(F.forEach((e=>{const n=e.containerInfo.__state;i=n.current.active&&n.current.ready&&(!n.current.invalidateFrameloop||n.current.frames>0)?x(n,t,i):0})),e=0;e<Q.length;e++)Q[e](t);if(0!==i)return requestAnimationFrame(V);for(e=0;e<h.length;e++)h[e](t);p=!1}function Z(t=!0,e=1){if(!0===t)F.forEach((t=>{const i=t.containerInfo.__state;i.current.frames=i.current.ready?i.current.frames+e:e}));else if(t&&t.current){if(t.current.vr)return;t.current.frames=t.current.ready?t.current.frames+e:e}p||(p=!0,requestAnimationFrame(V))}let R={};function y(t,e,i={},n=!1){const l=t.__container,c=[],a=[];let g,I=Object.keys(e);for(g=0;g<I.length;g++)G.equ(e[I[g]],i[I[g]])&&c.push(I[g]),G.fun(e[I[g]])&&I[g].startsWith("on")&&(I[g].includes("Pointer")||I[g].includes("Click")||I[g].includes("ContextMenu")||I[g].includes("Wheel"))&&a.push(I[g]);const d=[];if(I=Object.keys(i),n)for(g=0;g<I.length;g++)void 0===e[I[g]]&&d.push(I[g]);const o=[...c,"children","key","ref"];t.__instance&&o.push("object");const r={...e};for(I=Object.keys(r),g=0;g<I.length;g++)o.indexOf(I[g])>-1&&delete r[I[g]];for(I=Object.keys(d),g=0;g<I.length;g++)"children"!==I[g]&&(r[I[g]]=void 0);const b=Object.entries(r);if(b.length>0){if(b.forEach((([e,i])=>{if(!a.includes(e)){var n,l;let c=t,a=c[e];if(e.includes("-")){const i=e.split("-");if(a=i.reduce(((t,e)=>t[e]),t),!a||!a.set){const[n,...s]=i.reverse();c=s.reverse().reduce(((t,e)=>t[e]),t),e=n}}const g=null==(n=t.__container)||null==(l=n.__state)?void 0:l.current.colorManagement;a&&a.set&&(a.copy||a instanceof s.Layers)?Array.isArray(i)?a.set(...i):a.copy&&i&&i.constructor&&a.constructor.name===i.constructor.name?a.copy(i):void 0!==i&&(a.set(i),g&&a instanceof s.Color&&a.convertSRGBToLinear()):(c[e]=i,g&&c[e]instanceof s.Texture&&(c[e].encoding=s.sRGBEncoding)),L(t)}})),n&&l&&t.raycast&&t.__handlers){t.__handlers=void 0;const e=l.__interaction.indexOf(t);e>-1&&l.__interaction.splice(e,1)}a.length&&(n&&l&&t.raycast&&l.__interaction.push(t),t.__handlers=a.reduce(((t,i)=>(t[i.charAt(2).toLowerCase()+i.substr(3)]=e[i],t)),{})),t.parent&&X(t)}}function L(t){t.__container&&t.__container.__state&&Z(t.__container.__state)}function X(t){t.onUpdate&&t.onUpdate(t)}function A(t,{args:e=[],...i},n,l,c){let a,g=`${t[0].toUpperCase()}${t.slice(1)}`;if("primitive"===t)a=(i={dispose:null,...i}).object,a.__instance=!0,a.__dispose=a.dispose;else{const t=R[g]||s[g];if(!t)throw`"${g}" is not part of the THREE namespace! Did you forget to extend it? See: https://github.com/pmndrs/react-three-fiber/blob/master/markdown/api.md#using-3rd-party-objects-declaratively`;a=G.arr(e)?new t(...e):new t(e)}for(;n.__container;)n=n.__container;if(!F.has(n)){const t=e=>e.return?t(e.return):e.stateNode&&e.stateNode.containerInfo;n=t(c)}return a.__objects=[],a.__container=n,g.endsWith("Geometry")?i={attach:"geometry",...i}:g.endsWith("Material")&&(i={attach:"material",...i}),y(a,i,{}),a}function W(t,e){e&&(e.isObject3D?t.add(e):(t.__objects.push(e),e.parent=t,e.attachArray?(G.arr(t[e.attachArray])||(t[e.attachArray]=[]),t[e.attachArray].push(e)):e.attachObject?(G.obj(t[e.attachObject[0]])||(t[e.attachObject[0]]={}),t[e.attachObject[0]][e.attachObject[1]]=e):e.attach&&(t[e.attach]=e)),X(e),L(e))}function S(t,e,i){if(e){if(e.isObject3D){e.parent=t,e.dispatchEvent({type:"added"});const n=t.children.filter((t=>t!==e)),s=n.indexOf(i);t.children=[...n.slice(0,s),e,...n.slice(s)],X(e)}else W(t,e);L(e)}}function E(t,e,i=!1){t&&(i?[...t]:t).forEach((t=>N(e,t)))}function N(t,e){e&&(e.isObject3D?t.remove(e):(e.parent=null,t.__objects&&(t.__objects=t.__objects.filter((t=>t!==e))),e.attachArray?t[e.attachArray]=t[e.attachArray].filter((t=>t!==e)):e.attachObject?delete t[e.attachObject[0]][e.attachObject[1]]:e.attach&&(t[e.attach]=null)),e.__container&&(e.__container.__interaction=e.__container.__interaction.filter((t=>t!==e))),L(e),null!==e.dispose&&(0,a.unstable_runWithPriority)(a.unstable_IdlePriority,(()=>{E(e.__objects,e),E(e.children,e,!0),e.dispose&&"Scene"!==e.type?e.dispose():e.__dispose&&e.__dispose(),delete e.__container,delete e.__objects})))}function v(t,e,i,n){const s=t.parent,l=A(e,i,t.__container,0,n);N(s,t),W(s,l),[n,n.alternate].forEach((t=>{null!==t&&(t.stateNode=l,t.ref&&(G.fun(t.ref)?t.ref(l):t.ref.current=l))}))}const Y=c()({now:a.unstable_now,createInstance:A,removeChild:N,appendChild:W,insertBefore:S,warnsIfNotActing:!0,supportsMutation:!0,isPrimaryRenderer:!1,scheduleTimeout:G.fun(setTimeout)?setTimeout:void 0,cancelTimeout:G.fun(clearTimeout)?clearTimeout:void 0,setTimeout:G.fun(setTimeout)?setTimeout:void 0,clearTimeout:G.fun(clearTimeout)?clearTimeout:void 0,noTimeout:-1,appendInitialChild:W,appendChildToContainer:W,removeChildFromContainer:N,insertInContainerBefore:S,commitUpdate(t,e,i,n,s,l){if(t.__instance&&s.object&&s.object!==t)v(t,i,s,l);else{const{args:e=[],...c}=s,{args:a=[],...g}=n;e.some(((t,e)=>G.obj(t)?Object.entries(t).some((([t,i])=>i!==a[e][t])):t!==a[e]))?v(t,i,s,l):y(t,c,g,!0)}},hideInstance(t){t.isObject3D&&(t.visible=!1,L(t))},unhideInstance(t,e){(t.isObject3D&&null==e.visible||e.visible)&&(t.visible=!0,L(t))},hideTextInstance(){throw new Error("Text is not allowed in the react-three-fibre tree. You may have extraneous whitespace between components.")},getPublicInstance:t=>t,getRootHostContext:()=>C,getChildHostContext:()=>C,createTextInstance(){},finalizeInitialChildren:t=>t.__handlers,commitMount(t){const e=t.__container;e&&t.raycast&&t.__handlers&&e.__interaction.push(t)},prepareUpdate:()=>C,shouldDeprioritizeSubtree:()=>!1,prepareForCommit:()=>null,preparePortalMount:()=>null,resetAfterCommit(){},shouldSetTextContent:()=>!1,clearContainer:()=>!1});function H(t){return t.isOrthographicCamera}function J(t){return(t.eventObject||t.object).uuid+"/"+t.index}G.fun(Symbol)&&Symbol.for&&Symbol.for("react.portal"),Y.injectIntoDevTools({bundleType:0,findHostInstanceByFiber:()=>null,version:"5.3.19",rendererPackageName:"react-three-fiber"});const M=(0,g.createContext)({});function f(t,e,i=(t=>!0)){e.filter(i).forEach((e=>{var i,n;return null==(i=(n=e.__handlers).pointerMissed)?void 0:i.call(n,t)}))}function k(t){t.dispose&&"Scene"!==t.type&&t.dispose();for(const e in t)"object"==typeof e&&e.dispose&&e.dispose(),delete t[e]}function z(t){let e=(0,g.useContext)(t);if(!("subscribe"in e))throw new Error("⚡️ react-three-fiber hooks can only be used within the Canvas component! https://github.com/pmndrs/react-three-fiber/blob/master/markdown/api.md#hooks");return e}function w(t,e=0){const{subscribe:i}=z(M),n=(0,g.useRef)(t);return(0,g.useLayoutEffect)((()=>{n.current=t}),[t]),(0,g.useEffect)((()=>{const t=i(n,e);return()=>t()}),[e,i]),null}function T(){return z(M)}function D(t,e){return function(i,...n){const s=new i;return t&&t(s),Promise.all(n.map((t=>new Promise(((i,n)=>s.load(t,(t=>{t.scene&&Object.assign(t,function(t){const e={nodes:{},materials:{}};return t&&t.traverse((t=>{t.name&&(e.nodes[t.name]=t),t.material&&!e.materials[t.material.name]&&(e.materials[t.material.name]=t.material)})),e}(t.scene)),i(t)}),e,(e=>{var i;return n(null!=(i=e.message)?i:`failure loading ${t}`)})))))))}}function K(t,e,i,n){const s=Array.isArray(e)?e:[e],l=u(D(i,n),t,...s);return Array.isArray(e)?l:l[0]}K.preload=function(t,e,i){const n=Array.isArray(e)?e:[e];return u.preload(D(i),t,...n)};const j={position:"relative",width:"100%",height:"100%",overflow:"hidden"};function P({children:t,setEvents:e,container:i,renderer:n,effects:l,...c}){const[a]=(0,g.useState)(n);a||console.warn("No renderer created!"),(0,g.useEffect)((()=>{l&&l(a,i)}),[i,l,a]);const d=(t=>{const{children:e,gl:i,camera:n,orthographic:l,raycaster:c,size:a,pixelRatio:d,vr:o=!1,concurrent:r=!1,shadowMap:b=!1,colorManagement:u=!0,invalidateFrameloop:B=!1,updateDefaultCamera:C=!0,noEvents:G=!1,onCreated:U,onPointerMissed:Q,forceResize:h}=t,[m,p]=(0,g.useState)(!1),[V]=(0,g.useState)((()=>new s.Vector2)),[R]=(0,g.useState)((()=>{const t=new s.Raycaster;if(c){const{filter:e,computeOffsets:i,...n}=c;y(t,n,{})}return t})),[L]=(0,g.useState)((()=>{const t=new s.Scene;return t.__interaction=[],t.__objects=[],t})),[X,A]=(0,g.useState)((()=>{const t=l?new s.OrthographicCamera(0,0,0,0,.1,1e3):new s.PerspectiveCamera(75,0,.1,1e3);return t.position.z=5,n&&y(t,n,{}),t.lookAt(0,0,0),t})),[W]=(0,g.useState)((()=>new s.Clock)),S=(0,g.useRef)({ready:!1,active:!0,manual:0,colorManagement:u,vr:o,concurrent:r,noEvents:G,invalidateFrameloop:!1,frames:0,aspect:0,subscribers:[],camera:X,scene:L,raycaster:R,mouse:V,clock:W,gl:i,size:a,viewport:null,initialClick:[0,0],initialHits:[],pointer:new I.TinyEmitter,captured:void 0,events:void 0,subscribe:(t,e=0)=>(e&&S.current.manual++,S.current.subscribers.push({ref:t,priority:e}),S.current.subscribers=S.current.subscribers.sort(((t,e)=>t.priority-e.priority)),()=>{var i;(null==(i=S.current)?void 0:i.subscribers)&&(e&&S.current.manual--,S.current.subscribers=S.current.subscribers.filter((e=>e.ref!==t)))}),setDefaultCamera:t=>A(t),invalidate:()=>Z(S),intersect:(t={},e=!0)=>_(t,e),forceResize:h}),E=new s.Vector3,N=(0,g.useCallback)(((t=S.current.camera,e=new s.Vector3(0,0,0))=>{const{width:i,height:n}=S.current.size,l=t.getWorldPosition(E).distanceTo(e);if(H(t))return{width:i/t.zoom,height:n/t.zoom,factor:1,distance:l};{const e=t.fov*Math.PI/180,s=2*Math.tan(e/2)*l,c=s*(i/n);return{width:c,height:s,factor:i/c,distance:l}}}),[]);(0,g.useMemo)((()=>{S.current.ready=m,S.current.size=a,S.current.camera=X,S.current.invalidateFrameloop=B,S.current.vr=o,S.current.gl=i,S.current.concurrent=r,S.current.noEvents=G,S.current.viewport=N}),[B,o,r,G,m,a,X,i]),(0,g.useMemo)((()=>{S.current.aspect=a.width/a.height,Object.assign(S.current.viewport,N()),C&&(H(X)?(X.left=a.width/-2,X.right=a.width/2,X.top=a.height/2,X.bottom=a.height/-2):X.aspect=S.current.aspect,X.updateProjectionMatrix(),X.updateMatrixWorld()),i.setSize(a.width,a.height),m&&Z(S)}),[X,i,a,C,m]);const v=(0,g.useRef)(null);(0,g.useMemo)((()=>{const{ready:t,manual:e,vr:i,noEvents:n,invalidateFrameloop:s,frames:l,subscribers:c,captured:a,initialClick:g,initialHits:I,...d}=S.current;v.current=d}),[a,X]),(0,g.useLayoutEffect)((()=>{d&&(Array.isArray(d)?i.setPixelRatio(Math.max(Math.min(d[0],window.devicePixelRatio),d[1])):i.setPixelRatio(d))}),[i,d]),(0,g.useLayoutEffect)((()=>{b&&(i.shadowMap.enabled=!0,"object"==typeof b?Object.assign(i.shadowMap,b):i.shadowMap.type=s.PCFSoftShadowMap),u&&(i.toneMapping=s.ACESFilmicToneMapping,i.outputEncoding=s.sRGBEncoding)}),[b,u]);const z=(0,g.useMemo)((()=>new Map),[]),w=new s.Vector3,T=(0,g.useCallback)((t=>{const e=(null==c||null==c.computeOffsets?void 0:c.computeOffsets(t,v.current))||t.nativeEvent;if(e){const{offsetX:t,offsetY:i}=e,{width:n,height:s}=S.current.size;V.set(t/n*2-1,-i/s*2+1),R.setFromCamera(V,S.current.camera)}}),[]),D=(0,g.useCallback)((t=>{if(S.current.noEvents)return[];const e=new Set,i=[],n=t?t(S.current.scene.__interaction):S.current.scene.__interaction;let s=R.intersectObjects(n,!0).filter((t=>{const i=J(t);return!e.has(i)&&(e.add(i),!0)}));c&&c.filter&&v.current&&(s=c.filter(s,v.current));for(const t of s){let e=t.object;for(;e;)e.__handlers&&i.push({...t,eventObject:e}),e=e.parent}return i}),[]),K=(0,g.useCallback)((t=>{const e=t.nativeEvent.offsetX-S.current.initialClick[0],i=t.nativeEvent.offsetY-S.current.initialClick[1];return Math.round(Math.sqrt(e*e+i*i))}),[]),j=(0,g.useCallback)(((t,e,i=!0)=>{S.current.pointer.emit("pointerCancel",t),i&&T(t),Array.from(z.values()).forEach((t=>{if(e&&(!e.length||!e.find((e=>e.object===t.object&&e.index===t.index)))){const i=t.eventObject.__handlers;if(z.delete(J(t)),i){const n={...t,intersections:e||[]};i.pointerOut&&i.pointerOut({...n,type:"pointerout"}),i.pointerLeave&&i.pointerLeave({...n,type:"pointerleave"})}}}))}),[]),P=(0,g.useCallback)(((t,e)=>{const i=D(e);return S.current.captured&&"click"!==t.type&&"wheel"!==t.type&&S.current.captured.forEach((t=>{i.find((e=>e.eventObject===t.eventObject))||i.push(t)})),i}),[]),O=(0,g.useCallback)(((t,e,i)=>{if(t.length){const n=w.set(V.x,V.y,0).unproject(S.current.camera),s="click"===e.type?K(e):0,l=t=>e.target.releasePointerCapture(t),c={stopped:!1,captured:!1};for(const a of t){const g=t=>{c.captured||(c.captured=!0,S.current.captured=[]),S.current.captured&&S.current.captured.push(a),e.target.setPointerCapture(t)},I={...e,...a,intersections:t,stopped:c.stopped,delta:s,unprojectedPoint:n,ray:R.ray,camera:S.current.camera,stopPropagation:()=>{const e=S.current.captured;if((!e||e.find((t=>t.eventObject.id===a.eventObject.id)))&&(I.stopped=c.stopped=!0,z.size&&Array.from(z.values()).find((t=>t.eventObject===a.eventObject)))){const e=t.slice(0,t.indexOf(a));j(I,[...e,a])}},target:{...e.target,setPointerCapture:g,releasePointerCapture:l},currentTarget:{...e.currentTarget,setPointerCapture:g,releasePointerCapture:l},sourceEvent:e};if(i(I),!0===c.stopped)break}}return t}),[]),_=(0,g.useCallback)(((t,e=!0)=>{S.current.pointer.emit("pointerMove",t),e&&T(t);const i=P(t,(t=>t.filter((t=>["Move","Over","Enter","Out","Leave"].some((e=>t.__handlers["pointer"+e]))))));return j(t,i),O(i,t,(t=>{const e=t.eventObject.__handlers;if(e){if(e.pointerOver||e.pointerEnter||e.pointerOut||e.pointerLeave){const i=J(t),n=z.get(i);n?n.stopped&&t.stopPropagation():(z.set(i,t),e.pointerOver&&e.pointerOver({...t,type:"pointerover"}),e.pointerEnter&&e.pointerEnter({...t,type:"pointerenter"}))}e.pointerMove&&e.pointerMove(t)}})),i}),[]),q=(0,g.useCallback)((t=>(e,i=!0)=>{S.current.pointer.emit(t,e),i&&T(e);const n=P(e);O(n,e,(i=>{const n=i.eventObject,s=n.__handlers;s&&s[t]&&("click"!==t&&"contextMenu"!==t&&"doubleClick"!==t||S.current.initialHits.includes(n))&&(s[t](i),f(e,L.__interaction,(t=>t!==n)))})),"pointerDown"===t&&(S.current.initialClick=[e.nativeEvent.offsetX,e.nativeEvent.offsetY],S.current.initialHits=n.map((t=>t.eventObject))),"click"!==t&&"contextMenu"!==t&&"doubleClick"!==t||n.length||K(e)<=2&&(f(e,L.__interaction),Q&&Q())}),[Q,K,P,O,T]);(0,g.useMemo)((()=>{S.current.events={onClick:q("click"),onContextMenu:q("contextMenu"),onDoubleClick:q("doubleClick"),onWheel:q("wheel"),onPointerDown:q("pointerDown"),onPointerUp:q("pointerUp"),onPointerLeave:t=>j(t,[]),onPointerMove:_,onGotPointerCaptureLegacy:t=>S.current.captured=D(),onLostPointerCapture:t=>(S.current.captured=void 0,j(t))}}),[q,D,j,_]);const $=(0,g.useCallback)((function(t){const e=()=>p(!0);return(0,g.useLayoutEffect)((()=>{i.compile(L,X)}),[]),(0,g.useEffect)((()=>{const t=U&&U(S.current);t&&t.then?t.then(e):e()}),[]),t.children}),[]);return(0,g.useLayoutEffect)((()=>{!function(t,e,i){let n=F.get(e);if(!n){e.__state=i;let t=n=Y.createContainer(e,void 0!==i&&i.current.concurrent?2:0,!1,null);F.set(e,t)}Y.updateContainer(t,n,null,(()=>{})),Y.getPublicRootInstance(n)}((0,g.createElement)($,null,(0,g.createElement)(M.Provider,{value:v.current},"function"==typeof e?e(S.current):e)),L,S)}),[m,e,v.current]),(0,g.useLayoutEffect)((()=>{m&&(S.current.vr?(i.xr||i.vr)&&i.setAnimationLoop?((i.xr||i.vr).enabled=!0,i.setAnimationLoop((t=>x(S,t,0,!0)))):console.warn("the gl instance does not support VR!"):0===S.current.frames&&Z(S))}),[i,m,B]),(0,g.useEffect)((()=>()=>{S.current.gl&&(S.current.gl.renderLists&&S.current.gl.renderLists.dispose(),S.current.gl.forceContextLoss&&S.current.gl.forceContextLoss(),k(S.current.gl)),function(t,e){const i=F.get(t);i&&Y.updateContainer(null,i,null,(()=>{F.delete(t),e&&e()}))}(S.current.scene,(()=>{k(S.current.raycaster),k(S.current.camera),k(S.current)}))}),[]),S.current.events})({...c,children:t,gl:a});return(0,g.useEffect)((()=>{e(d)}),[d,e]),null}const O=g.memo((function(t){const{renderer:e,effects:i,children:s,vr:l,webgl1:c,concurrent:a,shadowMap:I,colorManagement:d,orthographic:o,invalidateFrameloop:r,updateDefaultCamera:b,noEvents:u,gl:F,camera:C,raycaster:G,pixelRatio:U,onCreated:Q,onPointerMissed:h,preRender:m,resize:x,style:p,...V}=t,Z=(0,g.useRef)(),[{onGotPointerCaptureLegacy:R,...y},L]=(0,g.useState)({}),[X,A,W]=(0,B.Z)({scroll:!0,debounce:{scroll:50,resize:0},...x}),S=(0,g.useRef)(!1),E=(0,g.useMemo)((()=>S.current=S.current||!!A.width&&!!A.height),[A]),N=(0,g.useMemo)((()=>({size:A,forceResize:W,setEvents:L,container:Z.current})),[W,A]);return"undefined"==typeof window?g.createElement("div",(0,n.Z)({style:{...j,...p}},V),m):g.createElement("div",(0,n.Z)({ref:(v=[X,Z],function(t){v.forEach((function(e){"function"==typeof e?e(t):null!=e&&(e.current=t)}))}),style:{...j,...p}},y,V),m,E&&g.createElement(P,(0,n.Z)({},t,N)));var v})),_=g.memo((function({children:t,...e}){const i=(0,g.useRef)(),l=e.webgl1?s.WebGL1Renderer:s.WebGLRenderer;return g.createElement(O,(0,n.Z)({},e,{renderer:()=>{if(i.current){const t={antialias:!0,alpha:!0,...e.gl};return new l({powerPreference:"high-performance",canvas:i.current,...t})}},preRender:g.createElement("canvas",{ref:i,style:{display:"block"}})}),t)}))},731:(t,e,i)=>{"use strict";i.d(e,{Z:()=>I});var n=i(784),s=i(386);function l({debounce:t,scroll:e,polyfill:i}={debounce:0,scroll:!1}){const l=i||("undefined"==typeof window?class{}:window.ResizeObserver);if(!l)throw new Error("This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills");const[a,I]=(0,n.useState)({left:0,top:0,width:0,height:0,bottom:0,right:0,x:0,y:0}),d=(0,n.useRef)({element:null,scrollContainers:null,resizeObserver:null,lastBounds:a}),o=t?"number"==typeof t?t:t.scroll:null,r=t?"number"==typeof t?t:t.resize:null,b=(0,n.useRef)(!1);(0,n.useEffect)((()=>(b.current=!0,()=>{b.current=!1})));const[u,B,F]=(0,n.useMemo)((()=>{const t=()=>{if(!d.current.element)return;const{left:t,top:e,width:i,height:n,bottom:s,right:l,x:c,y:a}=d.current.element.getBoundingClientRect(),o={left:t,top:e,width:i,height:n,bottom:s,right:l,x:c,y:a};Object.freeze(o),b.current&&!g(d.current.lastBounds,o)&&I(d.current.lastBounds=o)};return[t,r?(0,s.debounce)(t,r):t,o?(0,s.debounce)(t,o):t]}),[I,o,r]);function C(){d.current.scrollContainers&&(d.current.scrollContainers.forEach((t=>t.removeEventListener("scroll",F,!0))),d.current.scrollContainers=null),d.current.resizeObserver&&(d.current.resizeObserver.disconnect(),d.current.resizeObserver=null)}function G(){d.current.element&&(d.current.resizeObserver=new l(F),d.current.resizeObserver.observe(d.current.element),e&&d.current.scrollContainers&&d.current.scrollContainers.forEach((t=>t.addEventListener("scroll",F,{capture:!0,passive:!0}))))}var U,Q,h;return U=F,Q=Boolean(e),(0,n.useEffect)((()=>{if(Q){const t=U;return window.addEventListener("scroll",t,{capture:!0,passive:!0}),()=>{window.removeEventListener("scroll",t,!0)}}}),[U,Q]),h=B,(0,n.useEffect)((()=>{const t=h;return window.addEventListener("resize",t),()=>{window.removeEventListener("resize",t)}}),[h]),(0,n.useEffect)((()=>{C(),G()}),[e,F,B]),(0,n.useEffect)((()=>C),[]),[t=>{t&&t!==d.current.element&&(C(),d.current.element=t,d.current.scrollContainers=c(t),G())},a,u]}function c(t){const e=[];if(!t||t===document.body)return e;const{overflow:i,overflowX:n,overflowY:s}=window.getComputedStyle(t);return[i,n,s].some((t=>"auto"===t||"scroll"===t))&&e.push(t),[...e,...c(t.parentElement)]}t=i.hmd(t);const a=["x","y","top","bottom","left","right","width","height"],g=(t,e)=>a.every((i=>t[i]===e[i]));Object.getOwnPropertyDescriptor&&Object.getOwnPropertyDescriptor(t,"exports").writable&&(t.exports=l);const I=l},955:(t,e,i)=>{"use strict";i.r(e),i.d(e,{ACESFilmicToneMapping:()=>it,AddEquation:()=>V,AddOperation:()=>_,AdditiveAnimationBlendMode:()=>De,AdditiveBlending:()=>h,AlphaFormat:()=>vt,AlwaysDepth:()=>k,AlwaysStencilFunc:()=>xi,AmbientLight:()=>oo,AmbientLightProbe:()=>So,AnimationClip:()=>od,AnimationLoader:()=>Ud,AnimationMixer:()=>or,AnimationObjectGroup:()=>Ir,AnimationUtils:()=>qI,ArcCurve:()=>Rd,ArrayCamera:()=>Ra,ArrowHelper:()=>eb,Audio:()=>wo,AudioAnalyser:()=>Oo,AudioContext:()=>Xo,AudioListener:()=>zo,AudioLoader:()=>Ao,AxesHelper:()=>ib,AxisHelper:()=>$b,BackSide:()=>B,BasicDepthPacking:()=>si,BasicShadowMap:()=>d,BinaryTextureLoader:()=>su,Bone:()=>og,BooleanKeyframeTrack:()=>sd,BoundingBoxHelper:()=>tu,Box2:()=>hr,Box3:()=>$i,Box3Helper:()=>Or,BoxBufferGeometry:()=>ol,BoxGeometry:()=>ol,BoxHelper:()=>Pr,BufferAttribute:()=>ps,BufferGeometry:()=>Ts,BufferGeometryLoader:()=>Uo,ByteType:()=>Vt,Cache:()=>bd,Camera:()=>Fl,CameraHelper:()=>Dr,CanvasRenderer:()=>cu,CanvasTexture:()=>Mg,CatmullRomCurve3:()=>Sd,CineonToneMapping:()=>et,CircleBufferGeometry:()=>kg,CircleGeometry:()=>kg,ClampToEdgeWrapping:()=>rt,Clock:()=>Yo,Color:()=>Qs,ColorKeyframeTrack:()=>ld,CompressedTexture:()=>Jg,CompressedTextureLoader:()=>Qd,ConeBufferGeometry:()=>wg,ConeGeometry:()=>wg,CubeCamera:()=>Ul,CubeReflectionMapping:()=>lt,CubeRefractionMapping:()=>ct,CubeTexture:()=>Ql,CubeTextureLoader:()=>md,CubeUVReflectionMapping:()=>It,CubeUVRefractionMapping:()=>dt,CubicBezierCurve:()=>Yd,CubicBezierCurve3:()=>Hd,CubicInterpolant:()=>td,CullFaceBack:()=>a,CullFaceFront:()=>g,CullFaceFrontBack:()=>I,CullFaceNone:()=>c,Curve:()=>Vd,CurvePath:()=>Td,CustomBlending:()=>p,CustomToneMapping:()=>nt,CylinderBufferGeometry:()=>zg,CylinderGeometry:()=>zg,Cylindrical:()=>Ur,DataTexture:()=>ml,DataTexture2DArray:()=>Dl,DataTexture3D:()=>Kl,DataTextureLoader:()=>xd,DataUtils:()=>lb,DecrementStencilOp:()=>ri,DecrementWrapStencilOp:()=>ui,DefaultLoadingManager:()=>Bd,DepthFormat:()=>kt,DepthStencilFormat:()=>zt,DepthTexture:()=>fg,DirectionalLight:()=>Io,DirectionalLightHelper:()=>zr,DiscreteInterpolant:()=>id,DodecahedronBufferGeometry:()=>Dg,DodecahedronGeometry:()=>Dg,DoubleSide:()=>F,DstAlphaFactor:()=>v,DstColorFactor:()=>H,DynamicBufferAttribute:()=>zb,DynamicCopyUsage:()=>Ai,DynamicDrawUsage:()=>Vi,DynamicReadUsage:()=>yi,EdgesGeometry:()=>_g,EdgesHelper:()=>eu,EllipseCurve:()=>Zd,EqualDepth:()=>T,EqualStencilFunc:()=>Gi,EquirectangularReflectionMapping:()=>at,EquirectangularRefractionMapping:()=>gt,Euler:()=>Nn,EventDispatcher:()=>Ni,ExtrudeBufferGeometry:()=>VI,ExtrudeGeometry:()=>VI,FaceColors:()=>Wb,FileLoader:()=>Gd,FlatShading:()=>C,Float16BufferAttribute:()=>Ws,Float32Attribute:()=>_b,Float32BufferAttribute:()=>Ss,Float64Attribute:()=>qb,Float64BufferAttribute:()=>Es,FloatType:()=>Xt,Fog:()=>Na,FogExp2:()=>Ea,Font:()=>Zo,FontLoader:()=>yo,FrontSide:()=>u,Frustum:()=>Vl,GLBufferAttribute:()=>ur,GLSL1:()=>Si,GLSL3:()=>Ei,GammaEncoding:()=>qe,GreaterDepth:()=>K,GreaterEqualDepth:()=>D,GreaterEqualStencilFunc:()=>mi,GreaterStencilFunc:()=>Qi,GridHelper:()=>Hr,Group:()=>ya,HalfFloatType:()=>At,HemisphereLight:()=>Pd,HemisphereLightHelper:()=>Yr,HemisphereLightProbe:()=>Wo,IcosahedronBufferGeometry:()=>RI,IcosahedronGeometry:()=>RI,ImageBitmapLoader:()=>po,ImageLoader:()=>hd,ImageUtils:()=>ki,ImmediateRenderObject:()=>Vr,IncrementStencilOp:()=>oi,IncrementWrapStencilOp:()=>bi,InstancedBufferAttribute:()=>Go,InstancedBufferGeometry:()=>Co,InstancedInterleavedBuffer:()=>br,InstancedMesh:()=>Ug,Int16Attribute:()=>Kb,Int16BufferAttribute:()=>ys,Int32Attribute:()=>Pb,Int32BufferAttribute:()=>Xs,Int8Attribute:()=>wb,Int8BufferAttribute:()=>Vs,IntType:()=>yt,InterleavedBuffer:()=>Ya,InterleavedBufferAttribute:()=>Ja,Interpolant:()=>$I,InterpolateDiscrete:()=>Je,InterpolateLinear:()=>Me,InterpolateSmooth:()=>fe,InvertStencilOp:()=>Bi,JSONLoader:()=>au,KeepStencilOp:()=>Ii,KeyframeTrack:()=>nd,LOD:()=>sg,LatheBufferGeometry:()=>yI,LatheGeometry:()=>yI,Layers:()=>vn,LensFlare:()=>Iu,LessDepth:()=>z,LessEqualDepth:()=>w,LessEqualStencilFunc:()=>Ui,LessStencilFunc:()=>Ci,Light:()=>jd,LightProbe:()=>uo,Line:()=>Zg,Line3:()=>pr,LineBasicMaterial:()=>Qg,LineCurve:()=>Jd,LineCurve3:()=>Md,LineDashedMaterial:()=>OI,LineLoop:()=>Xg,LinePieces:()=>Xb,LineSegments:()=>Lg,LineStrip:()=>Lb,LinearEncoding:()=>Oe,LinearFilter:()=>Ut,LinearInterpolant:()=>ed,LinearMipMapLinearFilter:()=>xt,LinearMipMapNearestFilter:()=>ht,LinearMipmapLinearFilter:()=>mt,LinearMipmapNearestFilter:()=>Qt,LinearToneMapping:()=>$,Loader:()=>Fd,LoaderUtils:()=>Fo,LoadingManager:()=>ud,LogLuvEncoding:()=>ti,LoopOnce:()=>ve,LoopPingPong:()=>He,LoopRepeat:()=>Ye,LuminanceAlphaFormat:()=>Mt,LuminanceFormat:()=>Jt,MOUSE:()=>s,Material:()=>bs,MaterialLoader:()=>Bo,Math:()=>Hi,MathUtils:()=>Hi,Matrix3:()=>Mi,Matrix4:()=>Vn,MaxEquation:()=>L,Mesh:()=>Il,MeshBasicMaterial:()=>hs,MeshDepthMaterial:()=>ha,MeshDistanceMaterial:()=>ma,MeshFaceMaterial:()=>Eb,MeshLambertMaterial:()=>jI,MeshMatcapMaterial:()=>PI,MeshNormalMaterial:()=>KI,MeshPhongMaterial:()=>TI,MeshPhysicalMaterial:()=>wI,MeshStandardMaterial:()=>zI,MeshToonMaterial:()=>DI,MinEquation:()=>y,MirroredRepeatWrapping:()=>bt,MixOperation:()=>O,MultiMaterial:()=>Nb,MultiplyBlending:()=>x,MultiplyOperation:()=>P,NearestFilter:()=>ut,NearestMipMapLinearFilter:()=>Gt,NearestMipMapNearestFilter:()=>Ft,NearestMipmapLinearFilter:()=>Ct,NearestMipmapNearestFilter:()=>Bt,NeverDepth:()=>f,NeverStencilFunc:()=>Fi,NoBlending:()=>U,NoColors:()=>Ab,NoToneMapping:()=>q,NormalAnimationBlendMode:()=>Te,NormalBlending:()=>Q,NotEqualDepth:()=>j,NotEqualStencilFunc:()=>hi,NumberKeyframeTrack:()=>cd,Object3D:()=>On,ObjectLoader:()=>Qo,ObjectSpaceNormalMap:()=>ai,OctahedronBufferGeometry:()=>LI,OctahedronGeometry:()=>LI,OneFactor:()=>A,OneMinusDstAlphaFactor:()=>Y,OneMinusDstColorFactor:()=>J,OneMinusSrcAlphaFactor:()=>N,OneMinusSrcColorFactor:()=>S,OrthographicCamera:()=>ao,PCFShadowMap:()=>o,PCFSoftShadowMap:()=>r,PMREMGenerator:()=>mb,ParametricBufferGeometry:()=>XI,ParametricGeometry:()=>XI,Particle:()=>Yb,ParticleBasicMaterial:()=>Mb,ParticleSystem:()=>Hb,ParticleSystemMaterial:()=>fb,Path:()=>Dd,PerspectiveCamera:()=>Cl,Plane:()=>ts,PlaneBufferGeometry:()=>yl,PlaneGeometry:()=>yl,PlaneHelper:()=>_r,PointCloud:()=>vb,PointCloudMaterial:()=>Jb,PointLight:()=>co,PointLightHelper:()=>Sr,Points:()=>vg,PointsMaterial:()=>Ag,PolarGridHelper:()=>Jr,PolyhedronBufferGeometry:()=>Tg,PolyhedronGeometry:()=>Tg,PositionalAudio:()=>Po,PropertyBinding:()=>gr,PropertyMixer:()=>_o,QuadraticBezierCurve:()=>fd,QuadraticBezierCurve3:()=>kd,Quaternion:()=>Pi,QuaternionKeyframeTrack:()=>gd,QuaternionLinearInterpolant:()=>ad,REVISION:()=>n,RGBADepthPacking:()=>li,RGBAFormat:()=>Ht,RGBAIntegerFormat:()=>Pt,RGBA_ASTC_10x10_Format:()=>Ge,RGBA_ASTC_10x5_Format:()=>Be,RGBA_ASTC_10x6_Format:()=>Fe,RGBA_ASTC_10x8_Format:()=>Ce,RGBA_ASTC_12x10_Format:()=>Ue,RGBA_ASTC_12x12_Format:()=>Qe,RGBA_ASTC_4x4_Format:()=>ae,RGBA_ASTC_5x4_Format:()=>ge,RGBA_ASTC_5x5_Format:()=>Ie,RGBA_ASTC_6x5_Format:()=>de,RGBA_ASTC_6x6_Format:()=>oe,RGBA_ASTC_8x5_Format:()=>re,RGBA_ASTC_8x6_Format:()=>be,RGBA_ASTC_8x8_Format:()=>ue,RGBA_BPTC_Format:()=>he,RGBA_ETC2_EAC_Format:()=>ce,RGBA_PVRTC_2BPPV1_Format:()=>ne,RGBA_PVRTC_4BPPV1_Format:()=>ie,RGBA_S3TC_DXT1_Format:()=>_t,RGBA_S3TC_DXT3_Format:()=>qt,RGBA_S3TC_DXT5_Format:()=>$t,RGBDEncoding:()=>ni,RGBEEncoding:()=>$e,RGBEFormat:()=>ft,RGBFormat:()=>Yt,RGBIntegerFormat:()=>jt,RGBM16Encoding:()=>ii,RGBM7Encoding:()=>ei,RGB_ETC1_Format:()=>se,RGB_ETC2_Format:()=>le,RGB_PVRTC_2BPPV1_Format:()=>ee,RGB_PVRTC_4BPPV1_Format:()=>te,RGB_S3TC_DXT1_Format:()=>Ot,RGFormat:()=>Dt,RGIntegerFormat:()=>Kt,RawShaderMaterial:()=>kI,Ray:()=>pn,Raycaster:()=>Br,RectAreaLight:()=>ro,RedFormat:()=>wt,RedIntegerFormat:()=>Tt,ReinhardToneMapping:()=>tt,RepeatWrapping:()=>ot,ReplaceStencilOp:()=>di,ReverseSubtractEquation:()=>R,RingBufferGeometry:()=>AI,RingGeometry:()=>AI,SRGB8_ALPHA8_ASTC_10x10_Format:()=>Se,SRGB8_ALPHA8_ASTC_10x5_Format:()=>Xe,SRGB8_ALPHA8_ASTC_10x6_Format:()=>Ae,SRGB8_ALPHA8_ASTC_10x8_Format:()=>We,SRGB8_ALPHA8_ASTC_12x10_Format:()=>Ee,SRGB8_ALPHA8_ASTC_12x12_Format:()=>Ne,SRGB8_ALPHA8_ASTC_4x4_Format:()=>me,SRGB8_ALPHA8_ASTC_5x4_Format:()=>xe,SRGB8_ALPHA8_ASTC_5x5_Format:()=>pe,SRGB8_ALPHA8_ASTC_6x5_Format:()=>Ve,SRGB8_ALPHA8_ASTC_6x6_Format:()=>Ze,SRGB8_ALPHA8_ASTC_8x5_Format:()=>Re,SRGB8_ALPHA8_ASTC_8x6_Format:()=>ye,SRGB8_ALPHA8_ASTC_8x8_Format:()=>Le,Scene:()=>va,SceneUtils:()=>gu,ShaderChunk:()=>Ll,ShaderLib:()=>Al,ShaderMaterial:()=>Bl,ShadowMaterial:()=>fI,Shape:()=>Kd,ShapeBufferGeometry:()=>WI,ShapeGeometry:()=>WI,ShapePath:()=>Vo,ShapeUtils:()=>mI,ShortType:()=>Zt,Skeleton:()=>ug,SkeletonHelper:()=>Ar,SkinnedMesh:()=>dg,SmoothShading:()=>G,Sphere:()=>Fn,SphereBufferGeometry:()=>SI,SphereGeometry:()=>SI,Spherical:()=>Gr,SphericalHarmonics3:()=>bo,SplineCurve:()=>zd,SpotLight:()=>eo,SpotLightHelper:()=>Rr,Sprite:()=>tg,SpriteMaterial:()=>Ma,SrcAlphaFactor:()=>E,SrcAlphaSaturateFactor:()=>M,SrcColorFactor:()=>W,StaticCopyUsage:()=>Xi,StaticDrawUsage:()=>pi,StaticReadUsage:()=>Ri,StereoCamera:()=>vo,StreamCopyUsage:()=>Wi,StreamDrawUsage:()=>Zi,StreamReadUsage:()=>Li,StringKeyframeTrack:()=>Id,SubtractEquation:()=>Z,SubtractiveBlending:()=>m,TOUCH:()=>l,TangentSpaceNormalMap:()=>ci,TetrahedronBufferGeometry:()=>EI,TetrahedronGeometry:()=>EI,TextBufferGeometry:()=>NI,TextGeometry:()=>NI,Texture:()=>wi,TextureLoader:()=>pd,TorusBufferGeometry:()=>vI,TorusGeometry:()=>vI,TorusKnotBufferGeometry:()=>YI,TorusKnotGeometry:()=>YI,Triangle:()=>os,TriangleFanDrawMode:()=>Pe,TriangleStripDrawMode:()=>je,TrianglesDrawMode:()=>Ke,TubeBufferGeometry:()=>HI,TubeGeometry:()=>HI,UVMapping:()=>st,Uint16Attribute:()=>jb,Uint16BufferAttribute:()=>Ls,Uint32Attribute:()=>Ob,Uint32BufferAttribute:()=>As,Uint8Attribute:()=>Tb,Uint8BufferAttribute:()=>Zs,Uint8ClampedAttribute:()=>Db,Uint8ClampedBufferAttribute:()=>Rs,Uniform:()=>rr,UniformsLib:()=>Xl,UniformsUtils:()=>ul,UnsignedByteType:()=>pt,UnsignedInt248Type:()=>Nt,UnsignedIntType:()=>Lt,UnsignedShort4444Type:()=>Wt,UnsignedShort5551Type:()=>St,UnsignedShort565Type:()=>Et,UnsignedShortType:()=>Rt,VSMShadowMap:()=>b,Vector2:()=>Ji,Vector3:()=>Oi,Vector4:()=>Di,VectorKeyframeTrack:()=>dd,Vertex:()=>kb,VertexColors:()=>Sb,VideoTexture:()=>Hg,WebGL1Renderer:()=>Sa,WebGLCubeRenderTarget:()=>hl,WebGLMultisampleRenderTarget:()=>ji,WebGLRenderTarget:()=>Ki,WebGLRenderTargetCube:()=>lu,WebGLRenderer:()=>Wa,WebGLUtils:()=>Za,WireframeGeometry:()=>JI,WireframeHelper:()=>iu,WrapAroundEnding:()=>we,XHRLoader:()=>nu,ZeroCurvatureEnding:()=>ke,ZeroFactor:()=>X,ZeroSlopeEnding:()=>ze,ZeroStencilOp:()=>gi,sRGBEncoding:()=>_e});const n="126",s={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},l={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},c=0,a=1,g=2,I=3,d=0,o=1,r=2,b=3,u=0,B=1,F=2,C=1,G=2,U=0,Q=1,h=2,m=3,x=4,p=5,V=100,Z=101,R=102,y=103,L=104,X=200,A=201,W=202,S=203,E=204,N=205,v=206,Y=207,H=208,J=209,M=210,f=0,k=1,z=2,w=3,T=4,D=5,K=6,j=7,P=0,O=1,_=2,q=0,$=1,tt=2,et=3,it=4,nt=5,st=300,lt=301,ct=302,at=303,gt=304,It=306,dt=307,ot=1e3,rt=1001,bt=1002,ut=1003,Bt=1004,Ft=1004,Ct=1005,Gt=1005,Ut=1006,Qt=1007,ht=1007,mt=1008,xt=1008,pt=1009,Vt=1010,Zt=1011,Rt=1012,yt=1013,Lt=1014,Xt=1015,At=1016,Wt=1017,St=1018,Et=1019,Nt=1020,vt=1021,Yt=1022,Ht=1023,Jt=1024,Mt=1025,ft=Ht,kt=1026,zt=1027,wt=1028,Tt=1029,Dt=1030,Kt=1031,jt=1032,Pt=1033,Ot=33776,_t=33777,qt=33778,$t=33779,te=35840,ee=35841,ie=35842,ne=35843,se=36196,le=37492,ce=37496,ae=37808,ge=37809,Ie=37810,de=37811,oe=37812,re=37813,be=37814,ue=37815,Be=37816,Fe=37817,Ce=37818,Ge=37819,Ue=37820,Qe=37821,he=36492,me=37840,xe=37841,pe=37842,Ve=37843,Ze=37844,Re=37845,ye=37846,Le=37847,Xe=37848,Ae=37849,We=37850,Se=37851,Ee=37852,Ne=37853,ve=2200,Ye=2201,He=2202,Je=2300,Me=2301,fe=2302,ke=2400,ze=2401,we=2402,Te=2500,De=2501,Ke=0,je=1,Pe=2,Oe=3e3,_e=3001,qe=3007,$e=3002,ti=3003,ei=3004,ii=3005,ni=3006,si=3200,li=3201,ci=0,ai=1,gi=0,Ii=7680,di=7681,oi=7682,ri=7683,bi=34055,ui=34056,Bi=5386,Fi=512,Ci=513,Gi=514,Ui=515,Qi=516,hi=517,mi=518,xi=519,pi=35044,Vi=35048,Zi=35040,Ri=35045,yi=35049,Li=35041,Xi=35046,Ai=35050,Wi=35042,Si="100",Ei="300 es";function Ni(){}Object.assign(Ni.prototype,{addEventListener:function(t,e){void 0===this._listeners&&(this._listeners={});const i=this._listeners;void 0===i[t]&&(i[t]=[]),-1===i[t].indexOf(e)&&i[t].push(e)},hasEventListener:function(t,e){if(void 0===this._listeners)return!1;const i=this._listeners;return void 0!==i[t]&&-1!==i[t].indexOf(e)},removeEventListener:function(t,e){if(void 0===this._listeners)return;const i=this._listeners[t];if(void 0!==i){const t=i.indexOf(e);-1!==t&&i.splice(t,1)}},dispatchEvent:function(t){if(void 0===this._listeners)return;const e=this._listeners[t.type];if(void 0!==e){t.target=this;const i=e.slice(0);for(let e=0,n=i.length;e<n;e++)i[e].call(this,t)}}});const vi=[];for(let t=0;t<256;t++)vi[t]=(t<16?"0":"")+t.toString(16);let Yi=1234567;const Hi={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){const t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,i=4294967295*Math.random()|0,n=4294967295*Math.random()|0;return(vi[255&t]+vi[t>>8&255]+vi[t>>16&255]+vi[t>>24&255]+"-"+vi[255&e]+vi[e>>8&255]+"-"+vi[e>>16&15|64]+vi[e>>24&255]+"-"+vi[63&i|128]+vi[i>>8&255]+"-"+vi[i>>16&255]+vi[i>>24&255]+vi[255&n]+vi[n>>8&255]+vi[n>>16&255]+vi[n>>24&255]).toUpperCase()},clamp:function(t,e,i){return Math.max(e,Math.min(i,t))},euclideanModulo:function(t,e){return(t%e+e)%e},mapLinear:function(t,e,i,n,s){return n+(t-e)*(s-n)/(i-e)},lerp:function(t,e,i){return(1-i)*t+i*e},damp:function(t,e,i,n){return Hi.lerp(t,e,1-Math.exp(-i*n))},pingpong:function(t,e=1){return e-Math.abs(Hi.euclideanModulo(t,2*e)-e)},smoothstep:function(t,e,i){return t<=e?0:t>=i?1:(t=(t-e)/(i-e))*t*(3-2*t)},smootherstep:function(t,e,i){return t<=e?0:t>=i?1:(t=(t-e)/(i-e))*t*t*(t*(6*t-15)+10)},randInt:function(t,e){return t+Math.floor(Math.random()*(e-t+1))},randFloat:function(t,e){return t+Math.random()*(e-t)},randFloatSpread:function(t){return t*(.5-Math.random())},seededRandom:function(t){return void 0!==t&&(Yi=t%2147483647),Yi=16807*Yi%2147483647,(Yi-1)/2147483646},degToRad:function(t){return t*Hi.DEG2RAD},radToDeg:function(t){return t*Hi.RAD2DEG},isPowerOfTwo:function(t){return 0==(t&t-1)&&0!==t},ceilPowerOfTwo:function(t){return Math.pow(2,Math.ceil(Math.log(t)/Math.LN2))},floorPowerOfTwo:function(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))},setQuaternionFromProperEuler:function(t,e,i,n,s){const l=Math.cos,c=Math.sin,a=l(i/2),g=c(i/2),I=l((e+n)/2),d=c((e+n)/2),o=l((e-n)/2),r=c((e-n)/2),b=l((n-e)/2),u=c((n-e)/2);switch(s){case"XYX":t.set(a*d,g*o,g*r,a*I);break;case"YZY":t.set(g*r,a*d,g*o,a*I);break;case"ZXZ":t.set(g*o,g*r,a*d,a*I);break;case"XZX":t.set(a*d,g*u,g*b,a*I);break;case"YXY":t.set(g*b,a*d,g*u,a*I);break;case"ZYZ":t.set(g*u,g*b,a*d,a*I);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+s)}}};class Ji{constructor(t=0,e=0){this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t,e){return void 0!==e?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this)}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t,e){return void 0!==e?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this)}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,i=this.y,n=t.elements;return this.x=n[0]*e+n[3]*i+n[6],this.y=n[1]*e+n[4]*i+n[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,i=this.y-t.y;return e*e+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e,i){return void 0!==i&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const i=Math.cos(e),n=Math.sin(e),s=this.x-t.x,l=this.y-t.y;return this.x=s*i-l*n+t.x,this.y=s*n+l*i+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}}Ji.prototype.isVector2=!0;class Mi{constructor(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}set(t,e,i,n,s,l,c,a,g){const I=this.elements;return I[0]=t,I[1]=n,I[2]=c,I[3]=e,I[4]=s,I[5]=a,I[6]=i,I[7]=l,I[8]=g,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],this}extractBasis(t,e,i){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),i.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const i=t.elements,n=e.elements,s=this.elements,l=i[0],c=i[3],a=i[6],g=i[1],I=i[4],d=i[7],o=i[2],r=i[5],b=i[8],u=n[0],B=n[3],F=n[6],C=n[1],G=n[4],U=n[7],Q=n[2],h=n[5],m=n[8];return s[0]=l*u+c*C+a*Q,s[3]=l*B+c*G+a*h,s[6]=l*F+c*U+a*m,s[1]=g*u+I*C+d*Q,s[4]=g*B+I*G+d*h,s[7]=g*F+I*U+d*m,s[2]=o*u+r*C+b*Q,s[5]=o*B+r*G+b*h,s[8]=o*F+r*U+b*m,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],i=t[1],n=t[2],s=t[3],l=t[4],c=t[5],a=t[6],g=t[7],I=t[8];return e*l*I-e*c*g-i*s*I+i*c*a+n*s*g-n*l*a}invert(){const t=this.elements,e=t[0],i=t[1],n=t[2],s=t[3],l=t[4],c=t[5],a=t[6],g=t[7],I=t[8],d=I*l-c*g,o=c*a-I*s,r=g*s-l*a,b=e*d+i*o+n*r;if(0===b)return this.set(0,0,0,0,0,0,0,0,0);const u=1/b;return t[0]=d*u,t[1]=(n*g-I*i)*u,t[2]=(c*i-n*l)*u,t[3]=o*u,t[4]=(I*e-n*a)*u,t[5]=(n*s-c*e)*u,t[6]=r*u,t[7]=(i*a-g*e)*u,t[8]=(l*e-i*s)*u,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,i,n,s,l,c){const a=Math.cos(s),g=Math.sin(s);return this.set(i*a,i*g,-i*(a*l+g*c)+l+t,-n*g,n*a,-n*(-g*l+a*c)+c+e,0,0,1),this}scale(t,e){const i=this.elements;return i[0]*=t,i[3]*=t,i[6]*=t,i[1]*=e,i[4]*=e,i[7]*=e,this}rotate(t){const e=Math.cos(t),i=Math.sin(t),n=this.elements,s=n[0],l=n[3],c=n[6],a=n[1],g=n[4],I=n[7];return n[0]=e*s+i*a,n[3]=e*l+i*g,n[6]=e*c+i*I,n[1]=-i*s+e*a,n[4]=-i*l+e*g,n[7]=-i*c+e*I,this}translate(t,e){const i=this.elements;return i[0]+=t*i[2],i[3]+=t*i[5],i[6]+=t*i[8],i[1]+=e*i[2],i[4]+=e*i[5],i[7]+=e*i[8],this}equals(t){const e=this.elements,i=t.elements;for(let t=0;t<9;t++)if(e[t]!==i[t])return!1;return!0}fromArray(t,e=0){for(let i=0;i<9;i++)this.elements[i]=t[i+e];return this}toArray(t=[],e=0){const i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t}clone(){return(new this.constructor).fromArray(this.elements)}}let fi;Mi.prototype.isMatrix3=!0;const ki={getDataURL:function(t){if(/^data:/i.test(t.src))return t.src;if("undefined"==typeof HTMLCanvasElement)return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{void 0===fi&&(fi=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")),fi.width=t.width,fi.height=t.height;const i=fi.getContext("2d");t instanceof ImageData?i.putImageData(t,0,0):i.drawImage(t,0,0,t.width,t.height),e=fi}return e.width>2048||e.height>2048?e.toDataURL("image/jpeg",.6):e.toDataURL("image/png")}};let zi=0;class wi extends Ni{constructor(t=wi.DEFAULT_IMAGE,e=wi.DEFAULT_MAPPING,i=rt,n=rt,s=Ut,l=mt,c=Ht,a=pt,g=1,I=Oe){super(),Object.defineProperty(this,"id",{value:zi++}),this.uuid=Hi.generateUUID(),this.name="",this.image=t,this.mipmaps=[],this.mapping=e,this.wrapS=i,this.wrapT=n,this.magFilter=s,this.minFilter=l,this.anisotropy=g,this.format=c,this.internalFormat=null,this.type=a,this.offset=new Ji(0,0),this.repeat=new Ji(1,1),this.center=new Ji(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Mi,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=I,this.version=0,this.onUpdate=null}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(t){return this.name=t.name,this.image=t.image,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.encoding=t.encoding,this}toJSON(t){const e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.textures[this.uuid])return t.textures[this.uuid];const i={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(void 0!==this.image){const n=this.image;if(void 0===n.uuid&&(n.uuid=Hi.generateUUID()),!e&&void 0===t.images[n.uuid]){let e;if(Array.isArray(n)){e=[];for(let t=0,i=n.length;t<i;t++)n[t].isDataTexture?e.push(Ti(n[t].image)):e.push(Ti(n[t]))}else e=Ti(n);t.images[n.uuid]={uuid:n.uuid,url:e}}i.image=n.uuid}return e||(t.textures[this.uuid]=i),i}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==st)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case ot:t.x=t.x-Math.floor(t.x);break;case rt:t.x=t.x<0?0:1;break;case bt:1===Math.abs(Math.floor(t.x)%2)?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case ot:t.y=t.y-Math.floor(t.y);break;case rt:t.y=t.y<0?0:1;break;case bt:1===Math.abs(Math.floor(t.y)%2)?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y)}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){!0===t&&this.version++}}function Ti(t){return"undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap?ki.getDataURL(t):t.data?{data:Array.prototype.slice.call(t.data),width:t.width,height:t.height,type:t.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}wi.DEFAULT_IMAGE=void 0,wi.DEFAULT_MAPPING=st,wi.prototype.isTexture=!0;class Di{constructor(t=0,e=0,i=0,n=1){this.x=t,this.y=e,this.z=i,this.w=n}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,i,n){return this.x=t,this.y=e,this.z=i,this.w=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this}add(t,e){return void 0!==e?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this)}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t,e){return void 0!==e?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this)}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,i=this.y,n=this.z,s=this.w,l=t.elements;return this.x=l[0]*e+l[4]*i+l[8]*n+l[12]*s,this.y=l[1]*e+l[5]*i+l[9]*n+l[13]*s,this.z=l[2]*e+l[6]*i+l[10]*n+l[14]*s,this.w=l[3]*e+l[7]*i+l[11]*n+l[15]*s,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,i,n,s;const l=.01,c=.1,a=t.elements,g=a[0],I=a[4],d=a[8],o=a[1],r=a[5],b=a[9],u=a[2],B=a[6],F=a[10];if(Math.abs(I-o)<l&&Math.abs(d-u)<l&&Math.abs(b-B)<l){if(Math.abs(I+o)<c&&Math.abs(d+u)<c&&Math.abs(b+B)<c&&Math.abs(g+r+F-3)<c)return this.set(1,0,0,0),this;e=Math.PI;const t=(g+1)/2,a=(r+1)/2,C=(F+1)/2,G=(I+o)/4,U=(d+u)/4,Q=(b+B)/4;return t>a&&t>C?t<l?(i=0,n=.707106781,s=.707106781):(i=Math.sqrt(t),n=G/i,s=U/i):a>C?a<l?(i=.707106781,n=0,s=.707106781):(n=Math.sqrt(a),i=G/n,s=Q/n):C<l?(i=.707106781,n=.707106781,s=0):(s=Math.sqrt(C),i=U/s,n=Q/s),this.set(i,n,s,e),this}let C=Math.sqrt((B-b)*(B-b)+(d-u)*(d-u)+(o-I)*(o-I));return Math.abs(C)<.001&&(C=1),this.x=(B-b)/C,this.y=(d-u)/C,this.z=(o-I)/C,this.w=Math.acos((g+r+F-1)/2),this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this.z=t.z+(e.z-t.z)*i,this.w=t.w+(e.w-t.w)*i,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e,i){return void 0!==i&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}}Di.prototype.isVector4=!0;class Ki extends Ni{constructor(t,e,i){super(),this.width=t,this.height=e,this.depth=1,this.scissor=new Di(0,0,t,e),this.scissorTest=!1,this.viewport=new Di(0,0,t,e),i=i||{},this.texture=new wi(void 0,i.mapping,i.wrapS,i.wrapT,i.magFilter,i.minFilter,i.format,i.type,i.anisotropy,i.encoding),this.texture.image={},this.texture.image.width=t,this.texture.image.height=e,this.texture.image.depth=1,this.texture.generateMipmaps=void 0!==i.generateMipmaps&&i.generateMipmaps,this.texture.minFilter=void 0!==i.minFilter?i.minFilter:Ut,this.depthBuffer=void 0===i.depthBuffer||i.depthBuffer,this.stencilBuffer=void 0!==i.stencilBuffer&&i.stencilBuffer,this.depthTexture=void 0!==i.depthTexture?i.depthTexture:null}setTexture(t){t.image={width:this.width,height:this.height,depth:this.depth},this.texture=t}setSize(t,e,i=1){this.width===t&&this.height===e&&this.depth===i||(this.width=t,this.height=e,this.depth=i,this.texture.image.width=t,this.texture.image.height=e,this.texture.image.depth=i,this.dispose()),this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return(new this.constructor).copy(this)}copy(t){return this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this}dispose(){this.dispatchEvent({type:"dispose"})}}Ki.prototype.isWebGLRenderTarget=!0;class ji extends Ki{constructor(t,e,i){super(t,e,i),this.samples=4}copy(t){return super.copy.call(this,t),this.samples=t.samples,this}}ji.prototype.isWebGLMultisampleRenderTarget=!0;class Pi{constructor(t=0,e=0,i=0,n=1){this._x=t,this._y=e,this._z=i,this._w=n}static slerp(t,e,i,n){return i.copy(t).slerp(e,n)}static slerpFlat(t,e,i,n,s,l,c){let a=i[n+0],g=i[n+1],I=i[n+2],d=i[n+3];const o=s[l+0],r=s[l+1],b=s[l+2],u=s[l+3];if(0===c)return t[e+0]=a,t[e+1]=g,t[e+2]=I,void(t[e+3]=d);if(1===c)return t[e+0]=o,t[e+1]=r,t[e+2]=b,void(t[e+3]=u);if(d!==u||a!==o||g!==r||I!==b){let t=1-c;const e=a*o+g*r+I*b+d*u,i=e>=0?1:-1,n=1-e*e;if(n>Number.EPSILON){const s=Math.sqrt(n),l=Math.atan2(s,e*i);t=Math.sin(t*l)/s,c=Math.sin(c*l)/s}const s=c*i;if(a=a*t+o*s,g=g*t+r*s,I=I*t+b*s,d=d*t+u*s,t===1-c){const t=1/Math.sqrt(a*a+g*g+I*I+d*d);a*=t,g*=t,I*=t,d*=t}}t[e]=a,t[e+1]=g,t[e+2]=I,t[e+3]=d}static multiplyQuaternionsFlat(t,e,i,n,s,l){const c=i[n],a=i[n+1],g=i[n+2],I=i[n+3],d=s[l],o=s[l+1],r=s[l+2],b=s[l+3];return t[e]=c*b+I*d+a*r-g*o,t[e+1]=a*b+I*o+g*d-c*r,t[e+2]=g*b+I*r+c*o-a*d,t[e+3]=I*b-c*d-a*o-g*r,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,i,n){return this._x=t,this._y=e,this._z=i,this._w=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e){if(!t||!t.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");const i=t._x,n=t._y,s=t._z,l=t._order,c=Math.cos,a=Math.sin,g=c(i/2),I=c(n/2),d=c(s/2),o=a(i/2),r=a(n/2),b=a(s/2);switch(l){case"XYZ":this._x=o*I*d+g*r*b,this._y=g*r*d-o*I*b,this._z=g*I*b+o*r*d,this._w=g*I*d-o*r*b;break;case"YXZ":this._x=o*I*d+g*r*b,this._y=g*r*d-o*I*b,this._z=g*I*b-o*r*d,this._w=g*I*d+o*r*b;break;case"ZXY":this._x=o*I*d-g*r*b,this._y=g*r*d+o*I*b,this._z=g*I*b+o*r*d,this._w=g*I*d-o*r*b;break;case"ZYX":this._x=o*I*d-g*r*b,this._y=g*r*d+o*I*b,this._z=g*I*b-o*r*d,this._w=g*I*d+o*r*b;break;case"YZX":this._x=o*I*d+g*r*b,this._y=g*r*d+o*I*b,this._z=g*I*b-o*r*d,this._w=g*I*d-o*r*b;break;case"XZY":this._x=o*I*d-g*r*b,this._y=g*r*d-o*I*b,this._z=g*I*b+o*r*d,this._w=g*I*d+o*r*b;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+l)}return!1!==e&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const i=e/2,n=Math.sin(i);return this._x=t.x*n,this._y=t.y*n,this._z=t.z*n,this._w=Math.cos(i),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,i=e[0],n=e[4],s=e[8],l=e[1],c=e[5],a=e[9],g=e[2],I=e[6],d=e[10],o=i+c+d;if(o>0){const t=.5/Math.sqrt(o+1);this._w=.25/t,this._x=(I-a)*t,this._y=(s-g)*t,this._z=(l-n)*t}else if(i>c&&i>d){const t=2*Math.sqrt(1+i-c-d);this._w=(I-a)/t,this._x=.25*t,this._y=(n+l)/t,this._z=(s+g)/t}else if(c>d){const t=2*Math.sqrt(1+c-i-d);this._w=(s-g)/t,this._x=(n+l)/t,this._y=.25*t,this._z=(a+I)/t}else{const t=2*Math.sqrt(1+d-i-c);this._w=(l-n)/t,this._x=(s+g)/t,this._y=(a+I)/t,this._z=.25*t}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let i=t.dot(e)+1;return i<1e-6?(i=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=i):(this._x=0,this._y=-t.z,this._z=t.y,this._w=i)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=i),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(Hi.clamp(this.dot(t),-1,1)))}rotateTowards(t,e){const i=this.angleTo(t);if(0===i)return this;const n=Math.min(1,e/i);return this.slerp(t,n),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t,e){return void 0!==e?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(t,e)):this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const i=t._x,n=t._y,s=t._z,l=t._w,c=e._x,a=e._y,g=e._z,I=e._w;return this._x=i*I+l*c+n*g-s*a,this._y=n*I+l*a+s*c-i*g,this._z=s*I+l*g+i*a-n*c,this._w=l*I-i*c-n*a-s*g,this._onChangeCallback(),this}slerp(t,e){if(0===e)return this;if(1===e)return this.copy(t);const i=this._x,n=this._y,s=this._z,l=this._w;let c=l*t._w+i*t._x+n*t._y+s*t._z;if(c<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,c=-c):this.copy(t),c>=1)return this._w=l,this._x=i,this._y=n,this._z=s,this;const a=1-c*c;if(a<=Number.EPSILON){const t=1-e;return this._w=t*l+e*this._w,this._x=t*i+e*this._x,this._y=t*n+e*this._y,this._z=t*s+e*this._z,this.normalize(),this._onChangeCallback(),this}const g=Math.sqrt(a),I=Math.atan2(g,c),d=Math.sin((1-e)*I)/g,o=Math.sin(e*I)/g;return this._w=l*d+this._w*o,this._x=i*d+this._x*o,this._y=n*d+this._y*o,this._z=s*d+this._z*o,this._onChangeCallback(),this}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}}Pi.prototype.isQuaternion=!0;class Oi{constructor(t=0,e=0,i=0){this.x=t,this.y=e,this.z=i}set(t,e,i){return void 0===i&&(i=this.z),this.x=t,this.y=e,this.z=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t,e){return void 0!==e?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this)}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t,e){return void 0!==e?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this)}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t,e){return void 0!==e?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(t,e)):(this.x*=t.x,this.y*=t.y,this.z*=t.z,this)}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return t&&t.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(qi.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(qi.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,i=this.y,n=this.z,s=t.elements;return this.x=s[0]*e+s[3]*i+s[6]*n,this.y=s[1]*e+s[4]*i+s[7]*n,this.z=s[2]*e+s[5]*i+s[8]*n,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,i=this.y,n=this.z,s=t.elements,l=1/(s[3]*e+s[7]*i+s[11]*n+s[15]);return this.x=(s[0]*e+s[4]*i+s[8]*n+s[12])*l,this.y=(s[1]*e+s[5]*i+s[9]*n+s[13])*l,this.z=(s[2]*e+s[6]*i+s[10]*n+s[14])*l,this}applyQuaternion(t){const e=this.x,i=this.y,n=this.z,s=t.x,l=t.y,c=t.z,a=t.w,g=a*e+l*n-c*i,I=a*i+c*e-s*n,d=a*n+s*i-l*e,o=-s*e-l*i-c*n;return this.x=g*a+o*-s+I*-c-d*-l,this.y=I*a+o*-l+d*-s-g*-c,this.z=d*a+o*-c+g*-l-I*-s,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,i=this.y,n=this.z,s=t.elements;return this.x=s[0]*e+s[4]*i+s[8]*n,this.y=s[1]*e+s[5]*i+s[9]*n,this.z=s[2]*e+s[6]*i+s[10]*n,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this.z=t.z+(e.z-t.z)*i,this}cross(t,e){return void 0!==e?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(t,e)):this.crossVectors(this,t)}crossVectors(t,e){const i=t.x,n=t.y,s=t.z,l=e.x,c=e.y,a=e.z;return this.x=n*a-s*c,this.y=s*l-i*a,this.z=i*c-n*l,this}projectOnVector(t){const e=t.lengthSq();if(0===e)return this.set(0,0,0);const i=t.dot(this)/e;return this.copy(t).multiplyScalar(i)}projectOnPlane(t){return _i.copy(this).projectOnVector(t),this.sub(_i)}reflect(t){return this.sub(_i.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===e)return Math.PI/2;const i=this.dot(t)/e;return Math.acos(Hi.clamp(i,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,i=this.y-t.y,n=this.z-t.z;return e*e+i*i+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,i){const n=Math.sin(e)*t;return this.x=n*Math.sin(i),this.y=Math.cos(e)*t,this.z=n*Math.cos(i),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,i){return this.x=t*Math.sin(e),this.y=i,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),i=this.setFromMatrixColumn(t,1).length(),n=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=i,this.z=n,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,4*e)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,3*e)}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e,i){return void 0!==i&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}}Oi.prototype.isVector3=!0;const _i=new Oi,qi=new Pi;class $i{constructor(t=new Oi(1/0,1/0,1/0),e=new Oi(-1/0,-1/0,-1/0)){this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){let e=1/0,i=1/0,n=1/0,s=-1/0,l=-1/0,c=-1/0;for(let a=0,g=t.length;a<g;a+=3){const g=t[a],I=t[a+1],d=t[a+2];g<e&&(e=g),I<i&&(i=I),d<n&&(n=d),g>s&&(s=g),I>l&&(l=I),d>c&&(c=d)}return this.min.set(e,i,n),this.max.set(s,l,c),this}setFromBufferAttribute(t){let e=1/0,i=1/0,n=1/0,s=-1/0,l=-1/0,c=-1/0;for(let a=0,g=t.count;a<g;a++){const g=t.getX(a),I=t.getY(a),d=t.getZ(a);g<e&&(e=g),I<i&&(i=I),d<n&&(n=d),g>s&&(s=g),I>l&&(l=I),d>c&&(c=d)}return this.min.set(e,i,n),this.max.set(s,l,c),this}setFromPoints(t){this.makeEmpty();for(let e=0,i=t.length;e<i;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const i=en.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(i),this.max.copy(t).add(i),this}setFromObject(t){return this.makeEmpty(),this.expandByObject(t)}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return void 0===t&&(console.warn("THREE.Box3: .getCenter() target is now required"),t=new Oi),this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return void 0===t&&(console.warn("THREE.Box3: .getSize() target is now required"),t=new Oi),this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t){t.updateWorldMatrix(!1,!1);const e=t.geometry;void 0!==e&&(null===e.boundingBox&&e.computeBoundingBox(),nn.copy(e.boundingBox),nn.applyMatrix4(t.matrixWorld),this.union(nn));const i=t.children;for(let t=0,e=i.length;t<e;t++)this.expandByObject(i[t]);return this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return void 0===e&&(console.warn("THREE.Box3: .getParameter() target is now required"),e=new Oi),e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)}intersectsSphere(t){return this.clampPoint(t.center,en),en.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,i;return t.normal.x>0?(e=t.normal.x*this.min.x,i=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,i=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,i+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,i+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,i+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,i+=t.normal.z*this.min.z),e<=-t.constant&&i>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(dn),on.subVectors(this.max,dn),sn.subVectors(t.a,dn),ln.subVectors(t.b,dn),cn.subVectors(t.c,dn),an.subVectors(ln,sn),gn.subVectors(cn,ln),In.subVectors(sn,cn);let e=[0,-an.z,an.y,0,-gn.z,gn.y,0,-In.z,In.y,an.z,0,-an.x,gn.z,0,-gn.x,In.z,0,-In.x,-an.y,an.x,0,-gn.y,gn.x,0,-In.y,In.x,0];return!!un(e,sn,ln,cn,on)&&(e=[1,0,0,0,1,0,0,0,1],!!un(e,sn,ln,cn,on)&&(rn.crossVectors(an,gn),e=[rn.x,rn.y,rn.z],un(e,sn,ln,cn,on)))}clampPoint(t,e){return void 0===e&&(console.warn("THREE.Box3: .clampPoint() target is now required"),e=new Oi),e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return en.copy(t).clamp(this.min,this.max).sub(t).length()}getBoundingSphere(t){return void 0===t&&console.error("THREE.Box3: .getBoundingSphere() target is now required"),this.getCenter(t.center),t.radius=.5*this.getSize(en).length(),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()||(tn[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),tn[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),tn[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),tn[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),tn[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),tn[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),tn[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),tn[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(tn)),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}$i.prototype.isBox3=!0;const tn=[new Oi,new Oi,new Oi,new Oi,new Oi,new Oi,new Oi,new Oi],en=new Oi,nn=new $i,sn=new Oi,ln=new Oi,cn=new Oi,an=new Oi,gn=new Oi,In=new Oi,dn=new Oi,on=new Oi,rn=new Oi,bn=new Oi;function un(t,e,i,n,s){for(let l=0,c=t.length-3;l<=c;l+=3){bn.fromArray(t,l);const c=s.x*Math.abs(bn.x)+s.y*Math.abs(bn.y)+s.z*Math.abs(bn.z),a=e.dot(bn),g=i.dot(bn),I=n.dot(bn);if(Math.max(-Math.max(a,g,I),Math.min(a,g,I))>c)return!1}return!0}const Bn=new $i;class Fn{constructor(t=new Oi,e=-1){this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const i=this.center;void 0!==e?i.copy(e):Bn.setFromPoints(t).getCenter(i);let n=0;for(let e=0,s=t.length;e<s;e++)n=Math.max(n,i.distanceToSquared(t[e]));return this.radius=Math.sqrt(n),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const i=this.center.distanceToSquared(t);return void 0===e&&(console.warn("THREE.Sphere: .clampPoint() target is now required"),e=new Oi),e.copy(t),i>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return void 0===t&&(console.warn("THREE.Sphere: .getBoundingBox() target is now required"),t=new $i),this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const Cn=new Oi,Gn=new Oi,Un=new Oi,Qn=new Oi,hn=new Oi,mn=new Oi,xn=new Oi;class pn{constructor(t=new Oi,e=new Oi(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return void 0===e&&(console.warn("THREE.Ray: .at() target is now required"),e=new Oi),e.copy(this.direction).multiplyScalar(t).add(this.origin)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,Cn)),this}closestPointToPoint(t,e){void 0===e&&(console.warn("THREE.Ray: .closestPointToPoint() target is now required"),e=new Oi),e.subVectors(t,this.origin);const i=e.dot(this.direction);return i<0?e.copy(this.origin):e.copy(this.direction).multiplyScalar(i).add(this.origin)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=Cn.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(Cn.copy(this.direction).multiplyScalar(e).add(this.origin),Cn.distanceToSquared(t))}distanceSqToSegment(t,e,i,n){Gn.copy(t).add(e).multiplyScalar(.5),Un.copy(e).sub(t).normalize(),Qn.copy(this.origin).sub(Gn);const s=.5*t.distanceTo(e),l=-this.direction.dot(Un),c=Qn.dot(this.direction),a=-Qn.dot(Un),g=Qn.lengthSq(),I=Math.abs(1-l*l);let d,o,r,b;if(I>0)if(d=l*a-c,o=l*c-a,b=s*I,d>=0)if(o>=-b)if(o<=b){const t=1/I;d*=t,o*=t,r=d*(d+l*o+2*c)+o*(l*d+o+2*a)+g}else o=s,d=Math.max(0,-(l*o+c)),r=-d*d+o*(o+2*a)+g;else o=-s,d=Math.max(0,-(l*o+c)),r=-d*d+o*(o+2*a)+g;else o<=-b?(d=Math.max(0,-(-l*s+c)),o=d>0?-s:Math.min(Math.max(-s,-a),s),r=-d*d+o*(o+2*a)+g):o<=b?(d=0,o=Math.min(Math.max(-s,-a),s),r=o*(o+2*a)+g):(d=Math.max(0,-(l*s+c)),o=d>0?s:Math.min(Math.max(-s,-a),s),r=-d*d+o*(o+2*a)+g);else o=l>0?-s:s,d=Math.max(0,-(l*o+c)),r=-d*d+o*(o+2*a)+g;return i&&i.copy(this.direction).multiplyScalar(d).add(this.origin),n&&n.copy(Un).multiplyScalar(o).add(Gn),r}intersectSphere(t,e){Cn.subVectors(t.center,this.origin);const i=Cn.dot(this.direction),n=Cn.dot(Cn)-i*i,s=t.radius*t.radius;if(n>s)return null;const l=Math.sqrt(s-n),c=i-l,a=i+l;return c<0&&a<0?null:c<0?this.at(a,e):this.at(c,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;const i=-(this.origin.dot(t.normal)+t.constant)/e;return i>=0?i:null}intersectPlane(t,e){const i=this.distanceToPlane(t);return null===i?null:this.at(i,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);return 0===e||t.normal.dot(this.direction)*e<0}intersectBox(t,e){let i,n,s,l,c,a;const g=1/this.direction.x,I=1/this.direction.y,d=1/this.direction.z,o=this.origin;return g>=0?(i=(t.min.x-o.x)*g,n=(t.max.x-o.x)*g):(i=(t.max.x-o.x)*g,n=(t.min.x-o.x)*g),I>=0?(s=(t.min.y-o.y)*I,l=(t.max.y-o.y)*I):(s=(t.max.y-o.y)*I,l=(t.min.y-o.y)*I),i>l||s>n?null:((s>i||i!=i)&&(i=s),(l<n||n!=n)&&(n=l),d>=0?(c=(t.min.z-o.z)*d,a=(t.max.z-o.z)*d):(c=(t.max.z-o.z)*d,a=(t.min.z-o.z)*d),i>a||c>n?null:((c>i||i!=i)&&(i=c),(a<n||n!=n)&&(n=a),n<0?null:this.at(i>=0?i:n,e)))}intersectsBox(t){return null!==this.intersectBox(t,Cn)}intersectTriangle(t,e,i,n,s){hn.subVectors(e,t),mn.subVectors(i,t),xn.crossVectors(hn,mn);let l,c=this.direction.dot(xn);if(c>0){if(n)return null;l=1}else{if(!(c<0))return null;l=-1,c=-c}Qn.subVectors(this.origin,t);const a=l*this.direction.dot(mn.crossVectors(Qn,mn));if(a<0)return null;const g=l*this.direction.dot(hn.cross(Qn));if(g<0)return null;if(a+g>c)return null;const I=-l*Qn.dot(xn);return I<0?null:this.at(I/c,s)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class Vn{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}set(t,e,i,n,s,l,c,a,g,I,d,o,r,b,u,B){const F=this.elements;return F[0]=t,F[4]=e,F[8]=i,F[12]=n,F[1]=s,F[5]=l,F[9]=c,F[13]=a,F[2]=g,F[6]=I,F[10]=d,F[14]=o,F[3]=r,F[7]=b,F[11]=u,F[15]=B,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new Vn).fromArray(this.elements)}copy(t){const e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],e[9]=i[9],e[10]=i[10],e[11]=i[11],e[12]=i[12],e[13]=i[13],e[14]=i[14],e[15]=i[15],this}copyPosition(t){const e=this.elements,i=t.elements;return e[12]=i[12],e[13]=i[13],e[14]=i[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,i){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),i.setFromMatrixColumn(this,2),this}makeBasis(t,e,i){return this.set(t.x,e.x,i.x,0,t.y,e.y,i.y,0,t.z,e.z,i.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,i=t.elements,n=1/Zn.setFromMatrixColumn(t,0).length(),s=1/Zn.setFromMatrixColumn(t,1).length(),l=1/Zn.setFromMatrixColumn(t,2).length();return e[0]=i[0]*n,e[1]=i[1]*n,e[2]=i[2]*n,e[3]=0,e[4]=i[4]*s,e[5]=i[5]*s,e[6]=i[6]*s,e[7]=0,e[8]=i[8]*l,e[9]=i[9]*l,e[10]=i[10]*l,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){t&&t.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");const e=this.elements,i=t.x,n=t.y,s=t.z,l=Math.cos(i),c=Math.sin(i),a=Math.cos(n),g=Math.sin(n),I=Math.cos(s),d=Math.sin(s);if("XYZ"===t.order){const t=l*I,i=l*d,n=c*I,s=c*d;e[0]=a*I,e[4]=-a*d,e[8]=g,e[1]=i+n*g,e[5]=t-s*g,e[9]=-c*a,e[2]=s-t*g,e[6]=n+i*g,e[10]=l*a}else if("YXZ"===t.order){const t=a*I,i=a*d,n=g*I,s=g*d;e[0]=t+s*c,e[4]=n*c-i,e[8]=l*g,e[1]=l*d,e[5]=l*I,e[9]=-c,e[2]=i*c-n,e[6]=s+t*c,e[10]=l*a}else if("ZXY"===t.order){const t=a*I,i=a*d,n=g*I,s=g*d;e[0]=t-s*c,e[4]=-l*d,e[8]=n+i*c,e[1]=i+n*c,e[5]=l*I,e[9]=s-t*c,e[2]=-l*g,e[6]=c,e[10]=l*a}else if("ZYX"===t.order){const t=l*I,i=l*d,n=c*I,s=c*d;e[0]=a*I,e[4]=n*g-i,e[8]=t*g+s,e[1]=a*d,e[5]=s*g+t,e[9]=i*g-n,e[2]=-g,e[6]=c*a,e[10]=l*a}else if("YZX"===t.order){const t=l*a,i=l*g,n=c*a,s=c*g;e[0]=a*I,e[4]=s-t*d,e[8]=n*d+i,e[1]=d,e[5]=l*I,e[9]=-c*I,e[2]=-g*I,e[6]=i*d+n,e[10]=t-s*d}else if("XZY"===t.order){const t=l*a,i=l*g,n=c*a,s=c*g;e[0]=a*I,e[4]=-d,e[8]=g*I,e[1]=t*d+s,e[5]=l*I,e[9]=i*d-n,e[2]=n*d-i,e[6]=c*I,e[10]=s*d+t}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(yn,t,Ln)}lookAt(t,e,i){const n=this.elements;return Wn.subVectors(t,e),0===Wn.lengthSq()&&(Wn.z=1),Wn.normalize(),Xn.crossVectors(i,Wn),0===Xn.lengthSq()&&(1===Math.abs(i.z)?Wn.x+=1e-4:Wn.z+=1e-4,Wn.normalize(),Xn.crossVectors(i,Wn)),Xn.normalize(),An.crossVectors(Wn,Xn),n[0]=Xn.x,n[4]=An.x,n[8]=Wn.x,n[1]=Xn.y,n[5]=An.y,n[9]=Wn.y,n[2]=Xn.z,n[6]=An.z,n[10]=Wn.z,this}multiply(t,e){return void 0!==e?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(t,e)):this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const i=t.elements,n=e.elements,s=this.elements,l=i[0],c=i[4],a=i[8],g=i[12],I=i[1],d=i[5],o=i[9],r=i[13],b=i[2],u=i[6],B=i[10],F=i[14],C=i[3],G=i[7],U=i[11],Q=i[15],h=n[0],m=n[4],x=n[8],p=n[12],V=n[1],Z=n[5],R=n[9],y=n[13],L=n[2],X=n[6],A=n[10],W=n[14],S=n[3],E=n[7],N=n[11],v=n[15];return s[0]=l*h+c*V+a*L+g*S,s[4]=l*m+c*Z+a*X+g*E,s[8]=l*x+c*R+a*A+g*N,s[12]=l*p+c*y+a*W+g*v,s[1]=I*h+d*V+o*L+r*S,s[5]=I*m+d*Z+o*X+r*E,s[9]=I*x+d*R+o*A+r*N,s[13]=I*p+d*y+o*W+r*v,s[2]=b*h+u*V+B*L+F*S,s[6]=b*m+u*Z+B*X+F*E,s[10]=b*x+u*R+B*A+F*N,s[14]=b*p+u*y+B*W+F*v,s[3]=C*h+G*V+U*L+Q*S,s[7]=C*m+G*Z+U*X+Q*E,s[11]=C*x+G*R+U*A+Q*N,s[15]=C*p+G*y+U*W+Q*v,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],i=t[4],n=t[8],s=t[12],l=t[1],c=t[5],a=t[9],g=t[13],I=t[2],d=t[6],o=t[10],r=t[14];return t[3]*(+s*a*d-n*g*d-s*c*o+i*g*o+n*c*r-i*a*r)+t[7]*(+e*a*r-e*g*o+s*l*o-n*l*r+n*g*I-s*a*I)+t[11]*(+e*g*d-e*c*r-s*l*d+i*l*r+s*c*I-i*g*I)+t[15]*(-n*c*I-e*a*d+e*c*o+n*l*d-i*l*o+i*a*I)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,i){const n=this.elements;return t.isVector3?(n[12]=t.x,n[13]=t.y,n[14]=t.z):(n[12]=t,n[13]=e,n[14]=i),this}invert(){const t=this.elements,e=t[0],i=t[1],n=t[2],s=t[3],l=t[4],c=t[5],a=t[6],g=t[7],I=t[8],d=t[9],o=t[10],r=t[11],b=t[12],u=t[13],B=t[14],F=t[15],C=d*B*g-u*o*g+u*a*r-c*B*r-d*a*F+c*o*F,G=b*o*g-I*B*g-b*a*r+l*B*r+I*a*F-l*o*F,U=I*u*g-b*d*g+b*c*r-l*u*r-I*c*F+l*d*F,Q=b*d*a-I*u*a-b*c*o+l*u*o+I*c*B-l*d*B,h=e*C+i*G+n*U+s*Q;if(0===h)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const m=1/h;return t[0]=C*m,t[1]=(u*o*s-d*B*s-u*n*r+i*B*r+d*n*F-i*o*F)*m,t[2]=(c*B*s-u*a*s+u*n*g-i*B*g-c*n*F+i*a*F)*m,t[3]=(d*a*s-c*o*s-d*n*g+i*o*g+c*n*r-i*a*r)*m,t[4]=G*m,t[5]=(I*B*s-b*o*s+b*n*r-e*B*r-I*n*F+e*o*F)*m,t[6]=(b*a*s-l*B*s-b*n*g+e*B*g+l*n*F-e*a*F)*m,t[7]=(l*o*s-I*a*s+I*n*g-e*o*g-l*n*r+e*a*r)*m,t[8]=U*m,t[9]=(b*d*s-I*u*s-b*i*r+e*u*r+I*i*F-e*d*F)*m,t[10]=(l*u*s-b*c*s+b*i*g-e*u*g-l*i*F+e*c*F)*m,t[11]=(I*c*s-l*d*s-I*i*g+e*d*g+l*i*r-e*c*r)*m,t[12]=Q*m,t[13]=(I*u*n-b*d*n+b*i*o-e*u*o-I*i*B+e*d*B)*m,t[14]=(b*c*n-l*u*n-b*i*a+e*u*a+l*i*B-e*c*B)*m,t[15]=(l*d*n-I*c*n+I*i*a-e*d*a-l*i*o+e*c*o)*m,this}scale(t){const e=this.elements,i=t.x,n=t.y,s=t.z;return e[0]*=i,e[4]*=n,e[8]*=s,e[1]*=i,e[5]*=n,e[9]*=s,e[2]*=i,e[6]*=n,e[10]*=s,e[3]*=i,e[7]*=n,e[11]*=s,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],i=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],n=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,i,n))}makeTranslation(t,e,i){return this.set(1,0,0,t,0,1,0,e,0,0,1,i,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),i=Math.sin(t);return this.set(1,0,0,0,0,e,-i,0,0,i,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,0,i,0,0,1,0,0,-i,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,-i,0,0,i,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const i=Math.cos(e),n=Math.sin(e),s=1-i,l=t.x,c=t.y,a=t.z,g=s*l,I=s*c;return this.set(g*l+i,g*c-n*a,g*a+n*c,0,g*c+n*a,I*c+i,I*a-n*l,0,g*a-n*c,I*a+n*l,s*a*a+i,0,0,0,0,1),this}makeScale(t,e,i){return this.set(t,0,0,0,0,e,0,0,0,0,i,0,0,0,0,1),this}makeShear(t,e,i){return this.set(1,e,i,0,t,1,i,0,t,e,1,0,0,0,0,1),this}compose(t,e,i){const n=this.elements,s=e._x,l=e._y,c=e._z,a=e._w,g=s+s,I=l+l,d=c+c,o=s*g,r=s*I,b=s*d,u=l*I,B=l*d,F=c*d,C=a*g,G=a*I,U=a*d,Q=i.x,h=i.y,m=i.z;return n[0]=(1-(u+F))*Q,n[1]=(r+U)*Q,n[2]=(b-G)*Q,n[3]=0,n[4]=(r-U)*h,n[5]=(1-(o+F))*h,n[6]=(B+C)*h,n[7]=0,n[8]=(b+G)*m,n[9]=(B-C)*m,n[10]=(1-(o+u))*m,n[11]=0,n[12]=t.x,n[13]=t.y,n[14]=t.z,n[15]=1,this}decompose(t,e,i){const n=this.elements;let s=Zn.set(n[0],n[1],n[2]).length();const l=Zn.set(n[4],n[5],n[6]).length(),c=Zn.set(n[8],n[9],n[10]).length();this.determinant()<0&&(s=-s),t.x=n[12],t.y=n[13],t.z=n[14],Rn.copy(this);const a=1/s,g=1/l,I=1/c;return Rn.elements[0]*=a,Rn.elements[1]*=a,Rn.elements[2]*=a,Rn.elements[4]*=g,Rn.elements[5]*=g,Rn.elements[6]*=g,Rn.elements[8]*=I,Rn.elements[9]*=I,Rn.elements[10]*=I,e.setFromRotationMatrix(Rn),i.x=s,i.y=l,i.z=c,this}makePerspective(t,e,i,n,s,l){void 0===l&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");const c=this.elements,a=2*s/(e-t),g=2*s/(i-n),I=(e+t)/(e-t),d=(i+n)/(i-n),o=-(l+s)/(l-s),r=-2*l*s/(l-s);return c[0]=a,c[4]=0,c[8]=I,c[12]=0,c[1]=0,c[5]=g,c[9]=d,c[13]=0,c[2]=0,c[6]=0,c[10]=o,c[14]=r,c[3]=0,c[7]=0,c[11]=-1,c[15]=0,this}makeOrthographic(t,e,i,n,s,l){const c=this.elements,a=1/(e-t),g=1/(i-n),I=1/(l-s),d=(e+t)*a,o=(i+n)*g,r=(l+s)*I;return c[0]=2*a,c[4]=0,c[8]=0,c[12]=-d,c[1]=0,c[5]=2*g,c[9]=0,c[13]=-o,c[2]=0,c[6]=0,c[10]=-2*I,c[14]=-r,c[3]=0,c[7]=0,c[11]=0,c[15]=1,this}equals(t){const e=this.elements,i=t.elements;for(let t=0;t<16;t++)if(e[t]!==i[t])return!1;return!0}fromArray(t,e=0){for(let i=0;i<16;i++)this.elements[i]=t[i+e];return this}toArray(t=[],e=0){const i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t[e+9]=i[9],t[e+10]=i[10],t[e+11]=i[11],t[e+12]=i[12],t[e+13]=i[13],t[e+14]=i[14],t[e+15]=i[15],t}}Vn.prototype.isMatrix4=!0;const Zn=new Oi,Rn=new Vn,yn=new Oi(0,0,0),Ln=new Oi(1,1,1),Xn=new Oi,An=new Oi,Wn=new Oi,Sn=new Vn,En=new Pi;class Nn{constructor(t=0,e=0,i=0,n=Nn.DefaultOrder){this._x=t,this._y=e,this._z=i,this._order=n}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,i,n){return this._x=t,this._y=e,this._z=i,this._order=n||this._order,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e,i){const n=Hi.clamp,s=t.elements,l=s[0],c=s[4],a=s[8],g=s[1],I=s[5],d=s[9],o=s[2],r=s[6],b=s[10];switch(e=e||this._order){case"XYZ":this._y=Math.asin(n(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-d,b),this._z=Math.atan2(-c,l)):(this._x=Math.atan2(r,I),this._z=0);break;case"YXZ":this._x=Math.asin(-n(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(a,b),this._z=Math.atan2(g,I)):(this._y=Math.atan2(-o,l),this._z=0);break;case"ZXY":this._x=Math.asin(n(r,-1,1)),Math.abs(r)<.9999999?(this._y=Math.atan2(-o,b),this._z=Math.atan2(-c,I)):(this._y=0,this._z=Math.atan2(g,l));break;case"ZYX":this._y=Math.asin(-n(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(r,b),this._z=Math.atan2(g,l)):(this._x=0,this._z=Math.atan2(-c,I));break;case"YZX":this._z=Math.asin(n(g,-1,1)),Math.abs(g)<.9999999?(this._x=Math.atan2(-d,I),this._y=Math.atan2(-o,l)):(this._x=0,this._y=Math.atan2(a,b));break;case"XZY":this._z=Math.asin(-n(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(r,I),this._y=Math.atan2(a,l)):(this._x=Math.atan2(-d,b),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,!1!==i&&this._onChangeCallback(),this}setFromQuaternion(t,e,i){return Sn.makeRotationFromQuaternion(t),this.setFromRotationMatrix(Sn,e,i)}setFromVector3(t,e){return this.set(t.x,t.y,t.z,e||this._order)}reorder(t){return En.setFromEuler(this),this.setFromQuaternion(En,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}toVector3(t){return t?t.set(this._x,this._y,this._z):new Oi(this._x,this._y,this._z)}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}}Nn.prototype.isEuler=!0,Nn.DefaultOrder="XYZ",Nn.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class vn{constructor(){this.mask=1}set(t){this.mask=1<<t|0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return 0!=(this.mask&t.mask)}}let Yn=0;const Hn=new Oi,Jn=new Pi,Mn=new Vn,fn=new Oi,kn=new Oi,zn=new Oi,wn=new Pi,Tn=new Oi(1,0,0),Dn=new Oi(0,1,0),Kn=new Oi(0,0,1),jn={type:"added"},Pn={type:"removed"};function On(){Object.defineProperty(this,"id",{value:Yn++}),this.uuid=Hi.generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=On.DefaultUp.clone();const t=new Oi,e=new Nn,i=new Pi,n=new Oi(1,1,1);e._onChange((function(){i.setFromEuler(e,!1)})),i._onChange((function(){e.setFromQuaternion(i,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:i},scale:{configurable:!0,enumerable:!0,value:n},modelViewMatrix:{value:new Vn},normalMatrix:{value:new Mi}}),this.matrix=new Vn,this.matrixWorld=new Vn,this.matrixAutoUpdate=On.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new vn,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}On.DefaultUp=new Oi(0,1,0),On.DefaultMatrixAutoUpdate=!0,On.prototype=Object.assign(Object.create(Ni.prototype),{constructor:On,isObject3D:!0,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix4:function(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(t){return this.quaternion.premultiply(t),this},setRotationFromAxisAngle:function(t,e){this.quaternion.setFromAxisAngle(t,e)},setRotationFromEuler:function(t){this.quaternion.setFromEuler(t,!0)},setRotationFromMatrix:function(t){this.quaternion.setFromRotationMatrix(t)},setRotationFromQuaternion:function(t){this.quaternion.copy(t)},rotateOnAxis:function(t,e){return Jn.setFromAxisAngle(t,e),this.quaternion.multiply(Jn),this},rotateOnWorldAxis:function(t,e){return Jn.setFromAxisAngle(t,e),this.quaternion.premultiply(Jn),this},rotateX:function(t){return this.rotateOnAxis(Tn,t)},rotateY:function(t){return this.rotateOnAxis(Dn,t)},rotateZ:function(t){return this.rotateOnAxis(Kn,t)},translateOnAxis:function(t,e){return Hn.copy(t).applyQuaternion(this.quaternion),this.position.add(Hn.multiplyScalar(e)),this},translateX:function(t){return this.translateOnAxis(Tn,t)},translateY:function(t){return this.translateOnAxis(Dn,t)},translateZ:function(t){return this.translateOnAxis(Kn,t)},localToWorld:function(t){return t.applyMatrix4(this.matrixWorld)},worldToLocal:function(t){return t.applyMatrix4(Mn.copy(this.matrixWorld).invert())},lookAt:function(t,e,i){t.isVector3?fn.copy(t):fn.set(t,e,i);const n=this.parent;this.updateWorldMatrix(!0,!1),kn.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Mn.lookAt(kn,fn,this.up):Mn.lookAt(fn,kn,this.up),this.quaternion.setFromRotationMatrix(Mn),n&&(Mn.extractRotation(n.matrixWorld),Jn.setFromRotationMatrix(Mn),this.quaternion.premultiply(Jn.invert()))},add:function(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(null!==t.parent&&t.parent.remove(t),t.parent=this,this.children.push(t),t.dispatchEvent(jn)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)},remove:function(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.remove(arguments[t]);return this}const e=this.children.indexOf(t);return-1!==e&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(Pn)),this},clear:function(){for(let t=0;t<this.children.length;t++){const e=this.children[t];e.parent=null,e.dispatchEvent(Pn)}return this.children.length=0,this},attach:function(t){return this.updateWorldMatrix(!0,!1),Mn.copy(this.matrixWorld).invert(),null!==t.parent&&(t.parent.updateWorldMatrix(!0,!1),Mn.multiply(t.parent.matrixWorld)),t.applyMatrix4(Mn),this.add(t),t.updateWorldMatrix(!1,!0),this},getObjectById:function(t){return this.getObjectByProperty("id",t)},getObjectByName:function(t){return this.getObjectByProperty("name",t)},getObjectByProperty:function(t,e){if(this[t]===e)return this;for(let i=0,n=this.children.length;i<n;i++){const n=this.children[i].getObjectByProperty(t,e);if(void 0!==n)return n}},getWorldPosition:function(t){return void 0===t&&(console.warn("THREE.Object3D: .getWorldPosition() target is now required"),t=new Oi),this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(t){return void 0===t&&(console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"),t=new Pi),this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(kn,t,zn),t},getWorldScale:function(t){return void 0===t&&(console.warn("THREE.Object3D: .getWorldScale() target is now required"),t=new Oi),this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(kn,wn,t),t},getWorldDirection:function(t){void 0===t&&(console.warn("THREE.Object3D: .getWorldDirection() target is now required"),t=new Oi),this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()},raycast:function(){},traverse:function(t){t(this);const e=this.children;for(let i=0,n=e.length;i<n;i++)e[i].traverse(t)},traverseVisible:function(t){if(!1===this.visible)return;t(this);const e=this.children;for(let i=0,n=e.length;i<n;i++)e[i].traverseVisible(t)},traverseAncestors:function(t){const e=this.parent;null!==e&&(t(e),e.traverseAncestors(t))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let i=0,n=e.length;i<n;i++)e[i].updateMatrixWorld(t)},updateWorldMatrix:function(t,e){const i=this.parent;if(!0===t&&null!==i&&i.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===e){const t=this.children;for(let e=0,i=t.length;e<i;e++)t[e].updateWorldMatrix(!1,!0)}},toJSON:function(t){const e=void 0===t||"string"==typeof t,i={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{}},i.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const n={};function s(e,i){return void 0===e[i.uuid]&&(e[i.uuid]=i.toJSON(t)),i.uuid}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),!0===this.castShadow&&(n.castShadow=!0),!0===this.receiveShadow&&(n.receiveShadow=!0),!1===this.visible&&(n.visible=!1),!1===this.frustumCulled&&(n.frustumCulled=!1),0!==this.renderOrder&&(n.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),n.layers=this.layers.mask,n.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(n.matrixAutoUpdate=!1),this.isInstancedMesh&&(n.type="InstancedMesh",n.count=this.count,n.instanceMatrix=this.instanceMatrix.toJSON()),this.isMesh||this.isLine||this.isPoints){n.geometry=s(t.geometries,this.geometry);const e=this.geometry.parameters;if(void 0!==e&&void 0!==e.shapes){const i=e.shapes;if(Array.isArray(i))for(let e=0,n=i.length;e<n;e++){const n=i[e];s(t.shapes,n)}else s(t.shapes,i)}}if(this.isSkinnedMesh&&(n.bindMode=this.bindMode,n.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(s(t.skeletons,this.skeleton),n.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const e=[];for(let i=0,n=this.material.length;i<n;i++)e.push(s(t.materials,this.material[i]));n.material=e}else n.material=s(t.materials,this.material);if(this.children.length>0){n.children=[];for(let e=0;e<this.children.length;e++)n.children.push(this.children[e].toJSON(t).object)}if(this.animations.length>0){n.animations=[];for(let e=0;e<this.animations.length;e++){const i=this.animations[e];n.animations.push(s(t.animations,i))}}if(e){const e=l(t.geometries),n=l(t.materials),s=l(t.textures),c=l(t.images),a=l(t.shapes),g=l(t.skeletons),I=l(t.animations);e.length>0&&(i.geometries=e),n.length>0&&(i.materials=n),s.length>0&&(i.textures=s),c.length>0&&(i.images=c),a.length>0&&(i.shapes=a),g.length>0&&(i.skeletons=g),I.length>0&&(i.animations=I)}return i.object=n,i;function l(t){const e=[];for(const i in t){const n=t[i];delete n.metadata,e.push(n)}return e}},clone:function(t){return(new this.constructor).copy(this,t)},copy:function(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.userData=JSON.parse(JSON.stringify(t.userData)),!0===e)for(let e=0;e<t.children.length;e++){const i=t.children[e];this.add(i.clone())}return this}});const _n=new Oi,qn=new Oi,$n=new Mi;class ts{constructor(t=new Oi(1,0,0),e=0){this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,i,n){return this.normal.set(t,e,i),this.constant=n,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,i){const n=_n.subVectors(i,e).cross(qn.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(n,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return void 0===e&&(console.warn("THREE.Plane: .projectPoint() target is now required"),e=new Oi),e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)}intersectLine(t,e){void 0===e&&(console.warn("THREE.Plane: .intersectLine() target is now required"),e=new Oi);const i=t.delta(_n),n=this.normal.dot(i);if(0===n)return 0===this.distanceToPoint(t.start)?e.copy(t.start):void 0;const s=-(t.start.dot(this.normal)+this.constant)/n;return s<0||s>1?void 0:e.copy(i).multiplyScalar(s).add(t.start)}intersectsLine(t){const e=this.distanceToPoint(t.start),i=this.distanceToPoint(t.end);return e<0&&i>0||i<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return void 0===t&&(console.warn("THREE.Plane: .coplanarPoint() target is now required"),t=new Oi),t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const i=e||$n.getNormalMatrix(t),n=this.coplanarPoint(_n).applyMatrix4(t),s=this.normal.applyMatrix3(i).normalize();return this.constant=-n.dot(s),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return(new this.constructor).copy(this)}}ts.prototype.isPlane=!0;const es=new Oi,is=new Oi,ns=new Oi,ss=new Oi,ls=new Oi,cs=new Oi,as=new Oi,gs=new Oi,Is=new Oi,ds=new Oi;class os{constructor(t=new Oi,e=new Oi,i=new Oi){this.a=t,this.b=e,this.c=i}static getNormal(t,e,i,n){void 0===n&&(console.warn("THREE.Triangle: .getNormal() target is now required"),n=new Oi),n.subVectors(i,e),es.subVectors(t,e),n.cross(es);const s=n.lengthSq();return s>0?n.multiplyScalar(1/Math.sqrt(s)):n.set(0,0,0)}static getBarycoord(t,e,i,n,s){es.subVectors(n,e),is.subVectors(i,e),ns.subVectors(t,e);const l=es.dot(es),c=es.dot(is),a=es.dot(ns),g=is.dot(is),I=is.dot(ns),d=l*g-c*c;if(void 0===s&&(console.warn("THREE.Triangle: .getBarycoord() target is now required"),s=new Oi),0===d)return s.set(-2,-1,-1);const o=1/d,r=(g*a-c*I)*o,b=(l*I-c*a)*o;return s.set(1-r-b,b,r)}static containsPoint(t,e,i,n){return this.getBarycoord(t,e,i,n,ss),ss.x>=0&&ss.y>=0&&ss.x+ss.y<=1}static getUV(t,e,i,n,s,l,c,a){return this.getBarycoord(t,e,i,n,ss),a.set(0,0),a.addScaledVector(s,ss.x),a.addScaledVector(l,ss.y),a.addScaledVector(c,ss.z),a}static isFrontFacing(t,e,i,n){return es.subVectors(i,e),is.subVectors(t,e),es.cross(is).dot(n)<0}set(t,e,i){return this.a.copy(t),this.b.copy(e),this.c.copy(i),this}setFromPointsAndIndices(t,e,i,n){return this.a.copy(t[e]),this.b.copy(t[i]),this.c.copy(t[n]),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return es.subVectors(this.c,this.b),is.subVectors(this.a,this.b),.5*es.cross(is).length()}getMidpoint(t){return void 0===t&&(console.warn("THREE.Triangle: .getMidpoint() target is now required"),t=new Oi),t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return os.getNormal(this.a,this.b,this.c,t)}getPlane(t){return void 0===t&&(console.warn("THREE.Triangle: .getPlane() target is now required"),t=new ts),t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return os.getBarycoord(t,this.a,this.b,this.c,e)}getUV(t,e,i,n,s){return os.getUV(t,this.a,this.b,this.c,e,i,n,s)}containsPoint(t){return os.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return os.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){void 0===e&&(console.warn("THREE.Triangle: .closestPointToPoint() target is now required"),e=new Oi);const i=this.a,n=this.b,s=this.c;let l,c;ls.subVectors(n,i),cs.subVectors(s,i),gs.subVectors(t,i);const a=ls.dot(gs),g=cs.dot(gs);if(a<=0&&g<=0)return e.copy(i);Is.subVectors(t,n);const I=ls.dot(Is),d=cs.dot(Is);if(I>=0&&d<=I)return e.copy(n);const o=a*d-I*g;if(o<=0&&a>=0&&I<=0)return l=a/(a-I),e.copy(i).addScaledVector(ls,l);ds.subVectors(t,s);const r=ls.dot(ds),b=cs.dot(ds);if(b>=0&&r<=b)return e.copy(s);const u=r*g-a*b;if(u<=0&&g>=0&&b<=0)return c=g/(g-b),e.copy(i).addScaledVector(cs,c);const B=I*b-r*d;if(B<=0&&d-I>=0&&r-b>=0)return as.subVectors(s,n),c=(d-I)/(d-I+(r-b)),e.copy(n).addScaledVector(as,c);const F=1/(B+u+o);return l=u*F,c=o*F,e.copy(i).addScaledVector(ls,l).addScaledVector(cs,c)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}let rs=0;function bs(){Object.defineProperty(this,"id",{value:rs++}),this.uuid=Hi.generateUUID(),this.name="",this.type="Material",this.fog=!0,this.blending=Q,this.side=u,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=E,this.blendDst=N,this.blendEquation=V,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=w,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=xi,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=Ii,this.stencilZFail=Ii,this.stencilZPass=Ii,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0}bs.prototype=Object.assign(Object.create(Ni.prototype),{constructor:bs,isMaterial:!0,onBeforeCompile:function(){},customProgramCacheKey:function(){return this.onBeforeCompile.toString()},setValues:function(t){if(void 0!==t)for(const e in t){const i=t[e];if(void 0===i){console.warn("THREE.Material: '"+e+"' parameter is undefined.");continue}if("shading"===e){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=i===C;continue}const n=this[e];void 0!==n?n&&n.isColor?n.set(i):n&&n.isVector3&&i&&i.isVector3?n.copy(i):this[e]=i:console.warn("THREE."+this.type+": '"+e+"' is not a property of this material.")}},toJSON:function(t){const e=void 0===t||"string"==typeof t;e&&(t={textures:{},images:{}});const i={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function n(t){const e=[];for(const i in t){const n=t[i];delete n.metadata,e.push(n)}return e}if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),this.color&&this.color.isColor&&(i.color=this.color.getHex()),void 0!==this.roughness&&(i.roughness=this.roughness),void 0!==this.metalness&&(i.metalness=this.metalness),this.sheen&&this.sheen.isColor&&(i.sheen=this.sheen.getHex()),this.emissive&&this.emissive.isColor&&(i.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(i.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(i.specular=this.specular.getHex()),void 0!==this.shininess&&(i.shininess=this.shininess),void 0!==this.clearcoat&&(i.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(i.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(i.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(i.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(i.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,i.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(i.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(i.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(i.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(i.lightMap=this.lightMap.toJSON(t).uuid,i.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(i.aoMap=this.aoMap.toJSON(t).uuid,i.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(i.bumpMap=this.bumpMap.toJSON(t).uuid,i.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(i.normalMap=this.normalMap.toJSON(t).uuid,i.normalMapType=this.normalMapType,i.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(i.displacementMap=this.displacementMap.toJSON(t).uuid,i.displacementScale=this.displacementScale,i.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(i.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(i.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(i.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(i.specularMap=this.specularMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(i.envMap=this.envMap.toJSON(t).uuid,i.reflectivity=this.reflectivity,i.refractionRatio=this.refractionRatio,void 0!==this.combine&&(i.combine=this.combine),void 0!==this.envMapIntensity&&(i.envMapIntensity=this.envMapIntensity)),this.gradientMap&&this.gradientMap.isTexture&&(i.gradientMap=this.gradientMap.toJSON(t).uuid),void 0!==this.size&&(i.size=this.size),void 0!==this.sizeAttenuation&&(i.sizeAttenuation=this.sizeAttenuation),this.blending!==Q&&(i.blending=this.blending),this.side!==u&&(i.side=this.side),this.vertexColors&&(i.vertexColors=!0),this.opacity<1&&(i.opacity=this.opacity),!0===this.transparent&&(i.transparent=this.transparent),i.depthFunc=this.depthFunc,i.depthTest=this.depthTest,i.depthWrite=this.depthWrite,i.stencilWrite=this.stencilWrite,i.stencilWriteMask=this.stencilWriteMask,i.stencilFunc=this.stencilFunc,i.stencilRef=this.stencilRef,i.stencilFuncMask=this.stencilFuncMask,i.stencilFail=this.stencilFail,i.stencilZFail=this.stencilZFail,i.stencilZPass=this.stencilZPass,this.rotation&&0!==this.rotation&&(i.rotation=this.rotation),!0===this.polygonOffset&&(i.polygonOffset=!0),0!==this.polygonOffsetFactor&&(i.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(i.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&1!==this.linewidth&&(i.linewidth=this.linewidth),void 0!==this.dashSize&&(i.dashSize=this.dashSize),void 0!==this.gapSize&&(i.gapSize=this.gapSize),void 0!==this.scale&&(i.scale=this.scale),!0===this.dithering&&(i.dithering=!0),this.alphaTest>0&&(i.alphaTest=this.alphaTest),!0===this.premultipliedAlpha&&(i.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(i.wireframe=this.wireframe),this.wireframeLinewidth>1&&(i.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(i.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(i.wireframeLinejoin=this.wireframeLinejoin),!0===this.morphTargets&&(i.morphTargets=!0),!0===this.morphNormals&&(i.morphNormals=!0),!0===this.skinning&&(i.skinning=!0),!0===this.flatShading&&(i.flatShading=this.flatShading),!1===this.visible&&(i.visible=!1),!1===this.toneMapped&&(i.toneMapped=!1),"{}"!==JSON.stringify(this.userData)&&(i.userData=this.userData),e){const e=n(t.textures),s=n(t.images);e.length>0&&(i.textures=e),s.length>0&&(i.images=s)}return i},clone:function(){return(new this.constructor).copy(this)},copy:function(t){this.name=t.name,this.fog=t.fog,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let i=null;if(null!==e){const t=e.length;i=new Array(t);for(let n=0;n!==t;++n)i[n]=e[n].clone()}return this.clippingPlanes=i,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.premultipliedAlpha=t.premultipliedAlpha,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),Object.defineProperty(bs.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}});const us={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Bs={h:0,s:0,l:0},Fs={h:0,s:0,l:0};function Cs(t,e,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?t+6*(e-t)*i:i<.5?e:i<2/3?t+6*(e-t)*(2/3-i):t}function Gs(t){return t<.04045?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}function Us(t){return t<.0031308?12.92*t:1.055*Math.pow(t,.41666)-.055}class Qs{constructor(t,e,i){return void 0===e&&void 0===i?this.set(t):this.setRGB(t,e,i)}set(t){return t&&t.isColor?this.copy(t):"number"==typeof t?this.setHex(t):"string"==typeof t&&this.setStyle(t),this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,this}setRGB(t,e,i){return this.r=t,this.g=e,this.b=i,this}setHSL(t,e,i){if(t=Hi.euclideanModulo(t,1),e=Hi.clamp(e,0,1),i=Hi.clamp(i,0,1),0===e)this.r=this.g=this.b=i;else{const n=i<=.5?i*(1+e):i+e-i*e,s=2*i-n;this.r=Cs(s,n,t+1/3),this.g=Cs(s,n,t),this.b=Cs(s,n,t-1/3)}return this}setStyle(t){function e(e){void 0!==e&&parseFloat(e)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let i;if(i=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(t)){let t;const n=i[1],s=i[2];switch(n){case"rgb":case"rgba":if(t=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return this.r=Math.min(255,parseInt(t[1],10))/255,this.g=Math.min(255,parseInt(t[2],10))/255,this.b=Math.min(255,parseInt(t[3],10))/255,e(t[4]),this;if(t=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return this.r=Math.min(100,parseInt(t[1],10))/100,this.g=Math.min(100,parseInt(t[2],10))/100,this.b=Math.min(100,parseInt(t[3],10))/100,e(t[4]),this;break;case"hsl":case"hsla":if(t=/^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s)){const i=parseFloat(t[1])/360,n=parseInt(t[2],10)/100,s=parseInt(t[3],10)/100;return e(t[4]),this.setHSL(i,n,s)}}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(t)){const t=i[1],e=t.length;if(3===e)return this.r=parseInt(t.charAt(0)+t.charAt(0),16)/255,this.g=parseInt(t.charAt(1)+t.charAt(1),16)/255,this.b=parseInt(t.charAt(2)+t.charAt(2),16)/255,this;if(6===e)return this.r=parseInt(t.charAt(0)+t.charAt(1),16)/255,this.g=parseInt(t.charAt(2)+t.charAt(3),16)/255,this.b=parseInt(t.charAt(4)+t.charAt(5),16)/255,this}return t&&t.length>0?this.setColorName(t):this}setColorName(t){const e=us[t];return void 0!==e?this.setHex(e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copyGammaToLinear(t,e=2){return this.r=Math.pow(t.r,e),this.g=Math.pow(t.g,e),this.b=Math.pow(t.b,e),this}copyLinearToGamma(t,e=2){const i=e>0?1/e:1;return this.r=Math.pow(t.r,i),this.g=Math.pow(t.g,i),this.b=Math.pow(t.b,i),this}convertGammaToLinear(t){return this.copyGammaToLinear(this,t),this}convertLinearToGamma(t){return this.copyLinearToGamma(this,t),this}copySRGBToLinear(t){return this.r=Gs(t.r),this.g=Gs(t.g),this.b=Gs(t.b),this}copyLinearToSRGB(t){return this.r=Us(t.r),this.g=Us(t.g),this.b=Us(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0}getHexString(){return("000000"+this.getHex().toString(16)).slice(-6)}getHSL(t){void 0===t&&(console.warn("THREE.Color: .getHSL() target is now required"),t={h:0,s:0,l:0});const e=this.r,i=this.g,n=this.b,s=Math.max(e,i,n),l=Math.min(e,i,n);let c,a;const g=(l+s)/2;if(l===s)c=0,a=0;else{const t=s-l;switch(a=g<=.5?t/(s+l):t/(2-s-l),s){case e:c=(i-n)/t+(i<n?6:0);break;case i:c=(n-e)/t+2;break;case n:c=(e-i)/t+4}c/=6}return t.h=c,t.s=a,t.l=g,t}getStyle(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"}offsetHSL(t,e,i){return this.getHSL(Bs),Bs.h+=t,Bs.s+=e,Bs.l+=i,this.setHSL(Bs.h,Bs.s,Bs.l),this}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,i){return this.r=t.r+(e.r-t.r)*i,this.g=t.g+(e.g-t.g)*i,this.b=t.b+(e.b-t.b)*i,this}lerpHSL(t,e){this.getHSL(Bs),t.getHSL(Fs);const i=Hi.lerp(Bs.h,Fs.h,e),n=Hi.lerp(Bs.s,Fs.s,e),s=Hi.lerp(Bs.l,Fs.l,e);return this.setHSL(i,n,s),this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),!0===t.normalized&&(this.r/=255,this.g/=255,this.b/=255),this}toJSON(){return this.getHex()}}Qs.NAMES=us,Qs.prototype.isColor=!0,Qs.prototype.r=1,Qs.prototype.g=1,Qs.prototype.b=1;class hs extends bs{constructor(t){super(),this.type="MeshBasicMaterial",this.color=new Qs(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=P,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this}}hs.prototype.isMeshBasicMaterial=!0;const ms=new Oi,xs=new Ji;function ps(t,e,i){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=!0===i,this.usage=pi,this.updateRange={offset:0,count:-1},this.version=0}function Vs(t,e,i){ps.call(this,new Int8Array(t),e,i)}function Zs(t,e,i){ps.call(this,new Uint8Array(t),e,i)}function Rs(t,e,i){ps.call(this,new Uint8ClampedArray(t),e,i)}function ys(t,e,i){ps.call(this,new Int16Array(t),e,i)}function Ls(t,e,i){ps.call(this,new Uint16Array(t),e,i)}function Xs(t,e,i){ps.call(this,new Int32Array(t),e,i)}function As(t,e,i){ps.call(this,new Uint32Array(t),e,i)}function Ws(t,e,i){ps.call(this,new Uint16Array(t),e,i)}function Ss(t,e,i){ps.call(this,new Float32Array(t),e,i)}function Es(t,e,i){ps.call(this,new Float64Array(t),e,i)}function Ns(t){if(0===t.length)return-1/0;let e=t[0];for(let i=1,n=t.length;i<n;++i)t[i]>e&&(e=t[i]);return e}Object.defineProperty(ps.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),Object.assign(ps.prototype,{isBufferAttribute:!0,onUploadCallback:function(){},setUsage:function(t){return this.usage=t,this},copy:function(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this},copyAt:function(t,e,i){t*=this.itemSize,i*=e.itemSize;for(let n=0,s=this.itemSize;n<s;n++)this.array[t+n]=e.array[i+n];return this},copyArray:function(t){return this.array.set(t),this},copyColorsArray:function(t){const e=this.array;let i=0;for(let n=0,s=t.length;n<s;n++){let s=t[n];void 0===s&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",n),s=new Qs),e[i++]=s.r,e[i++]=s.g,e[i++]=s.b}return this},copyVector2sArray:function(t){const e=this.array;let i=0;for(let n=0,s=t.length;n<s;n++){let s=t[n];void 0===s&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",n),s=new Ji),e[i++]=s.x,e[i++]=s.y}return this},copyVector3sArray:function(t){const e=this.array;let i=0;for(let n=0,s=t.length;n<s;n++){let s=t[n];void 0===s&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",n),s=new Oi),e[i++]=s.x,e[i++]=s.y,e[i++]=s.z}return this},copyVector4sArray:function(t){const e=this.array;let i=0;for(let n=0,s=t.length;n<s;n++){let s=t[n];void 0===s&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",n),s=new Di),e[i++]=s.x,e[i++]=s.y,e[i++]=s.z,e[i++]=s.w}return this},applyMatrix3:function(t){if(2===this.itemSize)for(let e=0,i=this.count;e<i;e++)xs.fromBufferAttribute(this,e),xs.applyMatrix3(t),this.setXY(e,xs.x,xs.y);else if(3===this.itemSize)for(let e=0,i=this.count;e<i;e++)ms.fromBufferAttribute(this,e),ms.applyMatrix3(t),this.setXYZ(e,ms.x,ms.y,ms.z);return this},applyMatrix4:function(t){for(let e=0,i=this.count;e<i;e++)ms.x=this.getX(e),ms.y=this.getY(e),ms.z=this.getZ(e),ms.applyMatrix4(t),this.setXYZ(e,ms.x,ms.y,ms.z);return this},applyNormalMatrix:function(t){for(let e=0,i=this.count;e<i;e++)ms.x=this.getX(e),ms.y=this.getY(e),ms.z=this.getZ(e),ms.applyNormalMatrix(t),this.setXYZ(e,ms.x,ms.y,ms.z);return this},transformDirection:function(t){for(let e=0,i=this.count;e<i;e++)ms.x=this.getX(e),ms.y=this.getY(e),ms.z=this.getZ(e),ms.transformDirection(t),this.setXYZ(e,ms.x,ms.y,ms.z);return this},set:function(t,e=0){return this.array.set(t,e),this},getX:function(t){return this.array[t*this.itemSize]},setX:function(t,e){return this.array[t*this.itemSize]=e,this},getY:function(t){return this.array[t*this.itemSize+1]},setY:function(t,e){return this.array[t*this.itemSize+1]=e,this},getZ:function(t){return this.array[t*this.itemSize+2]},setZ:function(t,e){return this.array[t*this.itemSize+2]=e,this},getW:function(t){return this.array[t*this.itemSize+3]},setW:function(t,e){return this.array[t*this.itemSize+3]=e,this},setXY:function(t,e,i){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=i,this},setXYZ:function(t,e,i,n){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=i,this.array[t+2]=n,this},setXYZW:function(t,e,i,n,s){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=i,this.array[t+2]=n,this.array[t+3]=s,this},onUpload:function(t){return this.onUploadCallback=t,this},clone:function(){return new this.constructor(this.array,this.itemSize).copy(this)},toJSON:function(){return{itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized}}}),Vs.prototype=Object.create(ps.prototype),Vs.prototype.constructor=Vs,Zs.prototype=Object.create(ps.prototype),Zs.prototype.constructor=Zs,Rs.prototype=Object.create(ps.prototype),Rs.prototype.constructor=Rs,ys.prototype=Object.create(ps.prototype),ys.prototype.constructor=ys,Ls.prototype=Object.create(ps.prototype),Ls.prototype.constructor=Ls,Xs.prototype=Object.create(ps.prototype),Xs.prototype.constructor=Xs,As.prototype=Object.create(ps.prototype),As.prototype.constructor=As,Ws.prototype=Object.create(ps.prototype),Ws.prototype.constructor=Ws,Ws.prototype.isFloat16BufferAttribute=!0,Ss.prototype=Object.create(ps.prototype),Ss.prototype.constructor=Ss,Es.prototype=Object.create(ps.prototype),Es.prototype.constructor=Es;const vs={Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array};function Ys(t,e){return new vs[t](e)}let Hs=0;const Js=new Vn,Ms=new On,fs=new Oi,ks=new $i,zs=new $i,ws=new Oi;function Ts(){Object.defineProperty(this,"id",{value:Hs++}),this.uuid=Hi.generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}Ts.prototype=Object.assign(Object.create(Ni.prototype),{constructor:Ts,isBufferGeometry:!0,getIndex:function(){return this.index},setIndex:function(t){return Array.isArray(t)?this.index=new(Ns(t)>65535?As:Ls)(t,1):this.index=t,this},getAttribute:function(t){return this.attributes[t]},setAttribute:function(t,e){return this.attributes[t]=e,this},deleteAttribute:function(t){return delete this.attributes[t],this},hasAttribute:function(t){return void 0!==this.attributes[t]},addGroup:function(t,e,i=0){this.groups.push({start:t,count:e,materialIndex:i})},clearGroups:function(){this.groups=[]},setDrawRange:function(t,e){this.drawRange.start=t,this.drawRange.count=e},applyMatrix4:function(t){const e=this.attributes.position;void 0!==e&&(e.applyMatrix4(t),e.needsUpdate=!0);const i=this.attributes.normal;if(void 0!==i){const e=(new Mi).getNormalMatrix(t);i.applyNormalMatrix(e),i.needsUpdate=!0}const n=this.attributes.tangent;return void 0!==n&&(n.transformDirection(t),n.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},rotateX:function(t){return Js.makeRotationX(t),this.applyMatrix4(Js),this},rotateY:function(t){return Js.makeRotationY(t),this.applyMatrix4(Js),this},rotateZ:function(t){return Js.makeRotationZ(t),this.applyMatrix4(Js),this},translate:function(t,e,i){return Js.makeTranslation(t,e,i),this.applyMatrix4(Js),this},scale:function(t,e,i){return Js.makeScale(t,e,i),this.applyMatrix4(Js),this},lookAt:function(t){return Ms.lookAt(t),Ms.updateMatrix(),this.applyMatrix4(Ms.matrix),this},center:function(){return this.computeBoundingBox(),this.boundingBox.getCenter(fs).negate(),this.translate(fs.x,fs.y,fs.z),this},setFromPoints:function(t){const e=[];for(let i=0,n=t.length;i<n;i++){const n=t[i];e.push(n.x,n.y,n.z||0)}return this.setAttribute("position",new Ss(e,3)),this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new $i);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingBox.set(new Oi(-1/0,-1/0,-1/0),new Oi(1/0,1/0,1/0));if(void 0!==t){if(this.boundingBox.setFromBufferAttribute(t),e)for(let t=0,i=e.length;t<i;t++){const i=e[t];ks.setFromBufferAttribute(i),this.morphTargetsRelative?(ws.addVectors(this.boundingBox.min,ks.min),this.boundingBox.expandByPoint(ws),ws.addVectors(this.boundingBox.max,ks.max),this.boundingBox.expandByPoint(ws)):(this.boundingBox.expandByPoint(ks.min),this.boundingBox.expandByPoint(ks.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new Fn);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingSphere.set(new Oi,1/0);if(t){const i=this.boundingSphere.center;if(ks.setFromBufferAttribute(t),e)for(let t=0,i=e.length;t<i;t++){const i=e[t];zs.setFromBufferAttribute(i),this.morphTargetsRelative?(ws.addVectors(ks.min,zs.min),ks.expandByPoint(ws),ws.addVectors(ks.max,zs.max),ks.expandByPoint(ws)):(ks.expandByPoint(zs.min),ks.expandByPoint(zs.max))}ks.getCenter(i);let n=0;for(let e=0,s=t.count;e<s;e++)ws.fromBufferAttribute(t,e),n=Math.max(n,i.distanceToSquared(ws));if(e)for(let s=0,l=e.length;s<l;s++){const l=e[s],c=this.morphTargetsRelative;for(let e=0,s=l.count;e<s;e++)ws.fromBufferAttribute(l,e),c&&(fs.fromBufferAttribute(t,e),ws.add(fs)),n=Math.max(n,i.distanceToSquared(ws))}this.boundingSphere.radius=Math.sqrt(n),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}},computeFaceNormals:function(){},computeTangents:function(){const t=this.index,e=this.attributes;if(null===t||void 0===e.position||void 0===e.normal||void 0===e.uv)return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");const i=t.array,n=e.position.array,s=e.normal.array,l=e.uv.array,c=n.length/3;void 0===e.tangent&&this.setAttribute("tangent",new ps(new Float32Array(4*c),4));const a=e.tangent.array,g=[],I=[];for(let t=0;t<c;t++)g[t]=new Oi,I[t]=new Oi;const d=new Oi,o=new Oi,r=new Oi,b=new Ji,u=new Ji,B=new Ji,F=new Oi,C=new Oi;function G(t,e,i){d.fromArray(n,3*t),o.fromArray(n,3*e),r.fromArray(n,3*i),b.fromArray(l,2*t),u.fromArray(l,2*e),B.fromArray(l,2*i),o.sub(d),r.sub(d),u.sub(b),B.sub(b);const s=1/(u.x*B.y-B.x*u.y);isFinite(s)&&(F.copy(o).multiplyScalar(B.y).addScaledVector(r,-u.y).multiplyScalar(s),C.copy(r).multiplyScalar(u.x).addScaledVector(o,-B.x).multiplyScalar(s),g[t].add(F),g[e].add(F),g[i].add(F),I[t].add(C),I[e].add(C),I[i].add(C))}let U=this.groups;0===U.length&&(U=[{start:0,count:i.length}]);for(let t=0,e=U.length;t<e;++t){const e=U[t],n=e.start;for(let t=n,s=n+e.count;t<s;t+=3)G(i[t+0],i[t+1],i[t+2])}const Q=new Oi,h=new Oi,m=new Oi,x=new Oi;function p(t){m.fromArray(s,3*t),x.copy(m);const e=g[t];Q.copy(e),Q.sub(m.multiplyScalar(m.dot(e))).normalize(),h.crossVectors(x,e);const i=h.dot(I[t])<0?-1:1;a[4*t]=Q.x,a[4*t+1]=Q.y,a[4*t+2]=Q.z,a[4*t+3]=i}for(let t=0,e=U.length;t<e;++t){const e=U[t],n=e.start;for(let t=n,s=n+e.count;t<s;t+=3)p(i[t+0]),p(i[t+1]),p(i[t+2])}},computeVertexNormals:function(){const t=this.index,e=this.getAttribute("position");if(void 0!==e){let i=this.getAttribute("normal");if(void 0===i)i=new ps(new Float32Array(3*e.count),3),this.setAttribute("normal",i);else for(let t=0,e=i.count;t<e;t++)i.setXYZ(t,0,0,0);const n=new Oi,s=new Oi,l=new Oi,c=new Oi,a=new Oi,g=new Oi,I=new Oi,d=new Oi;if(t)for(let o=0,r=t.count;o<r;o+=3){const r=t.getX(o+0),b=t.getX(o+1),u=t.getX(o+2);n.fromBufferAttribute(e,r),s.fromBufferAttribute(e,b),l.fromBufferAttribute(e,u),I.subVectors(l,s),d.subVectors(n,s),I.cross(d),c.fromBufferAttribute(i,r),a.fromBufferAttribute(i,b),g.fromBufferAttribute(i,u),c.add(I),a.add(I),g.add(I),i.setXYZ(r,c.x,c.y,c.z),i.setXYZ(b,a.x,a.y,a.z),i.setXYZ(u,g.x,g.y,g.z)}else for(let t=0,c=e.count;t<c;t+=3)n.fromBufferAttribute(e,t+0),s.fromBufferAttribute(e,t+1),l.fromBufferAttribute(e,t+2),I.subVectors(l,s),d.subVectors(n,s),I.cross(d),i.setXYZ(t+0,I.x,I.y,I.z),i.setXYZ(t+1,I.x,I.y,I.z),i.setXYZ(t+2,I.x,I.y,I.z);this.normalizeNormals(),i.needsUpdate=!0}},merge:function(t,e){if(!t||!t.isBufferGeometry)return void console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",t);void 0===e&&(e=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));const i=this.attributes;for(const n in i){if(void 0===t.attributes[n])continue;const s=i[n].array,l=t.attributes[n],c=l.array,a=l.itemSize*e,g=Math.min(c.length,s.length-a);for(let t=0,e=a;t<g;t++,e++)s[e]=c[t]}return this},normalizeNormals:function(){const t=this.attributes.normal;for(let e=0,i=t.count;e<i;e++)ws.fromBufferAttribute(t,e),ws.normalize(),t.setXYZ(e,ws.x,ws.y,ws.z)},toNonIndexed:function(){function t(t,e){const i=t.array,n=t.itemSize,s=t.normalized,l=new i.constructor(e.length*n);let c=0,a=0;for(let t=0,s=e.length;t<s;t++){c=e[t]*n;for(let t=0;t<n;t++)l[a++]=i[c++]}return new ps(l,n,s)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new Ts,i=this.index.array,n=this.attributes;for(const s in n){const l=t(n[s],i);e.setAttribute(s,l)}const s=this.morphAttributes;for(const n in s){const l=[],c=s[n];for(let e=0,n=c.length;e<n;e++){const n=t(c[e],i);l.push(n)}e.morphAttributes[n]=l}e.morphTargetsRelative=this.morphTargetsRelative;const l=this.groups;for(let t=0,i=l.length;t<i;t++){const i=l[t];e.addGroup(i.start,i.count,i.materialIndex)}return e},toJSON:function(){const t={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),void 0!==this.parameters){const e=this.parameters;for(const i in e)void 0!==e[i]&&(t[i]=e[i]);return t}t.data={attributes:{}};const e=this.index;null!==e&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const i=this.attributes;for(const e in i){const n=i[e],s=n.toJSON(t.data);""!==n.name&&(s.name=n.name),t.data.attributes[e]=s}const n={};let s=!1;for(const e in this.morphAttributes){const i=this.morphAttributes[e],l=[];for(let e=0,n=i.length;e<n;e++){const n=i[e],s=n.toJSON(t.data);""!==n.name&&(s.name=n.name),l.push(s)}l.length>0&&(n[e]=l,s=!0)}s&&(t.data.morphAttributes=n,t.data.morphTargetsRelative=this.morphTargetsRelative);const l=this.groups;l.length>0&&(t.data.groups=JSON.parse(JSON.stringify(l)));const c=this.boundingSphere;return null!==c&&(t.data.boundingSphere={center:c.center.toArray(),radius:c.radius}),t},clone:function(){return(new Ts).copy(this)},copy:function(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const i=t.index;null!==i&&this.setIndex(i.clone(e));const n=t.attributes;for(const t in n){const i=n[t];this.setAttribute(t,i.clone(e))}const s=t.morphAttributes;for(const t in s){const i=[],n=s[t];for(let t=0,s=n.length;t<s;t++)i.push(n[t].clone(e));this.morphAttributes[t]=i}this.morphTargetsRelative=t.morphTargetsRelative;const l=t.groups;for(let t=0,e=l.length;t<e;t++){const e=l[t];this.addGroup(e.start,e.count,e.materialIndex)}const c=t.boundingBox;null!==c&&(this.boundingBox=c.clone());const a=t.boundingSphere;return null!==a&&(this.boundingSphere=a.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this},dispose:function(){this.dispatchEvent({type:"dispose"})}});const Ds=new Vn,Ks=new pn,js=new Fn,Ps=new Oi,Os=new Oi,_s=new Oi,qs=new Oi,$s=new Oi,tl=new Oi,el=new Oi,il=new Oi,nl=new Oi,sl=new Ji,ll=new Ji,cl=new Ji,al=new Oi,gl=new Oi;function Il(t=new Ts,e=new hs){On.call(this),this.type="Mesh",this.geometry=t,this.material=e,this.updateMorphTargets()}function dl(t,e,i,n,s,l,c,a,g,I,d,o){Ps.fromBufferAttribute(s,I),Os.fromBufferAttribute(s,d),_s.fromBufferAttribute(s,o);const r=t.morphTargetInfluences;if(e.morphTargets&&l&&r){el.set(0,0,0),il.set(0,0,0),nl.set(0,0,0);for(let t=0,e=l.length;t<e;t++){const e=r[t],i=l[t];0!==e&&(qs.fromBufferAttribute(i,I),$s.fromBufferAttribute(i,d),tl.fromBufferAttribute(i,o),c?(el.addScaledVector(qs,e),il.addScaledVector($s,e),nl.addScaledVector(tl,e)):(el.addScaledVector(qs.sub(Ps),e),il.addScaledVector($s.sub(Os),e),nl.addScaledVector(tl.sub(_s),e)))}Ps.add(el),Os.add(il),_s.add(nl)}t.isSkinnedMesh&&e.skinning&&(t.boneTransform(I,Ps),t.boneTransform(d,Os),t.boneTransform(o,_s));const b=function(t,e,i,n,s,l,c,a){let g;if(g=e.side===B?n.intersectTriangle(c,l,s,!0,a):n.intersectTriangle(s,l,c,e.side!==F,a),null===g)return null;gl.copy(a),gl.applyMatrix4(t.matrixWorld);const I=i.ray.origin.distanceTo(gl);return I<i.near||I>i.far?null:{distance:I,point:gl.clone(),object:t}}(t,e,i,n,Ps,Os,_s,al);if(b){a&&(sl.fromBufferAttribute(a,I),ll.fromBufferAttribute(a,d),cl.fromBufferAttribute(a,o),b.uv=os.getUV(al,Ps,Os,_s,sl,ll,cl,new Ji)),g&&(sl.fromBufferAttribute(g,I),ll.fromBufferAttribute(g,d),cl.fromBufferAttribute(g,o),b.uv2=os.getUV(al,Ps,Os,_s,sl,ll,cl,new Ji));const t={a:I,b:I,c:o,normal:new Oi,materialIndex:0};os.getNormal(Ps,Os,_s,t.normal),b.face=t}return b}Il.prototype=Object.assign(Object.create(On.prototype),{constructor:Il,isMesh:!0,copy:function(t){return On.prototype.copy.call(this,t),void 0!==t.morphTargetInfluences&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),void 0!==t.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=t.material,this.geometry=t.geometry,this},updateMorphTargets:function(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,i=Object.keys(e);if(i.length>0){const t=e[i[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,i=t.length;e<i;e++){const i=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[i]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}},raycast:function(t,e){const i=this.geometry,n=this.material,s=this.matrixWorld;if(void 0===n)return;if(null===i.boundingSphere&&i.computeBoundingSphere(),js.copy(i.boundingSphere),js.applyMatrix4(s),!1===t.ray.intersectsSphere(js))return;if(Ds.copy(s).invert(),Ks.copy(t.ray).applyMatrix4(Ds),null!==i.boundingBox&&!1===Ks.intersectsBox(i.boundingBox))return;let l;if(i.isBufferGeometry){const s=i.index,c=i.attributes.position,a=i.morphAttributes.position,g=i.morphTargetsRelative,I=i.attributes.uv,d=i.attributes.uv2,o=i.groups,r=i.drawRange;if(null!==s)if(Array.isArray(n))for(let i=0,b=o.length;i<b;i++){const b=o[i],u=n[b.materialIndex];for(let i=Math.max(b.start,r.start),n=Math.min(b.start+b.count,r.start+r.count);i<n;i+=3){const n=s.getX(i),o=s.getX(i+1),r=s.getX(i+2);l=dl(this,u,t,Ks,c,a,g,I,d,n,o,r),l&&(l.faceIndex=Math.floor(i/3),l.face.materialIndex=b.materialIndex,e.push(l))}}else for(let i=Math.max(0,r.start),o=Math.min(s.count,r.start+r.count);i<o;i+=3){const o=s.getX(i),r=s.getX(i+1),b=s.getX(i+2);l=dl(this,n,t,Ks,c,a,g,I,d,o,r,b),l&&(l.faceIndex=Math.floor(i/3),e.push(l))}else if(void 0!==c)if(Array.isArray(n))for(let i=0,s=o.length;i<s;i++){const s=o[i],b=n[s.materialIndex];for(let i=Math.max(s.start,r.start),n=Math.min(s.start+s.count,r.start+r.count);i<n;i+=3)l=dl(this,b,t,Ks,c,a,g,I,d,i,i+1,i+2),l&&(l.faceIndex=Math.floor(i/3),l.face.materialIndex=s.materialIndex,e.push(l))}else for(let i=Math.max(0,r.start),s=Math.min(c.count,r.start+r.count);i<s;i+=3)l=dl(this,n,t,Ks,c,a,g,I,d,i,i+1,i+2),l&&(l.faceIndex=Math.floor(i/3),e.push(l))}else i.isGeometry&&console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}});class ol extends Ts{constructor(t=1,e=1,i=1,n=1,s=1,l=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:i,widthSegments:n,heightSegments:s,depthSegments:l};const c=this;n=Math.floor(n),s=Math.floor(s),l=Math.floor(l);const a=[],g=[],I=[],d=[];let o=0,r=0;function b(t,e,i,n,s,l,b,u,B,F,C){const G=l/B,U=b/F,Q=l/2,h=b/2,m=u/2,x=B+1,p=F+1;let V=0,Z=0;const R=new Oi;for(let l=0;l<p;l++){const c=l*U-h;for(let a=0;a<x;a++){const o=a*G-Q;R[t]=o*n,R[e]=c*s,R[i]=m,g.push(R.x,R.y,R.z),R[t]=0,R[e]=0,R[i]=u>0?1:-1,I.push(R.x,R.y,R.z),d.push(a/B),d.push(1-l/F),V+=1}}for(let t=0;t<F;t++)for(let e=0;e<B;e++){const i=o+e+x*t,n=o+e+x*(t+1),s=o+(e+1)+x*(t+1),l=o+(e+1)+x*t;a.push(i,n,l),a.push(n,s,l),Z+=6}c.addGroup(r,Z,C),r+=Z,o+=V}b("z","y","x",-1,-1,i,e,t,l,s,0),b("z","y","x",1,-1,i,e,-t,l,s,1),b("x","z","y",1,1,t,i,e,n,l,2),b("x","z","y",1,-1,t,i,-e,n,l,3),b("x","y","z",1,-1,t,e,i,n,s,4),b("x","y","z",-1,-1,t,e,-i,n,s,5),this.setIndex(a),this.setAttribute("position",new Ss(g,3)),this.setAttribute("normal",new Ss(I,3)),this.setAttribute("uv",new Ss(d,2))}}function rl(t){const e={};for(const i in t){e[i]={};for(const n in t[i]){const s=t[i][n];s&&(s.isColor||s.isMatrix3||s.isMatrix4||s.isVector2||s.isVector3||s.isVector4||s.isTexture||s.isQuaternion)?e[i][n]=s.clone():Array.isArray(s)?e[i][n]=s.slice():e[i][n]=s}}return e}function bl(t){const e={};for(let i=0;i<t.length;i++){const n=rl(t[i]);for(const t in n)e[t]=n[t]}return e}const ul={clone:rl,merge:bl};function Bl(t){bs.call(this),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==t&&(void 0!==t.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(t))}function Fl(){On.call(this),this.type="Camera",this.matrixWorldInverse=new Vn,this.projectionMatrix=new Vn,this.projectionMatrixInverse=new Vn}function Cl(t=50,e=1,i=.1,n=2e3){Fl.call(this),this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=i,this.far=n,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}Bl.prototype=Object.create(bs.prototype),Bl.prototype.constructor=Bl,Bl.prototype.isShaderMaterial=!0,Bl.prototype.copy=function(t){return bs.prototype.copy.call(this,t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=rl(t.uniforms),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.lights=t.lights,this.clipping=t.clipping,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this},Bl.prototype.toJSON=function(t){const e=bs.prototype.toJSON.call(this,t);e.glslVersion=this.glslVersion,e.uniforms={};for(const i in this.uniforms){const n=this.uniforms[i].value;n&&n.isTexture?e.uniforms[i]={type:"t",value:n.toJSON(t).uuid}:n&&n.isColor?e.uniforms[i]={type:"c",value:n.getHex()}:n&&n.isVector2?e.uniforms[i]={type:"v2",value:n.toArray()}:n&&n.isVector3?e.uniforms[i]={type:"v3",value:n.toArray()}:n&&n.isVector4?e.uniforms[i]={type:"v4",value:n.toArray()}:n&&n.isMatrix3?e.uniforms[i]={type:"m3",value:n.toArray()}:n&&n.isMatrix4?e.uniforms[i]={type:"m4",value:n.toArray()}:e.uniforms[i]={value:n}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader;const i={};for(const t in this.extensions)!0===this.extensions[t]&&(i[t]=!0);return Object.keys(i).length>0&&(e.extensions=i),e},Fl.prototype=Object.assign(Object.create(On.prototype),{constructor:Fl,isCamera:!0,copy:function(t,e){return On.prototype.copy.call(this,t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this},getWorldDirection:function(t){void 0===t&&(console.warn("THREE.Camera: .getWorldDirection() target is now required"),t=new Oi),this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(-e[8],-e[9],-e[10]).normalize()},updateMatrixWorld:function(t){On.prototype.updateMatrixWorld.call(this,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()},updateWorldMatrix:function(t,e){On.prototype.updateWorldMatrix.call(this,t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()},clone:function(){return(new this.constructor).copy(this)}}),Cl.prototype=Object.assign(Object.create(Fl.prototype),{constructor:Cl,isPerspectiveCamera:!0,copy:function(t,e){return Fl.prototype.copy.call(this,t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this},setFocalLength:function(t){const e=.5*this.getFilmHeight()/t;this.fov=2*Hi.RAD2DEG*Math.atan(e),this.updateProjectionMatrix()},getFocalLength:function(){const t=Math.tan(.5*Hi.DEG2RAD*this.fov);return.5*this.getFilmHeight()/t},getEffectiveFOV:function(){return 2*Hi.RAD2DEG*Math.atan(Math.tan(.5*Hi.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(t,e,i,n,s,l){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=n,this.view.width=s,this.view.height=l,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){const t=this.near;let e=t*Math.tan(.5*Hi.DEG2RAD*this.fov)/this.zoom,i=2*e,n=this.aspect*i,s=-.5*n;const l=this.view;if(null!==this.view&&this.view.enabled){const t=l.fullWidth,c=l.fullHeight;s+=l.offsetX*n/t,e-=l.offsetY*i/c,n*=l.width/t,i*=l.height/c}const c=this.filmOffset;0!==c&&(s+=t*c/this.getFilmWidth()),this.projectionMatrix.makePerspective(s,s+n,e,e-i,t,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()},toJSON:function(t){const e=On.prototype.toJSON.call(this,t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}});const Gl=90;class Ul extends On{constructor(t,e,i){if(super(),this.type="CubeCamera",!0!==i.isWebGLCubeRenderTarget)return void console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");this.renderTarget=i;const n=new Cl(Gl,1,t,e);n.layers=this.layers,n.up.set(0,-1,0),n.lookAt(new Oi(1,0,0)),this.add(n);const s=new Cl(Gl,1,t,e);s.layers=this.layers,s.up.set(0,-1,0),s.lookAt(new Oi(-1,0,0)),this.add(s);const l=new Cl(Gl,1,t,e);l.layers=this.layers,l.up.set(0,0,1),l.lookAt(new Oi(0,1,0)),this.add(l);const c=new Cl(Gl,1,t,e);c.layers=this.layers,c.up.set(0,0,-1),c.lookAt(new Oi(0,-1,0)),this.add(c);const a=new Cl(Gl,1,t,e);a.layers=this.layers,a.up.set(0,-1,0),a.lookAt(new Oi(0,0,1)),this.add(a);const g=new Cl(Gl,1,t,e);g.layers=this.layers,g.up.set(0,-1,0),g.lookAt(new Oi(0,0,-1)),this.add(g)}update(t,e){null===this.parent&&this.updateMatrixWorld();const i=this.renderTarget,[n,s,l,c,a,g]=this.children,I=t.xr.enabled,d=t.getRenderTarget();t.xr.enabled=!1;const o=i.texture.generateMipmaps;i.texture.generateMipmaps=!1,t.setRenderTarget(i,0),t.render(e,n),t.setRenderTarget(i,1),t.render(e,s),t.setRenderTarget(i,2),t.render(e,l),t.setRenderTarget(i,3),t.render(e,c),t.setRenderTarget(i,4),t.render(e,a),i.texture.generateMipmaps=o,t.setRenderTarget(i,5),t.render(e,g),t.setRenderTarget(d),t.xr.enabled=I}}class Ql extends wi{constructor(t,e,i,n,s,l,c,a,g,I){super(t=void 0!==t?t:[],e=void 0!==e?e:lt,i,n,s,l,c=void 0!==c?c:Yt,a,g,I),this._needsFlipEnvMap=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}Ql.prototype.isCubeTexture=!0;class hl extends Ki{constructor(t,e,i){Number.isInteger(e)&&(console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"),e=i),super(t,t,e),e=e||{},this.texture=new Ql(void 0,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.encoding),this.texture.generateMipmaps=void 0!==e.generateMipmaps&&e.generateMipmaps,this.texture.minFilter=void 0!==e.minFilter?e.minFilter:Ut,this.texture._needsFlipEnvMap=!1}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.format=Ht,this.texture.encoding=e.encoding,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const i={tEquirect:{value:null}},n="\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",s="\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t",l=new ol(5,5,5),c=new Bl({name:"CubemapFromEquirect",uniforms:rl(i),vertexShader:n,fragmentShader:s,side:B,blending:U});c.uniforms.tEquirect.value=e;const a=new Il(l,c),g=e.minFilter;return e.minFilter===mt&&(e.minFilter=Ut),new Ul(1,10,this).update(t,a),e.minFilter=g,a.geometry.dispose(),a.material.dispose(),this}clear(t,e,i,n){const s=t.getRenderTarget();for(let s=0;s<6;s++)t.setRenderTarget(this,s),t.clear(e,i,n);t.setRenderTarget(s)}}hl.prototype.isWebGLCubeRenderTarget=!0;class ml extends wi{constructor(t,e,i,n,s,l,c,a,g,I,d,o){super(null,l,c,a,g,I,n,s,d,o),this.image={data:t||null,width:e||1,height:i||1},this.magFilter=void 0!==g?g:ut,this.minFilter=void 0!==I?I:ut,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}ml.prototype.isDataTexture=!0;const xl=new Fn,pl=new Oi;class Vl{constructor(t=new ts,e=new ts,i=new ts,n=new ts,s=new ts,l=new ts){this.planes=[t,e,i,n,s,l]}set(t,e,i,n,s,l){const c=this.planes;return c[0].copy(t),c[1].copy(e),c[2].copy(i),c[3].copy(n),c[4].copy(s),c[5].copy(l),this}copy(t){const e=this.planes;for(let i=0;i<6;i++)e[i].copy(t.planes[i]);return this}setFromProjectionMatrix(t){const e=this.planes,i=t.elements,n=i[0],s=i[1],l=i[2],c=i[3],a=i[4],g=i[5],I=i[6],d=i[7],o=i[8],r=i[9],b=i[10],u=i[11],B=i[12],F=i[13],C=i[14],G=i[15];return e[0].setComponents(c-n,d-a,u-o,G-B).normalize(),e[1].setComponents(c+n,d+a,u+o,G+B).normalize(),e[2].setComponents(c+s,d+g,u+r,G+F).normalize(),e[3].setComponents(c-s,d-g,u-r,G-F).normalize(),e[4].setComponents(c-l,d-I,u-b,G-C).normalize(),e[5].setComponents(c+l,d+I,u+b,G+C).normalize(),this}intersectsObject(t){const e=t.geometry;return null===e.boundingSphere&&e.computeBoundingSphere(),xl.copy(e.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(xl)}intersectsSprite(t){return xl.center.set(0,0,0),xl.radius=.7071067811865476,xl.applyMatrix4(t.matrixWorld),this.intersectsSphere(xl)}intersectsSphere(t){const e=this.planes,i=t.center,n=-t.radius;for(let t=0;t<6;t++)if(e[t].distanceToPoint(i)<n)return!1;return!0}intersectsBox(t){const e=this.planes;for(let i=0;i<6;i++){const n=e[i];if(pl.x=n.normal.x>0?t.max.x:t.min.x,pl.y=n.normal.y>0?t.max.y:t.min.y,pl.z=n.normal.z>0?t.max.z:t.min.z,n.distanceToPoint(pl)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let i=0;i<6;i++)if(e[i].distanceToPoint(t)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}function Zl(){let t=null,e=!1,i=null,n=null;function s(e,l){i(e,l),n=t.requestAnimationFrame(s)}return{start:function(){!0!==e&&null!==i&&(n=t.requestAnimationFrame(s),e=!0)},stop:function(){t.cancelAnimationFrame(n),e=!1},setAnimationLoop:function(t){i=t},setContext:function(e){t=e}}}function Rl(t,e){const i=e.isWebGL2,n=new WeakMap;return{get:function(t){return t.isInterleavedBufferAttribute&&(t=t.data),n.get(t)},remove:function(e){e.isInterleavedBufferAttribute&&(e=e.data);const i=n.get(e);i&&(t.deleteBuffer(i.buffer),n.delete(e))},update:function(e,s){if(e.isGLBufferAttribute){const t=n.get(e);return void((!t||t.version<e.version)&&n.set(e,{buffer:e.buffer,type:e.type,bytesPerElement:e.elementSize,version:e.version}))}e.isInterleavedBufferAttribute&&(e=e.data);const l=n.get(e);void 0===l?n.set(e,function(e,n){const s=e.array,l=e.usage,c=t.createBuffer();t.bindBuffer(n,c),t.bufferData(n,s,l),e.onUploadCallback();let a=5126;return s instanceof Float32Array?a=5126:s instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):s instanceof Uint16Array?e.isFloat16BufferAttribute?i?a=5131:console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2."):a=5123:s instanceof Int16Array?a=5122:s instanceof Uint32Array?a=5125:s instanceof Int32Array?a=5124:s instanceof Int8Array?a=5120:s instanceof Uint8Array&&(a=5121),{buffer:c,type:a,bytesPerElement:s.BYTES_PER_ELEMENT,version:e.version}}(e,s)):l.version<e.version&&(function(e,n,s){const l=n.array,c=n.updateRange;t.bindBuffer(s,e),-1===c.count?t.bufferSubData(s,0,l):(i?t.bufferSubData(s,c.offset*l.BYTES_PER_ELEMENT,l,c.offset,c.count):t.bufferSubData(s,c.offset*l.BYTES_PER_ELEMENT,l.subarray(c.offset,c.offset+c.count)),c.count=-1)}(l.buffer,e,s),l.version=e.version)}}}class yl extends Ts{constructor(t=1,e=1,i=1,n=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:i,heightSegments:n};const s=t/2,l=e/2,c=Math.floor(i),a=Math.floor(n),g=c+1,I=a+1,d=t/c,o=e/a,r=[],b=[],u=[],B=[];for(let t=0;t<I;t++){const e=t*o-l;for(let i=0;i<g;i++){const n=i*d-s;b.push(n,-e,0),u.push(0,0,1),B.push(i/c),B.push(1-t/a)}}for(let t=0;t<a;t++)for(let e=0;e<c;e++){const i=e+g*t,n=e+g*(t+1),s=e+1+g*(t+1),l=e+1+g*t;r.push(i,n,l),r.push(n,s,l)}this.setIndex(r),this.setAttribute("position",new Ss(b,3)),this.setAttribute("normal",new Ss(u,3)),this.setAttribute("uv",new Ss(B,2))}}const Ll={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor.xyz *= color.xyz;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_maxMipLevel 8.0\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_maxTileSize 256.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\n\t\tvec2 f = fract( uv );\n\t\tuv += 0.5 - f;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tif ( mipInt < cubeUV_maxMipLevel ) {\n\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\t\t}\n\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\t\tuv *= texelSize;\n\t\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x += texelSize;\n\t\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.y += texelSize;\n\t\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x -= texelSize;\n\t\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tvec3 tm = mix( tl, tr, f.x );\n\t\tvec3 bm = mix( bl, br, f.x );\n\t\treturn mix( tm, bm, f.y );\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value ) {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tfogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat specularRoughness;\n\tvec3 specularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifndef USE_MORPHNORMALS\n\t\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\t\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t#endif\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmissionmap_fragment:"#ifdef USE_TRANSMISSIONMAP\n\ttotalTransmission *= texture2D( transmissionMap, vUv ).r;\n#endif",transmissionmap_pars_fragment:"#ifdef USE_TRANSMISSIONMAP\n\tuniform sampler2D transmissionMap;\n#endif",uv_pars_fragment:"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",cube_frag:"#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSMISSION\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSMISSION\n\tuniform float transmission;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <transmissionmap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#ifdef TRANSMISSION\n\t\tfloat totalTransmission = transmission;\n\t#endif\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <transmissionmap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSMISSION\n\t\tdiffuseColor.a *= mix( saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) ), 1.0, metalness );\n\t#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",normal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",normal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",shadow_vert:"#include <common>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}"},Xl={common:{diffuse:{value:new Qs(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new Mi},uv2Transform:{value:new Mi},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Ji(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Qs(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Qs(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Mi}},sprite:{diffuse:{value:new Qs(15658734)},opacity:{value:1},center:{value:new Ji(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Mi}}},Al={basic:{uniforms:bl([Xl.common,Xl.specularmap,Xl.envmap,Xl.aomap,Xl.lightmap,Xl.fog]),vertexShader:Ll.meshbasic_vert,fragmentShader:Ll.meshbasic_frag},lambert:{uniforms:bl([Xl.common,Xl.specularmap,Xl.envmap,Xl.aomap,Xl.lightmap,Xl.emissivemap,Xl.fog,Xl.lights,{emissive:{value:new Qs(0)}}]),vertexShader:Ll.meshlambert_vert,fragmentShader:Ll.meshlambert_frag},phong:{uniforms:bl([Xl.common,Xl.specularmap,Xl.envmap,Xl.aomap,Xl.lightmap,Xl.emissivemap,Xl.bumpmap,Xl.normalmap,Xl.displacementmap,Xl.fog,Xl.lights,{emissive:{value:new Qs(0)},specular:{value:new Qs(1118481)},shininess:{value:30}}]),vertexShader:Ll.meshphong_vert,fragmentShader:Ll.meshphong_frag},standard:{uniforms:bl([Xl.common,Xl.envmap,Xl.aomap,Xl.lightmap,Xl.emissivemap,Xl.bumpmap,Xl.normalmap,Xl.displacementmap,Xl.roughnessmap,Xl.metalnessmap,Xl.fog,Xl.lights,{emissive:{value:new Qs(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Ll.meshphysical_vert,fragmentShader:Ll.meshphysical_frag},toon:{uniforms:bl([Xl.common,Xl.aomap,Xl.lightmap,Xl.emissivemap,Xl.bumpmap,Xl.normalmap,Xl.displacementmap,Xl.gradientmap,Xl.fog,Xl.lights,{emissive:{value:new Qs(0)}}]),vertexShader:Ll.meshtoon_vert,fragmentShader:Ll.meshtoon_frag},matcap:{uniforms:bl([Xl.common,Xl.bumpmap,Xl.normalmap,Xl.displacementmap,Xl.fog,{matcap:{value:null}}]),vertexShader:Ll.meshmatcap_vert,fragmentShader:Ll.meshmatcap_frag},points:{uniforms:bl([Xl.points,Xl.fog]),vertexShader:Ll.points_vert,fragmentShader:Ll.points_frag},dashed:{uniforms:bl([Xl.common,Xl.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Ll.linedashed_vert,fragmentShader:Ll.linedashed_frag},depth:{uniforms:bl([Xl.common,Xl.displacementmap]),vertexShader:Ll.depth_vert,fragmentShader:Ll.depth_frag},normal:{uniforms:bl([Xl.common,Xl.bumpmap,Xl.normalmap,Xl.displacementmap,{opacity:{value:1}}]),vertexShader:Ll.normal_vert,fragmentShader:Ll.normal_frag},sprite:{uniforms:bl([Xl.sprite,Xl.fog]),vertexShader:Ll.sprite_vert,fragmentShader:Ll.sprite_frag},background:{uniforms:{uvTransform:{value:new Mi},t2D:{value:null}},vertexShader:Ll.background_vert,fragmentShader:Ll.background_frag},cube:{uniforms:bl([Xl.envmap,{opacity:{value:1}}]),vertexShader:Ll.cube_vert,fragmentShader:Ll.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Ll.equirect_vert,fragmentShader:Ll.equirect_frag},distanceRGBA:{uniforms:bl([Xl.common,Xl.displacementmap,{referencePosition:{value:new Oi},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Ll.distanceRGBA_vert,fragmentShader:Ll.distanceRGBA_frag},shadow:{uniforms:bl([Xl.lights,Xl.fog,{color:{value:new Qs(0)},opacity:{value:1}}]),vertexShader:Ll.shadow_vert,fragmentShader:Ll.shadow_frag}};function Wl(t,e,i,n,s){const l=new Qs(0);let c,a,g=0,I=null,d=0,o=null;function r(t,e){i.buffers.color.setClear(t.r,t.g,t.b,e,s)}return{getClearColor:function(){return l},setClearColor:function(t,e=1){l.set(t),g=e,r(l,g)},getClearAlpha:function(){return g},setClearAlpha:function(t){g=t,r(l,g)},render:function(i,s,b,F){let C=!0===s.isScene?s.background:null;C&&C.isTexture&&(C=e.get(C));const G=t.xr,U=G.getSession&&G.getSession();U&&"additive"===U.environmentBlendMode&&(C=null),null===C?r(l,g):C&&C.isColor&&(r(C,1),F=!0),(t.autoClear||F)&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),C&&(C.isCubeTexture||C.isWebGLCubeRenderTarget||C.mapping===It)?(void 0===a&&(a=new Il(new ol(1,1,1),new Bl({name:"BackgroundCubeMaterial",uniforms:rl(Al.cube.uniforms),vertexShader:Al.cube.vertexShader,fragmentShader:Al.cube.fragmentShader,side:B,depthTest:!1,depthWrite:!1,fog:!1})),a.geometry.deleteAttribute("normal"),a.geometry.deleteAttribute("uv"),a.onBeforeRender=function(t,e,i){this.matrixWorld.copyPosition(i.matrixWorld)},Object.defineProperty(a.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),n.update(a)),C.isWebGLCubeRenderTarget&&(C=C.texture),a.material.uniforms.envMap.value=C,a.material.uniforms.flipEnvMap.value=C.isCubeTexture&&C._needsFlipEnvMap?-1:1,I===C&&d===C.version&&o===t.toneMapping||(a.material.needsUpdate=!0,I=C,d=C.version,o=t.toneMapping),i.unshift(a,a.geometry,a.material,0,0,null)):C&&C.isTexture&&(void 0===c&&(c=new Il(new yl(2,2),new Bl({name:"BackgroundMaterial",uniforms:rl(Al.background.uniforms),vertexShader:Al.background.vertexShader,fragmentShader:Al.background.fragmentShader,side:u,depthTest:!1,depthWrite:!1,fog:!1})),c.geometry.deleteAttribute("normal"),Object.defineProperty(c.material,"map",{get:function(){return this.uniforms.t2D.value}}),n.update(c)),c.material.uniforms.t2D.value=C,!0===C.matrixAutoUpdate&&C.updateMatrix(),c.material.uniforms.uvTransform.value.copy(C.matrix),I===C&&d===C.version&&o===t.toneMapping||(c.material.needsUpdate=!0,I=C,d=C.version,o=t.toneMapping),i.unshift(c,c.geometry,c.material,0,0,null))}}}function Sl(t,e,i,n){const s=t.getParameter(34921),l=n.isWebGL2?null:e.get("OES_vertex_array_object"),c=n.isWebGL2||null!==l,a={},g=r(null);let I=g;function d(e){return n.isWebGL2?t.bindVertexArray(e):l.bindVertexArrayOES(e)}function o(e){return n.isWebGL2?t.deleteVertexArray(e):l.deleteVertexArrayOES(e)}function r(t){const e=[],i=[],n=[];for(let t=0;t<s;t++)e[t]=0,i[t]=0,n[t]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:e,enabledAttributes:i,attributeDivisors:n,object:t,attributes:{},index:null}}function b(){const t=I.newAttributes;for(let e=0,i=t.length;e<i;e++)t[e]=0}function u(t){B(t,0)}function B(i,s){const l=I.newAttributes,c=I.enabledAttributes,a=I.attributeDivisors;l[i]=1,0===c[i]&&(t.enableVertexAttribArray(i),c[i]=1),a[i]!==s&&((n.isWebGL2?t:e.get("ANGLE_instanced_arrays"))[n.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](i,s),a[i]=s)}function F(){const e=I.newAttributes,i=I.enabledAttributes;for(let n=0,s=i.length;n<s;n++)i[n]!==e[n]&&(t.disableVertexAttribArray(n),i[n]=0)}function C(e,i,s,l,c,a){!0!==n.isWebGL2||5124!==s&&5125!==s?t.vertexAttribPointer(e,i,s,l,c,a):t.vertexAttribIPointer(e,i,s,c,a)}function G(){U(),I!==g&&(I=g,d(I.object))}function U(){g.geometry=null,g.program=null,g.wireframe=!1}return{setup:function(s,g,o,G,U){let Q=!1;if(c){const e=function(e,i,s){const c=!0===s.wireframe;let g=a[e.id];void 0===g&&(g={},a[e.id]=g);let I=g[i.id];void 0===I&&(I={},g[i.id]=I);let d=I[c];return void 0===d&&(d=r(n.isWebGL2?t.createVertexArray():l.createVertexArrayOES()),I[c]=d),d}(G,o,g);I!==e&&(I=e,d(I.object)),Q=function(t,e){const i=I.attributes,n=t.attributes;let s=0;for(const t in n){const e=i[t],l=n[t];if(void 0===e)return!0;if(e.attribute!==l)return!0;if(e.data!==l.data)return!0;s++}return I.attributesNum!==s||I.index!==e}(G,U),Q&&function(t,e){const i={},n=t.attributes;let s=0;for(const t in n){const e=n[t],l={};l.attribute=e,e.data&&(l.data=e.data),i[t]=l,s++}I.attributes=i,I.attributesNum=s,I.index=e}(G,U)}else{const t=!0===g.wireframe;I.geometry===G.id&&I.program===o.id&&I.wireframe===t||(I.geometry=G.id,I.program=o.id,I.wireframe=t,Q=!0)}!0===s.isInstancedMesh&&(Q=!0),null!==U&&i.update(U,34963),Q&&(function(s,l,c,a){if(!1===n.isWebGL2&&(s.isInstancedMesh||a.isInstancedBufferGeometry)&&null===e.get("ANGLE_instanced_arrays"))return;b();const g=a.attributes,I=c.getAttributes(),d=l.defaultAttributeValues;for(const e in I){const n=I[e];if(n>=0){const l=g[e];if(void 0!==l){const e=l.normalized,s=l.itemSize,c=i.get(l);if(void 0===c)continue;const g=c.buffer,I=c.type,d=c.bytesPerElement;if(l.isInterleavedBufferAttribute){const i=l.data,c=i.stride,o=l.offset;i&&i.isInstancedInterleavedBuffer?(B(n,i.meshPerAttribute),void 0===a._maxInstanceCount&&(a._maxInstanceCount=i.meshPerAttribute*i.count)):u(n),t.bindBuffer(34962,g),C(n,s,I,e,c*d,o*d)}else l.isInstancedBufferAttribute?(B(n,l.meshPerAttribute),void 0===a._maxInstanceCount&&(a._maxInstanceCount=l.meshPerAttribute*l.count)):u(n),t.bindBuffer(34962,g),C(n,s,I,e,0,0)}else if("instanceMatrix"===e){const e=i.get(s.instanceMatrix);if(void 0===e)continue;const l=e.buffer,c=e.type;B(n+0,1),B(n+1,1),B(n+2,1),B(n+3,1),t.bindBuffer(34962,l),t.vertexAttribPointer(n+0,4,c,!1,64,0),t.vertexAttribPointer(n+1,4,c,!1,64,16),t.vertexAttribPointer(n+2,4,c,!1,64,32),t.vertexAttribPointer(n+3,4,c,!1,64,48)}else if("instanceColor"===e){const e=i.get(s.instanceColor);if(void 0===e)continue;const l=e.buffer,c=e.type;B(n,1),t.bindBuffer(34962,l),t.vertexAttribPointer(n,3,c,!1,12,0)}else if(void 0!==d){const i=d[e];if(void 0!==i)switch(i.length){case 2:t.vertexAttrib2fv(n,i);break;case 3:t.vertexAttrib3fv(n,i);break;case 4:t.vertexAttrib4fv(n,i);break;default:t.vertexAttrib1fv(n,i)}}}}F()}(s,g,o,G),null!==U&&t.bindBuffer(34963,i.get(U).buffer))},reset:G,resetDefaultState:U,dispose:function(){G();for(const t in a){const e=a[t];for(const t in e){const i=e[t];for(const t in i)o(i[t].object),delete i[t];delete e[t]}delete a[t]}},releaseStatesOfGeometry:function(t){if(void 0===a[t.id])return;const e=a[t.id];for(const t in e){const i=e[t];for(const t in i)o(i[t].object),delete i[t];delete e[t]}delete a[t.id]},releaseStatesOfProgram:function(t){for(const e in a){const i=a[e];if(void 0===i[t.id])continue;const n=i[t.id];for(const t in n)o(n[t].object),delete n[t];delete i[t.id]}},initAttributes:b,enableAttribute:u,disableUnusedAttributes:F}}function El(t,e,i,n){const s=n.isWebGL2;let l;this.setMode=function(t){l=t},this.render=function(e,n){t.drawArrays(l,e,n),i.update(n,l,1)},this.renderInstances=function(n,c,a){if(0===a)return;let g,I;if(s)g=t,I="drawArraysInstanced";else if(g=e.get("ANGLE_instanced_arrays"),I="drawArraysInstancedANGLE",null===g)return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");g[I](l,n,c,a),i.update(c,l,a)}}function Nl(t,e,i){let n;function s(e){if("highp"===e){if(t.getShaderPrecisionFormat(35633,36338).precision>0&&t.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";e="mediump"}return"mediump"===e&&t.getShaderPrecisionFormat(35633,36337).precision>0&&t.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}const l="undefined"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&t instanceof WebGL2ComputeRenderingContext;let c=void 0!==i.precision?i.precision:"highp";const a=s(c);a!==c&&(console.warn("THREE.WebGLRenderer:",c,"not supported, using",a,"instead."),c=a);const g=!0===i.logarithmicDepthBuffer,I=t.getParameter(34930),d=t.getParameter(35660),o=t.getParameter(3379),r=t.getParameter(34076),b=t.getParameter(34921),u=t.getParameter(36347),B=t.getParameter(36348),F=t.getParameter(36349),C=d>0,G=l||e.has("OES_texture_float");return{isWebGL2:l,getMaxAnisotropy:function(){if(void 0!==n)return n;if(!0===e.has("EXT_texture_filter_anisotropic")){const i=e.get("EXT_texture_filter_anisotropic");n=t.getParameter(i.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else n=0;return n},getMaxPrecision:s,precision:c,logarithmicDepthBuffer:g,maxTextures:I,maxVertexTextures:d,maxTextureSize:o,maxCubemapSize:r,maxAttributes:b,maxVertexUniforms:u,maxVaryings:B,maxFragmentUniforms:F,vertexTextures:C,floatFragmentTextures:G,floatVertexTextures:C&&G,maxSamples:l?t.getParameter(36183):0}}function vl(t){const e=this;let i=null,n=0,s=!1,l=!1;const c=new ts,a=new Mi,g={value:null,needsUpdate:!1};function I(){g.value!==i&&(g.value=i,g.needsUpdate=n>0),e.numPlanes=n,e.numIntersection=0}function d(t,i,n,s){const l=null!==t?t.length:0;let I=null;if(0!==l){if(I=g.value,!0!==s||null===I){const e=n+4*l,s=i.matrixWorldInverse;a.getNormalMatrix(s),(null===I||I.length<e)&&(I=new Float32Array(e));for(let e=0,i=n;e!==l;++e,i+=4)c.copy(t[e]).applyMatrix4(s,a),c.normal.toArray(I,i),I[i+3]=c.constant}g.value=I,g.needsUpdate=!0}return e.numPlanes=l,e.numIntersection=0,I}this.uniform=g,this.numPlanes=0,this.numIntersection=0,this.init=function(t,e,l){const c=0!==t.length||e||0!==n||s;return s=e,i=d(t,l,0),n=t.length,c},this.beginShadows=function(){l=!0,d(null)},this.endShadows=function(){l=!1,I()},this.setState=function(e,c,a){const o=e.clippingPlanes,r=e.clipIntersection,b=e.clipShadows,u=t.get(e);if(!s||null===o||0===o.length||l&&!b)l?d(null):I();else{const t=l?0:n,e=4*t;let s=u.clippingState||null;g.value=s,s=d(o,c,e,a);for(let t=0;t!==e;++t)s[t]=i[t];u.clippingState=s,this.numIntersection=r?this.numPlanes:0,this.numPlanes+=t}}}function Yl(t){let e=new WeakMap;function i(t,e){return e===at?t.mapping=lt:e===gt&&(t.mapping=ct),t}function n(t){const i=t.target;i.removeEventListener("dispose",n);const s=e.get(i);void 0!==s&&(e.delete(i),s.dispose())}return{get:function(s){if(s&&s.isTexture){const l=s.mapping;if(l===at||l===gt){if(e.has(s))return i(e.get(s).texture,s.mapping);{const l=s.image;if(l&&l.height>0){const c=t.getRenderTarget(),a=new hl(l.height/2);return a.fromEquirectangularTexture(t,s),e.set(s,a),t.setRenderTarget(c),s.addEventListener("dispose",n),i(a.texture,s.mapping)}return null}}}return s},dispose:function(){e=new WeakMap}}}function Hl(t){const e={};function i(i){if(void 0!==e[i])return e[i];let n;switch(i){case"WEBGL_depth_texture":n=t.getExtension("WEBGL_depth_texture")||t.getExtension("MOZ_WEBGL_depth_texture")||t.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":n=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":n=t.getExtension("WEBGL_compressed_texture_s3tc")||t.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":n=t.getExtension("WEBGL_compressed_texture_pvrtc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:n=t.getExtension(i)}return e[i]=n,n}return{has:function(t){return null!==i(t)},init:function(t){t.isWebGL2?i("EXT_color_buffer_float"):(i("WEBGL_depth_texture"),i("OES_texture_float"),i("OES_texture_half_float"),i("OES_texture_half_float_linear"),i("OES_standard_derivatives"),i("OES_element_index_uint"),i("OES_vertex_array_object"),i("ANGLE_instanced_arrays")),i("OES_texture_float_linear"),i("EXT_color_buffer_half_float")},get:function(t){const e=i(t);return null===e&&console.warn("THREE.WebGLRenderer: "+t+" extension not supported."),e}}}function Jl(t,e,i,n){const s={},l=new WeakMap;function c(t){const a=t.target;null!==a.index&&e.remove(a.index);for(const t in a.attributes)e.remove(a.attributes[t]);a.removeEventListener("dispose",c),delete s[a.id];const g=l.get(a);g&&(e.remove(g),l.delete(a)),n.releaseStatesOfGeometry(a),!0===a.isInstancedBufferGeometry&&delete a._maxInstanceCount,i.memory.geometries--}function a(t){const i=[],n=t.index,s=t.attributes.position;let c=0;if(null!==n){const t=n.array;c=n.version;for(let e=0,n=t.length;e<n;e+=3){const n=t[e+0],s=t[e+1],l=t[e+2];i.push(n,s,s,l,l,n)}}else{const t=s.array;c=s.version;for(let e=0,n=t.length/3-1;e<n;e+=3){const t=e+0,n=e+1,s=e+2;i.push(t,n,n,s,s,t)}}const a=new(Ns(i)>65535?As:Ls)(i,1);a.version=c;const g=l.get(t);g&&e.remove(g),l.set(t,a)}return{get:function(t,e){return!0===s[e.id]||(e.addEventListener("dispose",c),s[e.id]=!0,i.memory.geometries++),e},update:function(t){const i=t.attributes;for(const t in i)e.update(i[t],34962);const n=t.morphAttributes;for(const t in n){const i=n[t];for(let t=0,n=i.length;t<n;t++)e.update(i[t],34962)}},getWireframeAttribute:function(t){const e=l.get(t);if(e){const i=t.index;null!==i&&e.version<i.version&&a(t)}else a(t);return l.get(t)}}}function Ml(t,e,i,n){const s=n.isWebGL2;let l,c,a;this.setMode=function(t){l=t},this.setIndex=function(t){c=t.type,a=t.bytesPerElement},this.render=function(e,n){t.drawElements(l,n,c,e*a),i.update(n,l,1)},this.renderInstances=function(n,g,I){if(0===I)return;let d,o;if(s)d=t,o="drawElementsInstanced";else if(d=e.get("ANGLE_instanced_arrays"),o="drawElementsInstancedANGLE",null===d)return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");d[o](l,g,c,n*a,I),i.update(g,l,I)}}function fl(t){const e={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:e,programs:null,autoReset:!0,reset:function(){e.frame++,e.calls=0,e.triangles=0,e.points=0,e.lines=0},update:function(t,i,n){switch(e.calls++,i){case 4:e.triangles+=n*(t/3);break;case 1:e.lines+=n*(t/2);break;case 3:e.lines+=n*(t-1);break;case 2:e.lines+=n*t;break;case 0:e.points+=n*t;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",i)}}}}function kl(t,e){return t[0]-e[0]}function zl(t,e){return Math.abs(e[1])-Math.abs(t[1])}function wl(t){const e={},i=new Float32Array(8),n=[];for(let t=0;t<8;t++)n[t]=[t,0];return{update:function(s,l,c,a){const g=s.morphTargetInfluences,I=void 0===g?0:g.length;let d=e[l.id];if(void 0===d){d=[];for(let t=0;t<I;t++)d[t]=[t,0];e[l.id]=d}for(let t=0;t<I;t++){const e=d[t];e[0]=t,e[1]=g[t]}d.sort(zl);for(let t=0;t<8;t++)t<I&&d[t][1]?(n[t][0]=d[t][0],n[t][1]=d[t][1]):(n[t][0]=Number.MAX_SAFE_INTEGER,n[t][1]=0);n.sort(kl);const o=c.morphTargets&&l.morphAttributes.position,r=c.morphNormals&&l.morphAttributes.normal;let b=0;for(let t=0;t<8;t++){const e=n[t],s=e[0],c=e[1];s!==Number.MAX_SAFE_INTEGER&&c?(o&&l.getAttribute("morphTarget"+t)!==o[s]&&l.setAttribute("morphTarget"+t,o[s]),r&&l.getAttribute("morphNormal"+t)!==r[s]&&l.setAttribute("morphNormal"+t,r[s]),i[t]=c,b+=c):(o&&!0===l.hasAttribute("morphTarget"+t)&&l.deleteAttribute("morphTarget"+t),r&&!0===l.hasAttribute("morphNormal"+t)&&l.deleteAttribute("morphNormal"+t),i[t]=0)}const u=l.morphTargetsRelative?1:1-b;a.getUniforms().setValue(t,"morphTargetBaseInfluence",u),a.getUniforms().setValue(t,"morphTargetInfluences",i)}}}function Tl(t,e,i,n){let s=new WeakMap;function l(t){const e=t.target;e.removeEventListener("dispose",l),i.remove(e.instanceMatrix),null!==e.instanceColor&&i.remove(e.instanceColor)}return{update:function(t){const c=n.render.frame,a=t.geometry,g=e.get(t,a);return s.get(g)!==c&&(e.update(g),s.set(g,c)),t.isInstancedMesh&&(!1===t.hasEventListener("dispose",l)&&t.addEventListener("dispose",l),i.update(t.instanceMatrix,34962),null!==t.instanceColor&&i.update(t.instanceColor,34962)),g},dispose:function(){s=new WeakMap}}}Al.physical={uniforms:bl([Al.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new Ji(1,1)},clearcoatNormalMap:{value:null},sheen:{value:new Qs(0)},transmission:{value:0},transmissionMap:{value:null}}]),vertexShader:Ll.meshphysical_vert,fragmentShader:Ll.meshphysical_frag};class Dl extends wi{constructor(t=null,e=1,i=1,n=1){super(null),this.image={data:t,width:e,height:i,depth:n},this.magFilter=ut,this.minFilter=ut,this.wrapR=rt,this.generateMipmaps=!1,this.flipY=!1,this.needsUpdate=!0}}Dl.prototype.isDataTexture2DArray=!0;class Kl extends wi{constructor(t=null,e=1,i=1,n=1){super(null),this.image={data:t,width:e,height:i,depth:n},this.magFilter=ut,this.minFilter=ut,this.wrapR=rt,this.generateMipmaps=!1,this.flipY=!1,this.needsUpdate=!0}}Kl.prototype.isDataTexture3D=!0;const jl=new wi,Pl=new Dl,Ol=new Kl,_l=new Ql,ql=[],$l=[],tc=new Float32Array(16),ec=new Float32Array(9),ic=new Float32Array(4);function nc(t,e,i){const n=t[0];if(n<=0||n>0)return t;const s=e*i;let l=ql[s];if(void 0===l&&(l=new Float32Array(s),ql[s]=l),0!==e){n.toArray(l,0);for(let n=1,s=0;n!==e;++n)s+=i,t[n].toArray(l,s)}return l}function sc(t,e){if(t.length!==e.length)return!1;for(let i=0,n=t.length;i<n;i++)if(t[i]!==e[i])return!1;return!0}function lc(t,e){for(let i=0,n=e.length;i<n;i++)t[i]=e[i]}function cc(t,e){let i=$l[e];void 0===i&&(i=new Int32Array(e),$l[e]=i);for(let n=0;n!==e;++n)i[n]=t.allocateTextureUnit();return i}function ac(t,e){const i=this.cache;i[0]!==e&&(t.uniform1f(this.addr,e),i[0]=e)}function gc(t,e){const i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y||(t.uniform2f(this.addr,e.x,e.y),i[0]=e.x,i[1]=e.y);else{if(sc(i,e))return;t.uniform2fv(this.addr,e),lc(i,e)}}function Ic(t,e){const i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y&&i[2]===e.z||(t.uniform3f(this.addr,e.x,e.y,e.z),i[0]=e.x,i[1]=e.y,i[2]=e.z);else if(void 0!==e.r)i[0]===e.r&&i[1]===e.g&&i[2]===e.b||(t.uniform3f(this.addr,e.r,e.g,e.b),i[0]=e.r,i[1]=e.g,i[2]=e.b);else{if(sc(i,e))return;t.uniform3fv(this.addr,e),lc(i,e)}}function dc(t,e){const i=this.cache;if(void 0!==e.x)i[0]===e.x&&i[1]===e.y&&i[2]===e.z&&i[3]===e.w||(t.uniform4f(this.addr,e.x,e.y,e.z,e.w),i[0]=e.x,i[1]=e.y,i[2]=e.z,i[3]=e.w);else{if(sc(i,e))return;t.uniform4fv(this.addr,e),lc(i,e)}}function oc(t,e){const i=this.cache,n=e.elements;if(void 0===n){if(sc(i,e))return;t.uniformMatrix2fv(this.addr,!1,e),lc(i,e)}else{if(sc(i,n))return;ic.set(n),t.uniformMatrix2fv(this.addr,!1,ic),lc(i,n)}}function rc(t,e){const i=this.cache,n=e.elements;if(void 0===n){if(sc(i,e))return;t.uniformMatrix3fv(this.addr,!1,e),lc(i,e)}else{if(sc(i,n))return;ec.set(n),t.uniformMatrix3fv(this.addr,!1,ec),lc(i,n)}}function bc(t,e){const i=this.cache,n=e.elements;if(void 0===n){if(sc(i,e))return;t.uniformMatrix4fv(this.addr,!1,e),lc(i,e)}else{if(sc(i,n))return;tc.set(n),t.uniformMatrix4fv(this.addr,!1,tc),lc(i,n)}}function uc(t,e,i){const n=this.cache,s=i.allocateTextureUnit();n[0]!==s&&(t.uniform1i(this.addr,s),n[0]=s),i.safeSetTexture2D(e||jl,s)}function Bc(t,e,i){const n=this.cache,s=i.allocateTextureUnit();n[0]!==s&&(t.uniform1i(this.addr,s),n[0]=s),i.setTexture2DArray(e||Pl,s)}function Fc(t,e,i){const n=this.cache,s=i.allocateTextureUnit();n[0]!==s&&(t.uniform1i(this.addr,s),n[0]=s),i.setTexture3D(e||Ol,s)}function Cc(t,e,i){const n=this.cache,s=i.allocateTextureUnit();n[0]!==s&&(t.uniform1i(this.addr,s),n[0]=s),i.safeSetTextureCube(e||_l,s)}function Gc(t,e){const i=this.cache;i[0]!==e&&(t.uniform1i(this.addr,e),i[0]=e)}function Uc(t,e){const i=this.cache;sc(i,e)||(t.uniform2iv(this.addr,e),lc(i,e))}function Qc(t,e){const i=this.cache;sc(i,e)||(t.uniform3iv(this.addr,e),lc(i,e))}function hc(t,e){const i=this.cache;sc(i,e)||(t.uniform4iv(this.addr,e),lc(i,e))}function mc(t,e){const i=this.cache;i[0]!==e&&(t.uniform1ui(this.addr,e),i[0]=e)}function xc(t,e){t.uniform1fv(this.addr,e)}function pc(t,e){t.uniform1iv(this.addr,e)}function Vc(t,e){t.uniform2iv(this.addr,e)}function Zc(t,e){t.uniform3iv(this.addr,e)}function Rc(t,e){t.uniform4iv(this.addr,e)}function yc(t,e){const i=nc(e,this.size,2);t.uniform2fv(this.addr,i)}function Lc(t,e){const i=nc(e,this.size,3);t.uniform3fv(this.addr,i)}function Xc(t,e){const i=nc(e,this.size,4);t.uniform4fv(this.addr,i)}function Ac(t,e){const i=nc(e,this.size,4);t.uniformMatrix2fv(this.addr,!1,i)}function Wc(t,e){const i=nc(e,this.size,9);t.uniformMatrix3fv(this.addr,!1,i)}function Sc(t,e){const i=nc(e,this.size,16);t.uniformMatrix4fv(this.addr,!1,i)}function Ec(t,e,i){const n=e.length,s=cc(i,n);t.uniform1iv(this.addr,s);for(let t=0;t!==n;++t)i.safeSetTexture2D(e[t]||jl,s[t])}function Nc(t,e,i){const n=e.length,s=cc(i,n);t.uniform1iv(this.addr,s);for(let t=0;t!==n;++t)i.safeSetTextureCube(e[t]||_l,s[t])}function vc(t,e,i){this.id=t,this.addr=i,this.cache=[],this.setValue=function(t){switch(t){case 5126:return ac;case 35664:return gc;case 35665:return Ic;case 35666:return dc;case 35674:return oc;case 35675:return rc;case 35676:return bc;case 5124:case 35670:return Gc;case 35667:case 35671:return Uc;case 35668:case 35672:return Qc;case 35669:case 35673:return hc;case 5125:return mc;case 35678:case 36198:case 36298:case 36306:case 35682:return uc;case 35679:case 36299:case 36307:return Fc;case 35680:case 36300:case 36308:case 36293:return Cc;case 36289:case 36303:case 36311:case 36292:return Bc}}(e.type)}function Yc(t,e,i){this.id=t,this.addr=i,this.cache=[],this.size=e.size,this.setValue=function(t){switch(t){case 5126:return xc;case 35664:return yc;case 35665:return Lc;case 35666:return Xc;case 35674:return Ac;case 35675:return Wc;case 35676:return Sc;case 5124:case 35670:return pc;case 35667:case 35671:return Vc;case 35668:case 35672:return Zc;case 35669:case 35673:return Rc;case 35678:case 36198:case 36298:case 36306:case 35682:return Ec;case 35680:case 36300:case 36308:case 36293:return Nc}}(e.type)}function Hc(t){this.id=t,this.seq=[],this.map={}}Yc.prototype.updateCache=function(t){const e=this.cache;t instanceof Float32Array&&e.length!==t.length&&(this.cache=new Float32Array(t.length)),lc(e,t)},Hc.prototype.setValue=function(t,e,i){const n=this.seq;for(let s=0,l=n.length;s!==l;++s){const l=n[s];l.setValue(t,e[l.id],i)}};const Jc=/(\w+)(\])?(\[|\.)?/g;function Mc(t,e){t.seq.push(e),t.map[e.id]=e}function fc(t,e,i){const n=t.name,s=n.length;for(Jc.lastIndex=0;;){const l=Jc.exec(n),c=Jc.lastIndex;let a=l[1];const g="]"===l[2],I=l[3];if(g&&(a|=0),void 0===I||"["===I&&c+2===s){Mc(i,void 0===I?new vc(a,t,e):new Yc(a,t,e));break}{let t=i.map[a];void 0===t&&(t=new Hc(a),Mc(i,t)),i=t}}}function kc(t,e){this.seq=[],this.map={};const i=t.getProgramParameter(e,35718);for(let n=0;n<i;++n){const i=t.getActiveUniform(e,n);fc(i,t.getUniformLocation(e,i.name),this)}}function zc(t,e,i){const n=t.createShader(e);return t.shaderSource(n,i),t.compileShader(n),n}kc.prototype.setValue=function(t,e,i,n){const s=this.map[e];void 0!==s&&s.setValue(t,i,n)},kc.prototype.setOptional=function(t,e,i){const n=e[i];void 0!==n&&this.setValue(t,i,n)},kc.upload=function(t,e,i,n){for(let s=0,l=e.length;s!==l;++s){const l=e[s],c=i[l.id];!1!==c.needsUpdate&&l.setValue(t,c.value,n)}},kc.seqWithValue=function(t,e){const i=[];for(let n=0,s=t.length;n!==s;++n){const s=t[n];s.id in e&&i.push(s)}return i};let wc=0;function Tc(t){switch(t){case Oe:return["Linear","( value )"];case _e:return["sRGB","( value )"];case $e:return["RGBE","( value )"];case ei:return["RGBM","( value, 7.0 )"];case ii:return["RGBM","( value, 16.0 )"];case ni:return["RGBD","( value, 256.0 )"];case qe:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case ti:return["LogLuv","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",t),["Linear","( value )"]}}function Dc(t,e,i){const n=t.getShaderParameter(e,35713),s=t.getShaderInfoLog(e).trim();return n&&""===s?"":"THREE.WebGLShader: gl.getShaderInfoLog() "+i+"\n"+s+function(t){const e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}(t.getShaderSource(e))}function Kc(t,e){const i=Tc(e);return"vec4 "+t+"( vec4 value ) { return "+i[0]+"ToLinear"+i[1]+"; }"}function jc(t,e){const i=Tc(e);return"vec4 "+t+"( vec4 value ) { return LinearTo"+i[0]+i[1]+"; }"}function Pc(t,e){let i;switch(e){case $:i="Linear";break;case tt:i="Reinhard";break;case et:i="OptimizedCineon";break;case it:i="ACESFilmic";break;case nt:i="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),i="Linear"}return"vec3 "+t+"( vec3 color ) { return "+i+"ToneMapping( color ); }"}function Oc(t){return""!==t}function _c(t,e){return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function qc(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const $c=/^[ \t]*#include +<([\w\d./]+)>/gm;function ta(t){return t.replace($c,ea)}function ea(t,e){const i=Ll[e];if(void 0===i)throw new Error("Can not resolve #include <"+e+">");return ta(i)}const ia=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,na=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function sa(t){return t.replace(na,ca).replace(ia,la)}function la(t,e,i,n){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),ca(0,e,i,n)}function ca(t,e,i,n){let s="";for(let t=parseInt(e);t<parseInt(i);t++)s+=n.replace(/\[\s*i\s*\]/g,"[ "+t+" ]").replace(/UNROLLED_LOOP_INDEX/g,t);return s}function aa(t){let e="precision "+t.precision+" float;\nprecision "+t.precision+" int;";return"highp"===t.precision?e+="\n#define HIGH_PRECISION":"mediump"===t.precision?e+="\n#define MEDIUM_PRECISION":"lowp"===t.precision&&(e+="\n#define LOW_PRECISION"),e}function ga(t,e,i,n){const s=t.getContext(),l=i.defines;let c=i.vertexShader,a=i.fragmentShader;const g=function(t){let e="SHADOWMAP_TYPE_BASIC";return t.shadowMapType===o?e="SHADOWMAP_TYPE_PCF":t.shadowMapType===r?e="SHADOWMAP_TYPE_PCF_SOFT":t.shadowMapType===b&&(e="SHADOWMAP_TYPE_VSM"),e}(i),I=function(t){let e="ENVMAP_TYPE_CUBE";if(t.envMap)switch(t.envMapMode){case lt:case ct:e="ENVMAP_TYPE_CUBE";break;case It:case dt:e="ENVMAP_TYPE_CUBE_UV"}return e}(i),d=function(t){let e="ENVMAP_MODE_REFLECTION";if(t.envMap)switch(t.envMapMode){case ct:case dt:e="ENVMAP_MODE_REFRACTION"}return e}(i),u=function(t){let e="ENVMAP_BLENDING_NONE";if(t.envMap)switch(t.combine){case P:e="ENVMAP_BLENDING_MULTIPLY";break;case O:e="ENVMAP_BLENDING_MIX";break;case _:e="ENVMAP_BLENDING_ADD"}return e}(i),B=t.gammaFactor>0?t.gammaFactor:1,F=i.isWebGL2?"":function(t){return[t.extensionDerivatives||t.envMapCubeUV||t.bumpMap||t.tangentSpaceNormalMap||t.clearcoatNormalMap||t.flatShading||"physical"===t.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(t.extensionFragDepth||t.logarithmicDepthBuffer)&&t.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",t.extensionDrawBuffers&&t.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(t.extensionShaderTextureLOD||t.envMap)&&t.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(Oc).join("\n")}(i),C=function(t){const e=[];for(const i in t){const n=t[i];!1!==n&&e.push("#define "+i+" "+n)}return e.join("\n")}(l),G=s.createProgram();let U,Q,h=i.glslVersion?"#version "+i.glslVersion+"\n":"";i.isRawShaderMaterial?(U=[C].filter(Oc).join("\n"),U.length>0&&(U+="\n"),Q=[F,C].filter(Oc).join("\n"),Q.length>0&&(Q+="\n")):(U=[aa(i),"#define SHADER_NAME "+i.shaderName,C,i.instancing?"#define USE_INSTANCING":"",i.instancingColor?"#define USE_INSTANCING_COLOR":"",i.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+B,"#define MAX_BONES "+i.maxBones,i.useFog&&i.fog?"#define USE_FOG":"",i.useFog&&i.fogExp2?"#define FOG_EXP2":"",i.map?"#define USE_MAP":"",i.envMap?"#define USE_ENVMAP":"",i.envMap?"#define "+d:"",i.lightMap?"#define USE_LIGHTMAP":"",i.aoMap?"#define USE_AOMAP":"",i.emissiveMap?"#define USE_EMISSIVEMAP":"",i.bumpMap?"#define USE_BUMPMAP":"",i.normalMap?"#define USE_NORMALMAP":"",i.normalMap&&i.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",i.normalMap&&i.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",i.clearcoatMap?"#define USE_CLEARCOATMAP":"",i.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",i.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",i.displacementMap&&i.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",i.specularMap?"#define USE_SPECULARMAP":"",i.roughnessMap?"#define USE_ROUGHNESSMAP":"",i.metalnessMap?"#define USE_METALNESSMAP":"",i.alphaMap?"#define USE_ALPHAMAP":"",i.transmissionMap?"#define USE_TRANSMISSIONMAP":"",i.vertexTangents?"#define USE_TANGENT":"",i.vertexColors?"#define USE_COLOR":"",i.vertexUvs?"#define USE_UV":"",i.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",i.flatShading?"#define FLAT_SHADED":"",i.skinning?"#define USE_SKINNING":"",i.useVertexTexture?"#define BONE_TEXTURE":"",i.morphTargets?"#define USE_MORPHTARGETS":"",i.morphNormals&&!1===i.flatShading?"#define USE_MORPHNORMALS":"",i.doubleSided?"#define DOUBLE_SIDED":"",i.flipSided?"#define FLIP_SIDED":"",i.shadowMapEnabled?"#define USE_SHADOWMAP":"",i.shadowMapEnabled?"#define "+g:"",i.sizeAttenuation?"#define USE_SIZEATTENUATION":"",i.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",i.logarithmicDepthBuffer&&i.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#ifdef USE_COLOR","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(Oc).join("\n"),Q=[F,aa(i),"#define SHADER_NAME "+i.shaderName,C,i.alphaTest?"#define ALPHATEST "+i.alphaTest+(i.alphaTest%1?"":".0"):"","#define GAMMA_FACTOR "+B,i.useFog&&i.fog?"#define USE_FOG":"",i.useFog&&i.fogExp2?"#define FOG_EXP2":"",i.map?"#define USE_MAP":"",i.matcap?"#define USE_MATCAP":"",i.envMap?"#define USE_ENVMAP":"",i.envMap?"#define "+I:"",i.envMap?"#define "+d:"",i.envMap?"#define "+u:"",i.lightMap?"#define USE_LIGHTMAP":"",i.aoMap?"#define USE_AOMAP":"",i.emissiveMap?"#define USE_EMISSIVEMAP":"",i.bumpMap?"#define USE_BUMPMAP":"",i.normalMap?"#define USE_NORMALMAP":"",i.normalMap&&i.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",i.normalMap&&i.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",i.clearcoatMap?"#define USE_CLEARCOATMAP":"",i.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",i.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",i.specularMap?"#define USE_SPECULARMAP":"",i.roughnessMap?"#define USE_ROUGHNESSMAP":"",i.metalnessMap?"#define USE_METALNESSMAP":"",i.alphaMap?"#define USE_ALPHAMAP":"",i.sheen?"#define USE_SHEEN":"",i.transmissionMap?"#define USE_TRANSMISSIONMAP":"",i.vertexTangents?"#define USE_TANGENT":"",i.vertexColors||i.instancingColor?"#define USE_COLOR":"",i.vertexUvs?"#define USE_UV":"",i.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",i.gradientMap?"#define USE_GRADIENTMAP":"",i.flatShading?"#define FLAT_SHADED":"",i.doubleSided?"#define DOUBLE_SIDED":"",i.flipSided?"#define FLIP_SIDED":"",i.shadowMapEnabled?"#define USE_SHADOWMAP":"",i.shadowMapEnabled?"#define "+g:"",i.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",i.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",i.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",i.logarithmicDepthBuffer&&i.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"",(i.extensionShaderTextureLOD||i.envMap)&&i.rendererExtensionShaderTextureLod?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",i.toneMapping!==q?"#define TONE_MAPPING":"",i.toneMapping!==q?Ll.tonemapping_pars_fragment:"",i.toneMapping!==q?Pc("toneMapping",i.toneMapping):"",i.dithering?"#define DITHERING":"",Ll.encodings_pars_fragment,i.map?Kc("mapTexelToLinear",i.mapEncoding):"",i.matcap?Kc("matcapTexelToLinear",i.matcapEncoding):"",i.envMap?Kc("envMapTexelToLinear",i.envMapEncoding):"",i.emissiveMap?Kc("emissiveMapTexelToLinear",i.emissiveMapEncoding):"",i.lightMap?Kc("lightMapTexelToLinear",i.lightMapEncoding):"",jc("linearToOutputTexel",i.outputEncoding),i.depthPacking?"#define DEPTH_PACKING "+i.depthPacking:"","\n"].filter(Oc).join("\n")),c=ta(c),c=_c(c,i),c=qc(c,i),a=ta(a),a=_c(a,i),a=qc(a,i),c=sa(c),a=sa(a),i.isWebGL2&&!0!==i.isRawShaderMaterial&&(h="#version 300 es\n",U=["#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+U,Q=["#define varying in",i.glslVersion===Ei?"":"out highp vec4 pc_fragColor;",i.glslVersion===Ei?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+Q);const m=h+Q+a,x=zc(s,35633,h+U+c),p=zc(s,35632,m);if(s.attachShader(G,x),s.attachShader(G,p),void 0!==i.index0AttributeName?s.bindAttribLocation(G,0,i.index0AttributeName):!0===i.morphTargets&&s.bindAttribLocation(G,0,"position"),s.linkProgram(G),t.debug.checkShaderErrors){const t=s.getProgramInfoLog(G).trim(),e=s.getShaderInfoLog(x).trim(),i=s.getShaderInfoLog(p).trim();let n=!0,l=!0;if(!1===s.getProgramParameter(G,35714)){n=!1;const e=Dc(s,x,"vertex"),i=Dc(s,p,"fragment");console.error("THREE.WebGLProgram: shader error: ",s.getError(),"35715",s.getProgramParameter(G,35715),"gl.getProgramInfoLog",t,e,i)}else""!==t?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",t):""!==e&&""!==i||(l=!1);l&&(this.diagnostics={runnable:n,programLog:t,vertexShader:{log:e,prefix:U},fragmentShader:{log:i,prefix:Q}})}let V,Z;return s.deleteShader(x),s.deleteShader(p),this.getUniforms=function(){return void 0===V&&(V=new kc(s,G)),V},this.getAttributes=function(){return void 0===Z&&(Z=function(t,e){const i={},n=t.getProgramParameter(e,35721);for(let s=0;s<n;s++){const n=t.getActiveAttrib(e,s).name;i[n]=t.getAttribLocation(e,n)}return i}(s,G)),Z},this.destroy=function(){n.releaseStatesOfProgram(this),s.deleteProgram(G),this.program=void 0},this.name=i.shaderName,this.id=wc++,this.cacheKey=e,this.usedTimes=1,this.program=G,this.vertexShader=x,this.fragmentShader=p,this}function Ia(t,e,i,n,s,l){const c=[],a=n.isWebGL2,g=n.logarithmicDepthBuffer,I=n.floatVertexTextures,d=n.maxVertexUniforms,o=n.vertexTextures;let r=n.precision;const b={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},u=["precision","isWebGL2","supportsVertexTextures","outputEncoding","instancing","instancingColor","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","envMapCubeUV","lightMap","lightMapEncoding","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","vertexTangents","vertexUvs","uvsVertexOnly","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","numDirLightShadows","numPointLightShadows","numSpotLightShadows","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","sheen","transmissionMap"];function C(t){let e;return t&&t.isTexture?e=t.encoding:t&&t.isWebGLRenderTarget?(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),e=t.texture.encoding):e=Oe,e}return{getParameters:function(s,c,u,G,U){const Q=G.fog,h=s.isMeshStandardMaterial?G.environment:null,m=e.get(s.envMap||h),x=b[s.type],p=U.isSkinnedMesh?function(t){const e=t.skeleton.bones;if(I)return 1024;{const t=d,i=Math.floor((t-20)/4),n=Math.min(i,e.length);return n<e.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+e.length+" bones. This GPU supports "+n+"."),0):n}}(U):0;let V,Z;if(null!==s.precision&&(r=n.getMaxPrecision(s.precision),r!==s.precision&&console.warn("THREE.WebGLProgram.getParameters:",s.precision,"not supported, using",r,"instead.")),x){const t=Al[x];V=t.vertexShader,Z=t.fragmentShader}else V=s.vertexShader,Z=s.fragmentShader;const R=t.getRenderTarget();return{isWebGL2:a,shaderID:x,shaderName:s.type,vertexShader:V,fragmentShader:Z,defines:s.defines,isRawShaderMaterial:!0===s.isRawShaderMaterial,glslVersion:s.glslVersion,precision:r,instancing:!0===U.isInstancedMesh,instancingColor:!0===U.isInstancedMesh&&null!==U.instanceColor,supportsVertexTextures:o,outputEncoding:null!==R?C(R.texture):t.outputEncoding,map:!!s.map,mapEncoding:C(s.map),matcap:!!s.matcap,matcapEncoding:C(s.matcap),envMap:!!m,envMapMode:m&&m.mapping,envMapEncoding:C(m),envMapCubeUV:!!m&&(m.mapping===It||m.mapping===dt),lightMap:!!s.lightMap,lightMapEncoding:C(s.lightMap),aoMap:!!s.aoMap,emissiveMap:!!s.emissiveMap,emissiveMapEncoding:C(s.emissiveMap),bumpMap:!!s.bumpMap,normalMap:!!s.normalMap,objectSpaceNormalMap:s.normalMapType===ai,tangentSpaceNormalMap:s.normalMapType===ci,clearcoatMap:!!s.clearcoatMap,clearcoatRoughnessMap:!!s.clearcoatRoughnessMap,clearcoatNormalMap:!!s.clearcoatNormalMap,displacementMap:!!s.displacementMap,roughnessMap:!!s.roughnessMap,metalnessMap:!!s.metalnessMap,specularMap:!!s.specularMap,alphaMap:!!s.alphaMap,gradientMap:!!s.gradientMap,sheen:!!s.sheen,transmissionMap:!!s.transmissionMap,combine:s.combine,vertexTangents:s.normalMap&&s.vertexTangents,vertexColors:s.vertexColors,vertexUvs:!!(s.map||s.bumpMap||s.normalMap||s.specularMap||s.alphaMap||s.emissiveMap||s.roughnessMap||s.metalnessMap||s.clearcoatMap||s.clearcoatRoughnessMap||s.clearcoatNormalMap||s.displacementMap||s.transmissionMap),uvsVertexOnly:!(s.map||s.bumpMap||s.normalMap||s.specularMap||s.alphaMap||s.emissiveMap||s.roughnessMap||s.metalnessMap||s.clearcoatNormalMap||s.transmissionMap||!s.displacementMap),fog:!!Q,useFog:s.fog,fogExp2:Q&&Q.isFogExp2,flatShading:!!s.flatShading,sizeAttenuation:s.sizeAttenuation,logarithmicDepthBuffer:g,skinning:s.skinning&&p>0,maxBones:p,useVertexTexture:I,morphTargets:s.morphTargets,morphNormals:s.morphNormals,maxMorphTargets:t.maxMorphTargets,maxMorphNormals:t.maxMorphNormals,numDirLights:c.directional.length,numPointLights:c.point.length,numSpotLights:c.spot.length,numRectAreaLights:c.rectArea.length,numHemiLights:c.hemi.length,numDirLightShadows:c.directionalShadowMap.length,numPointLightShadows:c.pointShadowMap.length,numSpotLightShadows:c.spotShadowMap.length,numClippingPlanes:l.numPlanes,numClipIntersection:l.numIntersection,dithering:s.dithering,shadowMapEnabled:t.shadowMap.enabled&&u.length>0,shadowMapType:t.shadowMap.type,toneMapping:s.toneMapped?t.toneMapping:q,physicallyCorrectLights:t.physicallyCorrectLights,premultipliedAlpha:s.premultipliedAlpha,alphaTest:s.alphaTest,doubleSided:s.side===F,flipSided:s.side===B,depthPacking:void 0!==s.depthPacking&&s.depthPacking,index0AttributeName:s.index0AttributeName,extensionDerivatives:s.extensions&&s.extensions.derivatives,extensionFragDepth:s.extensions&&s.extensions.fragDepth,extensionDrawBuffers:s.extensions&&s.extensions.drawBuffers,extensionShaderTextureLOD:s.extensions&&s.extensions.shaderTextureLOD,rendererExtensionFragDepth:a||i.has("EXT_frag_depth"),rendererExtensionDrawBuffers:a||i.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:a||i.has("EXT_shader_texture_lod"),customProgramCacheKey:s.customProgramCacheKey()}},getProgramCacheKey:function(e){const i=[];if(e.shaderID?i.push(e.shaderID):(i.push(e.fragmentShader),i.push(e.vertexShader)),void 0!==e.defines)for(const t in e.defines)i.push(t),i.push(e.defines[t]);if(!1===e.isRawShaderMaterial){for(let t=0;t<u.length;t++)i.push(e[u[t]]);i.push(t.outputEncoding),i.push(t.gammaFactor)}return i.push(e.customProgramCacheKey),i.join()},getUniforms:function(t){const e=b[t.type];let i;if(e){const t=Al[e];i=ul.clone(t.uniforms)}else i=t.uniforms;return i},acquireProgram:function(e,i){let n;for(let t=0,e=c.length;t<e;t++){const e=c[t];if(e.cacheKey===i){n=e,++n.usedTimes;break}}return void 0===n&&(n=new ga(t,i,e,s),c.push(n)),n},releaseProgram:function(t){if(0==--t.usedTimes){const e=c.indexOf(t);c[e]=c[c.length-1],c.pop(),t.destroy()}},programs:c}}function da(){let t=new WeakMap;return{get:function(e){let i=t.get(e);return void 0===i&&(i={},t.set(e,i)),i},remove:function(e){t.delete(e)},update:function(e,i,n){t.get(e)[i]=n},dispose:function(){t=new WeakMap}}}function oa(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program!==e.program?t.program.id-e.program.id:t.material.id!==e.material.id?t.material.id-e.material.id:t.z!==e.z?t.z-e.z:t.id-e.id}function ra(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.z!==e.z?e.z-t.z:t.id-e.id}function ba(t){const e=[];let i=0;const n=[],s=[],l={id:-1};function c(n,s,c,a,g,I){let d=e[i];const o=t.get(c);return void 0===d?(d={id:n.id,object:n,geometry:s,material:c,program:o.program||l,groupOrder:a,renderOrder:n.renderOrder,z:g,group:I},e[i]=d):(d.id=n.id,d.object=n,d.geometry=s,d.material=c,d.program=o.program||l,d.groupOrder=a,d.renderOrder=n.renderOrder,d.z=g,d.group=I),i++,d}return{opaque:n,transparent:s,init:function(){i=0,n.length=0,s.length=0},push:function(t,e,i,l,a,g){const I=c(t,e,i,l,a,g);(!0===i.transparent?s:n).push(I)},unshift:function(t,e,i,l,a,g){const I=c(t,e,i,l,a,g);(!0===i.transparent?s:n).unshift(I)},finish:function(){for(let t=i,n=e.length;t<n;t++){const i=e[t];if(null===i.id)break;i.id=null,i.object=null,i.geometry=null,i.material=null,i.program=null,i.group=null}},sort:function(t,e){n.length>1&&n.sort(t||oa),s.length>1&&s.sort(e||ra)}}}function ua(t){let e=new WeakMap;return{get:function(i,n){let s;return!1===e.has(i)?(s=new ba(t),e.set(i,[s])):n>=e.get(i).length?(s=new ba(t),e.get(i).push(s)):s=e.get(i)[n],s},dispose:function(){e=new WeakMap}}}function Ba(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let i;switch(e.type){case"DirectionalLight":i={direction:new Oi,color:new Qs};break;case"SpotLight":i={position:new Oi,direction:new Oi,color:new Qs,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":i={position:new Oi,color:new Qs,distance:0,decay:0};break;case"HemisphereLight":i={direction:new Oi,skyColor:new Qs,groundColor:new Qs};break;case"RectAreaLight":i={color:new Qs,position:new Oi,halfWidth:new Oi,halfHeight:new Oi}}return t[e.id]=i,i}}}let Fa=0;function Ca(t,e){return(e.castShadow?1:0)-(t.castShadow?1:0)}function Ga(t,e){const i=new Ba,n=function(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let i;switch(e.type){case"DirectionalLight":case"SpotLight":i={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Ji};break;case"PointLight":i={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Ji,shadowCameraNear:1,shadowCameraFar:1e3}}return t[e.id]=i,i}}}(),s={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let t=0;t<9;t++)s.probe.push(new Oi);const l=new Oi,c=new Vn,a=new Vn;return{setup:function(l){let c=0,a=0,g=0;for(let t=0;t<9;t++)s.probe[t].set(0,0,0);let I=0,d=0,o=0,r=0,b=0,u=0,B=0,F=0;l.sort(Ca);for(let t=0,e=l.length;t<e;t++){const e=l[t],C=e.color,G=e.intensity,U=e.distance,Q=e.shadow&&e.shadow.map?e.shadow.map.texture:null;if(e.isAmbientLight)c+=C.r*G,a+=C.g*G,g+=C.b*G;else if(e.isLightProbe)for(let t=0;t<9;t++)s.probe[t].addScaledVector(e.sh.coefficients[t],G);else if(e.isDirectionalLight){const t=i.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity),e.castShadow){const t=e.shadow,i=n.get(e);i.shadowBias=t.bias,i.shadowNormalBias=t.normalBias,i.shadowRadius=t.radius,i.shadowMapSize=t.mapSize,s.directionalShadow[I]=i,s.directionalShadowMap[I]=Q,s.directionalShadowMatrix[I]=e.shadow.matrix,u++}s.directional[I]=t,I++}else if(e.isSpotLight){const t=i.get(e);if(t.position.setFromMatrixPosition(e.matrixWorld),t.color.copy(C).multiplyScalar(G),t.distance=U,t.coneCos=Math.cos(e.angle),t.penumbraCos=Math.cos(e.angle*(1-e.penumbra)),t.decay=e.decay,e.castShadow){const t=e.shadow,i=n.get(e);i.shadowBias=t.bias,i.shadowNormalBias=t.normalBias,i.shadowRadius=t.radius,i.shadowMapSize=t.mapSize,s.spotShadow[o]=i,s.spotShadowMap[o]=Q,s.spotShadowMatrix[o]=e.shadow.matrix,F++}s.spot[o]=t,o++}else if(e.isRectAreaLight){const t=i.get(e);t.color.copy(C).multiplyScalar(G),t.halfWidth.set(.5*e.width,0,0),t.halfHeight.set(0,.5*e.height,0),s.rectArea[r]=t,r++}else if(e.isPointLight){const t=i.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity),t.distance=e.distance,t.decay=e.decay,e.castShadow){const t=e.shadow,i=n.get(e);i.shadowBias=t.bias,i.shadowNormalBias=t.normalBias,i.shadowRadius=t.radius,i.shadowMapSize=t.mapSize,i.shadowCameraNear=t.camera.near,i.shadowCameraFar=t.camera.far,s.pointShadow[d]=i,s.pointShadowMap[d]=Q,s.pointShadowMatrix[d]=e.shadow.matrix,B++}s.point[d]=t,d++}else if(e.isHemisphereLight){const t=i.get(e);t.skyColor.copy(e.color).multiplyScalar(G),t.groundColor.copy(e.groundColor).multiplyScalar(G),s.hemi[b]=t,b++}}r>0&&(e.isWebGL2||!0===t.has("OES_texture_float_linear")?(s.rectAreaLTC1=Xl.LTC_FLOAT_1,s.rectAreaLTC2=Xl.LTC_FLOAT_2):!0===t.has("OES_texture_half_float_linear")?(s.rectAreaLTC1=Xl.LTC_HALF_1,s.rectAreaLTC2=Xl.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),s.ambient[0]=c,s.ambient[1]=a,s.ambient[2]=g;const C=s.hash;C.directionalLength===I&&C.pointLength===d&&C.spotLength===o&&C.rectAreaLength===r&&C.hemiLength===b&&C.numDirectionalShadows===u&&C.numPointShadows===B&&C.numSpotShadows===F||(s.directional.length=I,s.spot.length=o,s.rectArea.length=r,s.point.length=d,s.hemi.length=b,s.directionalShadow.length=u,s.directionalShadowMap.length=u,s.pointShadow.length=B,s.pointShadowMap.length=B,s.spotShadow.length=F,s.spotShadowMap.length=F,s.directionalShadowMatrix.length=u,s.pointShadowMatrix.length=B,s.spotShadowMatrix.length=F,C.directionalLength=I,C.pointLength=d,C.spotLength=o,C.rectAreaLength=r,C.hemiLength=b,C.numDirectionalShadows=u,C.numPointShadows=B,C.numSpotShadows=F,s.version=Fa++)},setupView:function(t,e){let i=0,n=0,g=0,I=0,d=0;const o=e.matrixWorldInverse;for(let e=0,r=t.length;e<r;e++){const r=t[e];if(r.isDirectionalLight){const t=s.directional[i];t.direction.setFromMatrixPosition(r.matrixWorld),l.setFromMatrixPosition(r.target.matrixWorld),t.direction.sub(l),t.direction.transformDirection(o),i++}else if(r.isSpotLight){const t=s.spot[g];t.position.setFromMatrixPosition(r.matrixWorld),t.position.applyMatrix4(o),t.direction.setFromMatrixPosition(r.matrixWorld),l.setFromMatrixPosition(r.target.matrixWorld),t.direction.sub(l),t.direction.transformDirection(o),g++}else if(r.isRectAreaLight){const t=s.rectArea[I];t.position.setFromMatrixPosition(r.matrixWorld),t.position.applyMatrix4(o),a.identity(),c.copy(r.matrixWorld),c.premultiply(o),a.extractRotation(c),t.halfWidth.set(.5*r.width,0,0),t.halfHeight.set(0,.5*r.height,0),t.halfWidth.applyMatrix4(a),t.halfHeight.applyMatrix4(a),I++}else if(r.isPointLight){const t=s.point[n];t.position.setFromMatrixPosition(r.matrixWorld),t.position.applyMatrix4(o),n++}else if(r.isHemisphereLight){const t=s.hemi[d];t.direction.setFromMatrixPosition(r.matrixWorld),t.direction.transformDirection(o),t.direction.normalize(),d++}}},state:s}}function Ua(t,e){const i=new Ga(t,e),n=[],s=[];return{init:function(){n.length=0,s.length=0},state:{lightsArray:n,shadowsArray:s,lights:i},setupLights:function(){i.setup(n)},setupLightsView:function(t){i.setupView(n,t)},pushLight:function(t){n.push(t)},pushShadow:function(t){s.push(t)}}}function Qa(t,e){let i=new WeakMap;return{get:function(n,s=0){let l;return!1===i.has(n)?(l=new Ua(t,e),i.set(n,[l])):s>=i.get(n).length?(l=new Ua(t,e),i.get(n).push(l)):l=i.get(n)[s],l},dispose:function(){i=new WeakMap}}}class ha extends bs{constructor(t){super(),this.type="MeshDepthMaterial",this.depthPacking=si,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}ha.prototype.isMeshDepthMaterial=!0;class ma extends bs{constructor(t){super(),this.type="MeshDistanceMaterial",this.referencePosition=new Oi,this.nearDistance=1,this.farDistance=1e3,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(t)}copy(t){return super.copy(t),this.referencePosition.copy(t.referencePosition),this.nearDistance=t.nearDistance,this.farDistance=t.farDistance,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}function xa(t,e,i){let n=new Vl;const s=new Ji,l=new Ji,c=new Di,a=[],g=[],I={},d={0:B,1:u,2:F},r=new Bl({defines:{SAMPLE_RATE:2/8,HALF_SAMPLE_RATE:1/8},uniforms:{shadow_pass:{value:null},resolution:{value:new Ji},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\n\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean * HALF_SAMPLE_RATE;\n\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),C=r.clone();C.defines.HORIZONTAL_PASS=1;const G=new Ts;G.setAttribute("position",new ps(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const Q=new Il(G,r),h=this;function m(i,n){const s=e.update(Q);r.uniforms.shadow_pass.value=i.map.texture,r.uniforms.resolution.value=i.mapSize,r.uniforms.radius.value=i.radius,t.setRenderTarget(i.mapPass),t.clear(),t.renderBufferDirect(n,null,s,r,Q,null),C.uniforms.shadow_pass.value=i.mapPass.texture,C.uniforms.resolution.value=i.mapSize,C.uniforms.radius.value=i.radius,t.setRenderTarget(i.map),t.clear(),t.renderBufferDirect(n,null,s,C,Q,null)}function x(t,e,i){const n=t<<0|e<<1|i<<2;let s=a[n];return void 0===s&&(s=new ha({depthPacking:li,morphTargets:t,skinning:e}),a[n]=s),s}function p(t,e,i){const n=t<<0|e<<1|i<<2;let s=g[n];return void 0===s&&(s=new ma({morphTargets:t,skinning:e}),g[n]=s),s}function V(e,i,n,s,l,c,a){let g=null,o=x,r=e.customDepthMaterial;if(!0===s.isPointLight&&(o=p,r=e.customDistanceMaterial),void 0===r){let t=!1;!0===n.morphTargets&&(t=i.morphAttributes&&i.morphAttributes.position&&i.morphAttributes.position.length>0);let s=!1;!0===e.isSkinnedMesh&&(!0===n.skinning?s=!0:console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",e)),g=o(t,s,!0===e.isInstancedMesh)}else g=r;if(t.localClippingEnabled&&!0===n.clipShadows&&0!==n.clippingPlanes.length){const t=g.uuid,e=n.uuid;let i=I[t];void 0===i&&(i={},I[t]=i);let s=i[e];void 0===s&&(s=g.clone(),i[e]=s),g=s}return g.visible=n.visible,g.wireframe=n.wireframe,g.side=a===b?null!==n.shadowSide?n.shadowSide:n.side:null!==n.shadowSide?n.shadowSide:d[n.side],g.clipShadows=n.clipShadows,g.clippingPlanes=n.clippingPlanes,g.clipIntersection=n.clipIntersection,g.wireframeLinewidth=n.wireframeLinewidth,g.linewidth=n.linewidth,!0===s.isPointLight&&!0===g.isMeshDistanceMaterial&&(g.referencePosition.setFromMatrixPosition(s.matrixWorld),g.nearDistance=l,g.farDistance=c),g}function Z(i,s,l,c,a){if(!1===i.visible)return;if(i.layers.test(s.layers)&&(i.isMesh||i.isLine||i.isPoints)&&(i.castShadow||i.receiveShadow&&a===b)&&(!i.frustumCulled||n.intersectsObject(i))){i.modelViewMatrix.multiplyMatrices(l.matrixWorldInverse,i.matrixWorld);const n=e.update(i),s=i.material;if(Array.isArray(s)){const e=n.groups;for(let g=0,I=e.length;g<I;g++){const I=e[g],d=s[I.materialIndex];if(d&&d.visible){const e=V(i,n,d,c,l.near,l.far,a);t.renderBufferDirect(l,null,n,e,i,I)}}}else if(s.visible){const e=V(i,n,s,c,l.near,l.far,a);t.renderBufferDirect(l,null,n,e,i,null)}}const g=i.children;for(let t=0,e=g.length;t<e;t++)Z(g[t],s,l,c,a)}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=o,this.render=function(e,a,g){if(!1===h.enabled)return;if(!1===h.autoUpdate&&!1===h.needsUpdate)return;if(0===e.length)return;const I=t.getRenderTarget(),d=t.getActiveCubeFace(),o=t.getActiveMipmapLevel(),r=t.state;r.setBlending(U),r.buffers.color.setClear(1,1,1,1),r.buffers.depth.setTest(!0),r.setScissorTest(!1);for(let I=0,d=e.length;I<d;I++){const d=e[I],o=d.shadow;if(void 0===o){console.warn("THREE.WebGLShadowMap:",d,"has no shadow.");continue}if(!1===o.autoUpdate&&!1===o.needsUpdate)continue;s.copy(o.mapSize);const u=o.getFrameExtents();if(s.multiply(u),l.copy(o.mapSize),(s.x>i||s.y>i)&&(s.x>i&&(l.x=Math.floor(i/u.x),s.x=l.x*u.x,o.mapSize.x=l.x),s.y>i&&(l.y=Math.floor(i/u.y),s.y=l.y*u.y,o.mapSize.y=l.y)),null===o.map&&!o.isPointLightShadow&&this.type===b){const t={minFilter:Ut,magFilter:Ut,format:Ht};o.map=new Ki(s.x,s.y,t),o.map.texture.name=d.name+".shadowMap",o.mapPass=new Ki(s.x,s.y,t),o.camera.updateProjectionMatrix()}if(null===o.map){const t={minFilter:ut,magFilter:ut,format:Ht};o.map=new Ki(s.x,s.y,t),o.map.texture.name=d.name+".shadowMap",o.camera.updateProjectionMatrix()}t.setRenderTarget(o.map),t.clear();const B=o.getViewportCount();for(let t=0;t<B;t++){const e=o.getViewport(t);c.set(l.x*e.x,l.y*e.y,l.x*e.z,l.y*e.w),r.viewport(c),o.updateMatrices(d,t),n=o.getFrustum(),Z(a,g,o.camera,d,this.type)}o.isPointLightShadow||this.type!==b||m(o,g),o.needsUpdate=!1}h.needsUpdate=!1,t.setRenderTarget(I,d,o)}}function pa(t,e,i){const n=i.isWebGL2,s=new function(){let e=!1;const i=new Di;let n=null;const s=new Di(0,0,0,0);return{setMask:function(i){n===i||e||(t.colorMask(i,i,i,i),n=i)},setLocked:function(t){e=t},setClear:function(e,n,l,c,a){!0===a&&(e*=c,n*=c,l*=c),i.set(e,n,l,c),!1===s.equals(i)&&(t.clearColor(e,n,l,c),s.copy(i))},reset:function(){e=!1,n=null,s.set(-1,0,0,0)}}},l=new function(){let e=!1,i=null,n=null,s=null;return{setTest:function(t){t?ut(2929):Bt(2929)},setMask:function(n){i===n||e||(t.depthMask(n),i=n)},setFunc:function(e){if(n!==e){if(e)switch(e){case f:t.depthFunc(512);break;case k:t.depthFunc(519);break;case z:t.depthFunc(513);break;case w:t.depthFunc(515);break;case T:t.depthFunc(514);break;case D:t.depthFunc(518);break;case K:t.depthFunc(516);break;case j:t.depthFunc(517);break;default:t.depthFunc(515)}else t.depthFunc(515);n=e}},setLocked:function(t){e=t},setClear:function(e){s!==e&&(t.clearDepth(e),s=e)},reset:function(){e=!1,i=null,n=null,s=null}}},I=new function(){let e=!1,i=null,n=null,s=null,l=null,c=null,a=null,g=null,I=null;return{setTest:function(t){e||(t?ut(2960):Bt(2960))},setMask:function(n){i===n||e||(t.stencilMask(n),i=n)},setFunc:function(e,i,c){n===e&&s===i&&l===c||(t.stencilFunc(e,i,c),n=e,s=i,l=c)},setOp:function(e,i,n){c===e&&a===i&&g===n||(t.stencilOp(e,i,n),c=e,a=i,g=n)},setLocked:function(t){e=t},setClear:function(e){I!==e&&(t.clearStencil(e),I=e)},reset:function(){e=!1,i=null,n=null,s=null,l=null,c=null,a=null,g=null,I=null}}};let d={},o=null,r=!1,b=null,u=null,C=null,G=null,P=null,O=null,_=null,q=!1,$=null,tt=null,et=null,it=null,nt=null;const st=t.getParameter(35661);let lt=!1,ct=0;const at=t.getParameter(7938);-1!==at.indexOf("WebGL")?(ct=parseFloat(/^WebGL (\d)/.exec(at)[1]),lt=ct>=1):-1!==at.indexOf("OpenGL ES")&&(ct=parseFloat(/^OpenGL ES (\d)/.exec(at)[1]),lt=ct>=2);let gt=null,It={};const dt=new Di,ot=new Di;function rt(e,i,n){const s=new Uint8Array(4),l=t.createTexture();t.bindTexture(e,l),t.texParameteri(e,10241,9728),t.texParameteri(e,10240,9728);for(let e=0;e<n;e++)t.texImage2D(i+e,0,6408,1,1,0,6408,5121,s);return l}const bt={};function ut(e){!0!==d[e]&&(t.enable(e),d[e]=!0)}function Bt(e){!1!==d[e]&&(t.disable(e),d[e]=!1)}bt[3553]=rt(3553,3553,1),bt[34067]=rt(34067,34069,6),s.setClear(0,0,0,1),l.setClear(1),I.setClear(0),ut(2929),l.setFunc(w),Ut(!1),Qt(a),ut(2884),Gt(U);const Ft={[V]:32774,[Z]:32778,[R]:32779};if(n)Ft[y]=32775,Ft[L]=32776;else{const t=e.get("EXT_blend_minmax");null!==t&&(Ft[y]=t.MIN_EXT,Ft[L]=t.MAX_EXT)}const Ct={[X]:0,[A]:1,[W]:768,[E]:770,[M]:776,[H]:774,[v]:772,[S]:769,[N]:771,[J]:775,[Y]:773};function Gt(e,i,n,s,l,c,a,g){if(e!==U){if(!1===r&&(ut(3042),r=!0),e===p)l=l||i,c=c||n,a=a||s,i===u&&l===P||(t.blendEquationSeparate(Ft[i],Ft[l]),u=i,P=l),n===C&&s===G&&c===O&&a===_||(t.blendFuncSeparate(Ct[n],Ct[s],Ct[c],Ct[a]),C=n,G=s,O=c,_=a),b=e,q=null;else if(e!==b||g!==q){if(u===V&&P===V||(t.blendEquation(32774),u=V,P=V),g)switch(e){case Q:t.blendFuncSeparate(1,771,1,771);break;case h:t.blendFunc(1,1);break;case m:t.blendFuncSeparate(0,0,769,771);break;case x:t.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}else switch(e){case Q:t.blendFuncSeparate(770,771,1,771);break;case h:t.blendFunc(770,1);break;case m:t.blendFunc(0,769);break;case x:t.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}C=null,G=null,O=null,_=null,b=e,q=g}}else!0===r&&(Bt(3042),r=!1)}function Ut(e){$!==e&&(e?t.frontFace(2304):t.frontFace(2305),$=e)}function Qt(e){e!==c?(ut(2884),e!==tt&&(e===a?t.cullFace(1029):e===g?t.cullFace(1028):t.cullFace(1032))):Bt(2884),tt=e}function ht(e,i,n){e?(ut(32823),it===i&&nt===n||(t.polygonOffset(i,n),it=i,nt=n)):Bt(32823)}function mt(e){void 0===e&&(e=33984+st-1),gt!==e&&(t.activeTexture(e),gt=e)}return{buffers:{color:s,depth:l,stencil:I},enable:ut,disable:Bt,useProgram:function(e){return o!==e&&(t.useProgram(e),o=e,!0)},setBlending:Gt,setMaterial:function(t,e){t.side===F?Bt(2884):ut(2884);let i=t.side===B;e&&(i=!i),Ut(i),t.blending===Q&&!1===t.transparent?Gt(U):Gt(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha),l.setFunc(t.depthFunc),l.setTest(t.depthTest),l.setMask(t.depthWrite),s.setMask(t.colorWrite);const n=t.stencilWrite;I.setTest(n),n&&(I.setMask(t.stencilWriteMask),I.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),I.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),ht(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits)},setFlipSided:Ut,setCullFace:Qt,setLineWidth:function(e){e!==et&&(lt&&t.lineWidth(e),et=e)},setPolygonOffset:ht,setScissorTest:function(t){t?ut(3089):Bt(3089)},activeTexture:mt,bindTexture:function(e,i){null===gt&&mt();let n=It[gt];void 0===n&&(n={type:void 0,texture:void 0},It[gt]=n),n.type===e&&n.texture===i||(t.bindTexture(e,i||bt[e]),n.type=e,n.texture=i)},unbindTexture:function(){const e=It[gt];void 0!==e&&void 0!==e.type&&(t.bindTexture(e.type,null),e.type=void 0,e.texture=void 0)},compressedTexImage2D:function(){try{t.compressedTexImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage2D:function(){try{t.texImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage3D:function(){try{t.texImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},scissor:function(e){!1===dt.equals(e)&&(t.scissor(e.x,e.y,e.z,e.w),dt.copy(e))},viewport:function(e){!1===ot.equals(e)&&(t.viewport(e.x,e.y,e.z,e.w),ot.copy(e))},reset:function(){t.disable(3042),t.disable(2884),t.disable(2929),t.disable(32823),t.disable(3089),t.disable(2960),t.blendEquation(32774),t.blendFunc(1,0),t.blendFuncSeparate(1,0,1,0),t.colorMask(!0,!0,!0,!0),t.clearColor(0,0,0,0),t.depthMask(!0),t.depthFunc(513),t.clearDepth(1),t.stencilMask(4294967295),t.stencilFunc(519,0,4294967295),t.stencilOp(7680,7680,7680),t.clearStencil(0),t.cullFace(1029),t.frontFace(2305),t.polygonOffset(0,0),t.activeTexture(33984),t.useProgram(null),t.lineWidth(1),t.scissor(0,0,t.canvas.width,t.canvas.height),t.viewport(0,0,t.canvas.width,t.canvas.height),d={},gt=null,It={},o=null,r=!1,b=null,u=null,C=null,G=null,P=null,O=null,_=null,q=!1,$=null,tt=null,et=null,it=null,nt=null,s.reset(),l.reset(),I.reset()}}}function Va(t,e,i,n,s,l,c){const a=s.isWebGL2,g=s.maxTextures,I=s.maxCubemapSize,d=s.maxTextureSize,o=s.maxSamples,r=new WeakMap;let b,u=!1;try{u="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(t){}function B(t,e){return u?new OffscreenCanvas(t,e):document.createElementNS("http://www.w3.org/1999/xhtml","canvas")}function F(t,e,i,n){let s=1;if((t.width>n||t.height>n)&&(s=n/Math.max(t.width,t.height)),s<1||!0===e){if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap){const n=e?Hi.floorPowerOfTwo:Math.floor,l=n(s*t.width),c=n(s*t.height);void 0===b&&(b=B(l,c));const a=i?B(l,c):b;return a.width=l,a.height=c,a.getContext("2d").drawImage(t,0,0,l,c),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+t.width+"x"+t.height+") to ("+l+"x"+c+")."),a}return"data"in t&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+t.width+"x"+t.height+")."),t}return t}function C(t){return Hi.isPowerOfTwo(t.width)&&Hi.isPowerOfTwo(t.height)}function G(t,e){return t.generateMipmaps&&e&&t.minFilter!==ut&&t.minFilter!==Ut}function U(e,i,s,l){t.generateMipmap(e),n.get(i).__maxMipLevel=Math.log2(Math.max(s,l))}function Q(i,n,s){if(!1===a)return n;if(null!==i){if(void 0!==t[i])return t[i];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+i+"'")}let l=n;return 6403===n&&(5126===s&&(l=33326),5131===s&&(l=33325),5121===s&&(l=33321)),6407===n&&(5126===s&&(l=34837),5131===s&&(l=34843),5121===s&&(l=32849)),6408===n&&(5126===s&&(l=34836),5131===s&&(l=34842),5121===s&&(l=32856)),33325!==l&&33326!==l&&34842!==l&&34836!==l||e.get("EXT_color_buffer_float"),l}function h(t){return t===ut||t===Bt||t===Ct?9728:9729}function m(e){const i=e.target;i.removeEventListener("dispose",m),function(e){const i=n.get(e);void 0!==i.__webglInit&&(t.deleteTexture(i.__webglTexture),n.remove(e))}(i),i.isVideoTexture&&r.delete(i),c.memory.textures--}function x(e){const i=e.target;i.removeEventListener("dispose",x),function(e){const i=e.texture,s=n.get(e),l=n.get(i);if(e){if(void 0!==l.__webglTexture&&t.deleteTexture(l.__webglTexture),e.depthTexture&&e.depthTexture.dispose(),e.isWebGLCubeRenderTarget)for(let e=0;e<6;e++)t.deleteFramebuffer(s.__webglFramebuffer[e]),s.__webglDepthbuffer&&t.deleteRenderbuffer(s.__webglDepthbuffer[e]);else t.deleteFramebuffer(s.__webglFramebuffer),s.__webglDepthbuffer&&t.deleteRenderbuffer(s.__webglDepthbuffer),s.__webglMultisampledFramebuffer&&t.deleteFramebuffer(s.__webglMultisampledFramebuffer),s.__webglColorRenderbuffer&&t.deleteRenderbuffer(s.__webglColorRenderbuffer),s.__webglDepthRenderbuffer&&t.deleteRenderbuffer(s.__webglDepthRenderbuffer);n.remove(i),n.remove(e)}}(i),c.memory.textures--}let p=0;function V(t,e){const s=n.get(t);if(t.isVideoTexture&&function(t){const e=c.render.frame;r.get(t)!==e&&(r.set(t,e),t.update())}(t),t.version>0&&s.__version!==t.version){const i=t.image;if(void 0===i)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else{if(!1!==i.complete)return void A(s,t,e);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}i.activeTexture(33984+e),i.bindTexture(3553,s.__webglTexture)}function Z(e,s){const c=n.get(e);e.version>0&&c.__version!==e.version?function(e,n,s){if(6!==n.image.length)return;X(e,n),i.activeTexture(33984+s),i.bindTexture(34067,e.__webglTexture),t.pixelStorei(37440,n.flipY),t.pixelStorei(37441,n.premultiplyAlpha),t.pixelStorei(3317,n.unpackAlignment),t.pixelStorei(37443,0);const c=n&&(n.isCompressedTexture||n.image[0].isCompressedTexture),g=n.image[0]&&n.image[0].isDataTexture,d=[];for(let t=0;t<6;t++)d[t]=c||g?g?n.image[t].image:n.image[t]:F(n.image[t],!1,!0,I);const o=d[0],r=C(o)||a,b=l.convert(n.format),u=l.convert(n.type),B=Q(n.internalFormat,b,u);let h;if(L(34067,n,r),c){for(let t=0;t<6;t++){h=d[t].mipmaps;for(let e=0;e<h.length;e++){const s=h[e];n.format!==Ht&&n.format!==Yt?null!==b?i.compressedTexImage2D(34069+t,e,B,s.width,s.height,0,s.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):i.texImage2D(34069+t,e,B,s.width,s.height,0,b,u,s.data)}}e.__maxMipLevel=h.length-1}else{h=n.mipmaps;for(let t=0;t<6;t++)if(g){i.texImage2D(34069+t,0,B,d[t].width,d[t].height,0,b,u,d[t].data);for(let e=0;e<h.length;e++){const n=h[e].image[t].image;i.texImage2D(34069+t,e+1,B,n.width,n.height,0,b,u,n.data)}}else{i.texImage2D(34069+t,0,B,b,u,d[t]);for(let e=0;e<h.length;e++){const n=h[e];i.texImage2D(34069+t,e+1,B,b,u,n.image[t])}}e.__maxMipLevel=h.length}G(n,r)&&U(34067,n,o.width,o.height),e.__version=n.version,n.onUpdate&&n.onUpdate(n)}(c,e,s):(i.activeTexture(33984+s),i.bindTexture(34067,c.__webglTexture))}const R={[ot]:10497,[rt]:33071,[bt]:33648},y={[ut]:9728,[Bt]:9984,[Ct]:9986,[Ut]:9729,[Qt]:9985,[mt]:9987};function L(i,l,c){if(c?(t.texParameteri(i,10242,R[l.wrapS]),t.texParameteri(i,10243,R[l.wrapT]),32879!==i&&35866!==i||t.texParameteri(i,32882,R[l.wrapR]),t.texParameteri(i,10240,y[l.magFilter]),t.texParameteri(i,10241,y[l.minFilter])):(t.texParameteri(i,10242,33071),t.texParameteri(i,10243,33071),32879!==i&&35866!==i||t.texParameteri(i,32882,33071),l.wrapS===rt&&l.wrapT===rt||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),t.texParameteri(i,10240,h(l.magFilter)),t.texParameteri(i,10241,h(l.minFilter)),l.minFilter!==ut&&l.minFilter!==Ut&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),!0===e.has("EXT_texture_filter_anisotropic")){const c=e.get("EXT_texture_filter_anisotropic");if(l.type===Xt&&!1===e.has("OES_texture_float_linear"))return;if(!1===a&&l.type===At&&!1===e.has("OES_texture_half_float_linear"))return;(l.anisotropy>1||n.get(l).__currentAnisotropy)&&(t.texParameterf(i,c.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(l.anisotropy,s.getMaxAnisotropy())),n.get(l).__currentAnisotropy=l.anisotropy)}}function X(e,i){void 0===e.__webglInit&&(e.__webglInit=!0,i.addEventListener("dispose",m),e.__webglTexture=t.createTexture(),c.memory.textures++)}function A(e,n,s){let c=3553;n.isDataTexture2DArray&&(c=35866),n.isDataTexture3D&&(c=32879),X(e,n),i.activeTexture(33984+s),i.bindTexture(c,e.__webglTexture),t.pixelStorei(37440,n.flipY),t.pixelStorei(37441,n.premultiplyAlpha),t.pixelStorei(3317,n.unpackAlignment),t.pixelStorei(37443,0);const g=function(t){return!a&&(t.wrapS!==rt||t.wrapT!==rt||t.minFilter!==ut&&t.minFilter!==Ut)}(n)&&!1===C(n.image),I=F(n.image,g,!1,d),o=C(I)||a,r=l.convert(n.format);let b,u=l.convert(n.type),B=Q(n.internalFormat,r,u);L(c,n,o);const h=n.mipmaps;if(n.isDepthTexture)B=6402,a?B=n.type===Xt?36012:n.type===Lt?33190:n.type===Nt?35056:33189:n.type===Xt&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),n.format===kt&&6402===B&&n.type!==Rt&&n.type!==Lt&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),n.type=Rt,u=l.convert(n.type)),n.format===zt&&6402===B&&(B=34041,n.type!==Nt&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),n.type=Nt,u=l.convert(n.type))),i.texImage2D(3553,0,B,I.width,I.height,0,r,u,null);else if(n.isDataTexture)if(h.length>0&&o){for(let t=0,e=h.length;t<e;t++)b=h[t],i.texImage2D(3553,t,B,b.width,b.height,0,r,u,b.data);n.generateMipmaps=!1,e.__maxMipLevel=h.length-1}else i.texImage2D(3553,0,B,I.width,I.height,0,r,u,I.data),e.__maxMipLevel=0;else if(n.isCompressedTexture){for(let t=0,e=h.length;t<e;t++)b=h[t],n.format!==Ht&&n.format!==Yt?null!==r?i.compressedTexImage2D(3553,t,B,b.width,b.height,0,b.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):i.texImage2D(3553,t,B,b.width,b.height,0,r,u,b.data);e.__maxMipLevel=h.length-1}else if(n.isDataTexture2DArray)i.texImage3D(35866,0,B,I.width,I.height,I.depth,0,r,u,I.data),e.__maxMipLevel=0;else if(n.isDataTexture3D)i.texImage3D(32879,0,B,I.width,I.height,I.depth,0,r,u,I.data),e.__maxMipLevel=0;else if(h.length>0&&o){for(let t=0,e=h.length;t<e;t++)b=h[t],i.texImage2D(3553,t,B,r,u,b);n.generateMipmaps=!1,e.__maxMipLevel=h.length-1}else i.texImage2D(3553,0,B,r,u,I),e.__maxMipLevel=0;G(n,o)&&U(c,n,I.width,I.height),e.__version=n.version,n.onUpdate&&n.onUpdate(n)}function W(e,s,c,a){const g=s.texture,I=l.convert(g.format),d=l.convert(g.type),o=Q(g.internalFormat,I,d);32879===a||35866===a?i.texImage3D(a,0,o,s.width,s.height,s.depth,0,I,d,null):i.texImage2D(a,0,o,s.width,s.height,0,I,d,null),t.bindFramebuffer(36160,e),t.framebufferTexture2D(36160,c,a,n.get(g).__webglTexture,0),t.bindFramebuffer(36160,null)}function S(e,i,n){if(t.bindRenderbuffer(36161,e),i.depthBuffer&&!i.stencilBuffer){let s=33189;if(n){const e=i.depthTexture;e&&e.isDepthTexture&&(e.type===Xt?s=36012:e.type===Lt&&(s=33190));const n=E(i);t.renderbufferStorageMultisample(36161,n,s,i.width,i.height)}else t.renderbufferStorage(36161,s,i.width,i.height);t.framebufferRenderbuffer(36160,36096,36161,e)}else if(i.depthBuffer&&i.stencilBuffer){if(n){const e=E(i);t.renderbufferStorageMultisample(36161,e,35056,i.width,i.height)}else t.renderbufferStorage(36161,34041,i.width,i.height);t.framebufferRenderbuffer(36160,33306,36161,e)}else{const e=i.texture,s=l.convert(e.format),c=l.convert(e.type),a=Q(e.internalFormat,s,c);if(n){const e=E(i);t.renderbufferStorageMultisample(36161,e,a,i.width,i.height)}else t.renderbufferStorage(36161,a,i.width,i.height)}t.bindRenderbuffer(36161,null)}function E(t){return a&&t.isWebGLMultisampleRenderTarget?Math.min(o,t.samples):0}let N=!1,v=!1;this.allocateTextureUnit=function(){const t=p;return t>=g&&console.warn("THREE.WebGLTextures: Trying to use "+t+" texture units while this GPU supports only "+g),p+=1,t},this.resetTextureUnits=function(){p=0},this.setTexture2D=V,this.setTexture2DArray=function(t,e){const s=n.get(t);t.version>0&&s.__version!==t.version?A(s,t,e):(i.activeTexture(33984+e),i.bindTexture(35866,s.__webglTexture))},this.setTexture3D=function(t,e){const s=n.get(t);t.version>0&&s.__version!==t.version?A(s,t,e):(i.activeTexture(33984+e),i.bindTexture(32879,s.__webglTexture))},this.setTextureCube=Z,this.setupRenderTarget=function(e){const s=e.texture,g=n.get(e),I=n.get(s);e.addEventListener("dispose",x),I.__webglTexture=t.createTexture(),c.memory.textures++;const d=!0===e.isWebGLCubeRenderTarget,o=!0===e.isWebGLMultisampleRenderTarget,r=s.isDataTexture3D||s.isDataTexture2DArray,b=C(e)||a;if(!a||s.format!==Yt||s.type!==Xt&&s.type!==At||(s.format=Ht,console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")),d){g.__webglFramebuffer=[];for(let e=0;e<6;e++)g.__webglFramebuffer[e]=t.createFramebuffer()}else if(g.__webglFramebuffer=t.createFramebuffer(),o)if(a){g.__webglMultisampledFramebuffer=t.createFramebuffer(),g.__webglColorRenderbuffer=t.createRenderbuffer(),t.bindRenderbuffer(36161,g.__webglColorRenderbuffer);const i=l.convert(s.format),n=l.convert(s.type),c=Q(s.internalFormat,i,n),a=E(e);t.renderbufferStorageMultisample(36161,a,c,e.width,e.height),t.bindFramebuffer(36160,g.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(36160,36064,36161,g.__webglColorRenderbuffer),t.bindRenderbuffer(36161,null),e.depthBuffer&&(g.__webglDepthRenderbuffer=t.createRenderbuffer(),S(g.__webglDepthRenderbuffer,e,!0)),t.bindFramebuffer(36160,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");if(d){i.bindTexture(34067,I.__webglTexture),L(34067,s,b);for(let t=0;t<6;t++)W(g.__webglFramebuffer[t],e,36064,34069+t);G(s,b)&&U(34067,s,e.width,e.height),i.bindTexture(34067,null)}else{let t=3553;r&&(a?t=s.isDataTexture3D?32879:35866:console.warn("THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.")),i.bindTexture(t,I.__webglTexture),L(t,s,b),W(g.__webglFramebuffer,e,36064,t),G(s,b)&&U(3553,s,e.width,e.height),i.bindTexture(3553,null)}e.depthBuffer&&function(e){const i=n.get(e),s=!0===e.isWebGLCubeRenderTarget;if(e.depthTexture){if(s)throw new Error("target.depthTexture not supported in Cube render targets");!function(e,i){if(i&&i.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(36160,e),!i.depthTexture||!i.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");n.get(i.depthTexture).__webglTexture&&i.depthTexture.image.width===i.width&&i.depthTexture.image.height===i.height||(i.depthTexture.image.width=i.width,i.depthTexture.image.height=i.height,i.depthTexture.needsUpdate=!0),V(i.depthTexture,0);const s=n.get(i.depthTexture).__webglTexture;if(i.depthTexture.format===kt)t.framebufferTexture2D(36160,36096,3553,s,0);else{if(i.depthTexture.format!==zt)throw new Error("Unknown depthTexture format");t.framebufferTexture2D(36160,33306,3553,s,0)}}(i.__webglFramebuffer,e)}else if(s){i.__webglDepthbuffer=[];for(let n=0;n<6;n++)t.bindFramebuffer(36160,i.__webglFramebuffer[n]),i.__webglDepthbuffer[n]=t.createRenderbuffer(),S(i.__webglDepthbuffer[n],e,!1)}else t.bindFramebuffer(36160,i.__webglFramebuffer),i.__webglDepthbuffer=t.createRenderbuffer(),S(i.__webglDepthbuffer,e,!1);t.bindFramebuffer(36160,null)}(e)},this.updateRenderTargetMipmap=function(t){const e=t.texture;if(G(e,C(t)||a)){const s=t.isWebGLCubeRenderTarget?34067:3553,l=n.get(e).__webglTexture;i.bindTexture(s,l),U(s,e,t.width,t.height),i.bindTexture(s,null)}},this.updateMultisampleRenderTarget=function(e){if(e.isWebGLMultisampleRenderTarget)if(a){const i=n.get(e);t.bindFramebuffer(36008,i.__webglMultisampledFramebuffer),t.bindFramebuffer(36009,i.__webglFramebuffer);const s=e.width,l=e.height;let c=16384;e.depthBuffer&&(c|=256),e.stencilBuffer&&(c|=1024),t.blitFramebuffer(0,0,s,l,0,0,s,l,c,9728),t.bindFramebuffer(36160,i.__webglMultisampledFramebuffer)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")},this.safeSetTexture2D=function(t,e){t&&t.isWebGLRenderTarget&&(!1===N&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),N=!0),t=t.texture),V(t,e)},this.safeSetTextureCube=function(t,e){t&&t.isWebGLCubeRenderTarget&&(!1===v&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),v=!0),t=t.texture),Z(t,e)}}function Za(t,e,i){const n=i.isWebGL2;return{convert:function(t){let i;if(t===pt)return 5121;if(t===Wt)return 32819;if(t===St)return 32820;if(t===Et)return 33635;if(t===Vt)return 5120;if(t===Zt)return 5122;if(t===Rt)return 5123;if(t===yt)return 5124;if(t===Lt)return 5125;if(t===Xt)return 5126;if(t===At)return n?5131:(i=e.get("OES_texture_half_float"),null!==i?i.HALF_FLOAT_OES:null);if(t===vt)return 6406;if(t===Yt)return 6407;if(t===Ht)return 6408;if(t===Jt)return 6409;if(t===Mt)return 6410;if(t===kt)return 6402;if(t===zt)return 34041;if(t===wt)return 6403;if(t===Tt)return 36244;if(t===Dt)return 33319;if(t===Kt)return 33320;if(t===jt)return 36248;if(t===Pt)return 36249;if(t===Ot||t===_t||t===qt||t===$t){if(i=e.get("WEBGL_compressed_texture_s3tc"),null===i)return null;if(t===Ot)return i.COMPRESSED_RGB_S3TC_DXT1_EXT;if(t===_t)return i.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(t===qt)return i.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(t===$t)return i.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(t===te||t===ee||t===ie||t===ne){if(i=e.get("WEBGL_compressed_texture_pvrtc"),null===i)return null;if(t===te)return i.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(t===ee)return i.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(t===ie)return i.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(t===ne)return i.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(t===se)return i=e.get("WEBGL_compressed_texture_etc1"),null!==i?i.COMPRESSED_RGB_ETC1_WEBGL:null;if((t===le||t===ce)&&(i=e.get("WEBGL_compressed_texture_etc"),null!==i)){if(t===le)return i.COMPRESSED_RGB8_ETC2;if(t===ce)return i.COMPRESSED_RGBA8_ETC2_EAC}return t===ae||t===ge||t===Ie||t===de||t===oe||t===re||t===be||t===ue||t===Be||t===Fe||t===Ce||t===Ge||t===Ue||t===Qe||t===me||t===xe||t===pe||t===Ve||t===Ze||t===Re||t===ye||t===Le||t===Xe||t===Ae||t===We||t===Se||t===Ee||t===Ne?(i=e.get("WEBGL_compressed_texture_astc"),null!==i?t:null):t===he?(i=e.get("EXT_texture_compression_bptc"),null!==i?t:null):t===Nt?n?34042:(i=e.get("WEBGL_depth_texture"),null!==i?i.UNSIGNED_INT_24_8_WEBGL:null):void 0}}}function Ra(t=[]){Cl.call(this),this.cameras=t}ma.prototype.isMeshDistanceMaterial=!0,Ra.prototype=Object.assign(Object.create(Cl.prototype),{constructor:Ra,isArrayCamera:!0});class ya extends On{constructor(){super(),this.type="Group"}}function La(){this._targetRay=null,this._grip=null,this._hand=null}function Xa(t,e){const i=this;let n=null,s=1,l=null,c="local-floor",a=null;const g=[],I=new Map,d=new Cl;d.layers.enable(1),d.viewport=new Di;const o=new Cl;o.layers.enable(2),o.viewport=new Di;const r=[d,o],b=new Ra;b.layers.enable(1),b.layers.enable(2);let u=null,B=null;function F(t){const e=I.get(t.inputSource);e&&e.dispatchEvent({type:t.type,data:t.inputSource})}function C(){I.forEach((function(t,e){t.disconnect(e)})),I.clear(),u=null,B=null,t.setFramebuffer(null),t.setRenderTarget(t.getRenderTarget()),x.stop(),i.isPresenting=!1,i.dispatchEvent({type:"sessionend"})}function G(t){const e=n.inputSources;for(let t=0;t<g.length;t++)I.set(e[t],g[t]);for(let e=0;e<t.removed.length;e++){const i=t.removed[e],n=I.get(i);n&&(n.dispatchEvent({type:"disconnected",data:i}),I.delete(i))}for(let e=0;e<t.added.length;e++){const i=t.added[e],n=I.get(i);n&&n.dispatchEvent({type:"connected",data:i})}}this.enabled=!1,this.isPresenting=!1,this.getController=function(t){let e=g[t];return void 0===e&&(e=new La,g[t]=e),e.getTargetRaySpace()},this.getControllerGrip=function(t){let e=g[t];return void 0===e&&(e=new La,g[t]=e),e.getGripSpace()},this.getHand=function(t){let e=g[t];return void 0===e&&(e=new La,g[t]=e),e.getHandSpace()},this.setFramebufferScaleFactor=function(t){s=t,!0===i.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(t){c=t,!0===i.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return l},this.getSession=function(){return n},this.setSession=async function(t){if(n=t,null!==n){n.addEventListener("select",F),n.addEventListener("selectstart",F),n.addEventListener("selectend",F),n.addEventListener("squeeze",F),n.addEventListener("squeezestart",F),n.addEventListener("squeezeend",F),n.addEventListener("end",C),n.addEventListener("inputsourceschange",G);const t=e.getContextAttributes();!0!==t.xrCompatible&&await e.makeXRCompatible();const a={antialias:t.antialias,alpha:t.alpha,depth:t.depth,stencil:t.stencil,framebufferScaleFactor:s},g=new XRWebGLLayer(n,e,a);n.updateRenderState({baseLayer:g}),l=await n.requestReferenceSpace(c),x.setContext(n),x.start(),i.isPresenting=!0,i.dispatchEvent({type:"sessionstart"})}};const U=new Oi,Q=new Oi;function h(t,e){null===e?t.matrixWorld.copy(t.matrix):t.matrixWorld.multiplyMatrices(e.matrixWorld,t.matrix),t.matrixWorldInverse.copy(t.matrixWorld).invert()}this.getCamera=function(t){b.near=o.near=d.near=t.near,b.far=o.far=d.far=t.far,u===b.near&&B===b.far||(n.updateRenderState({depthNear:b.near,depthFar:b.far}),u=b.near,B=b.far);const e=t.parent,i=b.cameras;h(b,e);for(let t=0;t<i.length;t++)h(i[t],e);t.matrixWorld.copy(b.matrixWorld),t.matrix.copy(b.matrix),t.matrix.decompose(t.position,t.quaternion,t.scale);const s=t.children;for(let t=0,e=s.length;t<e;t++)s[t].updateMatrixWorld(!0);return 2===i.length?function(t,e,i){U.setFromMatrixPosition(e.matrixWorld),Q.setFromMatrixPosition(i.matrixWorld);const n=U.distanceTo(Q),s=e.projectionMatrix.elements,l=i.projectionMatrix.elements,c=s[14]/(s[10]-1),a=s[14]/(s[10]+1),g=(s[9]+1)/s[5],I=(s[9]-1)/s[5],d=(s[8]-1)/s[0],o=(l[8]+1)/l[0],r=c*d,b=c*o,u=n/(-d+o),B=u*-d;e.matrixWorld.decompose(t.position,t.quaternion,t.scale),t.translateX(B),t.translateZ(u),t.matrixWorld.compose(t.position,t.quaternion,t.scale),t.matrixWorldInverse.copy(t.matrixWorld).invert();const F=c+u,C=a+u,G=r-B,h=b+(n-B),m=g*a/C*F,x=I*a/C*F;t.projectionMatrix.makePerspective(G,h,m,x,F,C)}(b,d,o):b.projectionMatrix.copy(d.projectionMatrix),b};let m=null;const x=new Zl;x.setAnimationLoop((function(e,i){if(a=i.getViewerPose(l),null!==a){const e=a.views,i=n.renderState.baseLayer;t.setFramebuffer(i.framebuffer);let s=!1;e.length!==b.cameras.length&&(b.cameras.length=0,s=!0);for(let t=0;t<e.length;t++){const n=e[t],l=i.getViewport(n),c=r[t];c.matrix.fromArray(n.transform.matrix),c.projectionMatrix.fromArray(n.projectionMatrix),c.viewport.set(l.x,l.y,l.width,l.height),0===t&&b.matrix.copy(c.matrix),!0===s&&b.cameras.push(c)}}const s=n.inputSources;for(let t=0;t<g.length;t++){const e=g[t],n=s[t];e.update(n,i,l)}m&&m(e,i)})),this.setAnimationLoop=function(t){m=t},this.dispose=function(){}}function Aa(t){function e(e,i){e.opacity.value=i.opacity,i.color&&e.diffuse.value.copy(i.color),i.emissive&&e.emissive.value.copy(i.emissive).multiplyScalar(i.emissiveIntensity),i.map&&(e.map.value=i.map),i.alphaMap&&(e.alphaMap.value=i.alphaMap),i.specularMap&&(e.specularMap.value=i.specularMap);const n=t.get(i).envMap;if(n){e.envMap.value=n,e.flipEnvMap.value=n.isCubeTexture&&n._needsFlipEnvMap?-1:1,e.reflectivity.value=i.reflectivity,e.refractionRatio.value=i.refractionRatio;const s=t.get(n).__maxMipLevel;void 0!==s&&(e.maxMipLevel.value=s)}let s,l;i.lightMap&&(e.lightMap.value=i.lightMap,e.lightMapIntensity.value=i.lightMapIntensity),i.aoMap&&(e.aoMap.value=i.aoMap,e.aoMapIntensity.value=i.aoMapIntensity),i.map?s=i.map:i.specularMap?s=i.specularMap:i.displacementMap?s=i.displacementMap:i.normalMap?s=i.normalMap:i.bumpMap?s=i.bumpMap:i.roughnessMap?s=i.roughnessMap:i.metalnessMap?s=i.metalnessMap:i.alphaMap?s=i.alphaMap:i.emissiveMap?s=i.emissiveMap:i.clearcoatMap?s=i.clearcoatMap:i.clearcoatNormalMap?s=i.clearcoatNormalMap:i.clearcoatRoughnessMap&&(s=i.clearcoatRoughnessMap),void 0!==s&&(s.isWebGLRenderTarget&&(s=s.texture),!0===s.matrixAutoUpdate&&s.updateMatrix(),e.uvTransform.value.copy(s.matrix)),i.aoMap?l=i.aoMap:i.lightMap&&(l=i.lightMap),void 0!==l&&(l.isWebGLRenderTarget&&(l=l.texture),!0===l.matrixAutoUpdate&&l.updateMatrix(),e.uv2Transform.value.copy(l.matrix))}function i(e,i){e.roughness.value=i.roughness,e.metalness.value=i.metalness,i.roughnessMap&&(e.roughnessMap.value=i.roughnessMap),i.metalnessMap&&(e.metalnessMap.value=i.metalnessMap),i.emissiveMap&&(e.emissiveMap.value=i.emissiveMap),i.bumpMap&&(e.bumpMap.value=i.bumpMap,e.bumpScale.value=i.bumpScale,i.side===B&&(e.bumpScale.value*=-1)),i.normalMap&&(e.normalMap.value=i.normalMap,e.normalScale.value.copy(i.normalScale),i.side===B&&e.normalScale.value.negate()),i.displacementMap&&(e.displacementMap.value=i.displacementMap,e.displacementScale.value=i.displacementScale,e.displacementBias.value=i.displacementBias),t.get(i).envMap&&(e.envMapIntensity.value=i.envMapIntensity)}return{refreshFogUniforms:function(t,e){t.fogColor.value.copy(e.color),e.isFog?(t.fogNear.value=e.near,t.fogFar.value=e.far):e.isFogExp2&&(t.fogDensity.value=e.density)},refreshMaterialUniforms:function(t,n,s,l){n.isMeshBasicMaterial?e(t,n):n.isMeshLambertMaterial?(e(t,n),function(t,e){e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap)}(t,n)):n.isMeshToonMaterial?(e(t,n),function(t,e){e.gradientMap&&(t.gradientMap.value=e.gradientMap),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===B&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===B&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,n)):n.isMeshPhongMaterial?(e(t,n),function(t,e){t.specular.value.copy(e.specular),t.shininess.value=Math.max(e.shininess,1e-4),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===B&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===B&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,n)):n.isMeshStandardMaterial?(e(t,n),n.isMeshPhysicalMaterial?function(t,e){i(t,e),t.reflectivity.value=e.reflectivity,t.clearcoat.value=e.clearcoat,t.clearcoatRoughness.value=e.clearcoatRoughness,e.sheen&&t.sheen.value.copy(e.sheen),e.clearcoatMap&&(t.clearcoatMap.value=e.clearcoatMap),e.clearcoatRoughnessMap&&(t.clearcoatRoughnessMap.value=e.clearcoatRoughnessMap),e.clearcoatNormalMap&&(t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale),t.clearcoatNormalMap.value=e.clearcoatNormalMap,e.side===B&&t.clearcoatNormalScale.value.negate()),t.transmission.value=e.transmission,e.transmissionMap&&(t.transmissionMap.value=e.transmissionMap)}(t,n):i(t,n)):n.isMeshMatcapMaterial?(e(t,n),function(t,e){e.matcap&&(t.matcap.value=e.matcap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===B&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===B&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,n)):n.isMeshDepthMaterial?(e(t,n),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,n)):n.isMeshDistanceMaterial?(e(t,n),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias),t.referencePosition.value.copy(e.referencePosition),t.nearDistance.value=e.nearDistance,t.farDistance.value=e.farDistance}(t,n)):n.isMeshNormalMaterial?(e(t,n),function(t,e){e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===B&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===B&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,n)):n.isLineBasicMaterial?(function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity}(t,n),n.isLineDashedMaterial&&function(t,e){t.dashSize.value=e.dashSize,t.totalSize.value=e.dashSize+e.gapSize,t.scale.value=e.scale}(t,n)):n.isPointsMaterial?function(t,e,i,n){let s;t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.size.value=e.size*i,t.scale.value=.5*n,e.map&&(t.map.value=e.map),e.alphaMap&&(t.alphaMap.value=e.alphaMap),e.map?s=e.map:e.alphaMap&&(s=e.alphaMap),void 0!==s&&(!0===s.matrixAutoUpdate&&s.updateMatrix(),t.uvTransform.value.copy(s.matrix))}(t,n,s,l):n.isSpriteMaterial?function(t,e){let i;t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.rotation.value=e.rotation,e.map&&(t.map.value=e.map),e.alphaMap&&(t.alphaMap.value=e.alphaMap),e.map?i=e.map:e.alphaMap&&(i=e.alphaMap),void 0!==i&&(!0===i.matrixAutoUpdate&&i.updateMatrix(),t.uvTransform.value.copy(i.matrix))}(t,n):n.isShadowMaterial?(t.color.value.copy(n.color),t.opacity.value=n.opacity):n.isShaderMaterial&&(n.uniformsNeedUpdate=!1)}}}function Wa(t){const e=void 0!==(t=t||{}).canvas?t.canvas:function(){const t=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");return t.style.display="block",t}(),i=void 0!==t.context?t.context:null,n=void 0!==t.alpha&&t.alpha,s=void 0===t.depth||t.depth,l=void 0===t.stencil||t.stencil,c=void 0!==t.antialias&&t.antialias,a=void 0===t.premultipliedAlpha||t.premultipliedAlpha,g=void 0!==t.preserveDrawingBuffer&&t.preserveDrawingBuffer,I=void 0!==t.powerPreference?t.powerPreference:"default",d=void 0!==t.failIfMajorPerformanceCaveat&&t.failIfMajorPerformanceCaveat;let o=null,r=null;const b=[],u=[];this.domElement=e,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.outputEncoding=Oe,this.physicallyCorrectLights=!1,this.toneMapping=q,this.toneMappingExposure=1,this.maxMorphTargets=8,this.maxMorphNormals=4;const B=this;let F=!1,C=null,G=0,U=0,Q=null,h=null,m=-1,x=null;const p=new Di,V=new Di;let Z=null,R=e.width,y=e.height,L=1,X=null,A=null;const W=new Di(0,0,R,y),S=new Di(0,0,R,y);let E=!1;const N=new Vl;let v=!1,Y=!1;const H=new Vn,J=new Oi,M={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function f(){return null===Q?L:1}let k,z,w,T,D,K,j,P,O,_,$,tt,et,it,nt,st,lt,ct,at,gt,It,dt=i;function ot(t,i){for(let n=0;n<t.length;n++){const s=t[n],l=e.getContext(s,i);if(null!==l)return l}return null}try{const t={alpha:n,depth:s,stencil:l,antialias:c,premultipliedAlpha:a,preserveDrawingBuffer:g,powerPreference:I,failIfMajorPerformanceCaveat:d};if(e.addEventListener("webglcontextlost",Bt,!1),e.addEventListener("webglcontextrestored",Ft,!1),null===dt){const e=["webgl2","webgl","experimental-webgl"];if(!0===B.isWebGL1Renderer&&e.shift(),dt=ot(e,t),null===dt)throw ot(e)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}void 0===dt.getShaderPrecisionFormat&&(dt.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(t){throw console.error("THREE.WebGLRenderer: "+t.message),t}function rt(){k=new Hl(dt),z=new Nl(dt,k,t),k.init(z),gt=new Za(dt,k,z),w=new pa(dt,k,z),w.scissor(V.copy(S).multiplyScalar(L).floor()),w.viewport(p.copy(W).multiplyScalar(L).floor()),T=new fl(dt),D=new da,K=new Va(dt,k,w,D,z,gt,T),j=new Yl(B),P=new Rl(dt,z),It=new Sl(dt,k,P,z),O=new Jl(dt,P,T,It),_=new Tl(dt,O,P,T),lt=new wl(dt),nt=new vl(D),$=new Ia(B,j,k,z,It,nt),tt=new Aa(D),et=new ua(D),it=new Qa(k,z),st=new Wl(B,j,w,_,a),ct=new El(dt,k,T,z),at=new Ml(dt,k,T,z),T.programs=$.programs,B.capabilities=z,B.extensions=k,B.properties=D,B.renderLists=et,B.state=w,B.info=T}rt();const bt=new Xa(B,dt);this.xr=bt;const ut=new xa(B,_,z.maxTextureSize);function Bt(t){t.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),F=!0}function Ft(){console.log("THREE.WebGLRenderer: Context Restored."),F=!1,rt()}function Ct(t){const e=t.target;e.removeEventListener("dispose",Ct),function(t){Gt(t),D.remove(t)}(e)}function Gt(t){const e=D.get(t).program;void 0!==e&&$.releaseProgram(e)}this.shadowMap=ut,this.getContext=function(){return dt},this.getContextAttributes=function(){return dt.getContextAttributes()},this.forceContextLoss=function(){const t=k.get("WEBGL_lose_context");t&&t.loseContext()},this.forceContextRestore=function(){const t=k.get("WEBGL_lose_context");t&&t.restoreContext()},this.getPixelRatio=function(){return L},this.setPixelRatio=function(t){void 0!==t&&(L=t,this.setSize(R,y,!1))},this.getSize=function(t){return void 0===t&&(console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"),t=new Ji),t.set(R,y)},this.setSize=function(t,i,n){bt.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(R=t,y=i,e.width=Math.floor(t*L),e.height=Math.floor(i*L),!1!==n&&(e.style.width=t+"px",e.style.height=i+"px"),this.setViewport(0,0,t,i))},this.getDrawingBufferSize=function(t){return void 0===t&&(console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"),t=new Ji),t.set(R*L,y*L).floor()},this.setDrawingBufferSize=function(t,i,n){R=t,y=i,L=n,e.width=Math.floor(t*n),e.height=Math.floor(i*n),this.setViewport(0,0,t,i)},this.getCurrentViewport=function(t){return void 0===t&&(console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"),t=new Di),t.copy(p)},this.getViewport=function(t){return t.copy(W)},this.setViewport=function(t,e,i,n){t.isVector4?W.set(t.x,t.y,t.z,t.w):W.set(t,e,i,n),w.viewport(p.copy(W).multiplyScalar(L).floor())},this.getScissor=function(t){return t.copy(S)},this.setScissor=function(t,e,i,n){t.isVector4?S.set(t.x,t.y,t.z,t.w):S.set(t,e,i,n),w.scissor(V.copy(S).multiplyScalar(L).floor())},this.getScissorTest=function(){return E},this.setScissorTest=function(t){w.setScissorTest(E=t)},this.setOpaqueSort=function(t){X=t},this.setTransparentSort=function(t){A=t},this.getClearColor=function(t){return void 0===t&&(console.warn("WebGLRenderer: .getClearColor() now requires a Color as an argument"),t=new Qs),t.copy(st.getClearColor())},this.setClearColor=function(){st.setClearColor.apply(st,arguments)},this.getClearAlpha=function(){return st.getClearAlpha()},this.setClearAlpha=function(){st.setClearAlpha.apply(st,arguments)},this.clear=function(t,e,i){let n=0;(void 0===t||t)&&(n|=16384),(void 0===e||e)&&(n|=256),(void 0===i||i)&&(n|=1024),dt.clear(n)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",Bt,!1),e.removeEventListener("webglcontextrestored",Ft,!1),et.dispose(),it.dispose(),D.dispose(),j.dispose(),_.dispose(),It.dispose(),bt.dispose(),Qt.stop()},this.renderBufferImmediate=function(t,e){It.initAttributes();const i=D.get(t);t.hasPositions&&!i.position&&(i.position=dt.createBuffer()),t.hasNormals&&!i.normal&&(i.normal=dt.createBuffer()),t.hasUvs&&!i.uv&&(i.uv=dt.createBuffer()),t.hasColors&&!i.color&&(i.color=dt.createBuffer());const n=e.getAttributes();t.hasPositions&&(dt.bindBuffer(34962,i.position),dt.bufferData(34962,t.positionArray,35048),It.enableAttribute(n.position),dt.vertexAttribPointer(n.position,3,5126,!1,0,0)),t.hasNormals&&(dt.bindBuffer(34962,i.normal),dt.bufferData(34962,t.normalArray,35048),It.enableAttribute(n.normal),dt.vertexAttribPointer(n.normal,3,5126,!1,0,0)),t.hasUvs&&(dt.bindBuffer(34962,i.uv),dt.bufferData(34962,t.uvArray,35048),It.enableAttribute(n.uv),dt.vertexAttribPointer(n.uv,2,5126,!1,0,0)),t.hasColors&&(dt.bindBuffer(34962,i.color),dt.bufferData(34962,t.colorArray,35048),It.enableAttribute(n.color),dt.vertexAttribPointer(n.color,3,5126,!1,0,0)),It.disableUnusedAttributes(),dt.drawArrays(4,0,t.count),t.count=0},this.renderBufferDirect=function(t,e,i,n,s,l){null===e&&(e=M);const c=s.isMesh&&s.matrixWorld.determinant()<0,a=Zt(t,e,n,s);w.setMaterial(n,c);let g=i.index;const I=i.attributes.position;if(null===g){if(void 0===I||0===I.count)return}else if(0===g.count)return;let d,o=1;!0===n.wireframe&&(g=O.getWireframeAttribute(i),o=2),(n.morphTargets||n.morphNormals)&&lt.update(s,i,n,a),It.setup(s,n,a,i,g);let r=ct;null!==g&&(d=P.get(g),r=at,r.setIndex(d));const b=null!==g?g.count:I.count,u=i.drawRange.start*o,B=i.drawRange.count*o,F=null!==l?l.start*o:0,C=null!==l?l.count*o:1/0,G=Math.max(u,F),U=Math.min(b,u+B,F+C)-1,Q=Math.max(0,U-G+1);if(0!==Q){if(s.isMesh)!0===n.wireframe?(w.setLineWidth(n.wireframeLinewidth*f()),r.setMode(1)):r.setMode(4);else if(s.isLine){let t=n.linewidth;void 0===t&&(t=1),w.setLineWidth(t*f()),s.isLineSegments?r.setMode(1):s.isLineLoop?r.setMode(2):r.setMode(3)}else s.isPoints?r.setMode(0):s.isSprite&&r.setMode(4);if(s.isInstancedMesh)r.renderInstances(G,Q,s.count);else if(i.isInstancedBufferGeometry){const t=Math.min(i.instanceCount,i._maxInstanceCount);r.renderInstances(G,Q,t)}else r.render(G,Q)}},this.compile=function(t,e){r=it.get(t),r.init(),t.traverseVisible((function(t){t.isLight&&t.layers.test(e.layers)&&(r.pushLight(t),t.castShadow&&r.pushShadow(t))})),r.setupLights();const i=new WeakMap;t.traverse((function(e){const n=e.material;if(n)if(Array.isArray(n))for(let s=0;s<n.length;s++){const l=n[s];!1===i.has(l)&&(Vt(l,t,e),i.set(l))}else!1===i.has(n)&&(Vt(n,t,e),i.set(n))}))};let Ut=null;const Qt=new Zl;function ht(t,e,i,n){if(!1===t.visible)return;if(t.layers.test(e.layers))if(t.isGroup)i=t.renderOrder;else if(t.isLOD)!0===t.autoUpdate&&t.update(e);else if(t.isLight)r.pushLight(t),t.castShadow&&r.pushShadow(t);else if(t.isSprite){if(!t.frustumCulled||N.intersectsSprite(t)){n&&J.setFromMatrixPosition(t.matrixWorld).applyMatrix4(H);const e=_.update(t),s=t.material;s.visible&&o.push(t,e,s,i,J.z,null)}}else if(t.isImmediateRenderObject)n&&J.setFromMatrixPosition(t.matrixWorld).applyMatrix4(H),o.push(t,null,t.material,i,J.z,null);else if((t.isMesh||t.isLine||t.isPoints)&&(t.isSkinnedMesh&&t.skeleton.frame!==T.render.frame&&(t.skeleton.update(),t.skeleton.frame=T.render.frame),!t.frustumCulled||N.intersectsObject(t))){n&&J.setFromMatrixPosition(t.matrixWorld).applyMatrix4(H);const e=_.update(t),s=t.material;if(Array.isArray(s)){const n=e.groups;for(let l=0,c=n.length;l<c;l++){const c=n[l],a=s[c.materialIndex];a&&a.visible&&o.push(t,e,a,i,J.z,c)}}else s.visible&&o.push(t,e,s,i,J.z,null)}const s=t.children;for(let t=0,l=s.length;t<l;t++)ht(s[t],e,i,n)}function mt(t,e,i){const n=!0===e.isScene?e.overrideMaterial:null;for(let s=0,l=t.length;s<l;s++){const l=t[s],c=l.object,a=l.geometry,g=null===n?l.material:n,I=l.group;if(i.isArrayCamera){const t=i.cameras;for(let i=0,n=t.length;i<n;i++){const n=t[i];c.layers.test(n.layers)&&(w.viewport(p.copy(n.viewport)),r.setupLightsView(n),xt(c,e,n,a,g,I))}}else xt(c,e,i,a,g,I)}}function xt(t,e,i,n,s,l){if(t.onBeforeRender(B,e,i,n,s,l),t.modelViewMatrix.multiplyMatrices(i.matrixWorldInverse,t.matrixWorld),t.normalMatrix.getNormalMatrix(t.modelViewMatrix),t.isImmediateRenderObject){const n=Zt(i,e,s,t);w.setMaterial(s),It.reset(),function(t,e){t.render((function(t){B.renderBufferImmediate(t,e)}))}(t,n)}else B.renderBufferDirect(i,e,n,s,t,l);t.onAfterRender(B,e,i,n,s,l)}function Vt(t,e,i){!0!==e.isScene&&(e=M);const n=D.get(t),s=r.state.lights,l=r.state.shadowsArray,c=s.state.version,a=$.getParameters(t,s.state,l,e,i),g=$.getProgramCacheKey(a);let I=n.program,d=!0;if(n.environment=t.isMeshStandardMaterial?e.environment:null,n.fog=e.fog,n.envMap=j.get(t.envMap||n.environment),void 0===I)t.addEventListener("dispose",Ct);else if(I.cacheKey!==g)Gt(t);else if(n.lightsStateVersion!==c)d=!1;else{if(void 0!==a.shaderID)return;d=!1}d&&(a.uniforms=$.getUniforms(t),t.onBeforeCompile(a,B),I=$.acquireProgram(a,g),n.program=I,n.uniforms=a.uniforms,n.outputEncoding=a.outputEncoding);const o=n.uniforms;(t.isShaderMaterial||t.isRawShaderMaterial)&&!0!==t.clipping||(n.numClippingPlanes=nt.numPlanes,n.numIntersection=nt.numIntersection,o.clippingPlanes=nt.uniform),n.needsLights=function(t){return t.isMeshLambertMaterial||t.isMeshToonMaterial||t.isMeshPhongMaterial||t.isMeshStandardMaterial||t.isShadowMaterial||t.isShaderMaterial&&!0===t.lights}(t),n.lightsStateVersion=c,n.needsLights&&(o.ambientLightColor.value=s.state.ambient,o.lightProbe.value=s.state.probe,o.directionalLights.value=s.state.directional,o.directionalLightShadows.value=s.state.directionalShadow,o.spotLights.value=s.state.spot,o.spotLightShadows.value=s.state.spotShadow,o.rectAreaLights.value=s.state.rectArea,o.ltc_1.value=s.state.rectAreaLTC1,o.ltc_2.value=s.state.rectAreaLTC2,o.pointLights.value=s.state.point,o.pointLightShadows.value=s.state.pointShadow,o.hemisphereLights.value=s.state.hemi,o.directionalShadowMap.value=s.state.directionalShadowMap,o.directionalShadowMatrix.value=s.state.directionalShadowMatrix,o.spotShadowMap.value=s.state.spotShadowMap,o.spotShadowMatrix.value=s.state.spotShadowMatrix,o.pointShadowMap.value=s.state.pointShadowMap,o.pointShadowMatrix.value=s.state.pointShadowMatrix);const b=n.program.getUniforms(),u=kc.seqWithValue(b.seq,o);n.uniformsList=u}function Zt(t,e,i,n){!0!==e.isScene&&(e=M),K.resetTextureUnits();const s=e.fog,l=i.isMeshStandardMaterial?e.environment:null,c=null===Q?B.outputEncoding:Q.texture.encoding,a=j.get(i.envMap||l),g=D.get(i),I=r.state.lights;if(!0===v&&(!0===Y||t!==x)){const e=t===x&&i.id===m;nt.setState(i,t,e)}i.version===g.__version?i.fog&&g.fog!==s||g.environment!==l||g.needsLights&&g.lightsStateVersion!==I.state.version?Vt(i,e,n):void 0===g.numClippingPlanes||g.numClippingPlanes===nt.numPlanes&&g.numIntersection===nt.numIntersection?(g.outputEncoding!==c||g.envMap!==a)&&Vt(i,e,n):Vt(i,e,n):(Vt(i,e,n),g.__version=i.version);let d=!1,o=!1,b=!1;const u=g.program,F=u.getUniforms(),C=g.uniforms;if(w.useProgram(u.program)&&(d=!0,o=!0,b=!0),i.id!==m&&(m=i.id,o=!0),d||x!==t){if(F.setValue(dt,"projectionMatrix",t.projectionMatrix),z.logarithmicDepthBuffer&&F.setValue(dt,"logDepthBufFC",2/(Math.log(t.far+1)/Math.LN2)),x!==t&&(x=t,o=!0,b=!0),i.isShaderMaterial||i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshStandardMaterial||i.envMap){const e=F.map.cameraPosition;void 0!==e&&e.setValue(dt,J.setFromMatrixPosition(t.matrixWorld))}(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial)&&F.setValue(dt,"isOrthographic",!0===t.isOrthographicCamera),(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial||i.isShadowMaterial||i.skinning)&&F.setValue(dt,"viewMatrix",t.matrixWorldInverse)}if(i.skinning){F.setOptional(dt,n,"bindMatrix"),F.setOptional(dt,n,"bindMatrixInverse");const t=n.skeleton;if(t){const e=t.bones;if(z.floatVertexTextures){if(null===t.boneTexture){let i=Math.sqrt(4*e.length);i=Hi.ceilPowerOfTwo(i),i=Math.max(i,4);const n=new Float32Array(i*i*4);n.set(t.boneMatrices);const s=new ml(n,i,i,Ht,Xt);t.boneMatrices=n,t.boneTexture=s,t.boneTextureSize=i}F.setValue(dt,"boneTexture",t.boneTexture,K),F.setValue(dt,"boneTextureSize",t.boneTextureSize)}else F.setOptional(dt,t,"boneMatrices")}}var G,U;return(o||g.receiveShadow!==n.receiveShadow)&&(g.receiveShadow=n.receiveShadow,F.setValue(dt,"receiveShadow",n.receiveShadow)),o&&(F.setValue(dt,"toneMappingExposure",B.toneMappingExposure),g.needsLights&&(U=b,(G=C).ambientLightColor.needsUpdate=U,G.lightProbe.needsUpdate=U,G.directionalLights.needsUpdate=U,G.directionalLightShadows.needsUpdate=U,G.pointLights.needsUpdate=U,G.pointLightShadows.needsUpdate=U,G.spotLights.needsUpdate=U,G.spotLightShadows.needsUpdate=U,G.rectAreaLights.needsUpdate=U,G.hemisphereLights.needsUpdate=U),s&&i.fog&&tt.refreshFogUniforms(C,s),tt.refreshMaterialUniforms(C,i,L,y),kc.upload(dt,g.uniformsList,C,K)),i.isShaderMaterial&&!0===i.uniformsNeedUpdate&&(kc.upload(dt,g.uniformsList,C,K),i.uniformsNeedUpdate=!1),i.isSpriteMaterial&&F.setValue(dt,"center",n.center),F.setValue(dt,"modelViewMatrix",n.modelViewMatrix),F.setValue(dt,"normalMatrix",n.normalMatrix),F.setValue(dt,"modelMatrix",n.matrixWorld),u}Qt.setAnimationLoop((function(t){bt.isPresenting||Ut&&Ut(t)})),"undefined"!=typeof window&&Qt.setContext(window),this.setAnimationLoop=function(t){Ut=t,bt.setAnimationLoop(t),null===t?Qt.stop():Qt.start()},this.render=function(t,e){let i,n;if(void 0!==arguments[2]&&(console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead."),i=arguments[2]),void 0!==arguments[3]&&(console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead."),n=arguments[3]),void 0!==e&&!0!==e.isCamera)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");if(!0===F)return;It.resetDefaultState(),m=-1,x=null,!0===t.autoUpdate&&t.updateMatrixWorld(),null===e.parent&&e.updateMatrixWorld(),!0===bt.enabled&&!0===bt.isPresenting&&(e=bt.getCamera(e)),!0===t.isScene&&t.onBeforeRender(B,t,e,i||Q),r=it.get(t,u.length),r.init(),u.push(r),H.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),N.setFromProjectionMatrix(H),Y=this.localClippingEnabled,v=nt.init(this.clippingPlanes,Y,e),o=et.get(t,b.length),o.init(),b.push(o),ht(t,e,0,B.sortObjects),o.finish(),!0===B.sortObjects&&o.sort(X,A),!0===v&&nt.beginShadows();const s=r.state.shadowsArray;ut.render(s,t,e),r.setupLights(),r.setupLightsView(e),!0===v&&nt.endShadows(),!0===this.info.autoReset&&this.info.reset(),void 0!==i&&this.setRenderTarget(i),st.render(o,t,e,n);const l=o.opaque,c=o.transparent;l.length>0&&mt(l,t,e),c.length>0&&mt(c,t,e),!0===t.isScene&&t.onAfterRender(B,t,e),null!==Q&&(K.updateRenderTargetMipmap(Q),K.updateMultisampleRenderTarget(Q)),w.buffers.depth.setTest(!0),w.buffers.depth.setMask(!0),w.buffers.color.setMask(!0),w.setPolygonOffset(!1),u.pop(),r=u.length>0?u[u.length-1]:null,b.pop(),o=b.length>0?b[b.length-1]:null},this.setFramebuffer=function(t){C!==t&&null===Q&&dt.bindFramebuffer(36160,t),C=t},this.getActiveCubeFace=function(){return G},this.getActiveMipmapLevel=function(){return U},this.getRenderTarget=function(){return Q},this.setRenderTarget=function(t,e=0,i=0){Q=t,G=e,U=i,t&&void 0===D.get(t).__webglFramebuffer&&K.setupRenderTarget(t);let n=C,s=!1,l=!1;if(t){const i=t.texture;(i.isDataTexture3D||i.isDataTexture2DArray)&&(l=!0);const c=D.get(t).__webglFramebuffer;t.isWebGLCubeRenderTarget?(n=c[e],s=!0):n=t.isWebGLMultisampleRenderTarget?D.get(t).__webglMultisampledFramebuffer:c,p.copy(t.viewport),V.copy(t.scissor),Z=t.scissorTest}else p.copy(W).multiplyScalar(L).floor(),V.copy(S).multiplyScalar(L).floor(),Z=E;if(h!==n&&(dt.bindFramebuffer(36160,n),h=n),w.viewport(p),w.scissor(V),w.setScissorTest(Z),s){const n=D.get(t.texture);dt.framebufferTexture2D(36160,36064,34069+e,n.__webglTexture,i)}else if(l){const n=D.get(t.texture),s=e||0;dt.framebufferTextureLayer(36160,36064,n.__webglTexture,i||0,s)}},this.readRenderTargetPixels=function(t,e,i,n,s,l,c){if(!t||!t.isWebGLRenderTarget)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let a=D.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget&&void 0!==c&&(a=a[c]),a){let c=!1;a!==h&&(dt.bindFramebuffer(36160,a),c=!0);try{const a=t.texture,g=a.format,I=a.type;if(g!==Ht&&gt.convert(g)!==dt.getParameter(35739))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");const d=I===At&&(k.has("EXT_color_buffer_half_float")||z.isWebGL2&&k.has("EXT_color_buffer_float"));if(!(I===pt||gt.convert(I)===dt.getParameter(35738)||I===Xt&&(z.isWebGL2||k.has("OES_texture_float")||k.has("WEBGL_color_buffer_float"))||d))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");36053===dt.checkFramebufferStatus(36160)?e>=0&&e<=t.width-n&&i>=0&&i<=t.height-s&&dt.readPixels(e,i,n,s,gt.convert(g),gt.convert(I),l):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{c&&dt.bindFramebuffer(36160,h)}}},this.copyFramebufferToTexture=function(t,e,i=0){const n=Math.pow(2,-i),s=Math.floor(e.image.width*n),l=Math.floor(e.image.height*n),c=gt.convert(e.format);K.setTexture2D(e,0),dt.copyTexImage2D(3553,i,c,t.x,t.y,s,l,0),w.unbindTexture()},this.copyTextureToTexture=function(t,e,i,n=0){const s=e.image.width,l=e.image.height,c=gt.convert(i.format),a=gt.convert(i.type);K.setTexture2D(i,0),dt.pixelStorei(37440,i.flipY),dt.pixelStorei(37441,i.premultiplyAlpha),dt.pixelStorei(3317,i.unpackAlignment),e.isDataTexture?dt.texSubImage2D(3553,n,t.x,t.y,s,l,c,a,e.image.data):e.isCompressedTexture?dt.compressedTexSubImage2D(3553,n,t.x,t.y,e.mipmaps[0].width,e.mipmaps[0].height,c,e.mipmaps[0].data):dt.texSubImage2D(3553,n,t.x,t.y,c,a,e.image),0===n&&i.generateMipmaps&&dt.generateMipmap(3553),w.unbindTexture()},this.copyTextureToTexture3D=function(t,e,i,n,s=0){if(B.isWebGL1Renderer)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");const{width:l,height:c,data:a}=i.image,g=gt.convert(n.format),I=gt.convert(n.type);let d;if(n.isDataTexture3D)K.setTexture3D(n,0),d=32879;else{if(!n.isDataTexture2DArray)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");K.setTexture2DArray(n,0),d=35866}dt.pixelStorei(37440,n.flipY),dt.pixelStorei(37441,n.premultiplyAlpha),dt.pixelStorei(3317,n.unpackAlignment);const o=dt.getParameter(3314),r=dt.getParameter(32878),b=dt.getParameter(3316),u=dt.getParameter(3315),F=dt.getParameter(32877);dt.pixelStorei(3314,l),dt.pixelStorei(32878,c),dt.pixelStorei(3316,t.min.x),dt.pixelStorei(3315,t.min.y),dt.pixelStorei(32877,t.min.z),dt.texSubImage3D(d,s,e.x,e.y,e.z,t.max.x-t.min.x+1,t.max.y-t.min.y+1,t.max.z-t.min.z+1,g,I,a),dt.pixelStorei(3314,o),dt.pixelStorei(32878,r),dt.pixelStorei(3316,b),dt.pixelStorei(3315,u),dt.pixelStorei(32877,F),0===s&&n.generateMipmaps&&dt.generateMipmap(d),w.unbindTexture()},this.initTexture=function(t){K.setTexture2D(t,0),w.unbindTexture()},this.resetState=function(){w.reset(),It.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}ya.prototype.isGroup=!0,Object.assign(La.prototype,{constructor:La,getHandSpace:function(){return null===this._hand&&(this._hand=new ya,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand},getTargetRaySpace:function(){return null===this._targetRay&&(this._targetRay=new ya,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1),this._targetRay},getGripSpace:function(){return null===this._grip&&(this._grip=new ya,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1),this._grip},dispatchEvent:function(t){return null!==this._targetRay&&this._targetRay.dispatchEvent(t),null!==this._grip&&this._grip.dispatchEvent(t),null!==this._hand&&this._hand.dispatchEvent(t),this},disconnect:function(t){return this.dispatchEvent({type:"disconnected",data:t}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this},update:function(t,e,i){let n=null,s=null,l=null;const c=this._targetRay,a=this._grip,g=this._hand;if(t&&"visible-blurred"!==e.session.visibilityState)if(g&&t.hand){l=!0;for(const n of t.hand.values()){const t=e.getJointPose(n,i);if(void 0===g.joints[n.jointName]){const t=new ya;t.matrixAutoUpdate=!1,t.visible=!1,g.joints[n.jointName]=t,g.add(t)}const s=g.joints[n.jointName];null!==t&&(s.matrix.fromArray(t.transform.matrix),s.matrix.decompose(s.position,s.rotation,s.scale),s.jointRadius=t.radius),s.visible=null!==t}const n=g.joints["index-finger-tip"],s=g.joints["thumb-tip"],c=n.position.distanceTo(s.position),a=.02,I=.005;g.inputState.pinching&&c>a+I?(g.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!g.inputState.pinching&&c<=a-I&&(g.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else null!==c&&(n=e.getPose(t.targetRaySpace,i),null!==n&&(c.matrix.fromArray(n.transform.matrix),c.matrix.decompose(c.position,c.rotation,c.scale))),null!==a&&t.gripSpace&&(s=e.getPose(t.gripSpace,i),null!==s&&(a.matrix.fromArray(s.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale)));return null!==c&&(c.visible=null!==n),null!==a&&(a.visible=null!==s),null!==g&&(g.visible=null!==l),this}}),Object.assign(Xa.prototype,Ni.prototype);class Sa extends Wa{}Sa.prototype.isWebGL1Renderer=!0;class Ea{constructor(t,e){this.name="",this.color=new Qs(t),this.density=void 0!==e?e:25e-5}clone(){return new Ea(this.color,this.density)}toJSON(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}Ea.prototype.isFogExp2=!0;class Na{constructor(t,e,i){this.name="",this.color=new Qs(t),this.near=void 0!==e?e:1,this.far=void 0!==i?i:1e3}clone(){return new Na(this.color,this.near,this.far)}toJSON(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}Na.prototype.isFog=!0;class va extends On{constructor(){super(),this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),null!==t.background&&(this.background=t.background.clone()),null!==t.environment&&(this.environment=t.environment.clone()),null!==t.fog&&(this.fog=t.fog.clone()),null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.autoUpdate=t.autoUpdate,this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return null!==this.background&&(e.object.background=this.background.toJSON(t)),null!==this.environment&&(e.object.environment=this.environment.toJSON(t)),null!==this.fog&&(e.object.fog=this.fog.toJSON()),e}}function Ya(t,e){this.array=t,this.stride=e,this.count=void 0!==t?t.length/e:0,this.usage=pi,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=Hi.generateUUID()}va.prototype.isScene=!0,Object.defineProperty(Ya.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),Object.assign(Ya.prototype,{isInterleavedBuffer:!0,onUploadCallback:function(){},setUsage:function(t){return this.usage=t,this},copy:function(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this},copyAt:function(t,e,i){t*=this.stride,i*=e.stride;for(let n=0,s=this.stride;n<s;n++)this.array[t+n]=e.array[i+n];return this},set:function(t,e=0){return this.array.set(t,e),this},clone:function(t){void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=Hi.generateUUID()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const e=new Ya(new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),this.stride);return e.setUsage(this.usage),e},onUpload:function(t){return this.onUploadCallback=t,this},toJSON:function(t){return void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=Hi.generateUUID()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}});const Ha=new Oi;function Ja(t,e,i,n){this.name="",this.data=t,this.itemSize=e,this.offset=i,this.normalized=!0===n}Object.defineProperties(Ja.prototype,{count:{get:function(){return this.data.count}},array:{get:function(){return this.data.array}},needsUpdate:{set:function(t){this.data.needsUpdate=t}}}),Object.assign(Ja.prototype,{isInterleavedBufferAttribute:!0,applyMatrix4:function(t){for(let e=0,i=this.data.count;e<i;e++)Ha.x=this.getX(e),Ha.y=this.getY(e),Ha.z=this.getZ(e),Ha.applyMatrix4(t),this.setXYZ(e,Ha.x,Ha.y,Ha.z);return this},setX:function(t,e){return this.data.array[t*this.data.stride+this.offset]=e,this},setY:function(t,e){return this.data.array[t*this.data.stride+this.offset+1]=e,this},setZ:function(t,e){return this.data.array[t*this.data.stride+this.offset+2]=e,this},setW:function(t,e){return this.data.array[t*this.data.stride+this.offset+3]=e,this},getX:function(t){return this.data.array[t*this.data.stride+this.offset]},getY:function(t){return this.data.array[t*this.data.stride+this.offset+1]},getZ:function(t){return this.data.array[t*this.data.stride+this.offset+2]},getW:function(t){return this.data.array[t*this.data.stride+this.offset+3]},setXY:function(t,e,i){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=i,this},setXYZ:function(t,e,i,n){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=i,this.data.array[t+2]=n,this},setXYZW:function(t,e,i,n,s){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=i,this.data.array[t+2]=n,this.data.array[t+3]=s,this},clone:function(t){if(void 0===t){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const i=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[i+e])}return new ps(new this.array.constructor(t),this.itemSize,this.normalized)}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new Ja(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)},toJSON:function(t){if(void 0===t){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const i=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[i+e])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}});class Ma extends bs{constructor(t){super(),this.type="SpriteMaterial",this.color=new Qs(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this}}let fa;Ma.prototype.isSpriteMaterial=!0;const ka=new Oi,za=new Oi,wa=new Oi,Ta=new Ji,Da=new Ji,Ka=new Vn,ja=new Oi,Pa=new Oi,Oa=new Oi,_a=new Ji,qa=new Ji,$a=new Ji;class tg extends On{constructor(t){if(super(),this.type="Sprite",void 0===fa){fa=new Ts;const t=new Ya(new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),5);fa.setIndex([0,1,2,0,2,3]),fa.setAttribute("position",new Ja(t,3,0,!1)),fa.setAttribute("uv",new Ja(t,2,3,!1))}this.geometry=fa,this.material=void 0!==t?t:new Ma,this.center=new Ji(.5,.5)}raycast(t,e){null===t.camera&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),za.setFromMatrixScale(this.matrixWorld),Ka.copy(t.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse,this.matrixWorld),wa.setFromMatrixPosition(this.modelViewMatrix),t.camera.isPerspectiveCamera&&!1===this.material.sizeAttenuation&&za.multiplyScalar(-wa.z);const i=this.material.rotation;let n,s;0!==i&&(s=Math.cos(i),n=Math.sin(i));const l=this.center;eg(ja.set(-.5,-.5,0),wa,l,za,n,s),eg(Pa.set(.5,-.5,0),wa,l,za,n,s),eg(Oa.set(.5,.5,0),wa,l,za,n,s),_a.set(0,0),qa.set(1,0),$a.set(1,1);let c=t.ray.intersectTriangle(ja,Pa,Oa,!1,ka);if(null===c&&(eg(Pa.set(-.5,.5,0),wa,l,za,n,s),qa.set(0,1),c=t.ray.intersectTriangle(ja,Oa,Pa,!1,ka),null===c))return;const a=t.ray.origin.distanceTo(ka);a<t.near||a>t.far||e.push({distance:a,point:ka.clone(),uv:os.getUV(ka,ja,Pa,Oa,_a,qa,$a,new Ji),face:null,object:this})}copy(t){return super.copy(t),void 0!==t.center&&this.center.copy(t.center),this.material=t.material,this}}function eg(t,e,i,n,s,l){Ta.subVectors(t,i).addScalar(.5).multiply(n),void 0!==s?(Da.x=l*Ta.x-s*Ta.y,Da.y=s*Ta.x+l*Ta.y):Da.copy(Ta),t.copy(e),t.x+=Da.x,t.y+=Da.y,t.applyMatrix4(Ka)}tg.prototype.isSprite=!0;const ig=new Oi,ng=new Oi;class sg extends On{constructor(){super(),this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]},isLOD:{value:!0}}),this.autoUpdate=!0}copy(t){super.copy(t,!1);const e=t.levels;for(let t=0,i=e.length;t<i;t++){const i=e[t];this.addLevel(i.object.clone(),i.distance)}return this.autoUpdate=t.autoUpdate,this}addLevel(t,e=0){e=Math.abs(e);const i=this.levels;let n;for(n=0;n<i.length&&!(e<i[n].distance);n++);return i.splice(n,0,{distance:e,object:t}),this.add(t),this}getCurrentLevel(){return this._currentLevel}getObjectForDistance(t){const e=this.levels;if(e.length>0){let i,n;for(i=1,n=e.length;i<n&&!(t<e[i].distance);i++);return e[i-1].object}return null}raycast(t,e){if(this.levels.length>0){ig.setFromMatrixPosition(this.matrixWorld);const i=t.ray.origin.distanceTo(ig);this.getObjectForDistance(i).raycast(t,e)}}update(t){const e=this.levels;if(e.length>1){ig.setFromMatrixPosition(t.matrixWorld),ng.setFromMatrixPosition(this.matrixWorld);const i=ig.distanceTo(ng)/t.zoom;let n,s;for(e[0].object.visible=!0,n=1,s=e.length;n<s&&i>=e[n].distance;n++)e[n-1].object.visible=!1,e[n].object.visible=!0;for(this._currentLevel=n-1;n<s;n++)e[n].object.visible=!1}}toJSON(t){const e=super.toJSON(t);!1===this.autoUpdate&&(e.object.autoUpdate=!1),e.object.levels=[];const i=this.levels;for(let t=0,n=i.length;t<n;t++){const n=i[t];e.object.levels.push({object:n.object.uuid,distance:n.distance})}return e}}const lg=new Oi,cg=new Di,ag=new Di,gg=new Oi,Ig=new Vn;function dg(t,e){Il.call(this,t,e),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Vn,this.bindMatrixInverse=new Vn}function og(){On.call(this),this.type="Bone"}dg.prototype=Object.assign(Object.create(Il.prototype),{constructor:dg,isSkinnedMesh:!0,copy:function(t){return Il.prototype.copy.call(this,t),this.bindMode=t.bindMode,this.bindMatrix.copy(t.bindMatrix),this.bindMatrixInverse.copy(t.bindMatrixInverse),this.skeleton=t.skeleton,this},bind:function(t,e){this.skeleton=t,void 0===e&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.copy(e).invert()},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){const t=new Di,e=this.geometry.attributes.skinWeight;for(let i=0,n=e.count;i<n;i++){t.x=e.getX(i),t.y=e.getY(i),t.z=e.getZ(i),t.w=e.getW(i);const n=1/t.manhattanLength();n!==1/0?t.multiplyScalar(n):t.set(1,0,0,0),e.setXYZW(i,t.x,t.y,t.z,t.w)}},updateMatrixWorld:function(t){Il.prototype.updateMatrixWorld.call(this,t),"attached"===this.bindMode?this.bindMatrixInverse.copy(this.matrixWorld).invert():"detached"===this.bindMode?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)},boneTransform:function(t,e){const i=this.skeleton,n=this.geometry;cg.fromBufferAttribute(n.attributes.skinIndex,t),ag.fromBufferAttribute(n.attributes.skinWeight,t),lg.fromBufferAttribute(n.attributes.position,t).applyMatrix4(this.bindMatrix),e.set(0,0,0);for(let t=0;t<4;t++){const n=ag.getComponent(t);if(0!==n){const s=cg.getComponent(t);Ig.multiplyMatrices(i.bones[s].matrixWorld,i.boneInverses[s]),e.addScaledVector(gg.copy(lg).applyMatrix4(Ig),n)}}return e.applyMatrix4(this.bindMatrixInverse)}}),og.prototype=Object.assign(Object.create(On.prototype),{constructor:og,isBone:!0});const rg=new Vn,bg=new Vn;class ug{constructor(t=[],e=[]){this.uuid=Hi.generateUUID(),this.bones=t.slice(0),this.boneInverses=e,this.boneMatrices=null,this.boneTexture=null,this.boneTextureSize=0,this.frame=-1,this.init()}init(){const t=this.bones,e=this.boneInverses;if(this.boneMatrices=new Float32Array(16*t.length),0===e.length)this.calculateInverses();else if(t.length!==e.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let t=0,e=this.bones.length;t<e;t++)this.boneInverses.push(new Vn)}}calculateInverses(){this.boneInverses.length=0;for(let t=0,e=this.bones.length;t<e;t++){const e=new Vn;this.bones[t]&&e.copy(this.bones[t].matrixWorld).invert(),this.boneInverses.push(e)}}pose(){for(let t=0,e=this.bones.length;t<e;t++){const e=this.bones[t];e&&e.matrixWorld.copy(this.boneInverses[t]).invert()}for(let t=0,e=this.bones.length;t<e;t++){const e=this.bones[t];e&&(e.parent&&e.parent.isBone?(e.matrix.copy(e.parent.matrixWorld).invert(),e.matrix.multiply(e.matrixWorld)):e.matrix.copy(e.matrixWorld),e.matrix.decompose(e.position,e.quaternion,e.scale))}}update(){const t=this.bones,e=this.boneInverses,i=this.boneMatrices,n=this.boneTexture;for(let n=0,s=t.length;n<s;n++){const s=t[n]?t[n].matrixWorld:bg;rg.multiplyMatrices(s,e[n]),rg.toArray(i,16*n)}null!==n&&(n.needsUpdate=!0)}clone(){return new ug(this.bones,this.boneInverses)}getBoneByName(t){for(let e=0,i=this.bones.length;e<i;e++){const i=this.bones[e];if(i.name===t)return i}}dispose(){null!==this.boneTexture&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(t,e){this.uuid=t.uuid;for(let i=0,n=t.bones.length;i<n;i++){const n=t.bones[i];let s=e[n];void 0===s&&(console.warn("THREE.Skeleton: No bone found with UUID:",n),s=new og),this.bones.push(s),this.boneInverses.push((new Vn).fromArray(t.boneInverses[i]))}return this.init(),this}toJSON(){const t={metadata:{version:4.5,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};t.uuid=this.uuid;const e=this.bones,i=this.boneInverses;for(let n=0,s=e.length;n<s;n++){const s=e[n];t.bones.push(s.uuid);const l=i[n];t.boneInverses.push(l.toArray())}return t}}const Bg=new Vn,Fg=new Vn,Cg=[],Gg=new Il;function Ug(t,e,i){Il.call(this,t,e),this.instanceMatrix=new ps(new Float32Array(16*i),16),this.instanceColor=null,this.count=i,this.frustumCulled=!1}Ug.prototype=Object.assign(Object.create(Il.prototype),{constructor:Ug,isInstancedMesh:!0,copy:function(t){return Il.prototype.copy.call(this,t),this.instanceMatrix.copy(t.instanceMatrix),null!==t.instanceColor&&(this.instanceColor=t.instanceColor.clone()),this.count=t.count,this},getColorAt:function(t,e){e.fromArray(this.instanceColor.array,3*t)},getMatrixAt:function(t,e){e.fromArray(this.instanceMatrix.array,16*t)},raycast:function(t,e){const i=this.matrixWorld,n=this.count;if(Gg.geometry=this.geometry,Gg.material=this.material,void 0!==Gg.material)for(let s=0;s<n;s++){this.getMatrixAt(s,Bg),Fg.multiplyMatrices(i,Bg),Gg.matrixWorld=Fg,Gg.raycast(t,Cg);for(let t=0,i=Cg.length;t<i;t++){const i=Cg[t];i.instanceId=s,i.object=this,e.push(i)}Cg.length=0}},setColorAt:function(t,e){null===this.instanceColor&&(this.instanceColor=new ps(new Float32Array(3*this.count),3)),e.toArray(this.instanceColor.array,3*t)},setMatrixAt:function(t,e){e.toArray(this.instanceMatrix.array,16*t)},updateMorphTargets:function(){},dispose:function(){this.dispatchEvent({type:"dispose"})}});class Qg extends bs{constructor(t){super(),this.type="LineBasicMaterial",this.color=new Qs(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.morphTargets=!1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this.morphTargets=t.morphTargets,this}}Qg.prototype.isLineBasicMaterial=!0;const hg=new Oi,mg=new Oi,xg=new Vn,pg=new pn,Vg=new Fn;function Zg(t=new Ts,e=new Qg){On.call(this),this.type="Line",this.geometry=t,this.material=e,this.updateMorphTargets()}Zg.prototype=Object.assign(Object.create(On.prototype),{constructor:Zg,isLine:!0,copy:function(t){return On.prototype.copy.call(this,t),this.material=t.material,this.geometry=t.geometry,this},computeLineDistances:function(){const t=this.geometry;if(t.isBufferGeometry)if(null===t.index){const e=t.attributes.position,i=[0];for(let t=1,n=e.count;t<n;t++)hg.fromBufferAttribute(e,t-1),mg.fromBufferAttribute(e,t),i[t]=i[t-1],i[t]+=hg.distanceTo(mg);t.setAttribute("lineDistance",new Ss(i,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else t.isGeometry&&console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this},raycast:function(t,e){const i=this.geometry,n=this.matrixWorld,s=t.params.Line.threshold;if(null===i.boundingSphere&&i.computeBoundingSphere(),Vg.copy(i.boundingSphere),Vg.applyMatrix4(n),Vg.radius+=s,!1===t.ray.intersectsSphere(Vg))return;xg.copy(n).invert(),pg.copy(t.ray).applyMatrix4(xg);const l=s/((this.scale.x+this.scale.y+this.scale.z)/3),c=l*l,a=new Oi,g=new Oi,I=new Oi,d=new Oi,o=this.isLineSegments?2:1;if(i.isBufferGeometry){const n=i.index,s=i.attributes.position;if(null!==n){const i=n.array;for(let n=0,l=i.length-1;n<l;n+=o){const l=i[n],o=i[n+1];if(a.fromBufferAttribute(s,l),g.fromBufferAttribute(s,o),pg.distanceSqToSegment(a,g,d,I)>c)continue;d.applyMatrix4(this.matrixWorld);const r=t.ray.origin.distanceTo(d);r<t.near||r>t.far||e.push({distance:r,point:I.clone().applyMatrix4(this.matrixWorld),index:n,face:null,faceIndex:null,object:this})}}else for(let i=0,n=s.count-1;i<n;i+=o){if(a.fromBufferAttribute(s,i),g.fromBufferAttribute(s,i+1),pg.distanceSqToSegment(a,g,d,I)>c)continue;d.applyMatrix4(this.matrixWorld);const n=t.ray.origin.distanceTo(d);n<t.near||n>t.far||e.push({distance:n,point:I.clone().applyMatrix4(this.matrixWorld),index:i,face:null,faceIndex:null,object:this})}}else i.isGeometry&&console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")},updateMorphTargets:function(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,i=Object.keys(e);if(i.length>0){const t=e[i[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,i=t.length;e<i;e++){const i=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[i]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}});const Rg=new Oi,yg=new Oi;function Lg(t,e){Zg.call(this,t,e),this.type="LineSegments"}Lg.prototype=Object.assign(Object.create(Zg.prototype),{constructor:Lg,isLineSegments:!0,computeLineDistances:function(){const t=this.geometry;if(t.isBufferGeometry)if(null===t.index){const e=t.attributes.position,i=[];for(let t=0,n=e.count;t<n;t+=2)Rg.fromBufferAttribute(e,t),yg.fromBufferAttribute(e,t+1),i[t]=0===t?0:i[t-1],i[t+1]=i[t]+Rg.distanceTo(yg);t.setAttribute("lineDistance",new Ss(i,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else t.isGeometry&&console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}});class Xg extends Zg{constructor(t,e){super(t,e),this.type="LineLoop"}}Xg.prototype.isLineLoop=!0;class Ag extends bs{constructor(t){super(),this.type="PointsMaterial",this.color=new Qs(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.morphTargets=!1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this.morphTargets=t.morphTargets,this}}Ag.prototype.isPointsMaterial=!0;const Wg=new Vn,Sg=new pn,Eg=new Fn,Ng=new Oi;function vg(t=new Ts,e=new Ag){On.call(this),this.type="Points",this.geometry=t,this.material=e,this.updateMorphTargets()}function Yg(t,e,i,n,s,l,c){const a=Sg.distanceSqToPoint(t);if(a<i){const i=new Oi;Sg.closestPointToPoint(t,i),i.applyMatrix4(n);const g=s.ray.origin.distanceTo(i);if(g<s.near||g>s.far)return;l.push({distance:g,distanceToRay:Math.sqrt(a),point:i,index:e,face:null,object:c})}}vg.prototype=Object.assign(Object.create(On.prototype),{constructor:vg,isPoints:!0,copy:function(t){return On.prototype.copy.call(this,t),this.material=t.material,this.geometry=t.geometry,this},raycast:function(t,e){const i=this.geometry,n=this.matrixWorld,s=t.params.Points.threshold;if(null===i.boundingSphere&&i.computeBoundingSphere(),Eg.copy(i.boundingSphere),Eg.applyMatrix4(n),Eg.radius+=s,!1===t.ray.intersectsSphere(Eg))return;Wg.copy(n).invert(),Sg.copy(t.ray).applyMatrix4(Wg);const l=s/((this.scale.x+this.scale.y+this.scale.z)/3),c=l*l;if(i.isBufferGeometry){const s=i.index,l=i.attributes.position;if(null!==s){const i=s.array;for(let s=0,a=i.length;s<a;s++){const a=i[s];Ng.fromBufferAttribute(l,a),Yg(Ng,a,c,n,t,e,this)}}else for(let i=0,s=l.count;i<s;i++)Ng.fromBufferAttribute(l,i),Yg(Ng,i,c,n,t,e,this)}else console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")},updateMorphTargets:function(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,i=Object.keys(e);if(i.length>0){const t=e[i[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,i=t.length;e<i;e++){const i=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[i]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}});class Hg extends wi{constructor(t,e,i,n,s,l,c,a,g){super(t,e,i,n,s,l,c,a,g),this.format=void 0!==c?c:Yt,this.minFilter=void 0!==l?l:Ut,this.magFilter=void 0!==s?s:Ut,this.generateMipmaps=!1;const I=this;"requestVideoFrameCallback"in t&&t.requestVideoFrameCallback((function e(){I.needsUpdate=!0,t.requestVideoFrameCallback(e)}))}clone(){return new this.constructor(this.image).copy(this)}update(){const t=this.image;!1=="requestVideoFrameCallback"in t&&t.readyState>=t.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}Hg.prototype.isVideoTexture=!0;class Jg extends wi{constructor(t,e,i,n,s,l,c,a,g,I,d,o){super(null,l,c,a,g,I,n,s,d,o),this.image={width:e,height:i},this.mipmaps=t,this.flipY=!1,this.generateMipmaps=!1}}Jg.prototype.isCompressedTexture=!0;class Mg extends wi{constructor(t,e,i,n,s,l,c,a,g){super(t,e,i,n,s,l,c,a,g),this.needsUpdate=!0}}Mg.prototype.isCanvasTexture=!0;class fg extends wi{constructor(t,e,i,n,s,l,c,a,g,I){if((I=void 0!==I?I:kt)!==kt&&I!==zt)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===i&&I===kt&&(i=Rt),void 0===i&&I===zt&&(i=Nt),super(null,n,s,l,c,a,I,i,g),this.image={width:t,height:e},this.magFilter=void 0!==c?c:ut,this.minFilter=void 0!==a?a:ut,this.flipY=!1,this.generateMipmaps=!1}}fg.prototype.isDepthTexture=!0;class kg extends Ts{constructor(t=1,e=8,i=0,n=2*Math.PI){super(),this.type="CircleGeometry",this.parameters={radius:t,segments:e,thetaStart:i,thetaLength:n},e=Math.max(3,e);const s=[],l=[],c=[],a=[],g=new Oi,I=new Ji;l.push(0,0,0),c.push(0,0,1),a.push(.5,.5);for(let s=0,d=3;s<=e;s++,d+=3){const o=i+s/e*n;g.x=t*Math.cos(o),g.y=t*Math.sin(o),l.push(g.x,g.y,g.z),c.push(0,0,1),I.x=(l[d]/t+1)/2,I.y=(l[d+1]/t+1)/2,a.push(I.x,I.y)}for(let t=1;t<=e;t++)s.push(t,t+1,0);this.setIndex(s),this.setAttribute("position",new Ss(l,3)),this.setAttribute("normal",new Ss(c,3)),this.setAttribute("uv",new Ss(a,2))}}class zg extends Ts{constructor(t=1,e=1,i=1,n=8,s=1,l=!1,c=0,a=2*Math.PI){super(),this.type="CylinderGeometry",this.parameters={radiusTop:t,radiusBottom:e,height:i,radialSegments:n,heightSegments:s,openEnded:l,thetaStart:c,thetaLength:a};const g=this;n=Math.floor(n),s=Math.floor(s);const I=[],d=[],o=[],r=[];let b=0;const u=[],B=i/2;let F=0;function C(i){const s=b,l=new Ji,u=new Oi;let C=0;const G=!0===i?t:e,U=!0===i?1:-1;for(let t=1;t<=n;t++)d.push(0,B*U,0),o.push(0,U,0),r.push(.5,.5),b++;const Q=b;for(let t=0;t<=n;t++){const e=t/n*a+c,i=Math.cos(e),s=Math.sin(e);u.x=G*s,u.y=B*U,u.z=G*i,d.push(u.x,u.y,u.z),o.push(0,U,0),l.x=.5*i+.5,l.y=.5*s*U+.5,r.push(l.x,l.y),b++}for(let t=0;t<n;t++){const e=s+t,n=Q+t;!0===i?I.push(n,n+1,e):I.push(n+1,n,e),C+=3}g.addGroup(F,C,!0===i?1:2),F+=C}!function(){const l=new Oi,C=new Oi;let G=0;const U=(e-t)/i;for(let g=0;g<=s;g++){const I=[],F=g/s,G=F*(e-t)+t;for(let t=0;t<=n;t++){const e=t/n,s=e*a+c,g=Math.sin(s),u=Math.cos(s);C.x=G*g,C.y=-F*i+B,C.z=G*u,d.push(C.x,C.y,C.z),l.set(g,U,u).normalize(),o.push(l.x,l.y,l.z),r.push(e,1-F),I.push(b++)}u.push(I)}for(let t=0;t<n;t++)for(let e=0;e<s;e++){const i=u[e][t],n=u[e+1][t],s=u[e+1][t+1],l=u[e][t+1];I.push(i,n,l),I.push(n,s,l),G+=6}g.addGroup(F,G,0),F+=G}(),!1===l&&(t>0&&C(!0),e>0&&C(!1)),this.setIndex(I),this.setAttribute("position",new Ss(d,3)),this.setAttribute("normal",new Ss(o,3)),this.setAttribute("uv",new Ss(r,2))}}class wg extends zg{constructor(t=1,e=1,i=8,n=1,s=!1,l=0,c=2*Math.PI){super(0,t,e,i,n,s,l,c),this.type="ConeGeometry",this.parameters={radius:t,height:e,radialSegments:i,heightSegments:n,openEnded:s,thetaStart:l,thetaLength:c}}}class Tg extends Ts{constructor(t,e,i=1,n=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:t,indices:e,radius:i,detail:n};const s=[],l=[];function c(t,e,i,n){const s=n+1,l=[];for(let n=0;n<=s;n++){l[n]=[];const c=t.clone().lerp(i,n/s),a=e.clone().lerp(i,n/s),g=s-n;for(let t=0;t<=g;t++)l[n][t]=0===t&&n===s?c:c.clone().lerp(a,t/g)}for(let t=0;t<s;t++)for(let e=0;e<2*(s-t)-1;e++){const i=Math.floor(e/2);e%2==0?(a(l[t][i+1]),a(l[t+1][i]),a(l[t][i])):(a(l[t][i+1]),a(l[t+1][i+1]),a(l[t+1][i]))}}function a(t){s.push(t.x,t.y,t.z)}function g(e,i){const n=3*e;i.x=t[n+0],i.y=t[n+1],i.z=t[n+2]}function I(t,e,i,n){n<0&&1===t.x&&(l[e]=t.x-1),0===i.x&&0===i.z&&(l[e]=n/2/Math.PI+.5)}function d(t){return Math.atan2(t.z,-t.x)}!function(t){const i=new Oi,n=new Oi,s=new Oi;for(let l=0;l<e.length;l+=3)g(e[l+0],i),g(e[l+1],n),g(e[l+2],s),c(i,n,s,t)}(n),function(t){const e=new Oi;for(let i=0;i<s.length;i+=3)e.x=s[i+0],e.y=s[i+1],e.z=s[i+2],e.normalize().multiplyScalar(t),s[i+0]=e.x,s[i+1]=e.y,s[i+2]=e.z}(i),function(){const t=new Oi;for(let i=0;i<s.length;i+=3){t.x=s[i+0],t.y=s[i+1],t.z=s[i+2];const n=d(t)/2/Math.PI+.5,c=(e=t,Math.atan2(-e.y,Math.sqrt(e.x*e.x+e.z*e.z))/Math.PI+.5);l.push(n,1-c)}var e;(function(){const t=new Oi,e=new Oi,i=new Oi,n=new Oi,c=new Ji,a=new Ji,g=new Ji;for(let o=0,r=0;o<s.length;o+=9,r+=6){t.set(s[o+0],s[o+1],s[o+2]),e.set(s[o+3],s[o+4],s[o+5]),i.set(s[o+6],s[o+7],s[o+8]),c.set(l[r+0],l[r+1]),a.set(l[r+2],l[r+3]),g.set(l[r+4],l[r+5]),n.copy(t).add(e).add(i).divideScalar(3);const b=d(n);I(c,r+0,t,b),I(a,r+2,e,b),I(g,r+4,i,b)}})(),function(){for(let t=0;t<l.length;t+=6){const e=l[t+0],i=l[t+2],n=l[t+4],s=Math.max(e,i,n),c=Math.min(e,i,n);s>.9&&c<.1&&(e<.2&&(l[t+0]+=1),i<.2&&(l[t+2]+=1),n<.2&&(l[t+4]+=1))}}()}(),this.setAttribute("position",new Ss(s,3)),this.setAttribute("normal",new Ss(s.slice(),3)),this.setAttribute("uv",new Ss(l,2)),0===n?this.computeVertexNormals():this.normalizeNormals()}}class Dg extends Tg{constructor(t=1,e=0){const i=(1+Math.sqrt(5))/2,n=1/i;super([-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-n,-i,0,-n,i,0,n,-i,0,n,i,-n,-i,0,-n,i,0,n,-i,0,n,i,0,-i,0,-n,i,0,-n,-i,0,n,i,0,n],[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],t,e),this.type="DodecahedronGeometry",this.parameters={radius:t,detail:e}}}const Kg=new Oi,jg=new Oi,Pg=new Oi,Og=new os;class _g extends Ts{constructor(t,e){if(super(),this.type="EdgesGeometry",this.parameters={thresholdAngle:e},e=void 0!==e?e:1,!0===t.isGeometry)return void console.error("THREE.EdgesGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");const i=Math.pow(10,4),n=Math.cos(Hi.DEG2RAD*e),s=t.getIndex(),l=t.getAttribute("position"),c=s?s.count:l.count,a=[0,0,0],g=["a","b","c"],I=new Array(3),d={},o=[];for(let t=0;t<c;t+=3){s?(a[0]=s.getX(t),a[1]=s.getX(t+1),a[2]=s.getX(t+2)):(a[0]=t,a[1]=t+1,a[2]=t+2);const{a:e,b:c,c:r}=Og;if(e.fromBufferAttribute(l,a[0]),c.fromBufferAttribute(l,a[1]),r.fromBufferAttribute(l,a[2]),Og.getNormal(Pg),I[0]=`${Math.round(e.x*i)},${Math.round(e.y*i)},${Math.round(e.z*i)}`,I[1]=`${Math.round(c.x*i)},${Math.round(c.y*i)},${Math.round(c.z*i)}`,I[2]=`${Math.round(r.x*i)},${Math.round(r.y*i)},${Math.round(r.z*i)}`,I[0]!==I[1]&&I[1]!==I[2]&&I[2]!==I[0])for(let t=0;t<3;t++){const e=(t+1)%3,i=I[t],s=I[e],l=Og[g[t]],c=Og[g[e]],r=`${i}_${s}`,b=`${s}_${i}`;b in d&&d[b]?(Pg.dot(d[b].normal)<=n&&(o.push(l.x,l.y,l.z),o.push(c.x,c.y,c.z)),d[b]=null):r in d||(d[r]={index0:a[t],index1:a[e],normal:Pg.clone()})}}for(const t in d)if(d[t]){const{index0:e,index1:i}=d[t];Kg.fromBufferAttribute(l,e),jg.fromBufferAttribute(l,i),o.push(Kg.x,Kg.y,Kg.z),o.push(jg.x,jg.y,jg.z)}this.setAttribute("position",new Ss(o,3))}}function qg(t,e,i,n,s){let l,c;if(s===function(t,e,i,n){let s=0;for(let l=e,c=i-n;l<i;l+=n)s+=(t[c]-t[l])*(t[l+1]+t[c+1]),c=l;return s}(t,e,i,n)>0)for(l=e;l<i;l+=n)c=UI(l,t[l],t[l+1],c);else for(l=i-n;l>=e;l-=n)c=UI(l,t[l],t[l+1],c);return c&&bI(c,c.next)&&(QI(c),c=c.next),c}function $g(t,e){if(!t)return t;e||(e=t);let i,n=t;do{if(i=!1,n.steiner||!bI(n,n.next)&&0!==rI(n.prev,n,n.next))n=n.next;else{if(QI(n),n=e=n.prev,n===n.next)break;i=!0}}while(i||n!==e);return e}function tI(t,e,i,n,s,l,c){if(!t)return;!c&&l&&function(t,e,i,n){let s=t;do{null===s.z&&(s.z=gI(s.x,s.y,e,i,n)),s.prevZ=s.prev,s.nextZ=s.next,s=s.next}while(s!==t);s.prevZ.nextZ=null,s.prevZ=null,function(t){let e,i,n,s,l,c,a,g,I=1;do{for(i=t,t=null,l=null,c=0;i;){for(c++,n=i,a=0,e=0;e<I&&(a++,n=n.nextZ,n);e++);for(g=I;a>0||g>0&&n;)0!==a&&(0===g||!n||i.z<=n.z)?(s=i,i=i.nextZ,a--):(s=n,n=n.nextZ,g--),l?l.nextZ=s:t=s,s.prevZ=l,l=s;i=n}l.nextZ=null,I*=2}while(c>1)}(s)}(t,n,s,l);let a,g,I=t;for(;t.prev!==t.next;)if(a=t.prev,g=t.next,l?iI(t,n,s,l):eI(t))e.push(a.i/i),e.push(t.i/i),e.push(g.i/i),QI(t),t=g.next,I=g.next;else if((t=g)===I){c?1===c?tI(t=nI($g(t),e,i),e,i,n,s,l,2):2===c&&sI(t,e,i,n,s,l):tI($g(t),e,i,n,s,l,1);break}}function eI(t){const e=t.prev,i=t,n=t.next;if(rI(e,i,n)>=0)return!1;let s=t.next.next;for(;s!==t.prev;){if(dI(e.x,e.y,i.x,i.y,n.x,n.y,s.x,s.y)&&rI(s.prev,s,s.next)>=0)return!1;s=s.next}return!0}function iI(t,e,i,n){const s=t.prev,l=t,c=t.next;if(rI(s,l,c)>=0)return!1;const a=s.x<l.x?s.x<c.x?s.x:c.x:l.x<c.x?l.x:c.x,g=s.y<l.y?s.y<c.y?s.y:c.y:l.y<c.y?l.y:c.y,I=s.x>l.x?s.x>c.x?s.x:c.x:l.x>c.x?l.x:c.x,d=s.y>l.y?s.y>c.y?s.y:c.y:l.y>c.y?l.y:c.y,o=gI(a,g,e,i,n),r=gI(I,d,e,i,n);let b=t.prevZ,u=t.nextZ;for(;b&&b.z>=o&&u&&u.z<=r;){if(b!==t.prev&&b!==t.next&&dI(s.x,s.y,l.x,l.y,c.x,c.y,b.x,b.y)&&rI(b.prev,b,b.next)>=0)return!1;if(b=b.prevZ,u!==t.prev&&u!==t.next&&dI(s.x,s.y,l.x,l.y,c.x,c.y,u.x,u.y)&&rI(u.prev,u,u.next)>=0)return!1;u=u.nextZ}for(;b&&b.z>=o;){if(b!==t.prev&&b!==t.next&&dI(s.x,s.y,l.x,l.y,c.x,c.y,b.x,b.y)&&rI(b.prev,b,b.next)>=0)return!1;b=b.prevZ}for(;u&&u.z<=r;){if(u!==t.prev&&u!==t.next&&dI(s.x,s.y,l.x,l.y,c.x,c.y,u.x,u.y)&&rI(u.prev,u,u.next)>=0)return!1;u=u.nextZ}return!0}function nI(t,e,i){let n=t;do{const s=n.prev,l=n.next.next;!bI(s,l)&&uI(s,n,n.next,l)&&CI(s,l)&&CI(l,s)&&(e.push(s.i/i),e.push(n.i/i),e.push(l.i/i),QI(n),QI(n.next),n=t=l),n=n.next}while(n!==t);return $g(n)}function sI(t,e,i,n,s,l){let c=t;do{let t=c.next.next;for(;t!==c.prev;){if(c.i!==t.i&&oI(c,t)){let a=GI(c,t);return c=$g(c,c.next),a=$g(a,a.next),tI(c,e,i,n,s,l),void tI(a,e,i,n,s,l)}t=t.next}c=c.next}while(c!==t)}function lI(t,e){return t.x-e.x}function cI(t,e){if(e=function(t,e){let i=e;const n=t.x,s=t.y;let l,c=-1/0;do{if(s<=i.y&&s>=i.next.y&&i.next.y!==i.y){const t=i.x+(s-i.y)*(i.next.x-i.x)/(i.next.y-i.y);if(t<=n&&t>c){if(c=t,t===n){if(s===i.y)return i;if(s===i.next.y)return i.next}l=i.x<i.next.x?i:i.next}}i=i.next}while(i!==e);if(!l)return null;if(n===c)return l;const a=l,g=l.x,I=l.y;let d,o=1/0;i=l;do{n>=i.x&&i.x>=g&&n!==i.x&&dI(s<I?n:c,s,g,I,s<I?c:n,s,i.x,i.y)&&(d=Math.abs(s-i.y)/(n-i.x),CI(i,t)&&(d<o||d===o&&(i.x>l.x||i.x===l.x&&aI(l,i)))&&(l=i,o=d)),i=i.next}while(i!==a);return l}(t,e)){const i=GI(e,t);$g(e,e.next),$g(i,i.next)}}function aI(t,e){return rI(t.prev,t,e.prev)<0&&rI(e.next,t,t.next)<0}function gI(t,e,i,n,s){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-i)*s)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-n)*s)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function II(t){let e=t,i=t;do{(e.x<i.x||e.x===i.x&&e.y<i.y)&&(i=e),e=e.next}while(e!==t);return i}function dI(t,e,i,n,s,l,c,a){return(s-c)*(e-a)-(t-c)*(l-a)>=0&&(t-c)*(n-a)-(i-c)*(e-a)>=0&&(i-c)*(l-a)-(s-c)*(n-a)>=0}function oI(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){let i=t;do{if(i.i!==t.i&&i.next.i!==t.i&&i.i!==e.i&&i.next.i!==e.i&&uI(i,i.next,t,e))return!0;i=i.next}while(i!==t);return!1}(t,e)&&(CI(t,e)&&CI(e,t)&&function(t,e){let i=t,n=!1;const s=(t.x+e.x)/2,l=(t.y+e.y)/2;do{i.y>l!=i.next.y>l&&i.next.y!==i.y&&s<(i.next.x-i.x)*(l-i.y)/(i.next.y-i.y)+i.x&&(n=!n),i=i.next}while(i!==t);return n}(t,e)&&(rI(t.prev,t,e.prev)||rI(t,e.prev,e))||bI(t,e)&&rI(t.prev,t,t.next)>0&&rI(e.prev,e,e.next)>0)}function rI(t,e,i){return(e.y-t.y)*(i.x-e.x)-(e.x-t.x)*(i.y-e.y)}function bI(t,e){return t.x===e.x&&t.y===e.y}function uI(t,e,i,n){const s=FI(rI(t,e,i)),l=FI(rI(t,e,n)),c=FI(rI(i,n,t)),a=FI(rI(i,n,e));return s!==l&&c!==a||!(0!==s||!BI(t,i,e))||!(0!==l||!BI(t,n,e))||!(0!==c||!BI(i,t,n))||!(0!==a||!BI(i,e,n))}function BI(t,e,i){return e.x<=Math.max(t.x,i.x)&&e.x>=Math.min(t.x,i.x)&&e.y<=Math.max(t.y,i.y)&&e.y>=Math.min(t.y,i.y)}function FI(t){return t>0?1:t<0?-1:0}function CI(t,e){return rI(t.prev,t,t.next)<0?rI(t,e,t.next)>=0&&rI(t,t.prev,e)>=0:rI(t,e,t.prev)<0||rI(t,t.next,e)<0}function GI(t,e){const i=new hI(t.i,t.x,t.y),n=new hI(e.i,e.x,e.y),s=t.next,l=e.prev;return t.next=e,e.prev=t,i.next=s,s.prev=i,n.next=i,i.prev=n,l.next=n,n.prev=l,n}function UI(t,e,i,n){const s=new hI(t,e,i);return n?(s.next=n.next,s.prev=n,n.next.prev=s,n.next=s):(s.prev=s,s.next=s),s}function QI(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function hI(t,e,i){this.i=t,this.x=e,this.y=i,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}const mI={area:function(t){const e=t.length;let i=0;for(let n=e-1,s=0;s<e;n=s++)i+=t[n].x*t[s].y-t[s].x*t[n].y;return.5*i},isClockWise:function(t){return mI.area(t)<0},triangulateShape:function(t,e){const i=[],n=[],s=[];xI(t),pI(i,t);let l=t.length;e.forEach(xI);for(let t=0;t<e.length;t++)n.push(l),l+=e[t].length,pI(i,e[t]);const c=function(t,e,i){i=i||2;const n=e&&e.length,s=n?e[0]*i:t.length;let l=qg(t,0,s,i,!0);const c=[];if(!l||l.next===l.prev)return c;let a,g,I,d,o,r,b;if(n&&(l=function(t,e,i,n){const s=[];let l,c,a,g,I;for(l=0,c=e.length;l<c;l++)a=e[l]*n,g=l<c-1?e[l+1]*n:t.length,I=qg(t,a,g,n,!1),I===I.next&&(I.steiner=!0),s.push(II(I));for(s.sort(lI),l=0;l<s.length;l++)cI(s[l],i),i=$g(i,i.next);return i}(t,e,l,i)),t.length>80*i){a=I=t[0],g=d=t[1];for(let e=i;e<s;e+=i)o=t[e],r=t[e+1],o<a&&(a=o),r<g&&(g=r),o>I&&(I=o),r>d&&(d=r);b=Math.max(I-a,d-g),b=0!==b?1/b:0}return tI(l,c,i,a,g,b),c}(i,n);for(let t=0;t<c.length;t+=3)s.push(c.slice(t,t+3));return s}};function xI(t){const e=t.length;e>2&&t[e-1].equals(t[0])&&t.pop()}function pI(t,e){for(let i=0;i<e.length;i++)t.push(e[i].x),t.push(e[i].y)}class VI extends Ts{constructor(t,e){super(),this.type="ExtrudeGeometry",this.parameters={shapes:t,options:e},t=Array.isArray(t)?t:[t];const i=this,n=[],s=[];for(let e=0,i=t.length;e<i;e++)l(t[e]);function l(t){const l=[],c=void 0!==e.curveSegments?e.curveSegments:12,a=void 0!==e.steps?e.steps:1;let g=void 0!==e.depth?e.depth:100,I=void 0===e.bevelEnabled||e.bevelEnabled,d=void 0!==e.bevelThickness?e.bevelThickness:6,o=void 0!==e.bevelSize?e.bevelSize:d-2,r=void 0!==e.bevelOffset?e.bevelOffset:0,b=void 0!==e.bevelSegments?e.bevelSegments:3;const u=e.extrudePath,B=void 0!==e.UVGenerator?e.UVGenerator:ZI;void 0!==e.amount&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),g=e.amount);let F,C,G,U,Q,h=!1;u&&(F=u.getSpacedPoints(a),h=!0,I=!1,C=u.computeFrenetFrames(a,!1),G=new Oi,U=new Oi,Q=new Oi),I||(b=0,d=0,o=0,r=0);const m=t.extractPoints(c);let x=m.shape;const p=m.holes;if(!mI.isClockWise(x)){x=x.reverse();for(let t=0,e=p.length;t<e;t++){const e=p[t];mI.isClockWise(e)&&(p[t]=e.reverse())}}const V=mI.triangulateShape(x,p),Z=x;for(let t=0,e=p.length;t<e;t++){const e=p[t];x=x.concat(e)}function R(t,e,i){return e||console.error("THREE.ExtrudeGeometry: vec does not exist"),e.clone().multiplyScalar(i).add(t)}const y=x.length,L=V.length;function X(t,e,i){let n,s,l;const c=t.x-e.x,a=t.y-e.y,g=i.x-t.x,I=i.y-t.y,d=c*c+a*a,o=c*I-a*g;if(Math.abs(o)>Number.EPSILON){const o=Math.sqrt(d),r=Math.sqrt(g*g+I*I),b=e.x-a/o,u=e.y+c/o,B=((i.x-I/r-b)*I-(i.y+g/r-u)*g)/(c*I-a*g);n=b+c*B-t.x,s=u+a*B-t.y;const F=n*n+s*s;if(F<=2)return new Ji(n,s);l=Math.sqrt(F/2)}else{let t=!1;c>Number.EPSILON?g>Number.EPSILON&&(t=!0):c<-Number.EPSILON?g<-Number.EPSILON&&(t=!0):Math.sign(a)===Math.sign(I)&&(t=!0),t?(n=-a,s=c,l=Math.sqrt(d)):(n=c,s=a,l=Math.sqrt(d/2))}return new Ji(n/l,s/l)}const A=[];for(let t=0,e=Z.length,i=e-1,n=t+1;t<e;t++,i++,n++)i===e&&(i=0),n===e&&(n=0),A[t]=X(Z[t],Z[i],Z[n]);const W=[];let S,E=A.concat();for(let t=0,e=p.length;t<e;t++){const e=p[t];S=[];for(let t=0,i=e.length,n=i-1,s=t+1;t<i;t++,n++,s++)n===i&&(n=0),s===i&&(s=0),S[t]=X(e[t],e[n],e[s]);W.push(S),E=E.concat(S)}for(let t=0;t<b;t++){const e=t/b,i=d*Math.cos(e*Math.PI/2),n=o*Math.sin(e*Math.PI/2)+r;for(let t=0,e=Z.length;t<e;t++){const e=R(Z[t],A[t],n);Y(e.x,e.y,-i)}for(let t=0,e=p.length;t<e;t++){const e=p[t];S=W[t];for(let t=0,s=e.length;t<s;t++){const s=R(e[t],S[t],n);Y(s.x,s.y,-i)}}}const N=o+r;for(let t=0;t<y;t++){const e=I?R(x[t],E[t],N):x[t];h?(U.copy(C.normals[0]).multiplyScalar(e.x),G.copy(C.binormals[0]).multiplyScalar(e.y),Q.copy(F[0]).add(U).add(G),Y(Q.x,Q.y,Q.z)):Y(e.x,e.y,0)}for(let t=1;t<=a;t++)for(let e=0;e<y;e++){const i=I?R(x[e],E[e],N):x[e];h?(U.copy(C.normals[t]).multiplyScalar(i.x),G.copy(C.binormals[t]).multiplyScalar(i.y),Q.copy(F[t]).add(U).add(G),Y(Q.x,Q.y,Q.z)):Y(i.x,i.y,g/a*t)}for(let t=b-1;t>=0;t--){const e=t/b,i=d*Math.cos(e*Math.PI/2),n=o*Math.sin(e*Math.PI/2)+r;for(let t=0,e=Z.length;t<e;t++){const e=R(Z[t],A[t],n);Y(e.x,e.y,g+i)}for(let t=0,e=p.length;t<e;t++){const e=p[t];S=W[t];for(let t=0,s=e.length;t<s;t++){const s=R(e[t],S[t],n);h?Y(s.x,s.y+F[a-1].y,F[a-1].x+i):Y(s.x,s.y,g+i)}}}function v(t,e){let i=t.length;for(;--i>=0;){const n=i;let s=i-1;s<0&&(s=t.length-1);for(let t=0,i=a+2*b;t<i;t++){const i=y*t,l=y*(t+1);J(e+n+i,e+s+i,e+s+l,e+n+l)}}}function Y(t,e,i){l.push(t),l.push(e),l.push(i)}function H(t,e,s){M(t),M(e),M(s);const l=n.length/3,c=B.generateTopUV(i,n,l-3,l-2,l-1);f(c[0]),f(c[1]),f(c[2])}function J(t,e,s,l){M(t),M(e),M(l),M(e),M(s),M(l);const c=n.length/3,a=B.generateSideWallUV(i,n,c-6,c-3,c-2,c-1);f(a[0]),f(a[1]),f(a[3]),f(a[1]),f(a[2]),f(a[3])}function M(t){n.push(l[3*t+0]),n.push(l[3*t+1]),n.push(l[3*t+2])}function f(t){s.push(t.x),s.push(t.y)}!function(){const t=n.length/3;if(I){let t=0,e=y*t;for(let t=0;t<L;t++){const i=V[t];H(i[2]+e,i[1]+e,i[0]+e)}t=a+2*b,e=y*t;for(let t=0;t<L;t++){const i=V[t];H(i[0]+e,i[1]+e,i[2]+e)}}else{for(let t=0;t<L;t++){const e=V[t];H(e[2],e[1],e[0])}for(let t=0;t<L;t++){const e=V[t];H(e[0]+y*a,e[1]+y*a,e[2]+y*a)}}i.addGroup(t,n.length/3-t,0)}(),function(){const t=n.length/3;let e=0;v(Z,e),e+=Z.length;for(let t=0,i=p.length;t<i;t++){const i=p[t];v(i,e),e+=i.length}i.addGroup(t,n.length/3-t,1)}()}this.setAttribute("position",new Ss(n,3)),this.setAttribute("uv",new Ss(s,2)),this.computeVertexNormals()}toJSON(){const t=Ts.prototype.toJSON.call(this);return function(t,e,i){if(i.shapes=[],Array.isArray(t))for(let e=0,n=t.length;e<n;e++){const n=t[e];i.shapes.push(n.uuid)}else i.shapes.push(t.uuid);return void 0!==e.extrudePath&&(i.options.extrudePath=e.extrudePath.toJSON()),i}(this.parameters.shapes,this.parameters.options,t)}}const ZI={generateTopUV:function(t,e,i,n,s){const l=e[3*i],c=e[3*i+1],a=e[3*n],g=e[3*n+1],I=e[3*s],d=e[3*s+1];return[new Ji(l,c),new Ji(a,g),new Ji(I,d)]},generateSideWallUV:function(t,e,i,n,s,l){const c=e[3*i],a=e[3*i+1],g=e[3*i+2],I=e[3*n],d=e[3*n+1],o=e[3*n+2],r=e[3*s],b=e[3*s+1],u=e[3*s+2],B=e[3*l],F=e[3*l+1],C=e[3*l+2];return Math.abs(a-d)<.01?[new Ji(c,1-g),new Ji(I,1-o),new Ji(r,1-u),new Ji(B,1-C)]:[new Ji(a,1-g),new Ji(d,1-o),new Ji(b,1-u),new Ji(F,1-C)]}};class RI extends Tg{constructor(t=1,e=0){const i=(1+Math.sqrt(5))/2;super([-1,i,0,1,i,0,-1,-i,0,1,-i,0,0,-1,i,0,1,i,0,-1,-i,0,1,-i,i,0,-1,i,0,1,-i,0,-1,-i,0,1],[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],t,e),this.type="IcosahedronGeometry",this.parameters={radius:t,detail:e}}}class yI extends Ts{constructor(t,e=12,i=0,n=2*Math.PI){super(),this.type="LatheGeometry",this.parameters={points:t,segments:e,phiStart:i,phiLength:n},e=Math.floor(e),n=Hi.clamp(n,0,2*Math.PI);const s=[],l=[],c=[],a=1/e,g=new Oi,I=new Ji;for(let s=0;s<=e;s++){const d=i+s*a*n,o=Math.sin(d),r=Math.cos(d);for(let i=0;i<=t.length-1;i++)g.x=t[i].x*o,g.y=t[i].y,g.z=t[i].x*r,l.push(g.x,g.y,g.z),I.x=s/e,I.y=i/(t.length-1),c.push(I.x,I.y)}for(let i=0;i<e;i++)for(let e=0;e<t.length-1;e++){const n=e+i*t.length,l=n,c=n+t.length,a=n+t.length+1,g=n+1;s.push(l,c,g),s.push(c,a,g)}if(this.setIndex(s),this.setAttribute("position",new Ss(l,3)),this.setAttribute("uv",new Ss(c,2)),this.computeVertexNormals(),n===2*Math.PI){const i=this.attributes.normal.array,n=new Oi,s=new Oi,l=new Oi,c=e*t.length*3;for(let e=0,a=0;e<t.length;e++,a+=3)n.x=i[a+0],n.y=i[a+1],n.z=i[a+2],s.x=i[c+a+0],s.y=i[c+a+1],s.z=i[c+a+2],l.addVectors(n,s).normalize(),i[a+0]=i[c+a+0]=l.x,i[a+1]=i[c+a+1]=l.y,i[a+2]=i[c+a+2]=l.z}}}class LI extends Tg{constructor(t=1,e=0){super([1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],t,e),this.type="OctahedronGeometry",this.parameters={radius:t,detail:e}}}function XI(t,e,i){Ts.call(this),this.type="ParametricGeometry",this.parameters={func:t,slices:e,stacks:i};const n=[],s=[],l=[],c=[],a=1e-5,g=new Oi,I=new Oi,d=new Oi,o=new Oi,r=new Oi;t.length<3&&console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");const b=e+1;for(let n=0;n<=i;n++){const b=n/i;for(let i=0;i<=e;i++){const n=i/e;t(n,b,I),s.push(I.x,I.y,I.z),n-a>=0?(t(n-a,b,d),o.subVectors(I,d)):(t(n+a,b,d),o.subVectors(d,I)),b-a>=0?(t(n,b-a,d),r.subVectors(I,d)):(t(n,b+a,d),r.subVectors(d,I)),g.crossVectors(o,r).normalize(),l.push(g.x,g.y,g.z),c.push(n,b)}}for(let t=0;t<i;t++)for(let i=0;i<e;i++){const e=t*b+i,s=t*b+i+1,l=(t+1)*b+i+1,c=(t+1)*b+i;n.push(e,s,c),n.push(s,l,c)}this.setIndex(n),this.setAttribute("position",new Ss(s,3)),this.setAttribute("normal",new Ss(l,3)),this.setAttribute("uv",new Ss(c,2))}XI.prototype=Object.create(Ts.prototype),XI.prototype.constructor=XI;class AI extends Ts{constructor(t=.5,e=1,i=8,n=1,s=0,l=2*Math.PI){super(),this.type="RingGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:i,phiSegments:n,thetaStart:s,thetaLength:l},i=Math.max(3,i);const c=[],a=[],g=[],I=[];let d=t;const o=(e-t)/(n=Math.max(1,n)),r=new Oi,b=new Ji;for(let t=0;t<=n;t++){for(let t=0;t<=i;t++){const n=s+t/i*l;r.x=d*Math.cos(n),r.y=d*Math.sin(n),a.push(r.x,r.y,r.z),g.push(0,0,1),b.x=(r.x/e+1)/2,b.y=(r.y/e+1)/2,I.push(b.x,b.y)}d+=o}for(let t=0;t<n;t++){const e=t*(i+1);for(let t=0;t<i;t++){const n=t+e,s=n,l=n+i+1,a=n+i+2,g=n+1;c.push(s,l,g),c.push(l,a,g)}}this.setIndex(c),this.setAttribute("position",new Ss(a,3)),this.setAttribute("normal",new Ss(g,3)),this.setAttribute("uv",new Ss(I,2))}}class WI extends Ts{constructor(t,e=12){super(),this.type="ShapeGeometry",this.parameters={shapes:t,curveSegments:e};const i=[],n=[],s=[],l=[];let c=0,a=0;if(!1===Array.isArray(t))g(t);else for(let e=0;e<t.length;e++)g(t[e]),this.addGroup(c,a,e),c+=a,a=0;function g(t){const c=n.length/3,g=t.extractPoints(e);let I=g.shape;const d=g.holes;!1===mI.isClockWise(I)&&(I=I.reverse());for(let t=0,e=d.length;t<e;t++){const e=d[t];!0===mI.isClockWise(e)&&(d[t]=e.reverse())}const o=mI.triangulateShape(I,d);for(let t=0,e=d.length;t<e;t++){const e=d[t];I=I.concat(e)}for(let t=0,e=I.length;t<e;t++){const e=I[t];n.push(e.x,e.y,0),s.push(0,0,1),l.push(e.x,e.y)}for(let t=0,e=o.length;t<e;t++){const e=o[t],n=e[0]+c,s=e[1]+c,l=e[2]+c;i.push(n,s,l),a+=3}}this.setIndex(i),this.setAttribute("position",new Ss(n,3)),this.setAttribute("normal",new Ss(s,3)),this.setAttribute("uv",new Ss(l,2))}toJSON(){const t=Ts.prototype.toJSON.call(this);return function(t,e){if(e.shapes=[],Array.isArray(t))for(let i=0,n=t.length;i<n;i++){const n=t[i];e.shapes.push(n.uuid)}else e.shapes.push(t.uuid);return e}(this.parameters.shapes,t)}}class SI extends Ts{constructor(t=1,e=8,i=6,n=0,s=2*Math.PI,l=0,c=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:i,phiStart:n,phiLength:s,thetaStart:l,thetaLength:c},e=Math.max(3,Math.floor(e)),i=Math.max(2,Math.floor(i));const a=Math.min(l+c,Math.PI);let g=0;const I=[],d=new Oi,o=new Oi,r=[],b=[],u=[],B=[];for(let r=0;r<=i;r++){const F=[],C=r/i;let G=0;0==r&&0==l?G=.5/e:r==i&&a==Math.PI&&(G=-.5/e);for(let i=0;i<=e;i++){const a=i/e;d.x=-t*Math.cos(n+a*s)*Math.sin(l+C*c),d.y=t*Math.cos(l+C*c),d.z=t*Math.sin(n+a*s)*Math.sin(l+C*c),b.push(d.x,d.y,d.z),o.copy(d).normalize(),u.push(o.x,o.y,o.z),B.push(a+G,1-C),F.push(g++)}I.push(F)}for(let t=0;t<i;t++)for(let n=0;n<e;n++){const e=I[t][n+1],s=I[t][n],c=I[t+1][n],g=I[t+1][n+1];(0!==t||l>0)&&r.push(e,s,g),(t!==i-1||a<Math.PI)&&r.push(s,c,g)}this.setIndex(r),this.setAttribute("position",new Ss(b,3)),this.setAttribute("normal",new Ss(u,3)),this.setAttribute("uv",new Ss(B,2))}}class EI extends Tg{constructor(t=1,e=0){super([1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],t,e),this.type="TetrahedronGeometry",this.parameters={radius:t,detail:e}}}class NI extends VI{constructor(t,e={}){const i=e.font;if(!i||!i.isFont)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new Ts;const n=i.generateShapes(t,e.size);e.depth=void 0!==e.height?e.height:50,void 0===e.bevelThickness&&(e.bevelThickness=10),void 0===e.bevelSize&&(e.bevelSize=8),void 0===e.bevelEnabled&&(e.bevelEnabled=!1),super(n,e),this.type="TextGeometry"}}class vI extends Ts{constructor(t=1,e=.4,i=8,n=6,s=2*Math.PI){super(),this.type="TorusGeometry",this.parameters={radius:t,tube:e,radialSegments:i,tubularSegments:n,arc:s},i=Math.floor(i),n=Math.floor(n);const l=[],c=[],a=[],g=[],I=new Oi,d=new Oi,o=new Oi;for(let l=0;l<=i;l++)for(let r=0;r<=n;r++){const b=r/n*s,u=l/i*Math.PI*2;d.x=(t+e*Math.cos(u))*Math.cos(b),d.y=(t+e*Math.cos(u))*Math.sin(b),d.z=e*Math.sin(u),c.push(d.x,d.y,d.z),I.x=t*Math.cos(b),I.y=t*Math.sin(b),o.subVectors(d,I).normalize(),a.push(o.x,o.y,o.z),g.push(r/n),g.push(l/i)}for(let t=1;t<=i;t++)for(let e=1;e<=n;e++){const i=(n+1)*t+e-1,s=(n+1)*(t-1)+e-1,c=(n+1)*(t-1)+e,a=(n+1)*t+e;l.push(i,s,a),l.push(s,c,a)}this.setIndex(l),this.setAttribute("position",new Ss(c,3)),this.setAttribute("normal",new Ss(a,3)),this.setAttribute("uv",new Ss(g,2))}}class YI extends Ts{constructor(t=1,e=.4,i=64,n=8,s=2,l=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:t,tube:e,tubularSegments:i,radialSegments:n,p:s,q:l},i=Math.floor(i),n=Math.floor(n);const c=[],a=[],g=[],I=[],d=new Oi,o=new Oi,r=new Oi,b=new Oi,u=new Oi,B=new Oi,F=new Oi;for(let c=0;c<=i;++c){const G=c/i*s*Math.PI*2;C(G,s,l,t,r),C(G+.01,s,l,t,b),B.subVectors(b,r),F.addVectors(b,r),u.crossVectors(B,F),F.crossVectors(u,B),u.normalize(),F.normalize();for(let t=0;t<=n;++t){const s=t/n*Math.PI*2,l=-e*Math.cos(s),b=e*Math.sin(s);d.x=r.x+(l*F.x+b*u.x),d.y=r.y+(l*F.y+b*u.y),d.z=r.z+(l*F.z+b*u.z),a.push(d.x,d.y,d.z),o.subVectors(d,r).normalize(),g.push(o.x,o.y,o.z),I.push(c/i),I.push(t/n)}}for(let t=1;t<=i;t++)for(let e=1;e<=n;e++){const i=(n+1)*(t-1)+(e-1),s=(n+1)*t+(e-1),l=(n+1)*t+e,a=(n+1)*(t-1)+e;c.push(i,s,a),c.push(s,l,a)}function C(t,e,i,n,s){const l=Math.cos(t),c=Math.sin(t),a=i/e*t,g=Math.cos(a);s.x=n*(2+g)*.5*l,s.y=n*(2+g)*c*.5,s.z=n*Math.sin(a)*.5}this.setIndex(c),this.setAttribute("position",new Ss(a,3)),this.setAttribute("normal",new Ss(g,3)),this.setAttribute("uv",new Ss(I,2))}}class HI extends Ts{constructor(t,e=64,i=1,n=8,s=!1){super(),this.type="TubeGeometry",this.parameters={path:t,tubularSegments:e,radius:i,radialSegments:n,closed:s};const l=t.computeFrenetFrames(e,s);this.tangents=l.tangents,this.normals=l.normals,this.binormals=l.binormals;const c=new Oi,a=new Oi,g=new Ji;let I=new Oi;const d=[],o=[],r=[],b=[];function u(s){I=t.getPointAt(s/e,I);const g=l.normals[s],r=l.binormals[s];for(let t=0;t<=n;t++){const e=t/n*Math.PI*2,s=Math.sin(e),l=-Math.cos(e);a.x=l*g.x+s*r.x,a.y=l*g.y+s*r.y,a.z=l*g.z+s*r.z,a.normalize(),o.push(a.x,a.y,a.z),c.x=I.x+i*a.x,c.y=I.y+i*a.y,c.z=I.z+i*a.z,d.push(c.x,c.y,c.z)}}!function(){for(let t=0;t<e;t++)u(t);u(!1===s?e:0),function(){for(let t=0;t<=e;t++)for(let i=0;i<=n;i++)g.x=t/e,g.y=i/n,r.push(g.x,g.y)}(),function(){for(let t=1;t<=e;t++)for(let e=1;e<=n;e++){const i=(n+1)*(t-1)+(e-1),s=(n+1)*t+(e-1),l=(n+1)*t+e,c=(n+1)*(t-1)+e;b.push(i,s,c),b.push(s,l,c)}}()}(),this.setIndex(b),this.setAttribute("position",new Ss(d,3)),this.setAttribute("normal",new Ss(o,3)),this.setAttribute("uv",new Ss(r,2))}toJSON(){const t=Ts.prototype.toJSON.call(this);return t.path=this.parameters.path.toJSON(),t}}class JI extends Ts{constructor(t){if(super(),this.type="WireframeGeometry",!0===t.isGeometry)return void console.error("THREE.WireframeGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");const e=[],i=[0,0],n={},s=new Oi;if(null!==t.index){const l=t.attributes.position,c=t.index;let a=t.groups;0===a.length&&(a=[{start:0,count:c.count,materialIndex:0}]);for(let t=0,e=a.length;t<e;++t){const e=a[t],s=e.start;for(let t=s,l=s+e.count;t<l;t+=3)for(let e=0;e<3;e++){const s=c.getX(t+e),l=c.getX(t+(e+1)%3);i[0]=Math.min(s,l),i[1]=Math.max(s,l);const a=i[0]+","+i[1];void 0===n[a]&&(n[a]={index1:i[0],index2:i[1]})}}for(const t in n){const i=n[t];s.fromBufferAttribute(l,i.index1),e.push(s.x,s.y,s.z),s.fromBufferAttribute(l,i.index2),e.push(s.x,s.y,s.z)}}else{const i=t.attributes.position;for(let t=0,n=i.count/3;t<n;t++)for(let n=0;n<3;n++){const l=3*t+n;s.fromBufferAttribute(i,l),e.push(s.x,s.y,s.z);const c=3*t+(n+1)%3;s.fromBufferAttribute(i,c),e.push(s.x,s.y,s.z)}}this.setAttribute("position",new Ss(e,3))}}var MI=Object.freeze({__proto__:null,BoxGeometry:ol,BoxBufferGeometry:ol,CircleGeometry:kg,CircleBufferGeometry:kg,ConeGeometry:wg,ConeBufferGeometry:wg,CylinderGeometry:zg,CylinderBufferGeometry:zg,DodecahedronGeometry:Dg,DodecahedronBufferGeometry:Dg,EdgesGeometry:_g,ExtrudeGeometry:VI,ExtrudeBufferGeometry:VI,IcosahedronGeometry:RI,IcosahedronBufferGeometry:RI,LatheGeometry:yI,LatheBufferGeometry:yI,OctahedronGeometry:LI,OctahedronBufferGeometry:LI,ParametricGeometry:XI,ParametricBufferGeometry:XI,PlaneGeometry:yl,PlaneBufferGeometry:yl,PolyhedronGeometry:Tg,PolyhedronBufferGeometry:Tg,RingGeometry:AI,RingBufferGeometry:AI,ShapeGeometry:WI,ShapeBufferGeometry:WI,SphereGeometry:SI,SphereBufferGeometry:SI,TetrahedronGeometry:EI,TetrahedronBufferGeometry:EI,TextGeometry:NI,TextBufferGeometry:NI,TorusGeometry:vI,TorusBufferGeometry:vI,TorusKnotGeometry:YI,TorusKnotBufferGeometry:YI,TubeGeometry:HI,TubeBufferGeometry:HI,WireframeGeometry:JI});class fI extends bs{constructor(t){super(),this.type="ShadowMaterial",this.color=new Qs(0),this.transparent=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this}}fI.prototype.isShadowMaterial=!0;class kI extends Bl{constructor(t){super(t),this.type="RawShaderMaterial"}}function zI(t){bs.call(this),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new Qs(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Qs(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=ci,this.normalScale=new Ji(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.flatShading=!1,this.vertexTangents=!1,this.setValues(t)}function wI(t){zI.call(this),this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoat=0,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new Ji(1,1),this.clearcoatNormalMap=null,this.reflectivity=.5,Object.defineProperty(this,"ior",{get:function(){return(1+.4*this.reflectivity)/(1-.4*this.reflectivity)},set:function(t){this.reflectivity=Hi.clamp(2.5*(t-1)/(t+1),0,1)}}),this.sheen=null,this.transmission=0,this.transmissionMap=null,this.setValues(t)}kI.prototype.isRawShaderMaterial=!0,zI.prototype=Object.create(bs.prototype),zI.prototype.constructor=zI,zI.prototype.isMeshStandardMaterial=!0,zI.prototype.copy=function(t){return bs.prototype.copy.call(this,t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapIntensity=t.envMapIntensity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this.flatShading=t.flatShading,this.vertexTangents=t.vertexTangents,this},wI.prototype=Object.create(zI.prototype),wI.prototype.constructor=wI,wI.prototype.isMeshPhysicalMaterial=!0,wI.prototype.copy=function(t){return zI.prototype.copy.call(this,t),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=t.clearcoat,this.clearcoatMap=t.clearcoatMap,this.clearcoatRoughness=t.clearcoatRoughness,this.clearcoatRoughnessMap=t.clearcoatRoughnessMap,this.clearcoatNormalMap=t.clearcoatNormalMap,this.clearcoatNormalScale.copy(t.clearcoatNormalScale),this.reflectivity=t.reflectivity,t.sheen?this.sheen=(this.sheen||new Qs).copy(t.sheen):this.sheen=null,this.transmission=t.transmission,this.transmissionMap=t.transmissionMap,this};class TI extends bs{constructor(t){super(),this.type="MeshPhongMaterial",this.color=new Qs(16777215),this.specular=new Qs(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Qs(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=ci,this.normalScale=new Ji(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=P,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this.flatShading=t.flatShading,this}}TI.prototype.isMeshPhongMaterial=!0;class DI extends bs{constructor(t){super(),this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new Qs(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Qs(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=ci,this.normalScale=new Ji(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.gradientMap=t.gradientMap,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this}}DI.prototype.isMeshToonMaterial=!0;class KI extends bs{constructor(t){super(),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=ci,this.normalScale=new Ji(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this.flatShading=t.flatShading,this}}KI.prototype.isMeshNormalMaterial=!0;class jI extends bs{constructor(t){super(),this.type="MeshLambertMaterial",this.color=new Qs(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Qs(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=P,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this}}jI.prototype.isMeshLambertMaterial=!0;class PI extends bs{constructor(t){super(),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new Qs(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=ci,this.normalScale=new Ji(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.defines={MATCAP:""},this.color.copy(t.color),this.matcap=t.matcap,this.map=t.map,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this.flatShading=t.flatShading,this}}PI.prototype.isMeshMatcapMaterial=!0;class OI extends Qg{constructor(t){super(),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}copy(t){return super.copy(t),this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this}}OI.prototype.isLineDashedMaterial=!0;var _I=Object.freeze({__proto__:null,ShadowMaterial:fI,SpriteMaterial:Ma,RawShaderMaterial:kI,ShaderMaterial:Bl,PointsMaterial:Ag,MeshPhysicalMaterial:wI,MeshStandardMaterial:zI,MeshPhongMaterial:TI,MeshToonMaterial:DI,MeshNormalMaterial:KI,MeshLambertMaterial:jI,MeshDepthMaterial:ha,MeshDistanceMaterial:ma,MeshBasicMaterial:hs,MeshMatcapMaterial:PI,LineDashedMaterial:OI,LineBasicMaterial:Qg,Material:bs});const qI={arraySlice:function(t,e,i){return qI.isTypedArray(t)?new t.constructor(t.subarray(e,void 0!==i?i:t.length)):t.slice(e,i)},convertArray:function(t,e,i){return!t||!i&&t.constructor===e?t:"number"==typeof e.BYTES_PER_ELEMENT?new e(t):Array.prototype.slice.call(t)},isTypedArray:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)},getKeyframeOrder:function(t){const e=t.length,i=new Array(e);for(let t=0;t!==e;++t)i[t]=t;return i.sort((function(e,i){return t[e]-t[i]})),i},sortedArray:function(t,e,i){const n=t.length,s=new t.constructor(n);for(let l=0,c=0;c!==n;++l){const n=i[l]*e;for(let i=0;i!==e;++i)s[c++]=t[n+i]}return s},flattenJSON:function(t,e,i,n){let s=1,l=t[0];for(;void 0!==l&&void 0===l[n];)l=t[s++];if(void 0===l)return;let c=l[n];if(void 0!==c)if(Array.isArray(c))do{c=l[n],void 0!==c&&(e.push(l.time),i.push.apply(i,c)),l=t[s++]}while(void 0!==l);else if(void 0!==c.toArray)do{c=l[n],void 0!==c&&(e.push(l.time),c.toArray(i,i.length)),l=t[s++]}while(void 0!==l);else do{c=l[n],void 0!==c&&(e.push(l.time),i.push(c)),l=t[s++]}while(void 0!==l)},subclip:function(t,e,i,n,s=30){const l=t.clone();l.name=e;const c=[];for(let t=0;t<l.tracks.length;++t){const e=l.tracks[t],a=e.getValueSize(),g=[],I=[];for(let t=0;t<e.times.length;++t){const l=e.times[t]*s;if(!(l<i||l>=n)){g.push(e.times[t]);for(let i=0;i<a;++i)I.push(e.values[t*a+i])}}0!==g.length&&(e.times=qI.convertArray(g,e.times.constructor),e.values=qI.convertArray(I,e.values.constructor),c.push(e))}l.tracks=c;let a=1/0;for(let t=0;t<l.tracks.length;++t)a>l.tracks[t].times[0]&&(a=l.tracks[t].times[0]);for(let t=0;t<l.tracks.length;++t)l.tracks[t].shift(-1*a);return l.resetDuration(),l},makeClipAdditive:function(t,e=0,i=t,n=30){n<=0&&(n=30);const s=i.tracks.length,l=e/n;for(let e=0;e<s;++e){const n=i.tracks[e],s=n.ValueTypeName;if("bool"===s||"string"===s)continue;const c=t.tracks.find((function(t){return t.name===n.name&&t.ValueTypeName===s}));if(void 0===c)continue;let a=0;const g=n.getValueSize();n.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(a=g/3);let I=0;const d=c.getValueSize();c.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(I=d/3);const o=n.times.length-1;let r;if(l<=n.times[0]){const t=a,e=g-a;r=qI.arraySlice(n.values,t,e)}else if(l>=n.times[o]){const t=o*g+a,e=t+g-a;r=qI.arraySlice(n.values,t,e)}else{const t=n.createInterpolant(),e=a,i=g-a;t.evaluate(l),r=qI.arraySlice(t.resultBuffer,e,i)}"quaternion"===s&&(new Pi).fromArray(r).normalize().conjugate().toArray(r);const b=c.times.length;for(let t=0;t<b;++t){const e=t*d+I;if("quaternion"===s)Pi.multiplyQuaternionsFlat(c.values,e,r,0,c.values,e);else{const t=d-2*I;for(let i=0;i<t;++i)c.values[e+i]-=r[i]}}}return t.blendMode=De,t}};function $I(t,e,i,n){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=void 0!==n?n:new e.constructor(i),this.sampleValues=e,this.valueSize=i}function td(t,e,i,n){$I.call(this,t,e,i,n),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0}function ed(t,e,i,n){$I.call(this,t,e,i,n)}function id(t,e,i,n){$I.call(this,t,e,i,n)}Object.assign($I.prototype,{evaluate:function(t){const e=this.parameterPositions;let i=this._cachedIndex,n=e[i],s=e[i-1];t:{e:{let l;i:{n:if(!(t<n)){for(let l=i+2;;){if(void 0===n){if(t<s)break n;return i=e.length,this._cachedIndex=i,this.afterEnd_(i-1,t,s)}if(i===l)break;if(s=n,n=e[++i],t<n)break e}l=e.length;break i}if(t>=s)break t;{const c=e[1];t<c&&(i=2,s=c);for(let l=i-2;;){if(void 0===s)return this._cachedIndex=0,this.beforeStart_(0,t,n);if(i===l)break;if(n=s,s=e[--i-1],t>=s)break e}l=i,i=0}}for(;i<l;){const n=i+l>>>1;t<e[n]?l=n:i=n+1}if(n=e[i],s=e[i-1],void 0===s)return this._cachedIndex=0,this.beforeStart_(0,t,n);if(void 0===n)return i=e.length,this._cachedIndex=i,this.afterEnd_(i-1,s,t)}this._cachedIndex=i,this.intervalChanged_(i,s,n)}return this.interpolate_(i,s,t,n)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(t){const e=this.resultBuffer,i=this.sampleValues,n=this.valueSize,s=t*n;for(let t=0;t!==n;++t)e[t]=i[s+t];return e},interpolate_:function(){throw new Error("call to abstract method")},intervalChanged_:function(){}}),Object.assign($I.prototype,{beforeStart_:$I.prototype.copySampleValue_,afterEnd_:$I.prototype.copySampleValue_}),td.prototype=Object.assign(Object.create($I.prototype),{constructor:td,DefaultSettings_:{endingStart:ke,endingEnd:ke},intervalChanged_:function(t,e,i){const n=this.parameterPositions;let s=t-2,l=t+1,c=n[s],a=n[l];if(void 0===c)switch(this.getSettings_().endingStart){case ze:s=t,c=2*e-i;break;case we:s=n.length-2,c=e+n[s]-n[s+1];break;default:s=t,c=i}if(void 0===a)switch(this.getSettings_().endingEnd){case ze:l=t,a=2*i-e;break;case we:l=1,a=i+n[1]-n[0];break;default:l=t-1,a=e}const g=.5*(i-e),I=this.valueSize;this._weightPrev=g/(e-c),this._weightNext=g/(a-i),this._offsetPrev=s*I,this._offsetNext=l*I},interpolate_:function(t,e,i,n){const s=this.resultBuffer,l=this.sampleValues,c=this.valueSize,a=t*c,g=a-c,I=this._offsetPrev,d=this._offsetNext,o=this._weightPrev,r=this._weightNext,b=(i-e)/(n-e),u=b*b,B=u*b,F=-o*B+2*o*u-o*b,C=(1+o)*B+(-1.5-2*o)*u+(-.5+o)*b+1,G=(-1-r)*B+(1.5+r)*u+.5*b,U=r*B-r*u;for(let t=0;t!==c;++t)s[t]=F*l[I+t]+C*l[g+t]+G*l[a+t]+U*l[d+t];return s}}),ed.prototype=Object.assign(Object.create($I.prototype),{constructor:ed,interpolate_:function(t,e,i,n){const s=this.resultBuffer,l=this.sampleValues,c=this.valueSize,a=t*c,g=a-c,I=(i-e)/(n-e),d=1-I;for(let t=0;t!==c;++t)s[t]=l[g+t]*d+l[a+t]*I;return s}}),id.prototype=Object.assign(Object.create($I.prototype),{constructor:id,interpolate_:function(t){return this.copySampleValue_(t-1)}});class nd{constructor(t,e,i,n){if(void 0===t)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===e||0===e.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+t);this.name=t,this.times=qI.convertArray(e,this.TimeBufferType),this.values=qI.convertArray(i,this.ValueBufferType),this.setInterpolation(n||this.DefaultInterpolation)}static toJSON(t){const e=t.constructor;let i;if(e.toJSON!==this.toJSON)i=e.toJSON(t);else{i={name:t.name,times:qI.convertArray(t.times,Array),values:qI.convertArray(t.values,Array)};const e=t.getInterpolation();e!==t.DefaultInterpolation&&(i.interpolation=e)}return i.type=t.ValueTypeName,i}InterpolantFactoryMethodDiscrete(t){return new id(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodLinear(t){return new ed(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodSmooth(t){return new td(this.times,this.values,this.getValueSize(),t)}setInterpolation(t){let e;switch(t){case Je:e=this.InterpolantFactoryMethodDiscrete;break;case Me:e=this.InterpolantFactoryMethodLinear;break;case fe:e=this.InterpolantFactoryMethodSmooth}if(void 0===e){const e="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(t===this.DefaultInterpolation)throw new Error(e);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",e),this}return this.createInterpolant=e,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return Je;case this.InterpolantFactoryMethodLinear:return Me;case this.InterpolantFactoryMethodSmooth:return fe}}getValueSize(){return this.values.length/this.times.length}shift(t){if(0!==t){const e=this.times;for(let i=0,n=e.length;i!==n;++i)e[i]+=t}return this}scale(t){if(1!==t){const e=this.times;for(let i=0,n=e.length;i!==n;++i)e[i]*=t}return this}trim(t,e){const i=this.times,n=i.length;let s=0,l=n-1;for(;s!==n&&i[s]<t;)++s;for(;-1!==l&&i[l]>e;)--l;if(++l,0!==s||l!==n){s>=l&&(l=Math.max(l,1),s=l-1);const t=this.getValueSize();this.times=qI.arraySlice(i,s,l),this.values=qI.arraySlice(this.values,s*t,l*t)}return this}validate(){let t=!0;const e=this.getValueSize();e-Math.floor(e)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),t=!1);const i=this.times,n=this.values,s=i.length;0===s&&(console.error("THREE.KeyframeTrack: Track is empty.",this),t=!1);let l=null;for(let e=0;e!==s;e++){const n=i[e];if("number"==typeof n&&isNaN(n)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,e,n),t=!1;break}if(null!==l&&l>n){console.error("THREE.KeyframeTrack: Out of order keys.",this,e,n,l),t=!1;break}l=n}if(void 0!==n&&qI.isTypedArray(n))for(let e=0,i=n.length;e!==i;++e){const i=n[e];if(isNaN(i)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,e,i),t=!1;break}}return t}optimize(){const t=qI.arraySlice(this.times),e=qI.arraySlice(this.values),i=this.getValueSize(),n=this.getInterpolation()===fe,s=t.length-1;let l=1;for(let c=1;c<s;++c){let s=!1;const a=t[c];if(a!==t[c+1]&&(1!==c||a!==t[0]))if(n)s=!0;else{const t=c*i,n=t-i,l=t+i;for(let c=0;c!==i;++c){const i=e[t+c];if(i!==e[n+c]||i!==e[l+c]){s=!0;break}}}if(s){if(c!==l){t[l]=t[c];const n=c*i,s=l*i;for(let t=0;t!==i;++t)e[s+t]=e[n+t]}++l}}if(s>0){t[l]=t[s];for(let t=s*i,n=l*i,c=0;c!==i;++c)e[n+c]=e[t+c];++l}return l!==t.length?(this.times=qI.arraySlice(t,0,l),this.values=qI.arraySlice(e,0,l*i)):(this.times=t,this.values=e),this}clone(){const t=qI.arraySlice(this.times,0),e=qI.arraySlice(this.values,0),i=new(0,this.constructor)(this.name,t,e);return i.createInterpolant=this.createInterpolant,i}}nd.prototype.TimeBufferType=Float32Array,nd.prototype.ValueBufferType=Float32Array,nd.prototype.DefaultInterpolation=Me;class sd extends nd{}sd.prototype.ValueTypeName="bool",sd.prototype.ValueBufferType=Array,sd.prototype.DefaultInterpolation=Je,sd.prototype.InterpolantFactoryMethodLinear=void 0,sd.prototype.InterpolantFactoryMethodSmooth=void 0;class ld extends nd{}ld.prototype.ValueTypeName="color";class cd extends nd{}function ad(t,e,i,n){$I.call(this,t,e,i,n)}cd.prototype.ValueTypeName="number",ad.prototype=Object.assign(Object.create($I.prototype),{constructor:ad,interpolate_:function(t,e,i,n){const s=this.resultBuffer,l=this.sampleValues,c=this.valueSize,a=(i-e)/(n-e);let g=t*c;for(let t=g+c;g!==t;g+=4)Pi.slerpFlat(s,0,l,g-c,l,g,a);return s}});class gd extends nd{InterpolantFactoryMethodLinear(t){return new ad(this.times,this.values,this.getValueSize(),t)}}gd.prototype.ValueTypeName="quaternion",gd.prototype.DefaultInterpolation=Me,gd.prototype.InterpolantFactoryMethodSmooth=void 0;class Id extends nd{}Id.prototype.ValueTypeName="string",Id.prototype.ValueBufferType=Array,Id.prototype.DefaultInterpolation=Je,Id.prototype.InterpolantFactoryMethodLinear=void 0,Id.prototype.InterpolantFactoryMethodSmooth=void 0;class dd extends nd{}dd.prototype.ValueTypeName="vector";class od{constructor(t,e=-1,i,n=Te){this.name=t,this.tracks=i,this.duration=e,this.blendMode=n,this.uuid=Hi.generateUUID(),this.duration<0&&this.resetDuration()}static parse(t){const e=[],i=t.tracks,n=1/(t.fps||1);for(let t=0,s=i.length;t!==s;++t)e.push(rd(i[t]).scale(n));const s=new this(t.name,t.duration,e,t.blendMode);return s.uuid=t.uuid,s}static toJSON(t){const e=[],i=t.tracks,n={name:t.name,duration:t.duration,tracks:e,uuid:t.uuid,blendMode:t.blendMode};for(let t=0,n=i.length;t!==n;++t)e.push(nd.toJSON(i[t]));return n}static CreateFromMorphTargetSequence(t,e,i,n){const s=e.length,l=[];for(let t=0;t<s;t++){let c=[],a=[];c.push((t+s-1)%s,t,(t+1)%s),a.push(0,1,0);const g=qI.getKeyframeOrder(c);c=qI.sortedArray(c,1,g),a=qI.sortedArray(a,1,g),n||0!==c[0]||(c.push(s),a.push(a[0])),l.push(new cd(".morphTargetInfluences["+e[t].name+"]",c,a).scale(1/i))}return new this(t,-1,l)}static findByName(t,e){let i=t;if(!Array.isArray(t)){const e=t;i=e.geometry&&e.geometry.animations||e.animations}for(let t=0;t<i.length;t++)if(i[t].name===e)return i[t];return null}static CreateClipsFromMorphTargetSequences(t,e,i){const n={},s=/^([\w-]*?)([\d]+)$/;for(let e=0,i=t.length;e<i;e++){const i=t[e],l=i.name.match(s);if(l&&l.length>1){const t=l[1];let e=n[t];e||(n[t]=e=[]),e.push(i)}}const l=[];for(const t in n)l.push(this.CreateFromMorphTargetSequence(t,n[t],e,i));return l}static parseAnimation(t,e){if(!t)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const i=function(t,e,i,n,s){if(0!==i.length){const l=[],c=[];qI.flattenJSON(i,l,c,n),0!==l.length&&s.push(new t(e,l,c))}},n=[],s=t.name||"default",l=t.fps||30,c=t.blendMode;let a=t.length||-1;const g=t.hierarchy||[];for(let t=0;t<g.length;t++){const s=g[t].keys;if(s&&0!==s.length)if(s[0].morphTargets){const t={};let e;for(e=0;e<s.length;e++)if(s[e].morphTargets)for(let i=0;i<s[e].morphTargets.length;i++)t[s[e].morphTargets[i]]=-1;for(const i in t){const t=[],l=[];for(let n=0;n!==s[e].morphTargets.length;++n){const n=s[e];t.push(n.time),l.push(n.morphTarget===i?1:0)}n.push(new cd(".morphTargetInfluence["+i+"]",t,l))}a=t.length*(l||1)}else{const l=".bones["+e[t].name+"]";i(dd,l+".position",s,"pos",n),i(gd,l+".quaternion",s,"rot",n),i(dd,l+".scale",s,"scl",n)}}return 0===n.length?null:new this(s,a,n,c)}resetDuration(){let t=0;for(let e=0,i=this.tracks.length;e!==i;++e){const i=this.tracks[e];t=Math.max(t,i.times[i.times.length-1])}return this.duration=t,this}trim(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].trim(0,this.duration);return this}validate(){let t=!0;for(let e=0;e<this.tracks.length;e++)t=t&&this.tracks[e].validate();return t}optimize(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].optimize();return this}clone(){const t=[];for(let e=0;e<this.tracks.length;e++)t.push(this.tracks[e].clone());return new this.constructor(this.name,this.duration,t,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function rd(t){if(void 0===t.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=function(t){switch(t.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return cd;case"vector":case"vector2":case"vector3":case"vector4":return dd;case"color":return ld;case"quaternion":return gd;case"bool":case"boolean":return sd;case"string":return Id}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+t)}(t.type);if(void 0===t.times){const e=[],i=[];qI.flattenJSON(t.keys,e,i,"value"),t.times=e,t.values=i}return void 0!==e.parse?e.parse(t):new e(t.name,t.times,t.values,t.interpolation)}const bd={enabled:!1,files:{},add:function(t,e){!1!==this.enabled&&(this.files[t]=e)},get:function(t){if(!1!==this.enabled)return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}};function ud(t,e,i){const n=this;let s,l=!1,c=0,a=0;const g=[];this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=i,this.itemStart=function(t){a++,!1===l&&void 0!==n.onStart&&n.onStart(t,c,a),l=!0},this.itemEnd=function(t){c++,void 0!==n.onProgress&&n.onProgress(t,c,a),c===a&&(l=!1,void 0!==n.onLoad&&n.onLoad())},this.itemError=function(t){void 0!==n.onError&&n.onError(t)},this.resolveURL=function(t){return s?s(t):t},this.setURLModifier=function(t){return s=t,this},this.addHandler=function(t,e){return g.push(t,e),this},this.removeHandler=function(t){const e=g.indexOf(t);return-1!==e&&g.splice(e,2),this},this.getHandler=function(t){for(let e=0,i=g.length;e<i;e+=2){const i=g[e],n=g[e+1];if(i.global&&(i.lastIndex=0),i.test(t))return n}return null}}const Bd=new ud;function Fd(t){this.manager=void 0!==t?t:Bd,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}Object.assign(Fd.prototype,{load:function(){},loadAsync:function(t,e){const i=this;return new Promise((function(n,s){i.load(t,n,e,s)}))},parse:function(){},setCrossOrigin:function(t){return this.crossOrigin=t,this},setWithCredentials:function(t){return this.withCredentials=t,this},setPath:function(t){return this.path=t,this},setResourcePath:function(t){return this.resourcePath=t,this},setRequestHeader:function(t){return this.requestHeader=t,this}});const Cd={};function Gd(t){Fd.call(this,t)}Gd.prototype=Object.assign(Object.create(Fd.prototype),{constructor:Gd,load:function(t,e,i,n){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const s=this,l=bd.get(t);if(void 0!==l)return s.manager.itemStart(t),setTimeout((function(){e&&e(l),s.manager.itemEnd(t)}),0),l;if(void 0!==Cd[t])return void Cd[t].push({onLoad:e,onProgress:i,onError:n});const c=t.match(/^data:(.*?)(;base64)?,(.*)$/);let a;if(c){const i=c[1],l=!!c[2];let a=c[3];a=decodeURIComponent(a),l&&(a=atob(a));try{let n;const l=(this.responseType||"").toLowerCase();switch(l){case"arraybuffer":case"blob":const t=new Uint8Array(a.length);for(let e=0;e<a.length;e++)t[e]=a.charCodeAt(e);n="blob"===l?new Blob([t.buffer],{type:i}):t.buffer;break;case"document":const e=new DOMParser;n=e.parseFromString(a,i);break;case"json":n=JSON.parse(a);break;default:n=a}setTimeout((function(){e&&e(n),s.manager.itemEnd(t)}),0)}catch(e){setTimeout((function(){n&&n(e),s.manager.itemError(t),s.manager.itemEnd(t)}),0)}}else{Cd[t]=[],Cd[t].push({onLoad:e,onProgress:i,onError:n}),a=new XMLHttpRequest,a.open("GET",t,!0),a.addEventListener("load",(function(e){const i=this.response,n=Cd[t];if(delete Cd[t],200===this.status||0===this.status){0===this.status&&console.warn("THREE.FileLoader: HTTP Status 0 received."),bd.add(t,i);for(let t=0,e=n.length;t<e;t++){const e=n[t];e.onLoad&&e.onLoad(i)}s.manager.itemEnd(t)}else{for(let t=0,i=n.length;t<i;t++){const i=n[t];i.onError&&i.onError(e)}s.manager.itemError(t),s.manager.itemEnd(t)}}),!1),a.addEventListener("progress",(function(e){const i=Cd[t];for(let t=0,n=i.length;t<n;t++){const n=i[t];n.onProgress&&n.onProgress(e)}}),!1),a.addEventListener("error",(function(e){const i=Cd[t];delete Cd[t];for(let t=0,n=i.length;t<n;t++){const n=i[t];n.onError&&n.onError(e)}s.manager.itemError(t),s.manager.itemEnd(t)}),!1),a.addEventListener("abort",(function(e){const i=Cd[t];delete Cd[t];for(let t=0,n=i.length;t<n;t++){const n=i[t];n.onError&&n.onError(e)}s.manager.itemError(t),s.manager.itemEnd(t)}),!1),void 0!==this.responseType&&(a.responseType=this.responseType),void 0!==this.withCredentials&&(a.withCredentials=this.withCredentials),a.overrideMimeType&&a.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain");for(const t in this.requestHeader)a.setRequestHeader(t,this.requestHeader[t]);a.send(null)}return s.manager.itemStart(t),a},setResponseType:function(t){return this.responseType=t,this},setMimeType:function(t){return this.mimeType=t,this}});class Ud extends Fd{constructor(t){super(t)}load(t,e,i,n){const s=this,l=new Gd(this.manager);l.setPath(this.path),l.setRequestHeader(this.requestHeader),l.setWithCredentials(this.withCredentials),l.load(t,(function(i){try{e(s.parse(JSON.parse(i)))}catch(e){n?n(e):console.error(e),s.manager.itemError(t)}}),i,n)}parse(t){const e=[];for(let i=0;i<t.length;i++){const n=od.parse(t[i]);e.push(n)}return e}}function Qd(t){Fd.call(this,t)}Qd.prototype=Object.assign(Object.create(Fd.prototype),{constructor:Qd,load:function(t,e,i,n){const s=this,l=[],c=new Jg,a=new Gd(this.manager);a.setPath(this.path),a.setResponseType("arraybuffer"),a.setRequestHeader(this.requestHeader),a.setWithCredentials(s.withCredentials);let g=0;function I(I){a.load(t[I],(function(t){const i=s.parse(t,!0);l[I]={width:i.width,height:i.height,format:i.format,mipmaps:i.mipmaps},g+=1,6===g&&(1===i.mipmapCount&&(c.minFilter=Ut),c.image=l,c.format=i.format,c.needsUpdate=!0,e&&e(c))}),i,n)}if(Array.isArray(t))for(let e=0,i=t.length;e<i;++e)I(e);else a.load(t,(function(t){const i=s.parse(t,!0);if(i.isCubemap){const t=i.mipmaps.length/i.mipmapCount;for(let e=0;e<t;e++){l[e]={mipmaps:[]};for(let t=0;t<i.mipmapCount;t++)l[e].mipmaps.push(i.mipmaps[e*i.mipmapCount+t]),l[e].format=i.format,l[e].width=i.width,l[e].height=i.height}c.image=l}else c.image.width=i.width,c.image.height=i.height,c.mipmaps=i.mipmaps;1===i.mipmapCount&&(c.minFilter=Ut),c.format=i.format,c.needsUpdate=!0,e&&e(c)}),i,n);return c}});class hd extends Fd{constructor(t){super(t)}load(t,e,i,n){void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const s=this,l=bd.get(t);if(void 0!==l)return s.manager.itemStart(t),setTimeout((function(){e&&e(l),s.manager.itemEnd(t)}),0),l;const c=document.createElementNS("http://www.w3.org/1999/xhtml","img");function a(){c.removeEventListener("load",a,!1),c.removeEventListener("error",g,!1),bd.add(t,this),e&&e(this),s.manager.itemEnd(t)}function g(e){c.removeEventListener("load",a,!1),c.removeEventListener("error",g,!1),n&&n(e),s.manager.itemError(t),s.manager.itemEnd(t)}return c.addEventListener("load",a,!1),c.addEventListener("error",g,!1),"data:"!==t.substr(0,5)&&void 0!==this.crossOrigin&&(c.crossOrigin=this.crossOrigin),s.manager.itemStart(t),c.src=t,c}}class md extends Fd{constructor(t){super(t)}load(t,e,i,n){const s=new Ql,l=new hd(this.manager);l.setCrossOrigin(this.crossOrigin),l.setPath(this.path);let c=0;function a(i){l.load(t[i],(function(t){s.images[i]=t,c++,6===c&&(s.needsUpdate=!0,e&&e(s))}),void 0,n)}for(let e=0;e<t.length;++e)a(e);return s}}function xd(t){Fd.call(this,t)}function pd(t){Fd.call(this,t)}function Vd(){this.type="Curve",this.arcLengthDivisions=200}xd.prototype=Object.assign(Object.create(Fd.prototype),{constructor:xd,load:function(t,e,i,n){const s=this,l=new ml,c=new Gd(this.manager);return c.setResponseType("arraybuffer"),c.setRequestHeader(this.requestHeader),c.setPath(this.path),c.setWithCredentials(s.withCredentials),c.load(t,(function(t){const i=s.parse(t);i&&(void 0!==i.image?l.image=i.image:void 0!==i.data&&(l.image.width=i.width,l.image.height=i.height,l.image.data=i.data),l.wrapS=void 0!==i.wrapS?i.wrapS:rt,l.wrapT=void 0!==i.wrapT?i.wrapT:rt,l.magFilter=void 0!==i.magFilter?i.magFilter:Ut,l.minFilter=void 0!==i.minFilter?i.minFilter:Ut,l.anisotropy=void 0!==i.anisotropy?i.anisotropy:1,void 0!==i.encoding&&(l.encoding=i.encoding),void 0!==i.flipY&&(l.flipY=i.flipY),void 0!==i.format&&(l.format=i.format),void 0!==i.type&&(l.type=i.type),void 0!==i.mipmaps&&(l.mipmaps=i.mipmaps,l.minFilter=mt),1===i.mipmapCount&&(l.minFilter=Ut),l.needsUpdate=!0,e&&e(l,i))}),i,n),l}}),pd.prototype=Object.assign(Object.create(Fd.prototype),{constructor:pd,load:function(t,e,i,n){const s=new wi,l=new hd(this.manager);return l.setCrossOrigin(this.crossOrigin),l.setPath(this.path),l.load(t,(function(i){s.image=i;const n=t.search(/\.jpe?g($|\?)/i)>0||0===t.search(/^data\:image\/jpeg/);s.format=n?Yt:Ht,s.needsUpdate=!0,void 0!==e&&e(s)}),i,n),s}}),Object.assign(Vd.prototype,{getPoint:function(){return console.warn("THREE.Curve: .getPoint() not implemented."),null},getPointAt:function(t,e){const i=this.getUtoTmapping(t);return this.getPoint(i,e)},getPoints:function(t=5){const e=[];for(let i=0;i<=t;i++)e.push(this.getPoint(i/t));return e},getSpacedPoints:function(t=5){const e=[];for(let i=0;i<=t;i++)e.push(this.getPointAt(i/t));return e},getLength:function(){const t=this.getLengths();return t[t.length-1]},getLengths:function(t){if(void 0===t&&(t=this.arcLengthDivisions),this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const e=[];let i,n=this.getPoint(0),s=0;e.push(0);for(let l=1;l<=t;l++)i=this.getPoint(l/t),s+=i.distanceTo(n),e.push(s),n=i;return this.cacheArcLengths=e,e},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(t,e){const i=this.getLengths();let n=0;const s=i.length;let l;l=e||t*i[s-1];let c,a=0,g=s-1;for(;a<=g;)if(n=Math.floor(a+(g-a)/2),c=i[n]-l,c<0)a=n+1;else{if(!(c>0)){g=n;break}g=n-1}if(n=g,i[n]===l)return n/(s-1);const I=i[n];return(n+(l-I)/(i[n+1]-I))/(s-1)},getTangent:function(t,e){const i=1e-4;let n=t-i,s=t+i;n<0&&(n=0),s>1&&(s=1);const l=this.getPoint(n),c=this.getPoint(s),a=e||(l.isVector2?new Ji:new Oi);return a.copy(c).sub(l).normalize(),a},getTangentAt:function(t,e){const i=this.getUtoTmapping(t);return this.getTangent(i,e)},computeFrenetFrames:function(t,e){const i=new Oi,n=[],s=[],l=[],c=new Oi,a=new Vn;for(let e=0;e<=t;e++){const i=e/t;n[e]=this.getTangentAt(i,new Oi),n[e].normalize()}s[0]=new Oi,l[0]=new Oi;let g=Number.MAX_VALUE;const I=Math.abs(n[0].x),d=Math.abs(n[0].y),o=Math.abs(n[0].z);I<=g&&(g=I,i.set(1,0,0)),d<=g&&(g=d,i.set(0,1,0)),o<=g&&i.set(0,0,1),c.crossVectors(n[0],i).normalize(),s[0].crossVectors(n[0],c),l[0].crossVectors(n[0],s[0]);for(let e=1;e<=t;e++){if(s[e]=s[e-1].clone(),l[e]=l[e-1].clone(),c.crossVectors(n[e-1],n[e]),c.length()>Number.EPSILON){c.normalize();const t=Math.acos(Hi.clamp(n[e-1].dot(n[e]),-1,1));s[e].applyMatrix4(a.makeRotationAxis(c,t))}l[e].crossVectors(n[e],s[e])}if(!0===e){let e=Math.acos(Hi.clamp(s[0].dot(s[t]),-1,1));e/=t,n[0].dot(c.crossVectors(s[0],s[t]))>0&&(e=-e);for(let i=1;i<=t;i++)s[i].applyMatrix4(a.makeRotationAxis(n[i],e*i)),l[i].crossVectors(n[i],s[i])}return{tangents:n,normals:s,binormals:l}},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.arcLengthDivisions=t.arcLengthDivisions,this},toJSON:function(){const t={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return t.arcLengthDivisions=this.arcLengthDivisions,t.type=this.type,t},fromJSON:function(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}});class Zd extends Vd{constructor(t=0,e=0,i=1,n=1,s=0,l=2*Math.PI,c=!1,a=0){super(),this.type="EllipseCurve",this.aX=t,this.aY=e,this.xRadius=i,this.yRadius=n,this.aStartAngle=s,this.aEndAngle=l,this.aClockwise=c,this.aRotation=a}getPoint(t,e){const i=e||new Ji,n=2*Math.PI;let s=this.aEndAngle-this.aStartAngle;const l=Math.abs(s)<Number.EPSILON;for(;s<0;)s+=n;for(;s>n;)s-=n;s<Number.EPSILON&&(s=l?0:n),!0!==this.aClockwise||l||(s===n?s=-n:s-=n);const c=this.aStartAngle+t*s;let a=this.aX+this.xRadius*Math.cos(c),g=this.aY+this.yRadius*Math.sin(c);if(0!==this.aRotation){const t=Math.cos(this.aRotation),e=Math.sin(this.aRotation),i=a-this.aX,n=g-this.aY;a=i*t-n*e+this.aX,g=i*e+n*t+this.aY}return i.set(a,g)}copy(t){return super.copy(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}toJSON(){const t=super.toJSON();return t.aX=this.aX,t.aY=this.aY,t.xRadius=this.xRadius,t.yRadius=this.yRadius,t.aStartAngle=this.aStartAngle,t.aEndAngle=this.aEndAngle,t.aClockwise=this.aClockwise,t.aRotation=this.aRotation,t}fromJSON(t){return super.fromJSON(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}}Zd.prototype.isEllipseCurve=!0;class Rd extends Zd{constructor(t,e,i,n,s,l){super(t,e,i,i,n,s,l),this.type="ArcCurve"}}function yd(){let t=0,e=0,i=0,n=0;function s(s,l,c,a){t=s,e=c,i=-3*s+3*l-2*c-a,n=2*s-2*l+c+a}return{initCatmullRom:function(t,e,i,n,l){s(e,i,l*(i-t),l*(n-e))},initNonuniformCatmullRom:function(t,e,i,n,l,c,a){let g=(e-t)/l-(i-t)/(l+c)+(i-e)/c,I=(i-e)/c-(n-e)/(c+a)+(n-i)/a;g*=c,I*=c,s(e,i,g,I)},calc:function(s){const l=s*s;return t+e*s+i*l+n*(l*s)}}}Rd.prototype.isArcCurve=!0;const Ld=new Oi,Xd=new yd,Ad=new yd,Wd=new yd;class Sd extends Vd{constructor(t=[],e=!1,i="centripetal",n=.5){super(),this.type="CatmullRomCurve3",this.points=t,this.closed=e,this.curveType=i,this.tension=n}getPoint(t,e=new Oi){const i=e,n=this.points,s=n.length,l=(s-(this.closed?0:1))*t;let c,a,g=Math.floor(l),I=l-g;this.closed?g+=g>0?0:(Math.floor(Math.abs(g)/s)+1)*s:0===I&&g===s-1&&(g=s-2,I=1),this.closed||g>0?c=n[(g-1)%s]:(Ld.subVectors(n[0],n[1]).add(n[0]),c=Ld);const d=n[g%s],o=n[(g+1)%s];if(this.closed||g+2<s?a=n[(g+2)%s]:(Ld.subVectors(n[s-1],n[s-2]).add(n[s-1]),a=Ld),"centripetal"===this.curveType||"chordal"===this.curveType){const t="chordal"===this.curveType?.5:.25;let e=Math.pow(c.distanceToSquared(d),t),i=Math.pow(d.distanceToSquared(o),t),n=Math.pow(o.distanceToSquared(a),t);i<1e-4&&(i=1),e<1e-4&&(e=i),n<1e-4&&(n=i),Xd.initNonuniformCatmullRom(c.x,d.x,o.x,a.x,e,i,n),Ad.initNonuniformCatmullRom(c.y,d.y,o.y,a.y,e,i,n),Wd.initNonuniformCatmullRom(c.z,d.z,o.z,a.z,e,i,n)}else"catmullrom"===this.curveType&&(Xd.initCatmullRom(c.x,d.x,o.x,a.x,this.tension),Ad.initCatmullRom(c.y,d.y,o.y,a.y,this.tension),Wd.initCatmullRom(c.z,d.z,o.z,a.z,this.tension));return i.set(Xd.calc(I),Ad.calc(I),Wd.calc(I)),i}copy(t){super.copy(t),this.points=[];for(let e=0,i=t.points.length;e<i;e++){const i=t.points[e];this.points.push(i.clone())}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,i=this.points.length;e<i;e++){const i=this.points[e];t.points.push(i.toArray())}return t.closed=this.closed,t.curveType=this.curveType,t.tension=this.tension,t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,i=t.points.length;e<i;e++){const i=t.points[e];this.points.push((new Oi).fromArray(i))}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}}function Ed(t,e,i,n,s){const l=.5*(n-e),c=.5*(s-i),a=t*t;return(2*i-2*n+l+c)*(t*a)+(-3*i+3*n-2*l-c)*a+l*t+i}function Nd(t,e,i,n){return function(t,e){const i=1-t;return i*i*e}(t,e)+function(t,e){return 2*(1-t)*t*e}(t,i)+function(t,e){return t*t*e}(t,n)}function vd(t,e,i,n,s){return function(t,e){const i=1-t;return i*i*i*e}(t,e)+function(t,e){const i=1-t;return 3*i*i*t*e}(t,i)+function(t,e){return 3*(1-t)*t*t*e}(t,n)+function(t,e){return t*t*t*e}(t,s)}Sd.prototype.isCatmullRomCurve3=!0;class Yd extends Vd{constructor(t=new Ji,e=new Ji,i=new Ji,n=new Ji){super(),this.type="CubicBezierCurve",this.v0=t,this.v1=e,this.v2=i,this.v3=n}getPoint(t,e=new Ji){const i=e,n=this.v0,s=this.v1,l=this.v2,c=this.v3;return i.set(vd(t,n.x,s.x,l.x,c.x),vd(t,n.y,s.y,l.y,c.y)),i}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}Yd.prototype.isCubicBezierCurve=!0;class Hd extends Vd{constructor(t=new Oi,e=new Oi,i=new Oi,n=new Oi){super(),this.type="CubicBezierCurve3",this.v0=t,this.v1=e,this.v2=i,this.v3=n}getPoint(t,e=new Oi){const i=e,n=this.v0,s=this.v1,l=this.v2,c=this.v3;return i.set(vd(t,n.x,s.x,l.x,c.x),vd(t,n.y,s.y,l.y,c.y),vd(t,n.z,s.z,l.z,c.z)),i}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}Hd.prototype.isCubicBezierCurve3=!0;class Jd extends Vd{constructor(t=new Ji,e=new Ji){super(),this.type="LineCurve",this.v1=t,this.v2=e}getPoint(t,e=new Ji){const i=e;return 1===t?i.copy(this.v2):(i.copy(this.v2).sub(this.v1),i.multiplyScalar(t).add(this.v1)),i}getPointAt(t,e){return this.getPoint(t,e)}getTangent(t,e){const i=e||new Ji;return i.copy(this.v2).sub(this.v1).normalize(),i}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}Jd.prototype.isLineCurve=!0;class Md extends Vd{constructor(t=new Oi,e=new Oi){super(),this.type="LineCurve3",this.isLineCurve3=!0,this.v1=t,this.v2=e}getPoint(t,e=new Oi){const i=e;return 1===t?i.copy(this.v2):(i.copy(this.v2).sub(this.v1),i.multiplyScalar(t).add(this.v1)),i}getPointAt(t,e){return this.getPoint(t,e)}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class fd extends Vd{constructor(t=new Ji,e=new Ji,i=new Ji){super(),this.type="QuadraticBezierCurve",this.v0=t,this.v1=e,this.v2=i}getPoint(t,e=new Ji){const i=e,n=this.v0,s=this.v1,l=this.v2;return i.set(Nd(t,n.x,s.x,l.x),Nd(t,n.y,s.y,l.y)),i}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}fd.prototype.isQuadraticBezierCurve=!0;class kd extends Vd{constructor(t=new Oi,e=new Oi,i=new Oi){super(),this.type="QuadraticBezierCurve3",this.v0=t,this.v1=e,this.v2=i}getPoint(t,e=new Oi){const i=e,n=this.v0,s=this.v1,l=this.v2;return i.set(Nd(t,n.x,s.x,l.x),Nd(t,n.y,s.y,l.y),Nd(t,n.z,s.z,l.z)),i}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}kd.prototype.isQuadraticBezierCurve3=!0;class zd extends Vd{constructor(t=[]){super(),this.type="SplineCurve",this.points=t}getPoint(t,e=new Ji){const i=e,n=this.points,s=(n.length-1)*t,l=Math.floor(s),c=s-l,a=n[0===l?l:l-1],g=n[l],I=n[l>n.length-2?n.length-1:l+1],d=n[l>n.length-3?n.length-1:l+2];return i.set(Ed(c,a.x,g.x,I.x,d.x),Ed(c,a.y,g.y,I.y,d.y)),i}copy(t){super.copy(t),this.points=[];for(let e=0,i=t.points.length;e<i;e++){const i=t.points[e];this.points.push(i.clone())}return this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,i=this.points.length;e<i;e++){const i=this.points[e];t.points.push(i.toArray())}return t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,i=t.points.length;e<i;e++){const i=t.points[e];this.points.push((new Ji).fromArray(i))}return this}}zd.prototype.isSplineCurve=!0;var wd=Object.freeze({__proto__:null,ArcCurve:Rd,CatmullRomCurve3:Sd,CubicBezierCurve:Yd,CubicBezierCurve3:Hd,EllipseCurve:Zd,LineCurve:Jd,LineCurve3:Md,QuadraticBezierCurve:fd,QuadraticBezierCurve3:kd,SplineCurve:zd});class Td extends Vd{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(t){this.curves.push(t)}closePath(){const t=this.curves[0].getPoint(0),e=this.curves[this.curves.length-1].getPoint(1);t.equals(e)||this.curves.push(new Jd(e,t))}getPoint(t){const e=t*this.getLength(),i=this.getCurveLengths();let n=0;for(;n<i.length;){if(i[n]>=e){const t=i[n]-e,s=this.curves[n],l=s.getLength(),c=0===l?0:1-t/l;return s.getPointAt(c)}n++}return null}getLength(){const t=this.getCurveLengths();return t[t.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const t=[];let e=0;for(let i=0,n=this.curves.length;i<n;i++)e+=this.curves[i].getLength(),t.push(e);return this.cacheLengths=t,t}getSpacedPoints(t=40){const e=[];for(let i=0;i<=t;i++)e.push(this.getPoint(i/t));return this.autoClose&&e.push(e[0]),e}getPoints(t=12){const e=[];let i;for(let n=0,s=this.curves;n<s.length;n++){const l=s[n],c=l&&l.isEllipseCurve?2*t:l&&(l.isLineCurve||l.isLineCurve3)?1:l&&l.isSplineCurve?t*l.points.length:t,a=l.getPoints(c);for(let t=0;t<a.length;t++){const n=a[t];i&&i.equals(n)||(e.push(n),i=n)}}return this.autoClose&&e.length>1&&!e[e.length-1].equals(e[0])&&e.push(e[0]),e}copy(t){super.copy(t),this.curves=[];for(let e=0,i=t.curves.length;e<i;e++){const i=t.curves[e];this.curves.push(i.clone())}return this.autoClose=t.autoClose,this}toJSON(){const t=super.toJSON();t.autoClose=this.autoClose,t.curves=[];for(let e=0,i=this.curves.length;e<i;e++){const i=this.curves[e];t.curves.push(i.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.autoClose=t.autoClose,this.curves=[];for(let e=0,i=t.curves.length;e<i;e++){const i=t.curves[e];this.curves.push((new wd[i.type]).fromJSON(i))}return this}}class Dd extends Td{constructor(t){super(),this.type="Path",this.currentPoint=new Ji,t&&this.setFromPoints(t)}setFromPoints(t){this.moveTo(t[0].x,t[0].y);for(let e=1,i=t.length;e<i;e++)this.lineTo(t[e].x,t[e].y);return this}moveTo(t,e){return this.currentPoint.set(t,e),this}lineTo(t,e){const i=new Jd(this.currentPoint.clone(),new Ji(t,e));return this.curves.push(i),this.currentPoint.set(t,e),this}quadraticCurveTo(t,e,i,n){const s=new fd(this.currentPoint.clone(),new Ji(t,e),new Ji(i,n));return this.curves.push(s),this.currentPoint.set(i,n),this}bezierCurveTo(t,e,i,n,s,l){const c=new Yd(this.currentPoint.clone(),new Ji(t,e),new Ji(i,n),new Ji(s,l));return this.curves.push(c),this.currentPoint.set(s,l),this}splineThru(t){const e=[this.currentPoint.clone()].concat(t),i=new zd(e);return this.curves.push(i),this.currentPoint.copy(t[t.length-1]),this}arc(t,e,i,n,s,l){const c=this.currentPoint.x,a=this.currentPoint.y;return this.absarc(t+c,e+a,i,n,s,l),this}absarc(t,e,i,n,s,l){return this.absellipse(t,e,i,i,n,s,l),this}ellipse(t,e,i,n,s,l,c,a){const g=this.currentPoint.x,I=this.currentPoint.y;return this.absellipse(t+g,e+I,i,n,s,l,c,a),this}absellipse(t,e,i,n,s,l,c,a){const g=new Zd(t,e,i,n,s,l,c,a);if(this.curves.length>0){const t=g.getPoint(0);t.equals(this.currentPoint)||this.lineTo(t.x,t.y)}this.curves.push(g);const I=g.getPoint(1);return this.currentPoint.copy(I),this}copy(t){return super.copy(t),this.currentPoint.copy(t.currentPoint),this}toJSON(){const t=super.toJSON();return t.currentPoint=this.currentPoint.toArray(),t}fromJSON(t){return super.fromJSON(t),this.currentPoint.fromArray(t.currentPoint),this}}class Kd extends Dd{constructor(t){super(t),this.uuid=Hi.generateUUID(),this.type="Shape",this.holes=[]}getPointsHoles(t){const e=[];for(let i=0,n=this.holes.length;i<n;i++)e[i]=this.holes[i].getPoints(t);return e}extractPoints(t){return{shape:this.getPoints(t),holes:this.getPointsHoles(t)}}copy(t){super.copy(t),this.holes=[];for(let e=0,i=t.holes.length;e<i;e++){const i=t.holes[e];this.holes.push(i.clone())}return this}toJSON(){const t=super.toJSON();t.uuid=this.uuid,t.holes=[];for(let e=0,i=this.holes.length;e<i;e++){const i=this.holes[e];t.holes.push(i.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.uuid=t.uuid,this.holes=[];for(let e=0,i=t.holes.length;e<i;e++){const i=t.holes[e];this.holes.push((new Dd).fromJSON(i))}return this}}class jd extends On{constructor(t,e=1){super(),this.type="Light",this.color=new Qs(t),this.intensity=e}copy(t){return super.copy(t),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,void 0!==this.groundColor&&(e.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(e.object.distance=this.distance),void 0!==this.angle&&(e.object.angle=this.angle),void 0!==this.decay&&(e.object.decay=this.decay),void 0!==this.penumbra&&(e.object.penumbra=this.penumbra),void 0!==this.shadow&&(e.object.shadow=this.shadow.toJSON()),e}}jd.prototype.isLight=!0;class Pd extends jd{constructor(t,e,i){super(t,i),this.type="HemisphereLight",this.position.copy(On.DefaultUp),this.updateMatrix(),this.groundColor=new Qs(e)}copy(t){return jd.prototype.copy.call(this,t),this.groundColor.copy(t.groundColor),this}}Pd.prototype.isHemisphereLight=!0;const Od=new Vn,_d=new Oi,qd=new Oi;class $d{constructor(t){this.camera=t,this.bias=0,this.normalBias=0,this.radius=1,this.mapSize=new Ji(512,512),this.map=null,this.mapPass=null,this.matrix=new Vn,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Vl,this._frameExtents=new Ji(1,1),this._viewportCount=1,this._viewports=[new Di(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,i=this.matrix;_d.setFromMatrixPosition(t.matrixWorld),e.position.copy(_d),qd.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(qd),e.updateMatrixWorld(),Od.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Od),i.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),i.multiply(e.projectionMatrix),i.multiply(e.matrixWorldInverse)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}copy(t){return this.camera=t.camera.clone(),this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return(new this.constructor).copy(this)}toJSON(){const t={};return 0!==this.bias&&(t.bias=this.bias),0!==this.normalBias&&(t.normalBias=this.normalBias),1!==this.radius&&(t.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}class to extends $d{constructor(){super(new Cl(50,1,.5,500)),this.focus=1}updateMatrices(t){const e=this.camera,i=2*Hi.RAD2DEG*t.angle*this.focus,n=this.mapSize.width/this.mapSize.height,s=t.distance||e.far;i===e.fov&&n===e.aspect&&s===e.far||(e.fov=i,e.aspect=n,e.far=s,e.updateProjectionMatrix()),super.updateMatrices(t)}}to.prototype.isSpotLightShadow=!0;class eo extends jd{constructor(t,e,i=0,n=Math.PI/3,s=0,l=1){super(t,e),this.type="SpotLight",this.position.copy(On.DefaultUp),this.updateMatrix(),this.target=new On,this.distance=i,this.angle=n,this.penumbra=s,this.decay=l,this.shadow=new to}get power(){return this.intensity*Math.PI}set power(t){this.intensity=t/Math.PI}copy(t){return super.copy(t),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}eo.prototype.isSpotLight=!0;const io=new Vn,no=new Oi,so=new Oi;class lo extends $d{constructor(){super(new Cl(90,1,.5,500)),this._frameExtents=new Ji(4,2),this._viewportCount=6,this._viewports=[new Di(2,1,1,1),new Di(0,1,1,1),new Di(3,1,1,1),new Di(1,1,1,1),new Di(3,0,1,1),new Di(1,0,1,1)],this._cubeDirections=[new Oi(1,0,0),new Oi(-1,0,0),new Oi(0,0,1),new Oi(0,0,-1),new Oi(0,1,0),new Oi(0,-1,0)],this._cubeUps=[new Oi(0,1,0),new Oi(0,1,0),new Oi(0,1,0),new Oi(0,1,0),new Oi(0,0,1),new Oi(0,0,-1)]}updateMatrices(t,e=0){const i=this.camera,n=this.matrix;no.setFromMatrixPosition(t.matrixWorld),i.position.copy(no),so.copy(i.position),so.add(this._cubeDirections[e]),i.up.copy(this._cubeUps[e]),i.lookAt(so),i.updateMatrixWorld(),n.makeTranslation(-no.x,-no.y,-no.z),io.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse),this._frustum.setFromProjectionMatrix(io)}}lo.prototype.isPointLightShadow=!0;class co extends jd{constructor(t,e,i=0,n=1){super(t,e),this.type="PointLight",this.distance=i,this.decay=n,this.shadow=new lo}get power(){return 4*this.intensity*Math.PI}set power(t){this.intensity=t/(4*Math.PI)}copy(t){return super.copy(t),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}co.prototype.isPointLight=!0;class ao extends Fl{constructor(t=-1,e=1,i=1,n=-1,s=.1,l=2e3){super(),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=i,this.bottom=n,this.near=s,this.far=l,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=null===t.view?null:Object.assign({},t.view),this}setViewOffset(t,e,i,n,s,l){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=n,this.view.width=s,this.view.height=l,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),i=(this.right+this.left)/2,n=(this.top+this.bottom)/2;let s=i-t,l=i+t,c=n+e,a=n-e;if(null!==this.view&&this.view.enabled){const t=(this.right-this.left)/this.view.fullWidth/this.zoom,e=(this.top-this.bottom)/this.view.fullHeight/this.zoom;s+=t*this.view.offsetX,l=s+t*this.view.width,c-=e*this.view.offsetY,a=c-e*this.view.height}this.projectionMatrix.makeOrthographic(s,l,c,a,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=On.prototype.toJSON.call(this,t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,null!==this.view&&(e.object.view=Object.assign({},this.view)),e}}ao.prototype.isOrthographicCamera=!0;class go extends $d{constructor(){super(new ao(-5,5,5,-5,.5,500))}}go.prototype.isDirectionalLightShadow=!0;class Io extends jd{constructor(t,e){super(t,e),this.type="DirectionalLight",this.position.copy(On.DefaultUp),this.updateMatrix(),this.target=new On,this.shadow=new go}copy(t){return super.copy(t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}Io.prototype.isDirectionalLight=!0;class oo extends jd{constructor(t,e){super(t,e),this.type="AmbientLight"}}oo.prototype.isAmbientLight=!0;class ro extends jd{constructor(t,e,i=10,n=10){super(t,e),this.type="RectAreaLight",this.width=i,this.height=n}copy(t){return super.copy(t),this.width=t.width,this.height=t.height,this}toJSON(t){const e=super.toJSON(t);return e.object.width=this.width,e.object.height=this.height,e}}ro.prototype.isRectAreaLight=!0;class bo{constructor(){this.coefficients=[];for(let t=0;t<9;t++)this.coefficients.push(new Oi)}set(t){for(let e=0;e<9;e++)this.coefficients[e].copy(t[e]);return this}zero(){for(let t=0;t<9;t++)this.coefficients[t].set(0,0,0);return this}getAt(t,e){const i=t.x,n=t.y,s=t.z,l=this.coefficients;return e.copy(l[0]).multiplyScalar(.282095),e.addScaledVector(l[1],.488603*n),e.addScaledVector(l[2],.488603*s),e.addScaledVector(l[3],.488603*i),e.addScaledVector(l[4],i*n*1.092548),e.addScaledVector(l[5],n*s*1.092548),e.addScaledVector(l[6],.315392*(3*s*s-1)),e.addScaledVector(l[7],i*s*1.092548),e.addScaledVector(l[8],.546274*(i*i-n*n)),e}getIrradianceAt(t,e){const i=t.x,n=t.y,s=t.z,l=this.coefficients;return e.copy(l[0]).multiplyScalar(.886227),e.addScaledVector(l[1],1.023328*n),e.addScaledVector(l[2],1.023328*s),e.addScaledVector(l[3],1.023328*i),e.addScaledVector(l[4],.858086*i*n),e.addScaledVector(l[5],.858086*n*s),e.addScaledVector(l[6],.743125*s*s-.247708),e.addScaledVector(l[7],.858086*i*s),e.addScaledVector(l[8],.429043*(i*i-n*n)),e}add(t){for(let e=0;e<9;e++)this.coefficients[e].add(t.coefficients[e]);return this}addScaledSH(t,e){for(let i=0;i<9;i++)this.coefficients[i].addScaledVector(t.coefficients[i],e);return this}scale(t){for(let e=0;e<9;e++)this.coefficients[e].multiplyScalar(t);return this}lerp(t,e){for(let i=0;i<9;i++)this.coefficients[i].lerp(t.coefficients[i],e);return this}equals(t){for(let e=0;e<9;e++)if(!this.coefficients[e].equals(t.coefficients[e]))return!1;return!0}copy(t){return this.set(t.coefficients)}clone(){return(new this.constructor).copy(this)}fromArray(t,e=0){const i=this.coefficients;for(let n=0;n<9;n++)i[n].fromArray(t,e+3*n);return this}toArray(t=[],e=0){const i=this.coefficients;for(let n=0;n<9;n++)i[n].toArray(t,e+3*n);return t}static getBasisAt(t,e){const i=t.x,n=t.y,s=t.z;e[0]=.282095,e[1]=.488603*n,e[2]=.488603*s,e[3]=.488603*i,e[4]=1.092548*i*n,e[5]=1.092548*n*s,e[6]=.315392*(3*s*s-1),e[7]=1.092548*i*s,e[8]=.546274*(i*i-n*n)}}bo.prototype.isSphericalHarmonics3=!0;class uo extends jd{constructor(t=new bo,e=1){super(void 0,e),this.sh=t}copy(t){return super.copy(t),this.sh.copy(t.sh),this}fromJSON(t){return this.intensity=t.intensity,this.sh.fromArray(t.sh),this}toJSON(t){const e=super.toJSON(t);return e.object.sh=this.sh.toArray(),e}}uo.prototype.isLightProbe=!0;class Bo extends Fd{constructor(t){super(t),this.textures={}}load(t,e,i,n){const s=this,l=new Gd(s.manager);l.setPath(s.path),l.setRequestHeader(s.requestHeader),l.setWithCredentials(s.withCredentials),l.load(t,(function(i){try{e(s.parse(JSON.parse(i)))}catch(e){n?n(e):console.error(e),s.manager.itemError(t)}}),i,n)}parse(t){const e=this.textures;function i(t){return void 0===e[t]&&console.warn("THREE.MaterialLoader: Undefined texture",t),e[t]}const n=new _I[t.type];if(void 0!==t.uuid&&(n.uuid=t.uuid),void 0!==t.name&&(n.name=t.name),void 0!==t.color&&void 0!==n.color&&n.color.setHex(t.color),void 0!==t.roughness&&(n.roughness=t.roughness),void 0!==t.metalness&&(n.metalness=t.metalness),void 0!==t.sheen&&(n.sheen=(new Qs).setHex(t.sheen)),void 0!==t.emissive&&void 0!==n.emissive&&n.emissive.setHex(t.emissive),void 0!==t.specular&&void 0!==n.specular&&n.specular.setHex(t.specular),void 0!==t.shininess&&(n.shininess=t.shininess),void 0!==t.clearcoat&&(n.clearcoat=t.clearcoat),void 0!==t.clearcoatRoughness&&(n.clearcoatRoughness=t.clearcoatRoughness),void 0!==t.fog&&(n.fog=t.fog),void 0!==t.flatShading&&(n.flatShading=t.flatShading),void 0!==t.blending&&(n.blending=t.blending),void 0!==t.combine&&(n.combine=t.combine),void 0!==t.side&&(n.side=t.side),void 0!==t.opacity&&(n.opacity=t.opacity),void 0!==t.transparent&&(n.transparent=t.transparent),void 0!==t.alphaTest&&(n.alphaTest=t.alphaTest),void 0!==t.depthTest&&(n.depthTest=t.depthTest),void 0!==t.depthWrite&&(n.depthWrite=t.depthWrite),void 0!==t.colorWrite&&(n.colorWrite=t.colorWrite),void 0!==t.stencilWrite&&(n.stencilWrite=t.stencilWrite),void 0!==t.stencilWriteMask&&(n.stencilWriteMask=t.stencilWriteMask),void 0!==t.stencilFunc&&(n.stencilFunc=t.stencilFunc),void 0!==t.stencilRef&&(n.stencilRef=t.stencilRef),void 0!==t.stencilFuncMask&&(n.stencilFuncMask=t.stencilFuncMask),void 0!==t.stencilFail&&(n.stencilFail=t.stencilFail),void 0!==t.stencilZFail&&(n.stencilZFail=t.stencilZFail),void 0!==t.stencilZPass&&(n.stencilZPass=t.stencilZPass),void 0!==t.wireframe&&(n.wireframe=t.wireframe),void 0!==t.wireframeLinewidth&&(n.wireframeLinewidth=t.wireframeLinewidth),void 0!==t.wireframeLinecap&&(n.wireframeLinecap=t.wireframeLinecap),void 0!==t.wireframeLinejoin&&(n.wireframeLinejoin=t.wireframeLinejoin),void 0!==t.rotation&&(n.rotation=t.rotation),1!==t.linewidth&&(n.linewidth=t.linewidth),void 0!==t.dashSize&&(n.dashSize=t.dashSize),void 0!==t.gapSize&&(n.gapSize=t.gapSize),void 0!==t.scale&&(n.scale=t.scale),void 0!==t.polygonOffset&&(n.polygonOffset=t.polygonOffset),void 0!==t.polygonOffsetFactor&&(n.polygonOffsetFactor=t.polygonOffsetFactor),void 0!==t.polygonOffsetUnits&&(n.polygonOffsetUnits=t.polygonOffsetUnits),void 0!==t.skinning&&(n.skinning=t.skinning),void 0!==t.morphTargets&&(n.morphTargets=t.morphTargets),void 0!==t.morphNormals&&(n.morphNormals=t.morphNormals),void 0!==t.dithering&&(n.dithering=t.dithering),void 0!==t.vertexTangents&&(n.vertexTangents=t.vertexTangents),void 0!==t.visible&&(n.visible=t.visible),void 0!==t.toneMapped&&(n.toneMapped=t.toneMapped),void 0!==t.userData&&(n.userData=t.userData),void 0!==t.vertexColors&&("number"==typeof t.vertexColors?n.vertexColors=t.vertexColors>0:n.vertexColors=t.vertexColors),void 0!==t.uniforms)for(const e in t.uniforms){const s=t.uniforms[e];switch(n.uniforms[e]={},s.type){case"t":n.uniforms[e].value=i(s.value);break;case"c":n.uniforms[e].value=(new Qs).setHex(s.value);break;case"v2":n.uniforms[e].value=(new Ji).fromArray(s.value);break;case"v3":n.uniforms[e].value=(new Oi).fromArray(s.value);break;case"v4":n.uniforms[e].value=(new Di).fromArray(s.value);break;case"m3":n.uniforms[e].value=(new Mi).fromArray(s.value);break;case"m4":n.uniforms[e].value=(new Vn).fromArray(s.value);break;default:n.uniforms[e].value=s.value}}if(void 0!==t.defines&&(n.defines=t.defines),void 0!==t.vertexShader&&(n.vertexShader=t.vertexShader),void 0!==t.fragmentShader&&(n.fragmentShader=t.fragmentShader),void 0!==t.extensions)for(const e in t.extensions)n.extensions[e]=t.extensions[e];if(void 0!==t.shading&&(n.flatShading=1===t.shading),void 0!==t.size&&(n.size=t.size),void 0!==t.sizeAttenuation&&(n.sizeAttenuation=t.sizeAttenuation),void 0!==t.map&&(n.map=i(t.map)),void 0!==t.matcap&&(n.matcap=i(t.matcap)),void 0!==t.alphaMap&&(n.alphaMap=i(t.alphaMap)),void 0!==t.bumpMap&&(n.bumpMap=i(t.bumpMap)),void 0!==t.bumpScale&&(n.bumpScale=t.bumpScale),void 0!==t.normalMap&&(n.normalMap=i(t.normalMap)),void 0!==t.normalMapType&&(n.normalMapType=t.normalMapType),void 0!==t.normalScale){let e=t.normalScale;!1===Array.isArray(e)&&(e=[e,e]),n.normalScale=(new Ji).fromArray(e)}return void 0!==t.displacementMap&&(n.displacementMap=i(t.displacementMap)),void 0!==t.displacementScale&&(n.displacementScale=t.displacementScale),void 0!==t.displacementBias&&(n.displacementBias=t.displacementBias),void 0!==t.roughnessMap&&(n.roughnessMap=i(t.roughnessMap)),void 0!==t.metalnessMap&&(n.metalnessMap=i(t.metalnessMap)),void 0!==t.emissiveMap&&(n.emissiveMap=i(t.emissiveMap)),void 0!==t.emissiveIntensity&&(n.emissiveIntensity=t.emissiveIntensity),void 0!==t.specularMap&&(n.specularMap=i(t.specularMap)),void 0!==t.envMap&&(n.envMap=i(t.envMap)),void 0!==t.envMapIntensity&&(n.envMapIntensity=t.envMapIntensity),void 0!==t.reflectivity&&(n.reflectivity=t.reflectivity),void 0!==t.refractionRatio&&(n.refractionRatio=t.refractionRatio),void 0!==t.lightMap&&(n.lightMap=i(t.lightMap)),void 0!==t.lightMapIntensity&&(n.lightMapIntensity=t.lightMapIntensity),void 0!==t.aoMap&&(n.aoMap=i(t.aoMap)),void 0!==t.aoMapIntensity&&(n.aoMapIntensity=t.aoMapIntensity),void 0!==t.gradientMap&&(n.gradientMap=i(t.gradientMap)),void 0!==t.clearcoatMap&&(n.clearcoatMap=i(t.clearcoatMap)),void 0!==t.clearcoatRoughnessMap&&(n.clearcoatRoughnessMap=i(t.clearcoatRoughnessMap)),void 0!==t.clearcoatNormalMap&&(n.clearcoatNormalMap=i(t.clearcoatNormalMap)),void 0!==t.clearcoatNormalScale&&(n.clearcoatNormalScale=(new Ji).fromArray(t.clearcoatNormalScale)),void 0!==t.transmission&&(n.transmission=t.transmission),void 0!==t.transmissionMap&&(n.transmissionMap=i(t.transmissionMap)),n}setTextures(t){return this.textures=t,this}}const Fo={decodeText:function(t){if("undefined"!=typeof TextDecoder)return(new TextDecoder).decode(t);let e="";for(let i=0,n=t.length;i<n;i++)e+=String.fromCharCode(t[i]);try{return decodeURIComponent(escape(e))}catch(t){return e}},extractUrlBase:function(t){const e=t.lastIndexOf("/");return-1===e?"./":t.substr(0,e+1)}};function Co(){Ts.call(this),this.type="InstancedBufferGeometry",this.instanceCount=1/0}function Go(t,e,i,n){"number"==typeof i&&(n=i,i=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),ps.call(this,t,e,i),this.meshPerAttribute=n||1}Co.prototype=Object.assign(Object.create(Ts.prototype),{constructor:Co,isInstancedBufferGeometry:!0,copy:function(t){return Ts.prototype.copy.call(this,t),this.instanceCount=t.instanceCount,this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){const t=Ts.prototype.toJSON.call(this);return t.instanceCount=this.instanceCount,t.isInstancedBufferGeometry=!0,t}}),Go.prototype=Object.assign(Object.create(ps.prototype),{constructor:Go,isInstancedBufferAttribute:!0,copy:function(t){return ps.prototype.copy.call(this,t),this.meshPerAttribute=t.meshPerAttribute,this},toJSON:function(){const t=ps.prototype.toJSON.call(this);return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}});class Uo extends Fd{constructor(t){super(t)}load(t,e,i,n){const s=this,l=new Gd(s.manager);l.setPath(s.path),l.setRequestHeader(s.requestHeader),l.setWithCredentials(s.withCredentials),l.load(t,(function(i){try{e(s.parse(JSON.parse(i)))}catch(e){n?n(e):console.error(e),s.manager.itemError(t)}}),i,n)}parse(t){const e={},i={};function n(t,n){if(void 0!==e[n])return e[n];const s=t.interleavedBuffers[n],l=function(t,e){if(void 0!==i[e])return i[e];const n=t.arrayBuffers[e],s=new Uint32Array(n).buffer;return i[e]=s,s}(t,s.buffer),c=new Ya(Ys(s.type,l),s.stride);return c.uuid=s.uuid,e[n]=c,c}const s=t.isInstancedBufferGeometry?new Co:new Ts,l=t.data.index;if(void 0!==l){const t=Ys(l.type,l.array);s.setIndex(new ps(t,1))}const c=t.data.attributes;for(const e in c){const i=c[e];let l;if(i.isInterleavedBufferAttribute)l=new Ja(n(t.data,i.data),i.itemSize,i.offset,i.normalized);else{const t=Ys(i.type,i.array);l=new(i.isInstancedBufferAttribute?Go:ps)(t,i.itemSize,i.normalized)}void 0!==i.name&&(l.name=i.name),s.setAttribute(e,l)}const a=t.data.morphAttributes;if(a)for(const e in a){const i=a[e],l=[];for(let e=0,s=i.length;e<s;e++){const s=i[e];let c;c=s.isInterleavedBufferAttribute?new Ja(n(t.data,s.data),s.itemSize,s.offset,s.normalized):new ps(Ys(s.type,s.array),s.itemSize,s.normalized),void 0!==s.name&&(c.name=s.name),l.push(c)}s.morphAttributes[e]=l}t.data.morphTargetsRelative&&(s.morphTargetsRelative=!0);const g=t.data.groups||t.data.drawcalls||t.data.offsets;if(void 0!==g)for(let t=0,e=g.length;t!==e;++t){const e=g[t];s.addGroup(e.start,e.count,e.materialIndex)}const I=t.data.boundingSphere;if(void 0!==I){const t=new Oi;void 0!==I.center&&t.fromArray(I.center),s.boundingSphere=new Fn(t,I.radius)}return t.name&&(s.name=t.name),t.userData&&(s.userData=t.userData),s}}class Qo extends Fd{constructor(t){super(t)}load(t,e,i,n){const s=this,l=""===this.path?Fo.extractUrlBase(t):this.path;this.resourcePath=this.resourcePath||l;const c=new Gd(this.manager);c.setPath(this.path),c.setRequestHeader(this.requestHeader),c.setWithCredentials(this.withCredentials),c.load(t,(function(i){let l=null;try{l=JSON.parse(i)}catch(e){return void 0!==n&&n(e),void console.error("THREE:ObjectLoader: Can't parse "+t+".",e.message)}const c=l.metadata;void 0!==c&&void 0!==c.type&&"geometry"!==c.type.toLowerCase()?s.parse(l,e):console.error("THREE.ObjectLoader: Can't load "+t)}),i,n)}parse(t,e){const i=this.parseAnimations(t.animations),n=this.parseShapes(t.shapes),s=this.parseGeometries(t.geometries,n),l=this.parseImages(t.images,(function(){void 0!==e&&e(g)})),c=this.parseTextures(t.textures,l),a=this.parseMaterials(t.materials,c),g=this.parseObject(t.object,s,a,i),I=this.parseSkeletons(t.skeletons,g);if(this.bindSkeletons(g,I),void 0!==e){let t=!1;for(const e in l)if(l[e]instanceof HTMLImageElement){t=!0;break}!1===t&&e(g)}return g}parseShapes(t){const e={};if(void 0!==t)for(let i=0,n=t.length;i<n;i++){const n=(new Kd).fromJSON(t[i]);e[n.uuid]=n}return e}parseSkeletons(t,e){const i={},n={};if(e.traverse((function(t){t.isBone&&(n[t.uuid]=t)})),void 0!==t)for(let e=0,s=t.length;e<s;e++){const s=(new ug).fromJSON(t[e],n);i[s.uuid]=s}return i}parseGeometries(t,e){const i={};let n;if(void 0!==t){const s=new Uo;for(let l=0,c=t.length;l<c;l++){let c;const a=t[l];switch(a.type){case"PlaneGeometry":case"PlaneBufferGeometry":c=new MI[a.type](a.width,a.height,a.widthSegments,a.heightSegments);break;case"BoxGeometry":case"BoxBufferGeometry":c=new MI[a.type](a.width,a.height,a.depth,a.widthSegments,a.heightSegments,a.depthSegments);break;case"CircleGeometry":case"CircleBufferGeometry":c=new MI[a.type](a.radius,a.segments,a.thetaStart,a.thetaLength);break;case"CylinderGeometry":case"CylinderBufferGeometry":c=new MI[a.type](a.radiusTop,a.radiusBottom,a.height,a.radialSegments,a.heightSegments,a.openEnded,a.thetaStart,a.thetaLength);break;case"ConeGeometry":case"ConeBufferGeometry":c=new MI[a.type](a.radius,a.height,a.radialSegments,a.heightSegments,a.openEnded,a.thetaStart,a.thetaLength);break;case"SphereGeometry":case"SphereBufferGeometry":c=new MI[a.type](a.radius,a.widthSegments,a.heightSegments,a.phiStart,a.phiLength,a.thetaStart,a.thetaLength);break;case"DodecahedronGeometry":case"DodecahedronBufferGeometry":case"IcosahedronGeometry":case"IcosahedronBufferGeometry":case"OctahedronGeometry":case"OctahedronBufferGeometry":case"TetrahedronGeometry":case"TetrahedronBufferGeometry":c=new MI[a.type](a.radius,a.detail);break;case"RingGeometry":case"RingBufferGeometry":c=new MI[a.type](a.innerRadius,a.outerRadius,a.thetaSegments,a.phiSegments,a.thetaStart,a.thetaLength);break;case"TorusGeometry":case"TorusBufferGeometry":c=new MI[a.type](a.radius,a.tube,a.radialSegments,a.tubularSegments,a.arc);break;case"TorusKnotGeometry":case"TorusKnotBufferGeometry":c=new MI[a.type](a.radius,a.tube,a.tubularSegments,a.radialSegments,a.p,a.q);break;case"TubeGeometry":case"TubeBufferGeometry":c=new MI[a.type]((new wd[a.path.type]).fromJSON(a.path),a.tubularSegments,a.radius,a.radialSegments,a.closed);break;case"LatheGeometry":case"LatheBufferGeometry":c=new MI[a.type](a.points,a.segments,a.phiStart,a.phiLength);break;case"PolyhedronGeometry":case"PolyhedronBufferGeometry":c=new MI[a.type](a.vertices,a.indices,a.radius,a.details);break;case"ShapeGeometry":case"ShapeBufferGeometry":n=[];for(let t=0,i=a.shapes.length;t<i;t++){const i=e[a.shapes[t]];n.push(i)}c=new MI[a.type](n,a.curveSegments);break;case"ExtrudeGeometry":case"ExtrudeBufferGeometry":n=[];for(let t=0,i=a.shapes.length;t<i;t++){const i=e[a.shapes[t]];n.push(i)}const t=a.options.extrudePath;void 0!==t&&(a.options.extrudePath=(new wd[t.type]).fromJSON(t)),c=new MI[a.type](n,a.options);break;case"BufferGeometry":case"InstancedBufferGeometry":c=s.parse(a);break;case"Geometry":console.error('THREE.ObjectLoader: Loading "Geometry" is not supported anymore.');break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+a.type+'"');continue}c.uuid=a.uuid,void 0!==a.name&&(c.name=a.name),!0===c.isBufferGeometry&&void 0!==a.userData&&(c.userData=a.userData),i[a.uuid]=c}}return i}parseMaterials(t,e){const i={},n={};if(void 0!==t){const s=new Bo;s.setTextures(e);for(let e=0,l=t.length;e<l;e++){const l=t[e];if("MultiMaterial"===l.type){const t=[];for(let e=0;e<l.materials.length;e++){const n=l.materials[e];void 0===i[n.uuid]&&(i[n.uuid]=s.parse(n)),t.push(i[n.uuid])}n[l.uuid]=t}else void 0===i[l.uuid]&&(i[l.uuid]=s.parse(l)),n[l.uuid]=i[l.uuid]}}return n}parseAnimations(t){const e={};if(void 0!==t)for(let i=0;i<t.length;i++){const n=t[i],s=od.parse(n);e[s.uuid]=s}return e}parseImages(t,e){const i=this,n={};let s;function l(t){if("string"==typeof t){const e=t;return function(t){return i.manager.itemStart(t),s.load(t,(function(){i.manager.itemEnd(t)}),void 0,(function(){i.manager.itemError(t),i.manager.itemEnd(t)}))}(/^(\/\/)|([a-z]+:(\/\/)?)/i.test(e)?e:i.resourcePath+e)}return t.data?{data:Ys(t.type,t.data),width:t.width,height:t.height}:null}if(void 0!==t&&t.length>0){const i=new ud(e);s=new hd(i),s.setCrossOrigin(this.crossOrigin);for(let e=0,i=t.length;e<i;e++){const i=t[e],s=i.url;if(Array.isArray(s)){n[i.uuid]=[];for(let t=0,e=s.length;t<e;t++){const e=l(s[t]);null!==e&&(e instanceof HTMLImageElement?n[i.uuid].push(e):n[i.uuid].push(new ml(e.data,e.width,e.height)))}}else{const t=l(i.url);null!==t&&(n[i.uuid]=t)}}}return n}parseTextures(t,e){function i(t,e){return"number"==typeof t?t:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",t),e[t])}const n={};if(void 0!==t)for(let s=0,l=t.length;s<l;s++){const l=t[s];let c;void 0===l.image&&console.warn('THREE.ObjectLoader: No "image" specified for',l.uuid),void 0===e[l.image]&&console.warn("THREE.ObjectLoader: Undefined image",l.image);const a=e[l.image];Array.isArray(a)?(c=new Ql(a),6===a.length&&(c.needsUpdate=!0)):(c=a&&a.data?new ml(a.data,a.width,a.height):new wi(a),a&&(c.needsUpdate=!0)),c.uuid=l.uuid,void 0!==l.name&&(c.name=l.name),void 0!==l.mapping&&(c.mapping=i(l.mapping,ho)),void 0!==l.offset&&c.offset.fromArray(l.offset),void 0!==l.repeat&&c.repeat.fromArray(l.repeat),void 0!==l.center&&c.center.fromArray(l.center),void 0!==l.rotation&&(c.rotation=l.rotation),void 0!==l.wrap&&(c.wrapS=i(l.wrap[0],mo),c.wrapT=i(l.wrap[1],mo)),void 0!==l.format&&(c.format=l.format),void 0!==l.type&&(c.type=l.type),void 0!==l.encoding&&(c.encoding=l.encoding),void 0!==l.minFilter&&(c.minFilter=i(l.minFilter,xo)),void 0!==l.magFilter&&(c.magFilter=i(l.magFilter,xo)),void 0!==l.anisotropy&&(c.anisotropy=l.anisotropy),void 0!==l.flipY&&(c.flipY=l.flipY),void 0!==l.premultiplyAlpha&&(c.premultiplyAlpha=l.premultiplyAlpha),void 0!==l.unpackAlignment&&(c.unpackAlignment=l.unpackAlignment),n[l.uuid]=c}return n}parseObject(t,e,i,n){let s,l,c;function a(t){return void 0===e[t]&&console.warn("THREE.ObjectLoader: Undefined geometry",t),e[t]}function g(t){if(void 0!==t){if(Array.isArray(t)){const e=[];for(let n=0,s=t.length;n<s;n++){const s=t[n];void 0===i[s]&&console.warn("THREE.ObjectLoader: Undefined material",s),e.push(i[s])}return e}return void 0===i[t]&&console.warn("THREE.ObjectLoader: Undefined material",t),i[t]}}switch(t.type){case"Scene":s=new va,void 0!==t.background&&Number.isInteger(t.background)&&(s.background=new Qs(t.background)),void 0!==t.fog&&("Fog"===t.fog.type?s.fog=new Na(t.fog.color,t.fog.near,t.fog.far):"FogExp2"===t.fog.type&&(s.fog=new Ea(t.fog.color,t.fog.density)));break;case"PerspectiveCamera":s=new Cl(t.fov,t.aspect,t.near,t.far),void 0!==t.focus&&(s.focus=t.focus),void 0!==t.zoom&&(s.zoom=t.zoom),void 0!==t.filmGauge&&(s.filmGauge=t.filmGauge),void 0!==t.filmOffset&&(s.filmOffset=t.filmOffset),void 0!==t.view&&(s.view=Object.assign({},t.view));break;case"OrthographicCamera":s=new ao(t.left,t.right,t.top,t.bottom,t.near,t.far),void 0!==t.zoom&&(s.zoom=t.zoom),void 0!==t.view&&(s.view=Object.assign({},t.view));break;case"AmbientLight":s=new oo(t.color,t.intensity);break;case"DirectionalLight":s=new Io(t.color,t.intensity);break;case"PointLight":s=new co(t.color,t.intensity,t.distance,t.decay);break;case"RectAreaLight":s=new ro(t.color,t.intensity,t.width,t.height);break;case"SpotLight":s=new eo(t.color,t.intensity,t.distance,t.angle,t.penumbra,t.decay);break;case"HemisphereLight":s=new Pd(t.color,t.groundColor,t.intensity);break;case"LightProbe":s=(new uo).fromJSON(t);break;case"SkinnedMesh":l=a(t.geometry),c=g(t.material),s=new dg(l,c),void 0!==t.bindMode&&(s.bindMode=t.bindMode),void 0!==t.bindMatrix&&s.bindMatrix.fromArray(t.bindMatrix),void 0!==t.skeleton&&(s.skeleton=t.skeleton);break;case"Mesh":l=a(t.geometry),c=g(t.material),s=new Il(l,c);break;case"InstancedMesh":l=a(t.geometry),c=g(t.material);const e=t.count,i=t.instanceMatrix;s=new Ug(l,c,e),s.instanceMatrix=new ps(new Float32Array(i.array),16);break;case"LOD":s=new sg;break;case"Line":s=new Zg(a(t.geometry),g(t.material));break;case"LineLoop":s=new Xg(a(t.geometry),g(t.material));break;case"LineSegments":s=new Lg(a(t.geometry),g(t.material));break;case"PointCloud":case"Points":s=new vg(a(t.geometry),g(t.material));break;case"Sprite":s=new tg(g(t.material));break;case"Group":s=new ya;break;case"Bone":s=new og;break;default:s=new On}if(s.uuid=t.uuid,void 0!==t.name&&(s.name=t.name),void 0!==t.matrix?(s.matrix.fromArray(t.matrix),void 0!==t.matrixAutoUpdate&&(s.matrixAutoUpdate=t.matrixAutoUpdate),s.matrixAutoUpdate&&s.matrix.decompose(s.position,s.quaternion,s.scale)):(void 0!==t.position&&s.position.fromArray(t.position),void 0!==t.rotation&&s.rotation.fromArray(t.rotation),void 0!==t.quaternion&&s.quaternion.fromArray(t.quaternion),void 0!==t.scale&&s.scale.fromArray(t.scale)),void 0!==t.castShadow&&(s.castShadow=t.castShadow),void 0!==t.receiveShadow&&(s.receiveShadow=t.receiveShadow),t.shadow&&(void 0!==t.shadow.bias&&(s.shadow.bias=t.shadow.bias),void 0!==t.shadow.normalBias&&(s.shadow.normalBias=t.shadow.normalBias),void 0!==t.shadow.radius&&(s.shadow.radius=t.shadow.radius),void 0!==t.shadow.mapSize&&s.shadow.mapSize.fromArray(t.shadow.mapSize),void 0!==t.shadow.camera&&(s.shadow.camera=this.parseObject(t.shadow.camera))),void 0!==t.visible&&(s.visible=t.visible),void 0!==t.frustumCulled&&(s.frustumCulled=t.frustumCulled),void 0!==t.renderOrder&&(s.renderOrder=t.renderOrder),void 0!==t.userData&&(s.userData=t.userData),void 0!==t.layers&&(s.layers.mask=t.layers),void 0!==t.children){const l=t.children;for(let t=0;t<l.length;t++)s.add(this.parseObject(l[t],e,i,n))}if(void 0!==t.animations){const e=t.animations;for(let t=0;t<e.length;t++){const i=e[t];s.animations.push(n[i])}}if("LOD"===t.type){void 0!==t.autoUpdate&&(s.autoUpdate=t.autoUpdate);const e=t.levels;for(let t=0;t<e.length;t++){const i=e[t],n=s.getObjectByProperty("uuid",i.object);void 0!==n&&s.addLevel(n,i.distance)}}return s}bindSkeletons(t,e){0!==Object.keys(e).length&&t.traverse((function(t){if(!0===t.isSkinnedMesh&&void 0!==t.skeleton){const i=e[t.skeleton];void 0===i?console.warn("THREE.ObjectLoader: No skeleton found with UUID:",t.skeleton):t.bind(i,t.bindMatrix)}}))}setTexturePath(t){return console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath()."),this.setResourcePath(t)}}const ho={UVMapping:st,CubeReflectionMapping:lt,CubeRefractionMapping:ct,EquirectangularReflectionMapping:at,EquirectangularRefractionMapping:gt,CubeUVReflectionMapping:It,CubeUVRefractionMapping:dt},mo={RepeatWrapping:ot,ClampToEdgeWrapping:rt,MirroredRepeatWrapping:bt},xo={NearestFilter:ut,NearestMipmapNearestFilter:Bt,NearestMipmapLinearFilter:Ct,LinearFilter:Ut,LinearMipmapNearestFilter:Qt,LinearMipmapLinearFilter:mt};function po(t){"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),Fd.call(this,t),this.options={premultiplyAlpha:"none"}}po.prototype=Object.assign(Object.create(Fd.prototype),{constructor:po,isImageBitmapLoader:!0,setOptions:function(t){return this.options=t,this},load:function(t,e,i,n){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const s=this,l=bd.get(t);if(void 0!==l)return s.manager.itemStart(t),setTimeout((function(){e&&e(l),s.manager.itemEnd(t)}),0),l;const c={};c.credentials="anonymous"===this.crossOrigin?"same-origin":"include",c.headers=this.requestHeader,fetch(t,c).then((function(t){return t.blob()})).then((function(t){return createImageBitmap(t,Object.assign(s.options,{colorSpaceConversion:"none"}))})).then((function(i){bd.add(t,i),e&&e(i),s.manager.itemEnd(t)})).catch((function(e){n&&n(e),s.manager.itemError(t),s.manager.itemEnd(t)})),s.manager.itemStart(t)}});class Vo{constructor(){this.type="ShapePath",this.color=new Qs,this.subPaths=[],this.currentPath=null}moveTo(t,e){return this.currentPath=new Dd,this.subPaths.push(this.currentPath),this.currentPath.moveTo(t,e),this}lineTo(t,e){return this.currentPath.lineTo(t,e),this}quadraticCurveTo(t,e,i,n){return this.currentPath.quadraticCurveTo(t,e,i,n),this}bezierCurveTo(t,e,i,n,s,l){return this.currentPath.bezierCurveTo(t,e,i,n,s,l),this}splineThru(t){return this.currentPath.splineThru(t),this}toShapes(t,e){function i(t){const e=[];for(let i=0,n=t.length;i<n;i++){const n=t[i],s=new Kd;s.curves=n.curves,e.push(s)}return e}function n(t,e){const i=e.length;let n=!1;for(let s=i-1,l=0;l<i;s=l++){let i=e[s],c=e[l],a=c.x-i.x,g=c.y-i.y;if(Math.abs(g)>Number.EPSILON){if(g<0&&(i=e[l],a=-a,c=e[s],g=-g),t.y<i.y||t.y>c.y)continue;if(t.y===i.y){if(t.x===i.x)return!0}else{const e=g*(t.x-i.x)-a*(t.y-i.y);if(0===e)return!0;if(e<0)continue;n=!n}}else{if(t.y!==i.y)continue;if(c.x<=t.x&&t.x<=i.x||i.x<=t.x&&t.x<=c.x)return!0}}return n}const s=mI.isClockWise,l=this.subPaths;if(0===l.length)return[];if(!0===e)return i(l);let c,a,g;const I=[];if(1===l.length)return a=l[0],g=new Kd,g.curves=a.curves,I.push(g),I;let d=!s(l[0].getPoints());d=t?!d:d;const o=[],r=[];let b,u,B=[],F=0;r[F]=void 0,B[F]=[];for(let e=0,i=l.length;e<i;e++)a=l[e],b=a.getPoints(),c=s(b),c=t?!c:c,c?(!d&&r[F]&&F++,r[F]={s:new Kd,p:b},r[F].s.curves=a.curves,d&&F++,B[F]=[]):B[F].push({h:a,p:b[0]});if(!r[0])return i(l);if(r.length>1){let t=!1;const e=[];for(let t=0,e=r.length;t<e;t++)o[t]=[];for(let i=0,s=r.length;i<s;i++){const s=B[i];for(let l=0;l<s.length;l++){const c=s[l];let a=!0;for(let s=0;s<r.length;s++)n(c.p,r[s].p)&&(i!==s&&e.push({froms:i,tos:s,hole:l}),a?(a=!1,o[s].push(c)):t=!0);a&&o[i].push(c)}}e.length>0&&(t||(B=o))}for(let t=0,e=r.length;t<e;t++){g=r[t].s,I.push(g),u=B[t];for(let t=0,e=u.length;t<e;t++)g.holes.push(u[t].h)}return I}}class Zo{constructor(t){this.type="Font",this.data=t}generateShapes(t,e=100){const i=[],n=function(t,e,i){const n=Array.from(t),s=e/i.resolution,l=(i.boundingBox.yMax-i.boundingBox.yMin+i.underlineThickness)*s,c=[];let a=0,g=0;for(let t=0;t<n.length;t++){const e=n[t];if("\n"===e)a=0,g-=l;else{const t=Ro(e,s,a,g,i);a+=t.offsetX,c.push(t.path)}}return c}(t,e,this.data);for(let t=0,e=n.length;t<e;t++)Array.prototype.push.apply(i,n[t].toShapes());return i}}function Ro(t,e,i,n,s){const l=s.glyphs[t]||s.glyphs["?"];if(!l)return void console.error('THREE.Font: character "'+t+'" does not exists in font family '+s.familyName+".");const c=new Vo;let a,g,I,d,o,r,b,u;if(l.o){const t=l._cachedOutline||(l._cachedOutline=l.o.split(" "));for(let s=0,l=t.length;s<l;)switch(t[s++]){case"m":a=t[s++]*e+i,g=t[s++]*e+n,c.moveTo(a,g);break;case"l":a=t[s++]*e+i,g=t[s++]*e+n,c.lineTo(a,g);break;case"q":I=t[s++]*e+i,d=t[s++]*e+n,o=t[s++]*e+i,r=t[s++]*e+n,c.quadraticCurveTo(o,r,I,d);break;case"b":I=t[s++]*e+i,d=t[s++]*e+n,o=t[s++]*e+i,r=t[s++]*e+n,b=t[s++]*e+i,u=t[s++]*e+n,c.bezierCurveTo(o,r,b,u,I,d)}}return{offsetX:l.ha*e,path:c}}Zo.prototype.isFont=!0;class yo extends Fd{constructor(t){super(t)}load(t,e,i,n){const s=this,l=new Gd(this.manager);l.setPath(this.path),l.setRequestHeader(this.requestHeader),l.setWithCredentials(s.withCredentials),l.load(t,(function(t){let i;try{i=JSON.parse(t)}catch(e){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),i=JSON.parse(t.substring(65,t.length-2))}const n=s.parse(i);e&&e(n)}),i,n)}parse(t){return new Zo(t)}}let Lo;const Xo={getContext:function(){return void 0===Lo&&(Lo=new(window.AudioContext||window.webkitAudioContext)),Lo},setContext:function(t){Lo=t}};class Ao extends Fd{constructor(t){super(t)}load(t,e,i,n){const s=this,l=new Gd(this.manager);l.setResponseType("arraybuffer"),l.setPath(this.path),l.setRequestHeader(this.requestHeader),l.setWithCredentials(this.withCredentials),l.load(t,(function(i){try{const t=i.slice(0);Xo.getContext().decodeAudioData(t,(function(t){e(t)}))}catch(e){n?n(e):console.error(e),s.manager.itemError(t)}}),i,n)}}class Wo extends uo{constructor(t,e,i=1){super(void 0,i);const n=(new Qs).set(t),s=(new Qs).set(e),l=new Oi(n.r,n.g,n.b),c=new Oi(s.r,s.g,s.b),a=Math.sqrt(Math.PI),g=a*Math.sqrt(.75);this.sh.coefficients[0].copy(l).add(c).multiplyScalar(a),this.sh.coefficients[1].copy(l).sub(c).multiplyScalar(g)}}Wo.prototype.isHemisphereLightProbe=!0;class So extends uo{constructor(t,e=1){super(void 0,e);const i=(new Qs).set(t);this.sh.coefficients[0].set(i.r,i.g,i.b).multiplyScalar(2*Math.sqrt(Math.PI))}}So.prototype.isAmbientLightProbe=!0;const Eo=new Vn,No=new Vn;class vo{constructor(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new Cl,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new Cl,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(t){const e=this._cache;if(e.focus!==t.focus||e.fov!==t.fov||e.aspect!==t.aspect*this.aspect||e.near!==t.near||e.far!==t.far||e.zoom!==t.zoom||e.eyeSep!==this.eyeSep){e.focus=t.focus,e.fov=t.fov,e.aspect=t.aspect*this.aspect,e.near=t.near,e.far=t.far,e.zoom=t.zoom,e.eyeSep=this.eyeSep;const i=t.projectionMatrix.clone(),n=e.eyeSep/2,s=n*e.near/e.focus,l=e.near*Math.tan(Hi.DEG2RAD*e.fov*.5)/e.zoom;let c,a;No.elements[12]=-n,Eo.elements[12]=n,c=-l*e.aspect+s,a=l*e.aspect+s,i.elements[0]=2*e.near/(a-c),i.elements[8]=(a+c)/(a-c),this.cameraL.projectionMatrix.copy(i),c=-l*e.aspect-s,a=l*e.aspect-s,i.elements[0]=2*e.near/(a-c),i.elements[8]=(a+c)/(a-c),this.cameraR.projectionMatrix.copy(i)}this.cameraL.matrixWorld.copy(t.matrixWorld).multiply(No),this.cameraR.matrixWorld.copy(t.matrixWorld).multiply(Eo)}}class Yo{constructor(t){this.autoStart=void 0===t||t,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=Ho(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let t=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const e=Ho();t=(e-this.oldTime)/1e3,this.oldTime=e,this.elapsedTime+=t}return t}}function Ho(){return("undefined"==typeof performance?Date:performance).now()}const Jo=new Oi,Mo=new Pi,fo=new Oi,ko=new Oi;class zo extends On{constructor(){super(),this.type="AudioListener",this.context=Xo.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new Yo}getInput(){return this.gain}removeFilter(){return null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(t){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=t,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}updateMatrixWorld(t){super.updateMatrixWorld(t);const e=this.context.listener,i=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(Jo,Mo,fo),ko.set(0,0,-1).applyQuaternion(Mo),e.positionX){const t=this.context.currentTime+this.timeDelta;e.positionX.linearRampToValueAtTime(Jo.x,t),e.positionY.linearRampToValueAtTime(Jo.y,t),e.positionZ.linearRampToValueAtTime(Jo.z,t),e.forwardX.linearRampToValueAtTime(ko.x,t),e.forwardY.linearRampToValueAtTime(ko.y,t),e.forwardZ.linearRampToValueAtTime(ko.z,t),e.upX.linearRampToValueAtTime(i.x,t),e.upY.linearRampToValueAtTime(i.y,t),e.upZ.linearRampToValueAtTime(i.z,t)}else e.setPosition(Jo.x,Jo.y,Jo.z),e.setOrientation(ko.x,ko.y,ko.z,i.x,i.y,i.z)}}class wo extends On{constructor(t){super(),this.type="Audio",this.listener=t,this.context=t.context,this.gain=this.context.createGain(),this.gain.connect(t.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(t){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=t,this.connect(),this}setMediaElementSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(t),this.connect(),this}setMediaStreamSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(t),this.connect(),this}setBuffer(t){return this.buffer=t,this.sourceType="buffer",this.autoplay&&this.play(),this}play(t=0){if(!0===this.isPlaying)return void console.warn("THREE.Audio: Audio is already playing.");if(!1===this.hasPlaybackControl)return void console.warn("THREE.Audio: this Audio has no playback control.");this._startedAt=this.context.currentTime+t;const e=this.context.createBufferSource();return e.buffer=this.buffer,e.loop=this.loop,e.loopStart=this.loopStart,e.loopEnd=this.loopEnd,e.onended=this.onEnded.bind(this),e.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=e,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,!0===this.loop&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")}stop(){if(!1!==this.hasPlaybackControl)return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].connect(this.filters[t]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].disconnect(this.filters[t]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(t){return t||(t=[]),!0===this._connected?(this.disconnect(),this.filters=t.slice(),this.connect()):this.filters=t.slice(),this}setDetune(t){if(this.detune=t,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(t){return this.setFilters(t?[t]:[])}setPlaybackRate(t){if(!1!==this.hasPlaybackControl)return this.playbackRate=t,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn("THREE.Audio: this Audio has no playback control.")}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(t){if(!1!==this.hasPlaybackControl)return this.loop=t,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")}setLoopStart(t){return this.loopStart=t,this}setLoopEnd(t){return this.loopEnd=t,this}getVolume(){return this.gain.gain.value}setVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}}const To=new Oi,Do=new Pi,Ko=new Oi,jo=new Oi;class Po extends wo{constructor(t){super(t),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(t){return this.panner.refDistance=t,this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(t){return this.panner.rolloffFactor=t,this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(t){return this.panner.distanceModel=t,this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(t){return this.panner.maxDistance=t,this}setDirectionalCone(t,e,i){return this.panner.coneInnerAngle=t,this.panner.coneOuterAngle=e,this.panner.coneOuterGain=i,this}updateMatrixWorld(t){if(super.updateMatrixWorld(t),!0===this.hasPlaybackControl&&!1===this.isPlaying)return;this.matrixWorld.decompose(To,Do,Ko),jo.set(0,0,1).applyQuaternion(Do);const e=this.panner;if(e.positionX){const t=this.context.currentTime+this.listener.timeDelta;e.positionX.linearRampToValueAtTime(To.x,t),e.positionY.linearRampToValueAtTime(To.y,t),e.positionZ.linearRampToValueAtTime(To.z,t),e.orientationX.linearRampToValueAtTime(jo.x,t),e.orientationY.linearRampToValueAtTime(jo.y,t),e.orientationZ.linearRampToValueAtTime(jo.z,t)}else e.setPosition(To.x,To.y,To.z),e.setOrientation(jo.x,jo.y,jo.z)}}class Oo{constructor(t,e=2048){this.analyser=t.context.createAnalyser(),this.analyser.fftSize=e,this.data=new Uint8Array(this.analyser.frequencyBinCount),t.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let t=0;const e=this.getFrequencyData();for(let i=0;i<e.length;i++)t+=e[i];return t/e.length}}class _o{constructor(t,e,i){let n,s,l;switch(this.binding=t,this.valueSize=i,e){case"quaternion":n=this._slerp,s=this._slerpAdditive,l=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(6*i),this._workIndex=5;break;case"string":case"bool":n=this._select,s=this._select,l=this._setAdditiveIdentityOther,this.buffer=new Array(5*i);break;default:n=this._lerp,s=this._lerpAdditive,l=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(5*i)}this._mixBufferRegion=n,this._mixBufferRegionAdditive=s,this._setIdentity=l,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(t,e){const i=this.buffer,n=this.valueSize,s=t*n+n;let l=this.cumulativeWeight;if(0===l){for(let t=0;t!==n;++t)i[s+t]=i[t];l=e}else{l+=e;const t=e/l;this._mixBufferRegion(i,s,0,t,n)}this.cumulativeWeight=l}accumulateAdditive(t){const e=this.buffer,i=this.valueSize,n=i*this._addIndex;0===this.cumulativeWeightAdditive&&this._setIdentity(),this._mixBufferRegionAdditive(e,n,0,t,i),this.cumulativeWeightAdditive+=t}apply(t){const e=this.valueSize,i=this.buffer,n=t*e+e,s=this.cumulativeWeight,l=this.cumulativeWeightAdditive,c=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,s<1){const t=e*this._origIndex;this._mixBufferRegion(i,n,t,1-s,e)}l>0&&this._mixBufferRegionAdditive(i,n,this._addIndex*e,1,e);for(let t=e,s=e+e;t!==s;++t)if(i[t]!==i[t+e]){c.setValue(i,n);break}}saveOriginalState(){const t=this.binding,e=this.buffer,i=this.valueSize,n=i*this._origIndex;t.getValue(e,n);for(let t=i,s=n;t!==s;++t)e[t]=e[n+t%i];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const t=3*this.valueSize;this.binding.setValue(this.buffer,t)}_setAdditiveIdentityNumeric(){const t=this._addIndex*this.valueSize,e=t+this.valueSize;for(let i=t;i<e;i++)this.buffer[i]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const t=this._origIndex*this.valueSize,e=this._addIndex*this.valueSize;for(let i=0;i<this.valueSize;i++)this.buffer[e+i]=this.buffer[t+i]}_select(t,e,i,n,s){if(n>=.5)for(let n=0;n!==s;++n)t[e+n]=t[i+n]}_slerp(t,e,i,n){Pi.slerpFlat(t,e,t,e,t,i,n)}_slerpAdditive(t,e,i,n,s){const l=this._workIndex*s;Pi.multiplyQuaternionsFlat(t,l,t,e,t,i),Pi.slerpFlat(t,e,t,e,t,l,n)}_lerp(t,e,i,n,s){const l=1-n;for(let c=0;c!==s;++c){const s=e+c;t[s]=t[s]*l+t[i+c]*n}}_lerpAdditive(t,e,i,n,s){for(let l=0;l!==s;++l){const s=e+l;t[s]=t[s]+t[i+l]*n}}}const qo=new RegExp("[\\[\\]\\.:\\/]","g"),$o="[^\\[\\]\\.:\\/]",tr="[^"+"\\[\\]\\.:\\/".replace("\\.","")+"]",er=/((?:WC+[\/:])*)/.source.replace("WC",$o),ir=/(WCOD+)?/.source.replace("WCOD",tr),nr=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",$o),sr=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",$o),lr=new RegExp("^"+er+ir+nr+sr+"$"),cr=["material","materials","bones"];function ar(t,e,i){const n=i||gr.parseTrackName(e);this._targetGroup=t,this._bindings=t.subscribe_(e,n)}function gr(t,e,i){this.path=e,this.parsedPath=i||gr.parseTrackName(e),this.node=gr.findNode(t,this.parsedPath.nodeName)||t,this.rootNode=t}Object.assign(ar.prototype,{getValue:function(t,e){this.bind();const i=this._targetGroup.nCachedObjects_,n=this._bindings[i];void 0!==n&&n.getValue(t,e)},setValue:function(t,e){const i=this._bindings;for(let n=this._targetGroup.nCachedObjects_,s=i.length;n!==s;++n)i[n].setValue(t,e)},bind:function(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,i=t.length;e!==i;++e)t[e].bind()},unbind:function(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,i=t.length;e!==i;++e)t[e].unbind()}}),Object.assign(gr,{Composite:ar,create:function(t,e,i){return t&&t.isAnimationObjectGroup?new gr.Composite(t,e,i):new gr(t,e,i)},sanitizeNodeName:function(t){return t.replace(/\s/g,"_").replace(qo,"")},parseTrackName:function(t){const e=lr.exec(t);if(!e)throw new Error("PropertyBinding: Cannot parse trackName: "+t);const i={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},n=i.nodeName&&i.nodeName.lastIndexOf(".");if(void 0!==n&&-1!==n){const t=i.nodeName.substring(n+1);-1!==cr.indexOf(t)&&(i.nodeName=i.nodeName.substring(0,n),i.objectName=t)}if(null===i.propertyName||0===i.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+t);return i},findNode:function(t,e){if(!e||""===e||"."===e||-1===e||e===t.name||e===t.uuid)return t;if(t.skeleton){const i=t.skeleton.getBoneByName(e);if(void 0!==i)return i}if(t.children){const i=function(t){for(let n=0;n<t.length;n++){const s=t[n];if(s.name===e||s.uuid===e)return s;const l=i(s.children);if(l)return l}return null},n=i(t.children);if(n)return n}return null}}),Object.assign(gr.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(t,e){t[e]=this.node[this.propertyName]},function(t,e){const i=this.resolvedProperty;for(let n=0,s=i.length;n!==s;++n)t[e++]=i[n]},function(t,e){t[e]=this.resolvedProperty[this.propertyIndex]},function(t,e){this.resolvedProperty.toArray(t,e)}],SetterByBindingTypeAndVersioning:[[function(t,e){this.targetObject[this.propertyName]=t[e]},function(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0},function(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){const i=this.resolvedProperty;for(let n=0,s=i.length;n!==s;++n)i[n]=t[e++]},function(t,e){const i=this.resolvedProperty;for(let n=0,s=i.length;n!==s;++n)i[n]=t[e++];this.targetObject.needsUpdate=!0},function(t,e){const i=this.resolvedProperty;for(let n=0,s=i.length;n!==s;++n)i[n]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){this.resolvedProperty[this.propertyIndex]=t[e]},function(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0},function(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){this.resolvedProperty.fromArray(t,e)},function(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0},function(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}]],getValue:function(t,e){this.bind(),this.getValue(t,e)},setValue:function(t,e){this.bind(),this.setValue(t,e)},bind:function(){let t=this.node;const e=this.parsedPath,i=e.objectName,n=e.propertyName;let s=e.propertyIndex;if(t||(t=gr.findNode(this.rootNode,e.nodeName)||this.rootNode,this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!t)return void console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");if(i){let n=e.objectIndex;switch(i){case"materials":if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);t=t.material.materials;break;case"bones":if(!t.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);t=t.skeleton.bones;for(let e=0;e<t.length;e++)if(t[e].name===n){n=e;break}break;default:if(void 0===t[i])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);t=t[i]}if(void 0!==n){if(void 0===t[n])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,t);t=t[n]}}const l=t[n];if(void 0===l){const i=e.nodeName;return void console.error("THREE.PropertyBinding: Trying to update property for track: "+i+"."+n+" but it wasn't found.",t)}let c=this.Versioning.None;this.targetObject=t,void 0!==t.needsUpdate?c=this.Versioning.NeedsUpdate:void 0!==t.matrixWorldNeedsUpdate&&(c=this.Versioning.MatrixWorldNeedsUpdate);let a=this.BindingType.Direct;if(void 0!==s){if("morphTargetInfluences"===n){if(!t.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(!t.geometry.isBufferGeometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.",this);if(!t.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);void 0!==t.morphTargetDictionary[s]&&(s=t.morphTargetDictionary[s])}a=this.BindingType.ArrayElement,this.resolvedProperty=l,this.propertyIndex=s}else void 0!==l.fromArray&&void 0!==l.toArray?(a=this.BindingType.HasFromToArray,this.resolvedProperty=l):Array.isArray(l)?(a=this.BindingType.EntireArray,this.resolvedProperty=l):this.propertyName=n;this.getValue=this.GetterByBindingType[a],this.setValue=this.SetterByBindingTypeAndVersioning[a][c]},unbind:function(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}),Object.assign(gr.prototype,{_getValue_unbound:gr.prototype.getValue,_setValue_unbound:gr.prototype.setValue});class Ir{constructor(){this.uuid=Hi.generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const t={};this._indicesByUUID=t;for(let e=0,i=arguments.length;e!==i;++e)t[arguments[e].uuid]=e;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};const e=this;this.stats={objects:{get total(){return e._objects.length},get inUse(){return this.total-e.nCachedObjects_}},get bindingsPerObject(){return e._bindings.length}}}add(){const t=this._objects,e=this._indicesByUUID,i=this._paths,n=this._parsedPaths,s=this._bindings,l=s.length;let c,a=t.length,g=this.nCachedObjects_;for(let I=0,d=arguments.length;I!==d;++I){const d=arguments[I],o=d.uuid;let r=e[o];if(void 0===r){r=a++,e[o]=r,t.push(d);for(let t=0,e=l;t!==e;++t)s[t].push(new gr(d,i[t],n[t]))}else if(r<g){c=t[r];const a=--g,I=t[a];e[I.uuid]=r,t[r]=I,e[o]=a,t[a]=d;for(let t=0,e=l;t!==e;++t){const e=s[t],l=e[a];let c=e[r];e[r]=l,void 0===c&&(c=new gr(d,i[t],n[t])),e[a]=c}}else t[r]!==c&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=g}remove(){const t=this._objects,e=this._indicesByUUID,i=this._bindings,n=i.length;let s=this.nCachedObjects_;for(let l=0,c=arguments.length;l!==c;++l){const c=arguments[l],a=c.uuid,g=e[a];if(void 0!==g&&g>=s){const l=s++,I=t[l];e[I.uuid]=g,t[g]=I,e[a]=l,t[l]=c;for(let t=0,e=n;t!==e;++t){const e=i[t],n=e[l],s=e[g];e[g]=n,e[l]=s}}}this.nCachedObjects_=s}uncache(){const t=this._objects,e=this._indicesByUUID,i=this._bindings,n=i.length;let s=this.nCachedObjects_,l=t.length;for(let c=0,a=arguments.length;c!==a;++c){const a=arguments[c].uuid,g=e[a];if(void 0!==g)if(delete e[a],g<s){const c=--s,a=t[c],I=--l,d=t[I];e[a.uuid]=g,t[g]=a,e[d.uuid]=c,t[c]=d,t.pop();for(let t=0,e=n;t!==e;++t){const e=i[t],n=e[c],s=e[I];e[g]=n,e[c]=s,e.pop()}}else{const s=--l,c=t[s];s>0&&(e[c.uuid]=g),t[g]=c,t.pop();for(let t=0,e=n;t!==e;++t){const e=i[t];e[g]=e[s],e.pop()}}}this.nCachedObjects_=s}subscribe_(t,e){const i=this._bindingsIndicesByPath;let n=i[t];const s=this._bindings;if(void 0!==n)return s[n];const l=this._paths,c=this._parsedPaths,a=this._objects,g=a.length,I=this.nCachedObjects_,d=new Array(g);n=s.length,i[t]=n,l.push(t),c.push(e),s.push(d);for(let i=I,n=a.length;i!==n;++i){const n=a[i];d[i]=new gr(n,t,e)}return d}unsubscribe_(t){const e=this._bindingsIndicesByPath,i=e[t];if(void 0!==i){const n=this._paths,s=this._parsedPaths,l=this._bindings,c=l.length-1,a=l[c];e[t[c]]=i,l[i]=a,l.pop(),s[i]=s[c],s.pop(),n[i]=n[c],n.pop()}}}Ir.prototype.isAnimationObjectGroup=!0;class dr{constructor(t,e,i=null,n=e.blendMode){this._mixer=t,this._clip=e,this._localRoot=i,this.blendMode=n;const s=e.tracks,l=s.length,c=new Array(l),a={endingStart:ke,endingEnd:ke};for(let t=0;t!==l;++t){const e=s[t].createInterpolant(null);c[t]=e,e.settings=a}this._interpolantSettings=a,this._interpolants=c,this._propertyBindings=new Array(l),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=Ye,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(t){return this._startTime=t,this}setLoop(t,e){return this.loop=t,this.repetitions=e,this}setEffectiveWeight(t){return this.weight=t,this._effectiveWeight=this.enabled?t:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(t){return this._scheduleFading(t,0,1)}fadeOut(t){return this._scheduleFading(t,1,0)}crossFadeFrom(t,e,i){if(t.fadeOut(e),this.fadeIn(e),i){const i=this._clip.duration,n=t._clip.duration,s=n/i,l=i/n;t.warp(1,s,e),this.warp(l,1,e)}return this}crossFadeTo(t,e,i){return t.crossFadeFrom(this,e,i)}stopFading(){const t=this._weightInterpolant;return null!==t&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}setEffectiveTimeScale(t){return this.timeScale=t,this._effectiveTimeScale=this.paused?0:t,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(t){return this.timeScale=this._clip.duration/t,this.stopWarping()}syncWith(t){return this.time=t.time,this.timeScale=t.timeScale,this.stopWarping()}halt(t){return this.warp(this._effectiveTimeScale,0,t)}warp(t,e,i){const n=this._mixer,s=n.time,l=this.timeScale;let c=this._timeScaleInterpolant;null===c&&(c=n._lendControlInterpolant(),this._timeScaleInterpolant=c);const a=c.parameterPositions,g=c.sampleValues;return a[0]=s,a[1]=s+i,g[0]=t/l,g[1]=e/l,this}stopWarping(){const t=this._timeScaleInterpolant;return null!==t&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(t,e,i,n){if(!this.enabled)return void this._updateWeight(t);const s=this._startTime;if(null!==s){const n=(t-s)*i;if(n<0||0===i)return;this._startTime=null,e=i*n}e*=this._updateTimeScale(t);const l=this._updateTime(e),c=this._updateWeight(t);if(c>0){const t=this._interpolants,e=this._propertyBindings;switch(this.blendMode){case De:for(let i=0,n=t.length;i!==n;++i)t[i].evaluate(l),e[i].accumulateAdditive(c);break;case Te:default:for(let i=0,s=t.length;i!==s;++i)t[i].evaluate(l),e[i].accumulate(n,c)}}}_updateWeight(t){let e=0;if(this.enabled){e=this.weight;const i=this._weightInterpolant;if(null!==i){const n=i.evaluate(t)[0];e*=n,t>i.parameterPositions[1]&&(this.stopFading(),0===n&&(this.enabled=!1))}}return this._effectiveWeight=e,e}_updateTimeScale(t){let e=0;if(!this.paused){e=this.timeScale;const i=this._timeScaleInterpolant;null!==i&&(e*=i.evaluate(t)[0],t>i.parameterPositions[1]&&(this.stopWarping(),0===e?this.paused=!0:this.timeScale=e))}return this._effectiveTimeScale=e,e}_updateTime(t){const e=this._clip.duration,i=this.loop;let n=this.time+t,s=this._loopCount;const l=i===He;if(0===t)return-1===s?n:l&&1==(1&s)?e-n:n;if(i===ve){-1===s&&(this._loopCount=0,this._setEndings(!0,!0,!1));t:{if(n>=e)n=e;else{if(!(n<0)){this.time=n;break t}n=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=n,this._mixer.dispatchEvent({type:"finished",action:this,direction:t<0?-1:1})}}else{if(-1===s&&(t>=0?(s=0,this._setEndings(!0,0===this.repetitions,l)):this._setEndings(0===this.repetitions,!0,l)),n>=e||n<0){const i=Math.floor(n/e);n-=e*i,s+=Math.abs(i);const c=this.repetitions-s;if(c<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,n=t>0?e:0,this.time=n,this._mixer.dispatchEvent({type:"finished",action:this,direction:t>0?1:-1});else{if(1===c){const e=t<0;this._setEndings(e,!e,l)}else this._setEndings(!1,!1,l);this._loopCount=s,this.time=n,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:i})}}else this.time=n;if(l&&1==(1&s))return e-n}return n}_setEndings(t,e,i){const n=this._interpolantSettings;i?(n.endingStart=ze,n.endingEnd=ze):(n.endingStart=t?this.zeroSlopeAtStart?ze:ke:we,n.endingEnd=e?this.zeroSlopeAtEnd?ze:ke:we)}_scheduleFading(t,e,i){const n=this._mixer,s=n.time;let l=this._weightInterpolant;null===l&&(l=n._lendControlInterpolant(),this._weightInterpolant=l);const c=l.parameterPositions,a=l.sampleValues;return c[0]=s,a[0]=e,c[1]=s+t,a[1]=i,this}}class or extends Ni{constructor(t){super(),this._root=t,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(t,e){const i=t._localRoot||this._root,n=t._clip.tracks,s=n.length,l=t._propertyBindings,c=t._interpolants,a=i.uuid,g=this._bindingsByRootAndName;let I=g[a];void 0===I&&(I={},g[a]=I);for(let t=0;t!==s;++t){const s=n[t],g=s.name;let d=I[g];if(void 0!==d)l[t]=d;else{if(d=l[t],void 0!==d){null===d._cacheIndex&&(++d.referenceCount,this._addInactiveBinding(d,a,g));continue}const n=e&&e._propertyBindings[t].binding.parsedPath;d=new _o(gr.create(i,g,n),s.ValueTypeName,s.getValueSize()),++d.referenceCount,this._addInactiveBinding(d,a,g),l[t]=d}c[t].resultBuffer=d.buffer}}_activateAction(t){if(!this._isActiveAction(t)){if(null===t._cacheIndex){const e=(t._localRoot||this._root).uuid,i=t._clip.uuid,n=this._actionsByClip[i];this._bindAction(t,n&&n.knownActions[0]),this._addInactiveAction(t,i,e)}const e=t._propertyBindings;for(let t=0,i=e.length;t!==i;++t){const i=e[t];0==i.useCount++&&(this._lendBinding(i),i.saveOriginalState())}this._lendAction(t)}}_deactivateAction(t){if(this._isActiveAction(t)){const e=t._propertyBindings;for(let t=0,i=e.length;t!==i;++t){const i=e[t];0==--i.useCount&&(i.restoreOriginalState(),this._takeBackBinding(i))}this._takeBackAction(t)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}}}_isActiveAction(t){const e=t._cacheIndex;return null!==e&&e<this._nActiveActions}_addInactiveAction(t,e,i){const n=this._actions,s=this._actionsByClip;let l=s[e];if(void 0===l)l={knownActions:[t],actionByRoot:{}},t._byClipCacheIndex=0,s[e]=l;else{const e=l.knownActions;t._byClipCacheIndex=e.length,e.push(t)}t._cacheIndex=n.length,n.push(t),l.actionByRoot[i]=t}_removeInactiveAction(t){const e=this._actions,i=e[e.length-1],n=t._cacheIndex;i._cacheIndex=n,e[n]=i,e.pop(),t._cacheIndex=null;const s=t._clip.uuid,l=this._actionsByClip,c=l[s],a=c.knownActions,g=a[a.length-1],I=t._byClipCacheIndex;g._byClipCacheIndex=I,a[I]=g,a.pop(),t._byClipCacheIndex=null,delete c.actionByRoot[(t._localRoot||this._root).uuid],0===a.length&&delete l[s],this._removeInactiveBindingsForAction(t)}_removeInactiveBindingsForAction(t){const e=t._propertyBindings;for(let t=0,i=e.length;t!==i;++t){const i=e[t];0==--i.referenceCount&&this._removeInactiveBinding(i)}}_lendAction(t){const e=this._actions,i=t._cacheIndex,n=this._nActiveActions++,s=e[n];t._cacheIndex=n,e[n]=t,s._cacheIndex=i,e[i]=s}_takeBackAction(t){const e=this._actions,i=t._cacheIndex,n=--this._nActiveActions,s=e[n];t._cacheIndex=n,e[n]=t,s._cacheIndex=i,e[i]=s}_addInactiveBinding(t,e,i){const n=this._bindingsByRootAndName,s=this._bindings;let l=n[e];void 0===l&&(l={},n[e]=l),l[i]=t,t._cacheIndex=s.length,s.push(t)}_removeInactiveBinding(t){const e=this._bindings,i=t.binding,n=i.rootNode.uuid,s=i.path,l=this._bindingsByRootAndName,c=l[n],a=e[e.length-1],g=t._cacheIndex;a._cacheIndex=g,e[g]=a,e.pop(),delete c[s],0===Object.keys(c).length&&delete l[n]}_lendBinding(t){const e=this._bindings,i=t._cacheIndex,n=this._nActiveBindings++,s=e[n];t._cacheIndex=n,e[n]=t,s._cacheIndex=i,e[i]=s}_takeBackBinding(t){const e=this._bindings,i=t._cacheIndex,n=--this._nActiveBindings,s=e[n];t._cacheIndex=n,e[n]=t,s._cacheIndex=i,e[i]=s}_lendControlInterpolant(){const t=this._controlInterpolants,e=this._nActiveControlInterpolants++;let i=t[e];return void 0===i&&(i=new ed(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),i.__cacheIndex=e,t[e]=i),i}_takeBackControlInterpolant(t){const e=this._controlInterpolants,i=t.__cacheIndex,n=--this._nActiveControlInterpolants,s=e[n];t.__cacheIndex=n,e[n]=t,s.__cacheIndex=i,e[i]=s}clipAction(t,e,i){const n=e||this._root,s=n.uuid;let l="string"==typeof t?od.findByName(n,t):t;const c=null!==l?l.uuid:t,a=this._actionsByClip[c];let g=null;if(void 0===i&&(i=null!==l?l.blendMode:Te),void 0!==a){const t=a.actionByRoot[s];if(void 0!==t&&t.blendMode===i)return t;g=a.knownActions[0],null===l&&(l=g._clip)}if(null===l)return null;const I=new dr(this,l,e,i);return this._bindAction(I,g),this._addInactiveAction(I,c,s),I}existingAction(t,e){const i=e||this._root,n=i.uuid,s="string"==typeof t?od.findByName(i,t):t,l=s?s.uuid:t,c=this._actionsByClip[l];return void 0!==c&&c.actionByRoot[n]||null}stopAllAction(){const t=this._actions;for(let e=this._nActiveActions-1;e>=0;--e)t[e].stop();return this}update(t){t*=this.timeScale;const e=this._actions,i=this._nActiveActions,n=this.time+=t,s=Math.sign(t),l=this._accuIndex^=1;for(let c=0;c!==i;++c)e[c]._update(n,t,s,l);const c=this._bindings,a=this._nActiveBindings;for(let t=0;t!==a;++t)c[t].apply(l);return this}setTime(t){this.time=0;for(let t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(t)}getRoot(){return this._root}uncacheClip(t){const e=this._actions,i=t.uuid,n=this._actionsByClip,s=n[i];if(void 0!==s){const t=s.knownActions;for(let i=0,n=t.length;i!==n;++i){const n=t[i];this._deactivateAction(n);const s=n._cacheIndex,l=e[e.length-1];n._cacheIndex=null,n._byClipCacheIndex=null,l._cacheIndex=s,e[s]=l,e.pop(),this._removeInactiveBindingsForAction(n)}delete n[i]}}uncacheRoot(t){const e=t.uuid,i=this._actionsByClip;for(const t in i){const n=i[t].actionByRoot[e];void 0!==n&&(this._deactivateAction(n),this._removeInactiveAction(n))}const n=this._bindingsByRootAndName[e];if(void 0!==n)for(const t in n){const e=n[t];e.restoreOriginalState(),this._removeInactiveBinding(e)}}uncacheAction(t,e){const i=this.existingAction(t,e);null!==i&&(this._deactivateAction(i),this._removeInactiveAction(i))}}or.prototype._controlInterpolantsResultBuffer=new Float32Array(1);class rr{constructor(t){"string"==typeof t&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),t=arguments[1]),this.value=t}clone(){return new rr(void 0===this.value.clone?this.value:this.value.clone())}}function br(t,e,i){Ya.call(this,t,e),this.meshPerAttribute=i||1}function ur(t,e,i,n,s){this.buffer=t,this.type=e,this.itemSize=i,this.elementSize=n,this.count=s,this.version=0}function Br(t,e,i=0,n=1/0){this.ray=new pn(t,e),this.near=i,this.far=n,this.camera=null,this.layers=new vn,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."),this.Points}}})}function Fr(t,e){return t.distance-e.distance}function Cr(t,e,i,n){if(t.layers.test(e.layers)&&t.raycast(e,i),!0===n){const n=t.children;for(let t=0,s=n.length;t<s;t++)Cr(n[t],e,i,!0)}}br.prototype=Object.assign(Object.create(Ya.prototype),{constructor:br,isInstancedInterleavedBuffer:!0,copy:function(t){return Ya.prototype.copy.call(this,t),this.meshPerAttribute=t.meshPerAttribute,this},clone:function(t){const e=Ya.prototype.clone.call(this,t);return e.meshPerAttribute=this.meshPerAttribute,e},toJSON:function(t){const e=Ya.prototype.toJSON.call(this,t);return e.isInstancedInterleavedBuffer=!0,e.meshPerAttribute=this.meshPerAttribute,e}}),Object.defineProperty(ur.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),Object.assign(ur.prototype,{isGLBufferAttribute:!0,setBuffer:function(t){return this.buffer=t,this},setType:function(t,e){return this.type=t,this.elementSize=e,this},setItemSize:function(t){return this.itemSize=t,this},setCount:function(t){return this.count=t,this}}),Object.assign(Br.prototype,{set:function(t,e){this.ray.set(t,e)},setFromCamera:function(t,e){e&&e.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize(),this.camera=e):e&&e.isOrthographicCamera?(this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld),this.camera=e):console.error("THREE.Raycaster: Unsupported camera type: "+e.type)},intersectObject:function(t,e=!1,i=[]){return Cr(t,this,i,e),i.sort(Fr),i},intersectObjects:function(t,e=!1,i=[]){for(let n=0,s=t.length;n<s;n++)Cr(t[n],this,i,e);return i.sort(Fr),i}});class Gr{constructor(t=1,e=0,i=0){return this.radius=t,this.phi=e,this.theta=i,this}set(t,e,i){return this.radius=t,this.phi=e,this.theta=i,this}copy(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this}makeSafe(){const t=1e-6;return this.phi=Math.max(t,Math.min(Math.PI-t,this.phi)),this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,i){return this.radius=Math.sqrt(t*t+e*e+i*i),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,i),this.phi=Math.acos(Hi.clamp(e/this.radius,-1,1))),this}clone(){return(new this.constructor).copy(this)}}class Ur{constructor(t=1,e=0,i=0){return this.radius=t,this.theta=e,this.y=i,this}set(t,e,i){return this.radius=t,this.theta=e,this.y=i,this}copy(t){return this.radius=t.radius,this.theta=t.theta,this.y=t.y,this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,i){return this.radius=Math.sqrt(t*t+i*i),this.theta=Math.atan2(t,i),this.y=e,this}clone(){return(new this.constructor).copy(this)}}const Qr=new Ji;class hr{constructor(t=new Ji(1/0,1/0),e=new Ji(-1/0,-1/0)){this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromPoints(t){this.makeEmpty();for(let e=0,i=t.length;e<i;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const i=Qr.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(i),this.max.copy(t).add(i),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(t){return void 0===t&&(console.warn("THREE.Box2: .getCenter() target is now required"),t=new Ji),this.isEmpty()?t.set(0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return void 0===t&&(console.warn("THREE.Box2: .getSize() target is now required"),t=new Ji),this.isEmpty()?t.set(0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y}getParameter(t,e){return void 0===e&&(console.warn("THREE.Box2: .getParameter() target is now required"),e=new Ji),e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y)}clampPoint(t,e){return void 0===e&&(console.warn("THREE.Box2: .clampPoint() target is now required"),e=new Ji),e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return Qr.copy(t).clamp(this.min,this.max).sub(t).length()}intersect(t){return this.min.max(t.min),this.max.min(t.max),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}hr.prototype.isBox2=!0;const mr=new Oi,xr=new Oi;class pr{constructor(t=new Oi,e=new Oi){this.start=t,this.end=e}set(t,e){return this.start.copy(t),this.end.copy(e),this}copy(t){return this.start.copy(t.start),this.end.copy(t.end),this}getCenter(t){return void 0===t&&(console.warn("THREE.Line3: .getCenter() target is now required"),t=new Oi),t.addVectors(this.start,this.end).multiplyScalar(.5)}delta(t){return void 0===t&&(console.warn("THREE.Line3: .delta() target is now required"),t=new Oi),t.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(t,e){return void 0===e&&(console.warn("THREE.Line3: .at() target is now required"),e=new Oi),this.delta(e).multiplyScalar(t).add(this.start)}closestPointToPointParameter(t,e){mr.subVectors(t,this.start),xr.subVectors(this.end,this.start);const i=xr.dot(xr);let n=xr.dot(mr)/i;return e&&(n=Hi.clamp(n,0,1)),n}closestPointToPoint(t,e,i){const n=this.closestPointToPointParameter(t,e);return void 0===i&&(console.warn("THREE.Line3: .closestPointToPoint() target is now required"),i=new Oi),this.delta(i).multiplyScalar(n).add(this.start)}applyMatrix4(t){return this.start.applyMatrix4(t),this.end.applyMatrix4(t),this}equals(t){return t.start.equals(this.start)&&t.end.equals(this.end)}clone(){return(new this.constructor).copy(this)}}function Vr(t){On.call(this),this.material=t,this.render=function(){},this.hasPositions=!1,this.hasNormals=!1,this.hasColors=!1,this.hasUvs=!1,this.positionArray=null,this.normalArray=null,this.colorArray=null,this.uvArray=null,this.count=0}Vr.prototype=Object.create(On.prototype),Vr.prototype.constructor=Vr,Vr.prototype.isImmediateRenderObject=!0;const Zr=new Oi;class Rr extends On{constructor(t,e){super(),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=e;const i=new Ts,n=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let t=0,e=1,i=32;t<i;t++,e++){const s=t/i*Math.PI*2,l=e/i*Math.PI*2;n.push(Math.cos(s),Math.sin(s),1,Math.cos(l),Math.sin(l),1)}i.setAttribute("position",new Ss(n,3));const s=new Qg({fog:!1,toneMapped:!1});this.cone=new Lg(i,s),this.add(this.cone),this.update()}dispose(){this.cone.geometry.dispose(),this.cone.material.dispose()}update(){this.light.updateMatrixWorld();const t=this.light.distance?this.light.distance:1e3,e=t*Math.tan(this.light.angle);this.cone.scale.set(e,e,t),Zr.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(Zr),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}const yr=new Oi,Lr=new Vn,Xr=new Vn;class Ar extends Lg{constructor(t){const e=Wr(t),i=new Ts,n=[],s=[],l=new Qs(0,0,1),c=new Qs(0,1,0);for(let t=0;t<e.length;t++){const i=e[t];i.parent&&i.parent.isBone&&(n.push(0,0,0),n.push(0,0,0),s.push(l.r,l.g,l.b),s.push(c.r,c.g,c.b))}i.setAttribute("position",new Ss(n,3)),i.setAttribute("color",new Ss(s,3)),super(i,new Qg({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0})),this.type="SkeletonHelper",this.isSkeletonHelper=!0,this.root=t,this.bones=e,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(t){const e=this.bones,i=this.geometry,n=i.getAttribute("position");Xr.copy(this.root.matrixWorld).invert();for(let t=0,i=0;t<e.length;t++){const s=e[t];s.parent&&s.parent.isBone&&(Lr.multiplyMatrices(Xr,s.matrixWorld),yr.setFromMatrixPosition(Lr),n.setXYZ(i,yr.x,yr.y,yr.z),Lr.multiplyMatrices(Xr,s.parent.matrixWorld),yr.setFromMatrixPosition(Lr),n.setXYZ(i+1,yr.x,yr.y,yr.z),i+=2)}i.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(t)}}function Wr(t){const e=[];t&&t.isBone&&e.push(t);for(let i=0;i<t.children.length;i++)e.push.apply(e,Wr(t.children[i]));return e}class Sr extends Il{constructor(t,e,i){super(new SI(e,4,2),new hs({wireframe:!0,fog:!1,toneMapped:!1})),this.light=t,this.light.updateMatrixWorld(),this.color=i,this.type="PointLightHelper",this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}dispose(){this.geometry.dispose(),this.material.dispose()}update(){void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)}}const Er=new Oi,Nr=new Qs,vr=new Qs;class Yr extends On{constructor(t,e,i){super(),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=i;const n=new LI(e);n.rotateY(.5*Math.PI),this.material=new hs({wireframe:!0,fog:!1,toneMapped:!1}),void 0===this.color&&(this.material.vertexColors=!0);const s=n.getAttribute("position"),l=new Float32Array(3*s.count);n.setAttribute("color",new ps(l,3)),this.add(new Il(n,this.material)),this.update()}dispose(){this.children[0].geometry.dispose(),this.children[0].material.dispose()}update(){const t=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{const e=t.geometry.getAttribute("color");Nr.copy(this.light.color),vr.copy(this.light.groundColor);for(let t=0,i=e.count;t<i;t++){const n=t<i/2?Nr:vr;e.setXYZ(t,n.r,n.g,n.b)}e.needsUpdate=!0}t.lookAt(Er.setFromMatrixPosition(this.light.matrixWorld).negate())}}class Hr extends Lg{constructor(t=10,e=10,i=4473924,n=8947848){i=new Qs(i),n=new Qs(n);const s=e/2,l=t/e,c=t/2,a=[],g=[];for(let t=0,I=0,d=-c;t<=e;t++,d+=l){a.push(-c,0,d,c,0,d),a.push(d,0,-c,d,0,c);const e=t===s?i:n;e.toArray(g,I),I+=3,e.toArray(g,I),I+=3,e.toArray(g,I),I+=3,e.toArray(g,I),I+=3}const I=new Ts;I.setAttribute("position",new Ss(a,3)),I.setAttribute("color",new Ss(g,3)),super(I,new Qg({vertexColors:!0,toneMapped:!1})),this.type="GridHelper"}}class Jr extends Lg{constructor(t=10,e=16,i=8,n=64,s=4473924,l=8947848){s=new Qs(s),l=new Qs(l);const c=[],a=[];for(let i=0;i<=e;i++){const n=i/e*(2*Math.PI),g=Math.sin(n)*t,I=Math.cos(n)*t;c.push(0,0,0),c.push(g,0,I);const d=1&i?s:l;a.push(d.r,d.g,d.b),a.push(d.r,d.g,d.b)}for(let e=0;e<=i;e++){const g=1&e?s:l,I=t-t/i*e;for(let t=0;t<n;t++){let e=t/n*(2*Math.PI),i=Math.sin(e)*I,s=Math.cos(e)*I;c.push(i,0,s),a.push(g.r,g.g,g.b),e=(t+1)/n*(2*Math.PI),i=Math.sin(e)*I,s=Math.cos(e)*I,c.push(i,0,s),a.push(g.r,g.g,g.b)}}const g=new Ts;g.setAttribute("position",new Ss(c,3)),g.setAttribute("color",new Ss(a,3)),super(g,new Qg({vertexColors:!0,toneMapped:!1})),this.type="PolarGridHelper"}}const Mr=new Oi,fr=new Oi,kr=new Oi;class zr extends On{constructor(t,e,i){super(),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=i,void 0===e&&(e=1);let n=new Ts;n.setAttribute("position",new Ss([-e,e,0,e,e,0,e,-e,0,-e,-e,0,-e,e,0],3));const s=new Qg({fog:!1,toneMapped:!1});this.lightPlane=new Zg(n,s),this.add(this.lightPlane),n=new Ts,n.setAttribute("position",new Ss([0,0,0,0,0,1],3)),this.targetLine=new Zg(n,s),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){Mr.setFromMatrixPosition(this.light.matrixWorld),fr.setFromMatrixPosition(this.light.target.matrixWorld),kr.subVectors(fr,Mr),this.lightPlane.lookAt(fr),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(fr),this.targetLine.scale.z=kr.length()}}const wr=new Oi,Tr=new Fl;class Dr extends Lg{constructor(t){const e=new Ts,i=new Qg({color:16777215,vertexColors:!0,toneMapped:!1}),n=[],s=[],l={},c=new Qs(16755200),a=new Qs(16711680),g=new Qs(43775),I=new Qs(16777215),d=new Qs(3355443);function o(t,e,i){r(t,i),r(e,i)}function r(t,e){n.push(0,0,0),s.push(e.r,e.g,e.b),void 0===l[t]&&(l[t]=[]),l[t].push(n.length/3-1)}o("n1","n2",c),o("n2","n4",c),o("n4","n3",c),o("n3","n1",c),o("f1","f2",c),o("f2","f4",c),o("f4","f3",c),o("f3","f1",c),o("n1","f1",c),o("n2","f2",c),o("n3","f3",c),o("n4","f4",c),o("p","n1",a),o("p","n2",a),o("p","n3",a),o("p","n4",a),o("u1","u2",g),o("u2","u3",g),o("u3","u1",g),o("c","t",I),o("p","c",d),o("cn1","cn2",d),o("cn3","cn4",d),o("cf1","cf2",d),o("cf3","cf4",d),e.setAttribute("position",new Ss(n,3)),e.setAttribute("color",new Ss(s,3)),super(e,i),this.type="CameraHelper",this.camera=t,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=l,this.update()}update(){const t=this.geometry,e=this.pointMap;Tr.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),Kr("c",e,t,Tr,0,0,-1),Kr("t",e,t,Tr,0,0,1),Kr("n1",e,t,Tr,-1,-1,-1),Kr("n2",e,t,Tr,1,-1,-1),Kr("n3",e,t,Tr,-1,1,-1),Kr("n4",e,t,Tr,1,1,-1),Kr("f1",e,t,Tr,-1,-1,1),Kr("f2",e,t,Tr,1,-1,1),Kr("f3",e,t,Tr,-1,1,1),Kr("f4",e,t,Tr,1,1,1),Kr("u1",e,t,Tr,.7,1.1,-1),Kr("u2",e,t,Tr,-.7,1.1,-1),Kr("u3",e,t,Tr,0,2,-1),Kr("cf1",e,t,Tr,-1,0,1),Kr("cf2",e,t,Tr,1,0,1),Kr("cf3",e,t,Tr,0,-1,1),Kr("cf4",e,t,Tr,0,1,1),Kr("cn1",e,t,Tr,-1,0,-1),Kr("cn2",e,t,Tr,1,0,-1),Kr("cn3",e,t,Tr,0,-1,-1),Kr("cn4",e,t,Tr,0,1,-1),t.getAttribute("position").needsUpdate=!0}}function Kr(t,e,i,n,s,l,c){wr.set(s,l,c).unproject(n);const a=e[t];if(void 0!==a){const t=i.getAttribute("position");for(let e=0,i=a.length;e<i;e++)t.setXYZ(a[e],wr.x,wr.y,wr.z)}}const jr=new $i;class Pr extends Lg{constructor(t,e=16776960){const i=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),n=new Float32Array(24),s=new Ts;s.setIndex(new ps(i,1)),s.setAttribute("position",new ps(n,3)),super(s,new Qg({color:e,toneMapped:!1})),this.object=t,this.type="BoxHelper",this.matrixAutoUpdate=!1,this.update()}update(t){if(void 0!==t&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),void 0!==this.object&&jr.setFromObject(this.object),jr.isEmpty())return;const e=jr.min,i=jr.max,n=this.geometry.attributes.position,s=n.array;s[0]=i.x,s[1]=i.y,s[2]=i.z,s[3]=e.x,s[4]=i.y,s[5]=i.z,s[6]=e.x,s[7]=e.y,s[8]=i.z,s[9]=i.x,s[10]=e.y,s[11]=i.z,s[12]=i.x,s[13]=i.y,s[14]=e.z,s[15]=e.x,s[16]=i.y,s[17]=e.z,s[18]=e.x,s[19]=e.y,s[20]=e.z,s[21]=i.x,s[22]=e.y,s[23]=e.z,n.needsUpdate=!0,this.geometry.computeBoundingSphere()}setFromObject(t){return this.object=t,this.update(),this}copy(t){return Lg.prototype.copy.call(this,t),this.object=t.object,this}}class Or extends Lg{constructor(t,e=16776960){const i=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),n=new Ts;n.setIndex(new ps(i,1)),n.setAttribute("position",new Ss([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3)),super(n,new Qg({color:e,toneMapped:!1})),this.box=t,this.type="Box3Helper",this.geometry.computeBoundingSphere()}updateMatrixWorld(t){const e=this.box;e.isEmpty()||(e.getCenter(this.position),e.getSize(this.scale),this.scale.multiplyScalar(.5),super.updateMatrixWorld(t))}}class _r extends Zg{constructor(t,e=1,i=16776960){const n=i,s=new Ts;s.setAttribute("position",new Ss([1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],3)),s.computeBoundingSphere(),super(s,new Qg({color:n,toneMapped:!1})),this.type="PlaneHelper",this.plane=t,this.size=e;const l=new Ts;l.setAttribute("position",new Ss([1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],3)),l.computeBoundingSphere(),this.add(new Il(l,new hs({color:n,opacity:.2,transparent:!0,depthWrite:!1,toneMapped:!1})))}updateMatrixWorld(t){let e=-this.plane.constant;Math.abs(e)<1e-8&&(e=1e-8),this.scale.set(.5*this.size,.5*this.size,e),this.children[0].material.side=e<0?B:u,this.lookAt(this.plane.normal),super.updateMatrixWorld(t)}}const qr=new Oi;let $r,tb;class eb extends On{constructor(t=new Oi(0,0,1),e=new Oi(0,0,0),i=1,n=16776960,s=.2*i,l=.2*s){super(),this.type="ArrowHelper",void 0===$r&&($r=new Ts,$r.setAttribute("position",new Ss([0,0,0,0,1,0],3)),tb=new zg(0,.5,1,5,1),tb.translate(0,-.5,0)),this.position.copy(e),this.line=new Zg($r,new Qg({color:n,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new Il(tb,new hs({color:n,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(t),this.setLength(i,s,l)}setDirection(t){if(t.y>.99999)this.quaternion.set(0,0,0,1);else if(t.y<-.99999)this.quaternion.set(1,0,0,0);else{qr.set(t.z,0,-t.x).normalize();const e=Math.acos(t.y);this.quaternion.setFromAxisAngle(qr,e)}}setLength(t,e=.2*t,i=.2*e){this.line.scale.set(1,Math.max(1e-4,t-e),1),this.line.updateMatrix(),this.cone.scale.set(i,e,i),this.cone.position.y=t,this.cone.updateMatrix()}setColor(t){this.line.material.color.set(t),this.cone.material.color.set(t)}copy(t){return super.copy(t,!1),this.line.copy(t.line),this.cone.copy(t.cone),this}}class ib extends Lg{constructor(t=1){const e=[0,0,0,t,0,0,0,0,0,0,t,0,0,0,0,0,0,t],i=new Ts;i.setAttribute("position",new Ss(e,3)),i.setAttribute("color",new Ss([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3)),super(i,new Qg({vertexColors:!0,toneMapped:!1})),this.type="AxesHelper"}}const nb=new Float32Array(1),sb=new Int32Array(nb.buffer),lb={toHalfFloat:function(t){nb[0]=t;const e=sb[0];let i=e>>16&32768,n=e>>12&2047;const s=e>>23&255;return s<103?i:s>142?(i|=31744,i|=(255==s?0:1)&&8388607&e,i):s<113?(n|=2048,i|=(n>>114-s)+(n>>113-s&1),i):(i|=s-112<<10|n>>1,i+=1&n,i)}},cb=Math.pow(2,8),ab=[.125,.215,.35,.446,.526,.582],gb=5+ab.length,Ib={[Oe]:0,[_e]:1,[$e]:2,[ei]:3,[ii]:4,[ni]:5,[qe]:6},db=new hs({side:B,depthWrite:!1,depthTest:!1}),ob=new Il(new ol,db),rb=new ao,{_lodPlanes:bb,_sizeLods:ub,_sigmas:Bb}=pb(),Fb=new Qs;let Cb=null;const Gb=(1+Math.sqrt(5))/2,Ub=1/Gb,Qb=[new Oi(1,1,1),new Oi(-1,1,1),new Oi(1,1,-1),new Oi(-1,1,-1),new Oi(0,Gb,Ub),new Oi(0,Gb,-Ub),new Oi(Ub,0,Gb),new Oi(-Ub,0,Gb),new Oi(Gb,Ub,0),new Oi(-Gb,Ub,0)];function hb(t){const e=Math.max(t.r,t.g,t.b),i=Math.min(Math.max(Math.ceil(Math.log2(e)),-128),127);return t.multiplyScalar(Math.pow(2,-i)),(i+128)/255}class mb{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._blurMaterial=function(t){const e=new Float32Array(20),i=new Oi(0,1,0);return new kI({name:"SphericalGaussianBlur",defines:{n:20},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:e},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:i},inputEncoding:{value:Ib[Oe]},outputEncoding:{value:Ib[Oe]}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t",blending:U,depthTest:!1,depthWrite:!1})}(),this._equirectShader=null,this._cubemapShader=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,i=.1,n=100){Cb=this._renderer.getRenderTarget();const s=this._allocateTargets();return this._sceneToCubeUV(t,i,n,s),e>0&&this._blur(s,0,0,e),this._applyPMREM(s),this._cleanup(s),s}fromEquirectangular(t){return this._fromTexture(t)}fromCubemap(t){return this._fromTexture(t)}compileCubemapShader(){null===this._cubemapShader&&(this._cubemapShader=yb(),this._compileMaterial(this._cubemapShader))}compileEquirectangularShader(){null===this._equirectShader&&(this._equirectShader=Rb(),this._compileMaterial(this._equirectShader))}dispose(){this._blurMaterial.dispose(),null!==this._cubemapShader&&this._cubemapShader.dispose(),null!==this._equirectShader&&this._equirectShader.dispose();for(let t=0;t<bb.length;t++)bb[t].dispose()}_cleanup(t){this._pingPongRenderTarget.dispose(),this._renderer.setRenderTarget(Cb),t.scissorTest=!1,Zb(t,0,0,t.width,t.height)}_fromTexture(t){Cb=this._renderer.getRenderTarget();const e=this._allocateTargets(t);return this._textureToCubeUV(t,e),this._applyPMREM(e),this._cleanup(e),e}_allocateTargets(t){const e={magFilter:ut,minFilter:ut,generateMipmaps:!1,type:pt,format:ft,encoding:xb(t)?t.encoding:$e,depthBuffer:!1},i=Vb(e);return i.depthBuffer=!t,this._pingPongRenderTarget=Vb(e),i}_compileMaterial(t){const e=new Il(bb[0],t);this._renderer.compile(e,rb)}_sceneToCubeUV(t,e,i,n){const s=new Cl(90,1,e,i),l=[1,-1,1,1,1,1],c=[1,1,1,-1,-1,-1],a=this._renderer,g=a.autoClear,I=a.outputEncoding,d=a.toneMapping;a.getClearColor(Fb),a.toneMapping=q,a.outputEncoding=Oe,a.autoClear=!1;let o=!1;const r=t.background;if(r){if(r.isColor){db.color.copy(r).convertSRGBToLinear(),t.background=null;const e=hb(db.color);db.opacity=e,o=!0}}else{db.color.copy(Fb).convertSRGBToLinear();const t=hb(db.color);db.opacity=t,o=!0}for(let e=0;e<6;e++){const i=e%3;0==i?(s.up.set(0,l[e],0),s.lookAt(c[e],0,0)):1==i?(s.up.set(0,0,l[e]),s.lookAt(0,c[e],0)):(s.up.set(0,l[e],0),s.lookAt(0,0,c[e])),Zb(n,i*cb,e>2?cb:0,cb,cb),a.setRenderTarget(n),o&&a.render(ob,s),a.render(t,s)}a.toneMapping=d,a.outputEncoding=I,a.autoClear=g}_textureToCubeUV(t,e){const i=this._renderer;t.isCubeTexture?null==this._cubemapShader&&(this._cubemapShader=yb()):null==this._equirectShader&&(this._equirectShader=Rb());const n=t.isCubeTexture?this._cubemapShader:this._equirectShader,s=new Il(bb[0],n),l=n.uniforms;l.envMap.value=t,t.isCubeTexture||l.texelSize.value.set(1/t.image.width,1/t.image.height),l.inputEncoding.value=Ib[t.encoding],l.outputEncoding.value=Ib[e.texture.encoding],Zb(e,0,0,3*cb,2*cb),i.setRenderTarget(e),i.render(s,rb)}_applyPMREM(t){const e=this._renderer,i=e.autoClear;e.autoClear=!1;for(let e=1;e<gb;e++){const i=Math.sqrt(Bb[e]*Bb[e]-Bb[e-1]*Bb[e-1]),n=Qb[(e-1)%Qb.length];this._blur(t,e-1,e,i,n)}e.autoClear=i}_blur(t,e,i,n,s){const l=this._pingPongRenderTarget;this._halfBlur(t,l,e,i,n,"latitudinal",s),this._halfBlur(l,t,i,i,n,"longitudinal",s)}_halfBlur(t,e,i,n,s,l,c){const a=this._renderer,g=this._blurMaterial;"latitudinal"!==l&&"longitudinal"!==l&&console.error("blur direction must be either latitudinal or longitudinal!");const I=new Il(bb[n],g),d=g.uniforms,o=ub[i]-1,r=isFinite(s)?Math.PI/(2*o):2*Math.PI/39,b=s/r,u=isFinite(s)?1+Math.floor(3*b):20;u>20&&console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${u} samples when the maximum is set to 20`);const B=[];let F=0;for(let t=0;t<20;++t){const e=t/b,i=Math.exp(-e*e/2);B.push(i),0==t?F+=i:t<u&&(F+=2*i)}for(let t=0;t<B.length;t++)B[t]=B[t]/F;d.envMap.value=t.texture,d.samples.value=u,d.weights.value=B,d.latitudinal.value="latitudinal"===l,c&&(d.poleAxis.value=c),d.dTheta.value=r,d.mipInt.value=8-i,d.inputEncoding.value=Ib[t.texture.encoding],d.outputEncoding.value=Ib[t.texture.encoding];const C=ub[n];Zb(e,3*Math.max(0,cb-2*C),(0===n?0:2*cb)+2*C*(n>4?n-8+4:0),3*C,2*C),a.setRenderTarget(e),a.render(I,rb)}}function xb(t){return void 0!==t&&t.type===pt&&(t.encoding===Oe||t.encoding===_e||t.encoding===qe)}function pb(){const t=[],e=[],i=[];let n=8;for(let s=0;s<gb;s++){const l=Math.pow(2,n);e.push(l);let c=1/l;s>4?c=ab[s-8+4-1]:0==s&&(c=0),i.push(c);const a=1/(l-1),g=-a/2,I=1+a/2,d=[g,g,I,g,I,I,g,g,I,I,g,I],o=6,r=6,b=3,u=2,B=1,F=new Float32Array(b*r*o),C=new Float32Array(u*r*o),G=new Float32Array(B*r*o);for(let t=0;t<o;t++){const e=t%3*2/3-1,i=t>2?0:-1,n=[e,i,0,e+2/3,i,0,e+2/3,i+1,0,e,i,0,e+2/3,i+1,0,e,i+1,0];F.set(n,b*r*t),C.set(d,u*r*t);const s=[t,t,t,t,t,t];G.set(s,B*r*t)}const U=new Ts;U.setAttribute("position",new ps(F,b)),U.setAttribute("uv",new ps(C,u)),U.setAttribute("faceIndex",new ps(G,B)),t.push(U),n>4&&n--}return{_lodPlanes:t,_sizeLods:e,_sigmas:i}}function Vb(t){const e=new Ki(3*cb,3*cb,t);return e.texture.mapping=It,e.texture.name="PMREM.cubeUv",e.scissorTest=!0,e}function Zb(t,e,i,n,s){t.viewport.set(e,i,n,s),t.scissor.set(e,i,n,s)}function Rb(){const t=new Ji(1,1);return new kI({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null},texelSize:{value:t},inputEncoding:{value:Ib[Oe]},outputEncoding:{value:Ib[Oe]}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tvec2 f = fract( uv / texelSize - 0.5 );\n\t\t\t\tuv -= f * texelSize;\n\t\t\t\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x += texelSize.x;\n\t\t\t\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.y += texelSize.y;\n\t\t\t\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x -= texelSize.x;\n\t\t\t\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\n\t\t\t\tvec3 tm = mix( tl, tr, f.x );\n\t\t\t\tvec3 bm = mix( bl, br, f.x );\n\t\t\t\tgl_FragColor.rgb = mix( tm, bm, f.y );\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t",blending:U,depthTest:!1,depthWrite:!1})}function yb(){return new kI({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},inputEncoding:{value:Ib[Oe]},outputEncoding:{value:Ib[Oe]}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\t\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t",blending:U,depthTest:!1,depthWrite:!1})}const Lb=0,Xb=1,Ab=0,Wb=1,Sb=2;function Eb(t){return console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead."),t}function Nb(t=[]){return console.warn("THREE.MultiMaterial has been removed. Use an Array instead."),t.isMultiMaterial=!0,t.materials=t,t.clone=function(){return t.slice()},t}function vb(t,e){return console.warn("THREE.PointCloud has been renamed to THREE.Points."),new vg(t,e)}function Yb(t){return console.warn("THREE.Particle has been renamed to THREE.Sprite."),new tg(t)}function Hb(t,e){return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."),new vg(t,e)}function Jb(t){return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."),new Ag(t)}function Mb(t){return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."),new Ag(t)}function fb(t){return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."),new Ag(t)}function kb(t,e,i){return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."),new Oi(t,e,i)}function zb(t,e){return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead."),new ps(t,e).setUsage(Vi)}function wb(t,e){return console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead."),new Vs(t,e)}function Tb(t,e){return console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead."),new Zs(t,e)}function Db(t,e){return console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead."),new Rs(t,e)}function Kb(t,e){return console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead."),new ys(t,e)}function jb(t,e){return console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead."),new Ls(t,e)}function Pb(t,e){return console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead."),new Xs(t,e)}function Ob(t,e){return console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead."),new As(t,e)}function _b(t,e){return console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead."),new Ss(t,e)}function qb(t,e){return console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead."),new Es(t,e)}function $b(t){return console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper."),new ib(t)}function tu(t,e){return console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead."),new Pr(t,e)}function eu(t,e){return console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead."),new Lg(new _g(t.geometry),new Qg({color:void 0!==e?e:16777215}))}function iu(t,e){return console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead."),new Lg(new JI(t.geometry),new Qg({color:void 0!==e?e:16777215}))}function nu(t){return console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader."),new Gd(t)}function su(t){return console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader."),new xd(t)}function lu(t,e,i){return console.warn("THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options )."),new hl(t,i)}function cu(){console.error("THREE.CanvasRenderer has been removed")}function au(){console.error("THREE.JSONLoader has been removed.")}Vd.create=function(t,e){return console.log("THREE.Curve.create() has been deprecated"),t.prototype=Object.create(Vd.prototype),t.prototype.constructor=t,t.prototype.getPoint=e,t},Dd.prototype.fromPoints=function(t){return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(t)},Hr.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},Ar.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},Fd.prototype.extractUrlBase=function(t){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),Fo.extractUrlBase(t)},Fd.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}},hr.prototype.center=function(t){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(t)},hr.prototype.empty=function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},hr.prototype.isIntersectionBox=function(t){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},hr.prototype.size=function(t){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(t)},$i.prototype.center=function(t){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(t)},$i.prototype.empty=function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},$i.prototype.isIntersectionBox=function(t){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},$i.prototype.isIntersectionSphere=function(t){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)},$i.prototype.size=function(t){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(t)},Fn.prototype.empty=function(){return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."),this.isEmpty()},Vl.prototype.setFromMatrix=function(t){return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."),this.setFromProjectionMatrix(t)},pr.prototype.center=function(t){return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),this.getCenter(t)},Hi.random16=function(){return console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead."),Math.random()},Hi.nearestPowerOfTwo=function(t){return console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo()."),Hi.floorPowerOfTwo(t)},Hi.nextPowerOfTwo=function(t){return console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo()."),Hi.ceilPowerOfTwo(t)},Mi.prototype.flattenToArrayOffset=function(t,e){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},Mi.prototype.multiplyVector3=function(t){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),t.applyMatrix3(this)},Mi.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},Mi.prototype.applyToBufferAttribute=function(t){return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."),t.applyMatrix3(this)},Mi.prototype.applyToVector3Array=function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")},Mi.prototype.getInverse=function(t){return console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(t).invert()},Vn.prototype.extractPosition=function(t){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(t)},Vn.prototype.flattenToArrayOffset=function(t,e){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},Vn.prototype.getPosition=function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),(new Oi).setFromMatrixColumn(this,3)},Vn.prototype.setRotationFromQuaternion=function(t){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(t)},Vn.prototype.multiplyToArray=function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},Vn.prototype.multiplyVector3=function(t){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Vn.prototype.multiplyVector4=function(t){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Vn.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},Vn.prototype.rotateAxis=function(t){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),t.transformDirection(this)},Vn.prototype.crossVector=function(t){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Vn.prototype.translate=function(){console.error("THREE.Matrix4: .translate() has been removed.")},Vn.prototype.rotateX=function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},Vn.prototype.rotateY=function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},Vn.prototype.rotateZ=function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},Vn.prototype.rotateByAxis=function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},Vn.prototype.applyToBufferAttribute=function(t){return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Vn.prototype.applyToVector3Array=function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},Vn.prototype.makeFrustum=function(t,e,i,n,s,l){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(t,e,n,i,s,l)},Vn.prototype.getInverse=function(t){return console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(t).invert()},ts.prototype.isIntersectionLine=function(t){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(t)},Pi.prototype.multiplyVector3=function(t){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),t.applyQuaternion(this)},Pi.prototype.inverse=function(){return console.warn("THREE.Quaternion: .inverse() has been renamed to invert()."),this.invert()},pn.prototype.isIntersectionBox=function(t){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},pn.prototype.isIntersectionPlane=function(t){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(t)},pn.prototype.isIntersectionSphere=function(t){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)},os.prototype.area=function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},os.prototype.barycoordFromPoint=function(t,e){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(t,e)},os.prototype.midpoint=function(t){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(t)},os.prototypenormal=function(t){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(t)},os.prototype.plane=function(t){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(t)},os.barycoordFromPoint=function(t,e,i,n,s){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),os.getBarycoord(t,e,i,n,s)},os.normal=function(t,e,i,n){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),os.getNormal(t,e,i,n)},Kd.prototype.extractAllPoints=function(t){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(t)},Kd.prototype.extrude=function(t){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new VI(this,t)},Kd.prototype.makeGeometry=function(t){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new WI(this,t)},Ji.prototype.fromAttribute=function(t,e,i){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,i)},Ji.prototype.distanceToManhattan=function(t){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},Ji.prototype.lengthManhattan=function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},Oi.prototype.setEulerFromRotationMatrix=function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},Oi.prototype.setEulerFromQuaternion=function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},Oi.prototype.getPositionFromMatrix=function(t){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(t)},Oi.prototype.getScaleFromMatrix=function(t){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(t)},Oi.prototype.getColumnFromMatrix=function(t,e){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(e,t)},Oi.prototype.applyProjection=function(t){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(t)},Oi.prototype.fromAttribute=function(t,e,i){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,i)},Oi.prototype.distanceToManhattan=function(t){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},Oi.prototype.lengthManhattan=function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},Di.prototype.fromAttribute=function(t,e,i){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,i)},Di.prototype.lengthManhattan=function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},On.prototype.getChildByName=function(t){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(t)},On.prototype.renderDepth=function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},On.prototype.translate=function(t,e){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(e,t)},On.prototype.getWorldRotation=function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")},On.prototype.applyMatrix=function(t){return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(t)},Object.defineProperties(On.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(t){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=t}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),Il.prototype.setDrawMode=function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")},Object.defineProperties(Il.prototype,{drawMode:{get:function(){return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."),Ke},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}}),Object.defineProperties(sg.prototype,{objects:{get:function(){return console.warn("THREE.LOD: .objects has been renamed to .levels."),this.levels}}}),Object.defineProperty(ug.prototype,"useVertexTexture",{get:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")},set:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")}}),dg.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")},Object.defineProperty(Vd.prototype,"__arcLengthDivisions",{get:function(){return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions},set:function(t){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions=t}}),Cl.prototype.setLens=function(t,e){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==e&&(this.filmGauge=e),this.setFocalLength(t)},Object.defineProperties(jd.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(t){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=t}},shadowCameraLeft:{set:function(t){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=t}},shadowCameraRight:{set:function(t){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=t}},shadowCameraTop:{set:function(t){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=t}},shadowCameraBottom:{set:function(t){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=t}},shadowCameraNear:{set:function(t){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=t}},shadowCameraFar:{set:function(t){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=t}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(t){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=t}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(t){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=t}},shadowMapHeight:{set:function(t){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=t}}}),Object.defineProperties(ps.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},dynamic:{get:function(){return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.usage===Vi},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.setUsage(Vi)}}}),ps.prototype.setDynamic=function(t){return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===t?Vi:pi),this},ps.prototype.copyIndicesArray=function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},ps.prototype.setArray=function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},Ts.prototype.addIndex=function(t){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(t)},Ts.prototype.addAttribute=function(t,e){return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),e&&e.isBufferAttribute||e&&e.isInterleavedBufferAttribute?"index"===t?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(e),this):this.setAttribute(t,e):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(t,new ps(arguments[1],arguments[2])))},Ts.prototype.addDrawCall=function(t,e,i){void 0!==i&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(t,e)},Ts.prototype.clearDrawCalls=function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},Ts.prototype.computeOffsets=function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")},Ts.prototype.removeAttribute=function(t){return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),this.deleteAttribute(t)},Ts.prototype.applyMatrix=function(t){return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(t)},Object.defineProperties(Ts.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),Object.defineProperties(Co.prototype,{maxInstancedCount:{get:function(){return console.warn("THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount."),this.instanceCount},set:function(t){console.warn("THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount."),this.instanceCount=t}}}),Object.defineProperties(Br.prototype,{linePrecision:{get:function(){return console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead."),this.params.Line.threshold},set:function(t){console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead."),this.params.Line.threshold=t}}}),Object.defineProperties(Ya.prototype,{dynamic:{get:function(){return console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead."),this.usage===Vi},set:function(t){console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead."),this.setUsage(t)}}}),Ya.prototype.setDynamic=function(t){return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===t?Vi:pi),this},Ya.prototype.setArray=function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},VI.prototype.getArrays=function(){console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.")},VI.prototype.addShapeList=function(){console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.")},VI.prototype.addShape=function(){console.error("THREE.ExtrudeGeometry: .addShape() has been removed.")},va.prototype.dispose=function(){console.error("THREE.Scene: .dispose() has been removed.")},Object.defineProperties(rr.prototype,{dynamic:{set:function(){console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")}},onUpdate:{value:function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this}}}),Object.defineProperties(bs.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new Qs}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(t){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=t===C}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(t){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=t}}}),Object.defineProperties(TI.prototype,{metal:{get:function(){return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."),!1},set:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}}),Object.defineProperties(wI.prototype,{transparency:{get:function(){return console.warn("THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission."),this.transmission},set:function(t){console.warn("THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission."),this.transmission=t}}}),Object.defineProperties(Bl.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(t){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=t}}}),Wa.prototype.clearTarget=function(t,e,i,n){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(t),this.clear(e,i,n)},Wa.prototype.animate=function(t){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(t)},Wa.prototype.getCurrentRenderTarget=function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},Wa.prototype.getMaxAnisotropy=function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},Wa.prototype.getPrecision=function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},Wa.prototype.resetGLState=function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},Wa.prototype.supportsFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},Wa.prototype.supportsHalfFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},Wa.prototype.supportsStandardDerivatives=function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},Wa.prototype.supportsCompressedTextureS3TC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},Wa.prototype.supportsCompressedTexturePVRTC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},Wa.prototype.supportsBlendMinMax=function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},Wa.prototype.supportsVertexTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},Wa.prototype.supportsInstancedArrays=function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},Wa.prototype.enableScissorTest=function(t){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(t)},Wa.prototype.initMaterial=function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},Wa.prototype.addPrePlugin=function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},Wa.prototype.addPostPlugin=function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},Wa.prototype.updateShadowMap=function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},Wa.prototype.setFaceCulling=function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")},Wa.prototype.allocTextureUnit=function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")},Wa.prototype.setTexture=function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")},Wa.prototype.setTexture2D=function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")},Wa.prototype.setTextureCube=function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")},Wa.prototype.getActiveMipMapLevel=function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()},Object.defineProperties(Wa.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=t}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=t}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}},vr:{get:function(){return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"),this.xr}},gammaInput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."),!1},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),!1},set:function(t){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),this.outputEncoding=!0===t?_e:Oe}},toneMappingWhitePoint:{get:function(){return console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed."),1},set:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.")}}}),Object.defineProperties(xa.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(Ki.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=t}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=t}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=t}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=t}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(t){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=t}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(t){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=t}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(t){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=t}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(t){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=t}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(t){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=t}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(t){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=t}}}),Object.defineProperties(wo.prototype,{load:{value:function(t){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");const e=this;return(new Ao).load(t,(function(t){e.setBuffer(t)})),this}},startTime:{set:function(){console.warn("THREE.Audio: .startTime is now .play( delay ).")}}}),Oo.prototype.getData=function(){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()},Ul.prototype.updateCubeMap=function(t,e){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(t,e)},Ul.prototype.clear=function(t,e,i,n){return console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear()."),this.renderTarget.clear(t,e,i,n)},ki.crossOrigin=void 0,ki.loadTexture=function(t,e,i,n){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");const s=new pd;s.setCrossOrigin(this.crossOrigin);const l=s.load(t,i,void 0,n);return e&&(l.mapping=e),l},ki.loadTextureCube=function(t,e,i,n){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");const s=new md;s.setCrossOrigin(this.crossOrigin);const l=s.load(t,i,void 0,n);return e&&(l.mapping=e),l},ki.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},ki.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};const gu={createMultiMaterialObject:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")},detach:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")},attach:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")}};function Iu(){console.error("THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js")}"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:n}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=n)},723:t=>{function e(){}e.prototype={on:function(t,e,i){var n=this.e||(this.e={});return(n[t]||(n[t]=[])).push({fn:e,ctx:i}),this},once:function(t,e,i){var n=this;function s(){n.off(t,s),e.apply(i,arguments)}return s._=e,this.on(t,s,i)},emit:function(t){for(var e=[].slice.call(arguments,1),i=((this.e||(this.e={}))[t]||[]).slice(),n=0,s=i.length;n<s;n++)i[n].fn.apply(i[n].ctx,e);return this},off:function(t,e){var i=this.e||(this.e={}),n=i[t],s=[];if(n&&e)for(var l=0,c=n.length;l<c;l++)n[l].fn!==e&&n[l].fn._!==e&&s.push(n[l]);return s.length?i[t]=s:delete i[t],this}},t.exports=e,t.exports.TinyEmitter=e}}]);