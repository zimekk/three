/*! For license information please see 465.js.LICENSE.txt */
(self.webpackChunk_dev_web=self.webpackChunk_dev_web||[]).push([[465],{654:(g,I,C)=>{"use strict";function e(){return(e=Object.assign||function(g){for(var I=1;I<arguments.length;I++){var C=arguments[I];for(var e in C)Object.prototype.hasOwnProperty.call(C,e)&&(g[e]=C[e])}return g}).apply(this,arguments)}C.d(I,{Z:()=>e})},248:(g,I,C)=>{"use strict";C.d(I,{wI:()=>m,EJ:()=>G,xK:()=>r,Eo:()=>h});var e=C(784),t=C(194),A=C(955);const i=(0,e.createContext)({});var o,n=("",null,!1,function(g){return o=o||function(g,I,C){var e=void 0===I?null:I,t=function(g,I){var C=atob(g);if(I){for(var e=new Uint8Array(C.length),t=0,A=C.length;t<A;++t)e[t]=C.charCodeAt(t);return String.fromCharCode.apply(null,new Uint16Array(e.buffer))}return C}(g,void 0!==C&&C),A=t.indexOf("\n",10)+1,i=t.substring(A)+(e?"//# sourceMappingURL="+e:""),o=new Blob([i],{type:"application/javascript"});return URL.createObjectURL(o)}("",null,false),new Worker(o,g)});function l({children:g,step:I=1/60,gravity:C=[0,-10,0],tolerance:A=.001,iterations:o=5,allowSleep:l=!1,broadphase:a="Naive",axisIndex:c=0,defaultContactMaterial:s={contactEquationStiffness:1e6},size:d=1e3}){const{gl:b,invalidate:r}=(0,t.Ky)(),[G]=(0,e.useState)((()=>new n)),[h]=(0,e.useState)({}),[m]=(0,e.useState)((()=>({positions:new Float32Array(3*d),quaternions:new Float32Array(4*d)}))),[u]=(0,e.useState)({}),[B]=(0,e.useState)({}),Z=(0,e.useRef)({}),p=(0,e.useMemo)((()=>()=>{0!==m.positions.byteLength&&0!==m.quaternions.byteLength&&G.postMessage({op:"step",...m},[m.positions.buffer,m.quaternions.buffer])}),[]),W=(0,e.useRef)(!1);(0,t.xQ)((()=>{var g,I,C;null!=(g=b.xr)&&g.isPresenting&&!W.current&&b.xr.getSession().requestAnimationFrame(p),null!=(I=b.xr)&&I.isPresenting||!W.current||requestAnimationFrame(p),W.current=null==(C=b.xr)?void 0:C.isPresenting})),(0,e.useEffect)((()=>(G.postMessage({op:"init",props:{gravity:C,tolerance:A,step:I,iterations:o,broadphase:a,allowSleep:l,axisIndex:c,defaultContactMaterial:s}}),G.onmessage=g=>{switch(g.data.op){case"frame":g.data.bodies&&(Z.current=g.data.bodies.reduce(((I,C)=>({...I,[C]:g.data.bodies.indexOf(C)})),{})),m.positions=g.data.positions,m.quaternions=g.data.quaternions,g.data.observations.forEach((([g,I])=>B[g](I))),b.xr&&b.xr.isPresenting?b.xr.getSession().requestAnimationFrame(p):requestAnimationFrame(p),g.data.active&&r();break;case"event":switch(g.data.type){case"collide":u[g.data.target]({...g.data,target:h[g.data.target],body:h[g.data.body]});break;case"rayhit":u[g.data.ray.uuid]({...g.data,body:g.data.body?h[g.data.body]:null})}}},p(),()=>G.terminate())),[]);const y=(0,e.useMemo)((()=>({worker:G,bodies:Z,refs:h,buffers:m,events:u,subscriptions:B})),[G,Z,h,m,u,B]);return e.createElement(i.Provider,{value:y},g)}const a=new A.Object3D;function c(g,I,C){return I.args=C(I.args),g.userData=I.userData||{},g.position.set(...I.position||[0,0,0]),g.rotation.set(...I.rotation||[0,0,0]),I}function s(g,I,C){void 0!==I&&(g.position.fromArray(C.positions,3*I),g.quaternion.fromArray(C.quaternions,4*I))}let d=0;function b(g,I,C,o,n=[]){const l=(0,e.useRef)(null),b=o||l,{worker:r,bodies:G,buffers:h,refs:m,events:u,subscriptions:B}=(0,e.useContext)(i);(0,e.useLayoutEffect)((()=>{b.current||(b.current=new A.Object3D);const e=b.current,t=r;let i,o=[e.uuid];return e instanceof A.InstancedMesh?(e.instanceMatrix.setUsage(A.DynamicDrawUsage),o=new Array(e.count).fill(0).map(((g,I)=>e.uuid+"/"+I)),i=o.map(((g,t)=>{const A=c(a,I(t),C);return a.updateMatrix(),e.setMatrixAt(t,a.matrix),e.instanceMatrix.needsUpdate=!0,A}))):i=[c(e,I(0),C)],i.forEach(((g,I)=>{m[o[I]]=e,g.onCollide&&(u[o[I]]=g.onCollide,g.onCollide=!0)})),t.postMessage({op:"addBodies",type:g,uuid:o,props:i}),()=>{i.forEach(((g,I)=>{delete m[o[I]],g.onCollide&&delete u[o[I]]})),t.postMessage({op:"removeBodies",uuid:o})}}),n),(0,t.xQ)((()=>{if(b.current&&h.positions.length&&h.quaternions.length)if(b.current instanceof A.InstancedMesh)for(let g=0;g<b.current.count;g++){const I=G.current[b.current.uuid+"/"+g];void 0!==I&&(s(a,I,h),a.updateMatrix(),b.current.setMatrixAt(g,a.matrix)),b.current.instanceMatrix.needsUpdate=!0}else s(b.current,G.current[b.current.uuid],h)}));const Z=(0,e.useMemo)((()=>{const g=g=>void 0!==g?b.current.uuid+"/"+g:b.current.uuid,I=(I,C,e)=>b.current&&r.postMessage({op:I,uuid:g(C),props:e}),C=(g,C)=>e=>{const t=d++;return B[t]=e,I("subscribe",C,{id:t,type:g}),()=>{delete B[t],I("unsubscribe",C,t)}},e=(g,I)=>g+I.charAt(0).toUpperCase()+I.slice(1),t=(g,t)=>({set:(C,A,i)=>I(e("set",g),t,[C,A,i]),copy:({x:C,y:A,z:i})=>I(e("set",g),t,[C,A,i]),subscribe:C(g,t)}),A=(g,t)=>({set:C=>I(e("set",g),t,C),subscribe:C(g,t)});function i(g){return{position:t("position",g),rotation:t("quaternion",g),velocity:t("velocity",g),angularVelocity:t("angularVelocity",g),linearFactor:t("linearFactor",g),angularFactor:t("angularFactor",g),mass:A("mass",g),linearDamping:A("linearDamping",g),angularDamping:A("angularDamping",g),allowSleep:A("allowSleep",g),sleepSpeedLimit:A("sleepSpeedLimit",g),sleepTimeLimit:A("sleepTimeLimit",g),collisionFilterGroup:A("collisionFilterGroup",g),collisionFilterMask:A("collisionFilterMask",g),collisionResponse:A("collisionResponse",g),fixedRotation:A("fixedRotation",g),userData:A("userData",g),applyForce(C,e){I("applyForce",g,[C,e])},applyImpulse(C,e){I("applyImpulse",g,[C,e])},applyLocalForce(C,e){I("applyLocalForce",g,[C,e])},applyLocalImpulse(C,e){I("applyLocalImpulse",g,[C,e])}}}const o={};return{...i(void 0),at:g=>o[g]||(o[g]=i(g))}}),[]);return[b,Z]}function r(g,I,C){return b("Plane",g,(()=>[]),I,C)}function G(g,I,C){return b("Box",g,(g=>g||[1,1,1]),I,C)}function h(g,I,C){return b("Sphere",g,(g=>[null!=g?g:1]),I,C)}function m(g){return e.createElement(e.Suspense,{fallback:null},e.createElement(l,g))}},194:(g,I,C)=>{"use strict";C.d(I,{Xz:()=>k,gy:()=>N,nH:()=>_,z6:()=>D,xQ:()=>Q,U2:()=>T,Ky:()=>M});var e=C(955),t=C(784),A=C(467);const i=function(g,I){if(Object.is(g,I))return!0;if("object"!=typeof g||null===g||"object"!=typeof I||null===I)return!1;const C=Object.keys(g);if(C.length!==Object.keys(I).length)return!1;for(let e=0;e<C.length;e++)if(!Object.prototype.hasOwnProperty.call(I,C[e])||!Object.is(g[C[e]],I[C[e]]))return!1;return!0};var o=C(962),n=C.n(o),l=C(76),a=C(378),c=C.n(a);const s=[];function d(g,I,C,e=0,t=!1){for(const g of I)if(c()(C,g.args)){if(t)return;if(g.error)throw g.error;if(g.response)return g.response;throw g.promise}const A={args:C,promise:g(...C).then((g=>A.response=null==g||g)).catch((g=>A.error=null!=g?g:"unknown error")).then((()=>{e>0&&setTimeout((()=>{const g=I.indexOf(A);-1!==g&&I.splice(g,1)}),e)}))};if(I.push(A),!t)throw A.promise}function b(g,...I){return d(g,s,I,b.lifespan)}b.lifespan=0,b.clear=(...g)=>function(g,...I){if(void 0===I||0===I.length)g.splice(0,g.length);else{const C=g.find((g=>c()(I,g.args)));if(C){const I=g.indexOf(C);-1!==I&&g.splice(I,1)}}}(s,...g),b.preload=(g,...I)=>{d(g,s,I,b.lifespan,!0)},b.peek=(...g)=>{var I;return null==(I=s.find((I=>c()(g,I.args))))?void 0:I.response};var r=C(386);function G(g){const I=[];if(!g||g===document.body)return I;const{overflow:C,overflowX:e,overflowY:t}=window.getComputedStyle(g);return[C,e,t].some((g=>"auto"===g||"scroll"===g))&&I.push(g),[...I,...G(g.parentElement)]}const h=["x","y","top","bottom","left","right","width","height"],m=function({debounce:g,scroll:I,polyfill:C}={debounce:0,scroll:!1}){const e=C||("undefined"==typeof window?class{}:window.ResizeObserver);if(!e)throw new Error("This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills");const[A,i]=(0,t.useState)({left:0,top:0,width:0,height:0,bottom:0,right:0,x:0,y:0}),o=(0,t.useRef)({element:null,scrollContainers:null,resizeObserver:null,lastBounds:A}),n=g?"number"==typeof g?g:g.scroll:null,l=g?"number"==typeof g?g:g.resize:null,a=(0,t.useRef)(!1);(0,t.useEffect)((()=>(a.current=!0,()=>{a.current=!1})));const[c,s,d]=(0,t.useMemo)((()=>{const g=()=>{if(!o.current.element)return;const{left:g,top:I,width:C,height:e,bottom:t,right:A,x:n,y:l}=o.current.element.getBoundingClientRect(),c={left:g,top:I,width:C,height:e,bottom:t,right:A,x:n,y:l};var s,d;Object.freeze(c),a.current&&(s=o.current.lastBounds,d=c,!h.every((g=>s[g]===d[g])))&&i(o.current.lastBounds=c)};return[g,l?(0,r.debounce)(g,l):g,n?(0,r.debounce)(g,n):g]}),[i,n,l]);function b(){o.current.scrollContainers&&(o.current.scrollContainers.forEach((g=>g.removeEventListener("scroll",d,!0))),o.current.scrollContainers=null),o.current.resizeObserver&&(o.current.resizeObserver.disconnect(),o.current.resizeObserver=null)}function m(){o.current.element&&(o.current.resizeObserver=new e(d),o.current.resizeObserver.observe(o.current.element),I&&o.current.scrollContainers&&o.current.scrollContainers.forEach((g=>g.addEventListener("scroll",d,{capture:!0,passive:!0}))))}var u,B,Z;return u=d,B=Boolean(I),(0,t.useEffect)((()=>{if(B){const g=u;return window.addEventListener("scroll",g,{capture:!0,passive:!0}),()=>{window.removeEventListener("scroll",g,!0)}}}),[u,B]),Z=s,(0,t.useEffect)((()=>{const g=Z;return window.addEventListener("resize",g),()=>{window.removeEventListener("resize",g)}}),[Z]),(0,t.useEffect)((()=>{b(),m()}),[I,d,s]),(0,t.useEffect)((()=>b),[]),[g=>{g&&g!==o.current.element&&(b(),o.current.element=g,o.current.scrollContainers=G(g),m())},A,c]},u={obj:g=>g===Object(g)&&!u.arr(g)&&"function"!=typeof g,fun:g=>"function"==typeof g,str:g=>"string"==typeof g,num:g=>"number"==typeof g,und:g=>void 0===g,arr:g=>Array.isArray(g),equ(g,I){if(typeof g!=typeof I||!!g!=!!I)return!1;if(u.str(g)||u.num(g)||u.obj(g))return g===I;if(u.arr(g)&&g==I)return!0;let C;for(C in g)if(!(C in I))return!1;for(C in I)if(g[C]!==I[C])return!1;return!u.und(C)||g===I}};function B(g){return(g.eventObject||g.object).uuid+"/"+g.index}const Z=g=>g&&!!g.getState,p=(g,I)=>{var C,e;return{root:Z(g)?g:null!=(C=null==(e=g.__r3f)?void 0:e.root)?C:I.__r3f.root,container:Z(g)?g.getState().scene:g}},W="__default",y={},V=["children","key","ref"];let v={};function Y(g,I){const C=g;return(null!=I&&I.instance||!C.__r3f)&&(C.__r3f={root:null,memoizedProps:{},objects:[],...I}),g}const X=g=>g&&g.isOrthographicCamera,R=t.createContext(null);let H,w=[],K=[],S=[];const N=g=>function(g,I){const C=I.length;return I.push(g),()=>{I.splice(C,1)}}(g,w);function F(g,I){for(H=0;H<g.length;H++)g[H](I)}function z(g,I){let C=I.clock.getDelta();for("never"===I.frameloop&&"number"==typeof g&&(C=g-I.clock.elapsedTime,I.clock.oldTime=I.clock.elapsedTime,I.clock.elapsedTime=g),H=0;H<I.internal.subscribers.length;H++)I.internal.subscribers[H].ref.current(I,C);return!I.internal.priority&&I.gl.render&&I.gl.render(I.scene,I.camera),I.internal.frames=Math.max(0,I.internal.frames-1),"always"===I.frameloop?1:I.internal.frames}function f(g){const{handlePointer:I}=function(g){const I=new e.Vector3;function C(I){const{internal:C}=g.getState(),e=I.offsetX-C.initialClick[0],t=I.offsetY-C.initialClick[1];return Math.round(Math.sqrt(e*e+t*t))}function t(g){return g.filter((g=>["Move","Over","Enter","Out","Leave"].some((I=>{var C;return null==(C=g.__r3f.handlers)?void 0:C["onPointer"+I]}))))}function A(I){const{internal:C}=g.getState();Array.from(C.hovered.values()).forEach((g=>{if(!I.length||!I.find((I=>I.object===g.object&&I.index===g.index))){const e=g.eventObject.__r3f.handlers;if(C.hovered.delete(B(g)),e){const C={...g,intersections:I||[]};null==e.onPointerOut||e.onPointerOut(C),null==e.onPointerLeave||e.onPointerLeave(C)}}}))}function i(g,I){I.forEach((I=>{var C;return null==(C=I.__r3f.handlers)||null==C.onPointerMissed?void 0:C.onPointerMissed(g)}))}return{handlePointer:e=>{switch(e){case"onPointerLeave":case"onPointerCancel":return()=>A([]);case"onLostPointerCapture":return I=>{"pointerId"in I&&g.getState().internal.capturedMap.delete(I.pointerId),A([])}}return o=>{const{onPointerMissed:n,internal:l}=g.getState();!function(I){var C;const e=g.getState(),{raycaster:t,mouse:A,camera:i,size:o}=e,{offsetX:n,offsetY:l}=null!=(C=null==t.computeOffsets?void 0:t.computeOffsets(I,e))?C:I,{width:a,height:c}=o;A.set(n/a*2-1,-l/c*2+1),t.setFromCamera(A,i)}(o);const a="onPointerMove"===e,c=function(I,C){const{internal:e}=g.getState();return"pointerId"in C&&e.capturedMap.has(C.pointerId)&&I.push(...e.capturedMap.get(C.pointerId).values()),I}(function(I){const C=g.getState(),{raycaster:e,internal:t}=C;if(!e.enabled)return[];const A=new Set,i=[],o=I?I(t.interaction):t.interaction;let n=e.intersectObjects(o,!0).filter((g=>{const I=B(g);return!A.has(I)&&(A.add(I),!0)}));e.filter&&(n=e.filter(n,C));for(const g of n){let I=g.object;for(;I;){var l;(null==(l=I.__r3f)?void 0:l.handlers)&&i.push({...g,eventObject:I}),I=I.parent}}return i}(a?t:void 0),o);a&&A(c),function(e,t,i){const{raycaster:o,mouse:n,camera:l,internal:a}=g.getState();if(e.length){const g=I.set(n.x,n.y,0).unproject(l),c="click"===t.type?C(t):0,s=g=>t.target.releasePointerCapture(g),d={stopped:!1};for(const I of e){const C=g=>{var C,e;return null!=(C=null==(e=a.capturedMap.get(g))?void 0:e.has(I.eventObject))&&C},b=g=>{a.capturedMap.has(g)?a.capturedMap.get(g).set(I.eventObject,I):a.capturedMap.set(g,new Map([[I.eventObject,I]])),t.target.setPointerCapture(g)};let r={};for(let g in Object.getPrototypeOf(t)){let I=t[g];"function"!=typeof I&&(r[g]=I)}let G={...I,...r,spaceX:n.x,spaceY:n.y,intersections:e,stopped:d.stopped,delta:c,unprojectedPoint:g,ray:o.ray,camera:l,stopPropagation:()=>{var g;(!("pointerId"in t)||null!=(g=a.capturedMap.get(t.pointerId))&&g.has(I.eventObject))&&(G.stopped=d.stopped=!0,a.hovered.size&&Array.from(a.hovered.values()).find((g=>g.eventObject===I.eventObject)))&&A([...e.slice(0,e.indexOf(I)),I])},target:{hasPointerCapture:C,setPointerCapture:b,releasePointerCapture:s},currentTarget:{hasPointerCapture:C,setPointerCapture:b,releasePointerCapture:s},sourceEvent:t,nativeEvent:t};if(i(G),!0===d.stopped)break}}}(c,o,(g=>{const I=g.eventObject,C=I.__r3f.handlers;if(C)if(a){if(C.onPointerOver||C.onPointerEnter||C.onPointerOut||C.onPointerLeave){const I=B(g),e=l.hovered.get(I);e?e.stopped&&g.stopPropagation():(l.hovered.set(I,g),null==C.onPointerOver||C.onPointerOver(g),null==C.onPointerEnter||C.onPointerEnter(g))}null==C.onPointerMove||C.onPointerMove(g)}else{const t=null==C?void 0:C[e];t&&("onClick"!==e&&"onContextMenu"!==e&&"onDoubleClick"!==e||l.initialHits.includes(I))&&(t(g),i(o,l.interaction.filter((g=>g!==I))))}})),"onPointerDown"===e&&(l.initialClick=[o.offsetX,o.offsetY],l.initialHits=c.map((g=>g.eventObject))),"onClick"!==e&&"onContextMenu"!==e&&"onDoubleClick"!==e||c.length||C(o)<=2&&(i(o,l.interaction),n&&n(o))}}}}(g),C={onClick:["click",!1],onContextMenu:["contextmenu",!1],onDoubleClick:["dblclick",!1],onWheel:["wheel",!0],onPointerDown:["pointerdown",!0],onPointerUp:["pointerup",!0],onPointerLeave:["pointerleave",!0],onPointerMove:["pointermove",!0],onPointerCancel:["pointercancel",!0],onLostPointerCapture:["lostpointercapture",!0]};return{connected:!1,handlers:Object.keys(C).reduce(((g,C)=>({...g,[C]:I(C)})),{}),connect:I=>{var e;const{set:t,events:A}=g.getState();null==A.disconnect||A.disconnect(),t((g=>({events:{...g.events,connected:I}}))),Object.entries(null!=(e=null==A?void 0:A.handlers)?e:[]).forEach((([g,e])=>{const[t,A]=C[g];I.addEventListener(t,e,{passive:A})}))},disconnect:()=>{const{set:I,events:e}=g.getState();var t;e.connected&&(Object.entries(null!=(t=e.handlers)?t:[]).forEach((([g,I])=>{if(e&&e.connected instanceof HTMLElement){const[t]=C[g];e.connected.removeEventListener(t,I)}})),I((g=>({events:{...g.events,connected:!1}}))))}}}const x="undefined"!=typeof window?t.useLayoutEffect:t.useEffect;function J({set:g}){return x((()=>(g(new Promise((()=>null))),()=>g(!1))),[]),null}class L extends t.Component{constructor(...g){super(...g),this.state={error:!1}}componentDidCatch(g){this.props.set(g)}render(){return this.state.error?null:this.props.children}}function k({children:g,fallback:I,tabIndex:C,resize:o,id:n,style:l,className:a,events:c,...s}){const[d,b]=m({scroll:!0,debounce:{scroll:50,resize:0},...o}),r=t.useRef(null),[G,h]=t.useState(!1),[B,Z]=t.useState(!1);if(G)throw G;if(B)throw B;return x((()=>{b.width>0&&b.height>0&&function(g,I,{gl:C,size:o,mode:n=j[1],events:l,onCreated:a,...c}={}){var s,d,b,r,G;o||(o={width:null!=(d=null==(b=I.parentElement)?void 0:b.clientWidth)?d:0,height:null!=(r=null==(G=I.parentElement)?void 0:G.clientHeight)?r:0});let h=E.get(I),m=null==h?void 0:h.fiber,B=null==h?void 0:h.store,Z=null==(s=B)?void 0:s.getState();if(m&&Z){const g=Z.internal.lastProps;void 0===c.dpr||u.equ(g.dpr,c.dpr)||Z.setDpr(c.dpr),void 0===o||u.equ(g.size,o)||Z.setSize(o.width,o.height),c.linear!==g.linear&&($(I),m=void 0)}if(!m){const g=((g,I)=>{return(C=g)&&C.render?g:new e.WebGLRenderer({powerPreference:"high-performance",canvas:I,antialias:!0,alpha:!0,...g});var C})(C,I);c.vr&&(g.xr.enabled=!0,g.setAnimationLoop((g=>O(g,!0)))),B=((g,I,C,t)=>{const{gl:o,size:n,shadows:l=!1,linear:a=!1,flat:c=!1,vr:s=!1,orthographic:d=!1,frameloop:b="always",dpr:r=1,performance:G,clock:h=new e.Clock,raycaster:m,camera:u,onPointerMissed:B}=t;l&&(o.shadowMap.enabled=!0,"object"==typeof l?Object.assign(o.shadowMap,l):o.shadowMap.type=e.PCFSoftShadowMap),a||(c||(o.toneMapping=e.ACESFilmicToneMapping),o.outputEncoding=e.sRGBEncoding),"never"===b&&(h.stop(),h.elapsedTime=0);const Z=(0,A.Z)(((A,i)=>{const n=new e.Raycaster,{params:l,...Z}=m||{};g(n,{enabled:!0,...Z,params:{...n.params,...l}},{});const p=u instanceof e.Camera,W=p?u:d?new e.OrthographicCamera(0,0,0,0,.1,1e3):new e.PerspectiveCamera(75,0,.1,1e3);function y(g){return Array.isArray(g)?Math.min(Math.max(g[0],window.devicePixelRatio),g[1]):g}p||(W.position.z=5,u&&g(W,u,{}),W.lookAt(0,0,0));const V=y(r),v=new e.Vector3,R=new e.Vector3;function H(g=i().camera,I=R,C=i().size){const{width:e,height:t}=C,A=e/t,o=g.getWorldPosition(v).distanceTo(I);if(X(g))return{width:e/g.zoom,height:t/g.zoom,factor:1,distance:o,aspect:A};{const I=g.fov*Math.PI/180,C=2*Math.tan(I/2)*o,i=C*(e/t);return{width:i,height:C,factor:e/i,distance:o,aspect:A}}}let w;const K=g=>A((I=>({performance:{...I.performance,current:g}})));return{gl:o,set:A,get:i,invalidate:()=>I(i()),advance:(g,I)=>C(g,I,i()),linear:a,flat:c,scene:Y(new e.Scene),camera:W,raycaster:n,clock:h,mouse:new e.Vector2,vr:s,frameloop:b,onPointerMissed:B,performance:{current:1,min:.5,max:1,debounce:200,...G,regress:()=>{const g=i();w&&clearTimeout(w),g.performance.current!==g.performance.min&&K(g.performance.min),w=setTimeout((()=>K(i().performance.max)),g.performance.debounce)}},size:{width:0,height:0},viewport:{initialDpr:V,dpr:V,width:0,height:0,aspect:0,distance:0,factor:0,getCurrentViewport:H},setSize:(g,I)=>{const C={width:g,height:I};A((g=>({size:C,viewport:{...g.viewport,...H(W,R,C)}})))},setDpr:g=>A((I=>({viewport:{...I.viewport,dpr:y(g)}}))),events:{connected:!1},internal:{active:!1,priority:0,frames:0,lastProps:t,interaction:[],hovered:new Map,subscribers:[],initialClick:[0,0],initialHits:[],capturedMap:new Map,subscribe:(g,I=0)=>(A((({internal:C})=>({internal:{...C,priority:C.priority+(I?1:0),subscribers:[...C.subscribers,{ref:g,priority:I}].sort(((g,I)=>g.priority-I.priority))}}))),()=>{A((({internal:C})=>({internal:{...C,priority:C.priority-(I?1:0),subscribers:C.subscribers.filter((I=>I.ref!==g))}})))})}}}));Z.subscribe((()=>{const{camera:g,size:I,viewport:C,internal:t}=Z.getState();t.lastProps.camera instanceof e.Camera||(X(g)?(g.left=I.width/-2,g.right=I.width/2,g.top=I.height/2,g.bottom=I.height/-2):g.aspect=I.width/I.height,g.updateProjectionMatrix(),g.updateMatrixWorld()),o.setPixelRatio(C.dpr),o.setSize(I.width,I.height)}),(g=>[g.viewport.dpr,g.size]),i);const p=Z.getState();return n&&p.setSize(n.width,n.height),Z.subscribe((g=>I(g))),Z})(_,D,O,{gl:g,size:o,...c});const t=B.getState();t.get,m=P.createContainer(B,j.indexOf(n),!1,null),E.set(I,{fiber:m,store:B}),l&&t.set({events:l(B)})}if(B&&m)return P.updateContainer(t.createElement(q,{store:B,element:g,onCreated:a,target:I}),m,null,(()=>{})),B;throw"Error creating root!"}(t.createElement(L,{set:Z},t.createElement(t.Suspense,{fallback:t.createElement(J,{set:h})},g)),r.current,{...s,size:b,events:c||f})}),[b,g]),x((()=>{const g=r.current;return()=>$(g)}),[]),t.createElement("div",{ref:d,id:n,className:a,tabIndex:C,style:{position:"relative",width:"100%",height:"100%",overflow:"hidden",...l}},t.createElement("canvas",{ref:r,style:{display:"block"}},I))}function M(g=(g=>g),I){const C=t.useContext(R);if(!C)throw"R3F hooks can only be used within the Canvas component!";return C(g,I)}function Q(g,I=0){const{subscribe:C}=t.useContext(R).getState().internal,e=t.useRef(g);return t.useLayoutEffect((()=>{e.current=g}),[g]),t.useLayoutEffect((()=>{const g=C(e,I);return()=>g()}),[I,C]),null}function U(g,I){return function(C,...e){const t=new C;return g&&g(t),Promise.all(e.map((g=>new Promise(((C,e)=>t.load(g,(g=>{g.scene&&Object.assign(g,function(g){const I={nodes:{},materials:{}};return g&&g.traverse((g=>{g.name&&(I.nodes[g.name]=g),g.material&&!I.materials[g.material.name]&&(I.materials[g.material.name]=g.material)})),I}(g.scene)),C(g)}),I,(I=>e(`Could not load ${g}: ${I.message}`))))))))}}function T(g,I,C,e){const t=Array.isArray(I)?I:[I],A=b(U(C,e),g,...t);return Array.isArray(I)?A:A[0]}L.getDerivedStateFromError=()=>({error:!0}),T.preload=function(g,I,C){const e=Array.isArray(I)?I:[I];return b.preload(U(C),g,...e)};const E=new Map,j=["legacy","blocking","concurrent"],{invalidate:D,advance:O}=function(g){let I,C=!1;function e(t){if(C=!0,I=0,F(w,t),g.forEach((g=>{const C=g.store.getState();C.internal.active&&("always"===C.frameloop||C.internal.frames>0)&&(I+=z(t,C))})),F(K,t),I>0)return requestAnimationFrame(e);F(S,t),C=!1}return{loop:e,invalidate:function I(t){if(!t)return g.forEach((g=>I(g.store.getState())));!t.vr&&t.internal.active&&"never"!==t.frameloop&&(t.internal.frames=Math.min(60,t.internal.frames+1),C||(C=!0,requestAnimationFrame(e)))},advance:function(I,C=!0,e){C&&F(w,I),e?z(I,e):g.forEach((g=>z(I,g.store.getState()))),C&&F(K,I)}}}(E),{reconciler:P,applyProps:_}=function(g){function I(g,I,A={},i=!1){var o,n,l;const a=null!=(o=null==g?void 0:g.__r3f)?o:{},c=a.root,s=null!=(n=null==c||null==c.getState?void 0:c.getState())?n:{},d=[],b=[],r={};let G=0;Object.entries(I).forEach((([g,I])=>{-1===V.indexOf(g)&&(r[g]=I)})),a.memoizedProps&&a.memoizedProps.args&&(r.args=a.memoizedProps.args),a.memoizedProps&&a.memoizedProps.attach&&(r.attach=a.memoizedProps.attach),g.__r3f&&(g.__r3f.memoizedProps=r);let h=Object.keys(I);for(G=0;G<h.length;G++)u.equ(I[h[G]],A[h[G]])&&d.push(h[G]),u.fun(I[h[G]])&&/^on(Pointer|Click|DoubleClick|ContextMenu|Wheel)/.test(h[G])&&b.push(h[G]);const m=[];if(i)for(h=Object.keys(A),G=0;G<h.length;G++)I.hasOwnProperty(h[G])||m.push(h[G]);const B=[...d,...V];null!=(l=g.__r3f)&&l.instance&&B.push("object");const Z={...I};for(h=Object.keys(Z),G=0;G<h.length;G++)B.indexOf(h[G])>-1&&delete Z[h[G]];const p=Object.entries(Z);for(G=0;G<m.length;G++)"children"!==m[G]&&p.unshift([m[G],W+"remove"]);if(p.length>0){if(p.forEach((([I,t])=>{if(!b.includes(I)){let A=g,i=A[I];if(I.includes("-")){const C=I.split("-");if(i=C.reduce(((g,I)=>g[I]),g),!i||!i.set){const[e,...t]=C.reverse();A=t.reverse().reduce(((g,I)=>g[I]),g),I=e}}if(t===W+"remove")if(i&&i.constructor)t=new i.constructor(r.args);else if(A.constructor){const g=new A.constructor(A.__r3f.memoizedProps.args);t=g[i],g.dispose&&g.dispose()}else t=0;if(i&&i.set&&(i.copy||i instanceof e.Layers)){if(Array.isArray(t))i.fromArray?i.fromArray(t):i.set(...t);else if(i.copy&&t&&t.constructor&&i.constructor.name===t.constructor.name)i.copy(t);else if(void 0!==t){const g=i instanceof e.Color;!g&&i.setScalar?i.setScalar(t):i instanceof e.Layers&&t instanceof e.Layers?i.mask=t.mask:i.set(t),!s.linear&&g&&i.convertSRGBToLinear()}}else A[I]=t,!s.linear&&A[I]instanceof e.Texture&&(A[I].encoding=e.sRGBEncoding);C(g)}})),i&&c&&g.raycast&&a.handlers){a.handlers=void 0;const I=s.internal.interaction.indexOf(g);I>-1&&s.internal.interaction.splice(I,1)}b.length&&(i&&c&&g.raycast&&s.internal.interaction.push(g),a.handlers=b.reduce(((g,C)=>({...g,[C]:I[C]})),{})),g.parent&&t(g)}}function C(g){var I,C;const e=null==(I=g.__r3f)||null==(C=I.root)||null==C.getState?void 0:C.getState();e&&0===e.internal.frames&&e.invalidate()}function t(g){null==g.onUpdate||g.onUpdate(g)}function A(g,{args:C=[],...t},A,i,o){let n,l=`${g[0].toUpperCase()}${g.slice(1)}`;if(!Z(A)&&o){const g=I=>I.return?g(I.return):I.stateNode&&I.stateNode.containerInfo;A=g(o)}if(!A||!Z(A))throw`No valid root for ${l}!`;if("primitive"===g){if(void 0===t.object)throw"Primitives without 'object' are invalid!";n=Y(t.object,{root:A,instance:!0})}else{const g=v[l]||e[l];if(!g)throw`${l} is not part of the THREE namespace! Did you forget to extend? See: https://github.com/pmndrs/react-three-fiber/blob/master/markdown/api.md#using-3rd-party-objects-declaratively`;const I=u.arr(C);n=Y(I?new g(...C):new g(C),{root:A,memoizedProps:{args:I&&0===C.length?null:C}})}return l.endsWith("Geometry")?t={attach:"geometry",...t}:l.endsWith("Material")&&(t={attach:"material",...t}),I(n,t,{}),n}function i(g,I){I&&(I.isObject3D?g.add(I):(g.__r3f.objects.push(I),I.parent=g,I.attachArray?(u.arr(g[I.attachArray])||(g[I.attachArray]=[]),g[I.attachArray].push(I)):I.attachObject?(u.obj(g[I.attachObject[0]])||(g[I.attachObject[0]]={}),g[I.attachObject[0]][I.attachObject[1]]=I):I.attach&&(g[I.attach]=I)),t(I),C(I))}function o(g,I,e){if(I){if(I.isObject3D){I.parent=g,I.dispatchEvent({type:"added"});const C=g.children.filter((g=>g!==I)),t=C.indexOf(e);g.children=[...C.slice(0,t),I,...C.slice(t)]}else{if(!I.attachArray)return i(g,I);{g.__r3f.objects.push(I),I.parent=g;const C=g[I.attachArray];u.arr(C)||(g[I.attachArray]=[]),C.splice(C.indexOf(e),0,I)}}t(I),C(I)}}function a(g,I,C=!1){g&&[...g].forEach((g=>c(I,g,C)))}function c(g,I,e){if(I){var t,A;I.isObject3D?(g.remove(I),null!=(A=I.__r3f)&&A.root&&function(g,I){const{internal:C}=g.getState();C.interaction=C.interaction.filter((g=>g!==I)),C.initialHits=C.initialHits.filter((g=>g!==I)),C.hovered.forEach(((g,e)=>{g.eventObject!==I&&g.object!==I||C.hovered.delete(e)}))}(I.__r3f.root,I)):(I.parent=null,g.__r3f.objects&&(g.__r3f.objects=g.__r3f.objects.filter((g=>g!==I))),I.attachArray?g[I.attachArray]=g[I.attachArray].filter((g=>g!==I)):I.attachObject?delete g[I.attachObject[0]][I.attachObject[1]]:I.attach&&(g[I.attach]=null));const o=null==(t=I.__r3f)?void 0:t.instance,n=void 0===e?null!==I.dispose&&!o:e;var i;o||(a(null==(i=I.__r3f)?void 0:i.objects,I,n),a(I.children,I,n)),I.__r3f&&(delete I.__r3f.root,delete I.__r3f.objects,delete I.__r3f.handlers,delete I.__r3f.memoizedProps,o||delete I.__r3f),n&&I.dispose&&"Scene"!==I.type&&(0,l.unstable_runWithPriority)(l.unstable_IdlePriority,(()=>I.dispose())),C(g)}}function s(g,I,C,e){const t=g.parent;if(!t)return;const o=A(I,C,g.__r3f.root);g.children&&(g.children.forEach((g=>i(o,g))),g.children=[]),g.__r3f.objects.forEach((g=>i(o,g))),g.__r3f.objects=[],c(t,g),i(t,o),[e,e.alternate].forEach((g=>{null!==g&&(g.stateNode=o,g.ref&&("function"==typeof g.ref?g.ref(o):g.ref.current=o))}))}return{reconciler:n()({now:l.unstable_now,createInstance:A,removeChild:c,appendChild:i,appendInitialChild:i,insertBefore:o,warnsIfNotActing:!0,supportsMutation:!0,isPrimaryRenderer:!1,scheduleTimeout:u.fun(setTimeout)?setTimeout:void 0,cancelTimeout:u.fun(clearTimeout)?clearTimeout:void 0,setTimeout:u.fun(setTimeout)?setTimeout:void 0,clearTimeout:u.fun(clearTimeout)?clearTimeout:void 0,noTimeout:-1,appendChildToContainer:(g,I)=>{const{container:C,root:e}=p(g,I);C.__r3f.root=e,i(C,I)},removeChildFromContainer:(g,I)=>{const{container:C}=p(g,I);c(C,I)},insertInContainerBefore:(g,I,C)=>{const{container:e}=p(g,I);o(e,I,C)},commitUpdate(g,C,e,t,A,i){if(g.__r3f.instance&&A.object&&A.object!==g)s(g,e,A,i);else{const{args:C=[],...o}=A,{args:n=[],...l}=t;C.some(((g,I)=>u.obj(g)?Object.entries(g).some((([g,C])=>C!==n[I][g])):g!==n[I]))?s(g,e,A,i):I(g,o,l,!0)}},hideInstance(g){g.isObject3D&&(g.visible=!1,C(g))},unhideInstance(g,I){(g.isObject3D&&null==I.visible||I.visible)&&(g.visible=!0,C(g))},hideTextInstance(){throw new Error("Text is not allowed in the R3F tree.")},getPublicInstance:g=>g,getRootHostContext:g=>y,getChildHostContext:g=>y,createTextInstance(){},finalizeInitialChildren:g=>!!g.__r3f.handlers,commitMount(g){g.raycast&&g.__r3f.handlers&&g.__r3f.root.getState().internal.interaction.push(g)},prepareUpdate:()=>y,shouldDeprioritizeSubtree:()=>!1,prepareForCommit:()=>null,preparePortalMount(...g){},resetAfterCommit(){},shouldSetTextContent:()=>!1,clearContainer:()=>!1}),applyProps:I}}();function q({store:g,element:I,onCreated:C,target:e}){return t.useEffect((()=>{const I=g.getState();I.set((g=>({internal:{...g.internal,active:!0}}))),null==I.events.connect||I.events.connect(e),C&&C(I)}),[]),t.createElement(R.Provider,{value:g},I)}function $(g,I){const C=E.get(g),e=null==C?void 0:C.fiber;if(e){const t=null==C?void 0:C.store.getState();t&&(t.internal.active=!1),P.updateContainer(null,e,null,(()=>{t&&setTimeout((()=>{var C,e,A;null==t.events.disconnect||t.events.disconnect(),null==(C=t.gl)||null==(e=C.renderLists)||null==e.dispose||e.dispose(),null==(A=t.gl)||null==A.forceContextLoss||A.forceContextLoss(),function(g){g.dispose&&"Scene"!==g.type&&g.dispose();for(const e in g){var I,C;null==(I=(C=e).dispose)||I.call(C),delete g[e]}}(t),E.delete(g),I&&I(g)}),500)}))}}P.act,u.fun(Symbol)&&Symbol.for&&Symbol.for("react.portal"),P.injectIntoDevTools({bundleType:0,rendererPackageName:"@react-three/fiber",version:"17.0.2"})},405:(g,I)=>{"use strict";var C,e,t,A;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;I.unstable_now=function(){return i.now()}}else{var o=Date,n=o.now();I.unstable_now=function(){return o.now()-n}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,a=null,c=function(){if(null!==l)try{var g=I.unstable_now();l(!0,g),l=null}catch(g){throw setTimeout(c,0),g}};C=function(g){null!==l?setTimeout(C,0,g):(l=g,setTimeout(c,0))},e=function(g,I){a=setTimeout(g,I)},t=function(){clearTimeout(a)},I.unstable_shouldYield=function(){return!1},A=I.unstable_forceFrameRate=function(){}}else{var s=window.setTimeout,d=window.clearTimeout;if("undefined"!=typeof console){var b=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof b&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var r=!1,G=null,h=-1,m=5,u=0;I.unstable_shouldYield=function(){return I.unstable_now()>=u},A=function(){},I.unstable_forceFrameRate=function(g){0>g||125<g?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):m=0<g?Math.floor(1e3/g):5};var B=new MessageChannel,Z=B.port2;B.port1.onmessage=function(){if(null!==G){var g=I.unstable_now();u=g+m;try{G(!0,g)?Z.postMessage(null):(r=!1,G=null)}catch(g){throw Z.postMessage(null),g}}else r=!1},C=function(g){G=g,r||(r=!0,Z.postMessage(null))},e=function(g,C){h=s((function(){g(I.unstable_now())}),C)},t=function(){d(h),h=-1}}function p(g,I){var C=g.length;g.push(I);g:for(;;){var e=C-1>>>1,t=g[e];if(!(void 0!==t&&0<V(t,I)))break g;g[e]=I,g[C]=t,C=e}}function W(g){return void 0===(g=g[0])?null:g}function y(g){var I=g[0];if(void 0!==I){var C=g.pop();if(C!==I){g[0]=C;g:for(var e=0,t=g.length;e<t;){var A=2*(e+1)-1,i=g[A],o=A+1,n=g[o];if(void 0!==i&&0>V(i,C))void 0!==n&&0>V(n,i)?(g[e]=n,g[o]=C,e=o):(g[e]=i,g[A]=C,e=A);else{if(!(void 0!==n&&0>V(n,C)))break g;g[e]=n,g[o]=C,e=o}}}return I}return null}function V(g,I){var C=g.sortIndex-I.sortIndex;return 0!==C?C:g.id-I.id}var v=[],Y=[],X=1,R=null,H=3,w=!1,K=!1,S=!1;function N(g){for(var I=W(Y);null!==I;){if(null===I.callback)y(Y);else{if(!(I.startTime<=g))break;y(Y),I.sortIndex=I.expirationTime,p(v,I)}I=W(Y)}}function F(g){if(S=!1,N(g),!K)if(null!==W(v))K=!0,C(z);else{var I=W(Y);null!==I&&e(F,I.startTime-g)}}function z(g,C){K=!1,S&&(S=!1,t()),w=!0;var A=H;try{for(N(C),R=W(v);null!==R&&(!(R.expirationTime>C)||g&&!I.unstable_shouldYield());){var i=R.callback;if("function"==typeof i){R.callback=null,H=R.priorityLevel;var o=i(R.expirationTime<=C);C=I.unstable_now(),"function"==typeof o?R.callback=o:R===W(v)&&y(v),N(C)}else y(v);R=W(v)}if(null!==R)var n=!0;else{var l=W(Y);null!==l&&e(F,l.startTime-C),n=!1}return n}finally{R=null,H=A,w=!1}}var f=A;I.unstable_IdlePriority=5,I.unstable_ImmediatePriority=1,I.unstable_LowPriority=4,I.unstable_NormalPriority=3,I.unstable_Profiling=null,I.unstable_UserBlockingPriority=2,I.unstable_cancelCallback=function(g){g.callback=null},I.unstable_continueExecution=function(){K||w||(K=!0,C(z))},I.unstable_getCurrentPriorityLevel=function(){return H},I.unstable_getFirstCallbackNode=function(){return W(v)},I.unstable_next=function(g){switch(H){case 1:case 2:case 3:var I=3;break;default:I=H}var C=H;H=I;try{return g()}finally{H=C}},I.unstable_pauseExecution=function(){},I.unstable_requestPaint=f,I.unstable_runWithPriority=function(g,I){switch(g){case 1:case 2:case 3:case 4:case 5:break;default:g=3}var C=H;H=g;try{return I()}finally{H=C}},I.unstable_scheduleCallback=function(g,A,i){var o=I.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?o+i:o,g){case 1:var n=-1;break;case 2:n=250;break;case 5:n=1073741823;break;case 4:n=1e4;break;default:n=5e3}return g={id:X++,callback:A,priorityLevel:g,startTime:i,expirationTime:n=i+n,sortIndex:-1},i>o?(g.sortIndex=i,p(Y,g),null===W(v)&&g===W(Y)&&(S?t():S=!0,e(F,i-o))):(g.sortIndex=n,p(v,g),K||w||(K=!0,C(z))),g},I.unstable_wrapCallback=function(g){var I=H;return function(){var C=H;H=I;try{return g.apply(this,arguments)}finally{H=C}}}},76:(g,I,C)=>{"use strict";g.exports=C(405)},386:g=>{function I(g,I,C){var e,t,A,i,o;function n(){var l=Date.now()-i;l<I&&l>=0?e=setTimeout(n,I-l):(e=null,C||(o=g.apply(A,t),A=t=null))}null==I&&(I=100);var l=function(){A=this,t=arguments,i=Date.now();var l=C&&!e;return e||(e=setTimeout(n,I)),l&&(o=g.apply(A,t),A=t=null),o};return l.clear=function(){e&&(clearTimeout(e),e=null)},l.flush=function(){e&&(o=g.apply(A,t),A=t=null,clearTimeout(e),e=null)},l}I.debounce=I,g.exports=I},378:g=>{"use strict";g.exports=function g(I,C){if(I===C)return!0;if(I&&C&&"object"==typeof I&&"object"==typeof C){if(I.constructor!==C.constructor)return!1;var e,t,A;if(Array.isArray(I)){if((e=I.length)!=C.length)return!1;for(t=e;0!=t--;)if(!g(I[t],C[t]))return!1;return!0}if(I.constructor===RegExp)return I.source===C.source&&I.flags===C.flags;if(I.valueOf!==Object.prototype.valueOf)return I.valueOf()===C.valueOf();if(I.toString!==Object.prototype.toString)return I.toString()===C.toString();if((e=(A=Object.keys(I)).length)!==Object.keys(C).length)return!1;for(t=e;0!=t--;)if(!Object.prototype.hasOwnProperty.call(C,A[t]))return!1;for(t=e;0!=t--;){var i=A[t];if(!g(I[i],C[i]))return!1}return!0}return I!=I&&C!=C}},166:(g,I,C)=>{(g=C.nmd(g)).exports=function(I){var e={},t=C(320),A=C(784),i=C(533);function o(g){for(var I="https://reactjs.org/docs/error-decoder.html?invariant="+g,C=1;C<arguments.length;C++)I+="&args[]="+encodeURIComponent(arguments[C]);return"Minified React error #"+g+"; visit "+I+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var n=A.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,l=60103,a=60106,c=60107,s=60108,d=60114,b=60109,r=60110,G=60112,h=60113,m=60120,u=60115,B=60116,Z=60121,p=60129,W=60130,y=60131;if("function"==typeof Symbol&&Symbol.for){var V=Symbol.for;l=V("react.element"),a=V("react.portal"),c=V("react.fragment"),s=V("react.strict_mode"),d=V("react.profiler"),b=V("react.provider"),r=V("react.context"),G=V("react.forward_ref"),h=V("react.suspense"),m=V("react.suspense_list"),u=V("react.memo"),B=V("react.lazy"),Z=V("react.block"),V("react.scope"),p=V("react.debug_trace_mode"),W=V("react.offscreen"),y=V("react.legacy_hidden")}var v="function"==typeof Symbol&&Symbol.iterator;function Y(g){return null===g||"object"!=typeof g?null:"function"==typeof(g=v&&g[v]||g["@@iterator"])?g:null}function X(g){if(null==g)return null;if("function"==typeof g)return g.displayName||g.name||null;if("string"==typeof g)return g;switch(g){case c:return"Fragment";case a:return"Portal";case d:return"Profiler";case s:return"StrictMode";case h:return"Suspense";case m:return"SuspenseList"}if("object"==typeof g)switch(g.$$typeof){case r:return(g.displayName||"Context")+".Consumer";case b:return(g._context.displayName||"Context")+".Provider";case G:var I=g.render;return I=I.displayName||I.name||"",g.displayName||(""!==I?"ForwardRef("+I+")":"ForwardRef");case u:return X(g.type);case Z:return X(g._render);case B:I=g._payload,g=g._init;try{return X(g(I))}catch(g){}}return null}function R(g){var I=g,C=g;if(g.alternate)for(;I.return;)I=I.return;else{g=I;do{0!=(1026&(I=g).flags)&&(C=I.return),g=I.return}while(g)}return 3===I.tag?C:null}function H(g){if(R(g)!==g)throw Error(o(188))}function w(g){var I=g.alternate;if(!I){if(null===(I=R(g)))throw Error(o(188));return I!==g?null:g}for(var C=g,e=I;;){var t=C.return;if(null===t)break;var A=t.alternate;if(null===A){if(null!==(e=t.return)){C=e;continue}break}if(t.child===A.child){for(A=t.child;A;){if(A===C)return H(t),g;if(A===e)return H(t),I;A=A.sibling}throw Error(o(188))}if(C.return!==e.return)C=t,e=A;else{for(var i=!1,n=t.child;n;){if(n===C){i=!0,C=t,e=A;break}if(n===e){i=!0,e=t,C=A;break}n=n.sibling}if(!i){for(n=A.child;n;){if(n===C){i=!0,C=A,e=t;break}if(n===e){i=!0,e=A,C=t;break}n=n.sibling}if(!i)throw Error(o(189))}}if(C.alternate!==e)throw Error(o(190))}if(3!==C.tag)throw Error(o(188));return C.stateNode.current===C?g:I}function K(g){if(!(g=w(g)))return null;for(var I=g;;){if(5===I.tag||6===I.tag)return I;if(I.child)I.child.return=I,I=I.child;else{if(I===g)break;for(;!I.sibling;){if(!I.return||I.return===g)return null;I=I.return}I.sibling.return=I.return,I=I.sibling}}return null}function S(g,I){for(var C=g.alternate;null!==I;){if(I===g||I===C)return!0;I=I.return}return!1}var N,F=I.getPublicInstance,z=I.getRootHostContext,f=I.getChildHostContext,x=I.prepareForCommit,J=I.resetAfterCommit,L=I.createInstance,k=I.appendInitialChild,M=I.finalizeInitialChildren,Q=I.prepareUpdate,U=I.shouldSetTextContent,T=I.createTextInstance,E=I.scheduleTimeout,j=I.cancelTimeout,D=I.noTimeout,O=I.isPrimaryRenderer,P=I.supportsMutation,_=I.supportsPersistence,q=I.supportsHydration,$=I.getInstanceFromNode,gg=I.makeOpaqueHydratingObject,Ig=I.makeClientId,Cg=I.beforeActiveInstanceBlur,eg=I.afterActiveInstanceBlur,tg=I.preparePortalMount,Ag=I.supportsTestSelectors,ig=I.findFiberRoot,og=I.getBoundingRect,ng=I.getTextContent,lg=I.isHiddenSubtree,ag=I.matchAccessibilityRole,cg=I.setFocusIfFocusable,sg=I.setupIntersectionObserver,dg=I.appendChild,bg=I.appendChildToContainer,rg=I.commitTextUpdate,Gg=I.commitMount,hg=I.commitUpdate,mg=I.insertBefore,ug=I.insertInContainerBefore,Bg=I.removeChild,Zg=I.removeChildFromContainer,pg=I.resetTextContent,Wg=I.hideInstance,yg=I.hideTextInstance,Vg=I.unhideInstance,vg=I.unhideTextInstance,Yg=I.clearContainer,Xg=I.cloneInstance,Rg=I.createContainerChildSet,Hg=I.appendChildToContainerChildSet,wg=I.finalizeContainerChildren,Kg=I.replaceContainerChildren,Sg=I.cloneHiddenInstance,Ng=I.cloneHiddenTextInstance,Fg=I.canHydrateInstance,zg=I.canHydrateTextInstance,fg=I.isSuspenseInstancePending,xg=I.isSuspenseInstanceFallback,Jg=I.getNextHydratableSibling,Lg=I.getFirstHydratableChild,kg=I.hydrateInstance,Mg=I.hydrateTextInstance,Qg=I.getNextHydratableInstanceAfterSuspenseInstance,Ug=I.commitHydratedContainer,Tg=I.commitHydratedSuspenseInstance;function Eg(g){if(void 0===N)try{throw Error()}catch(g){var I=g.stack.trim().match(/\n( *(at )?)/);N=I&&I[1]||""}return"\n"+N+g}var jg=!1;function Dg(g,I){if(!g||jg)return"";jg=!0;var C=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(I)if(I=function(){throw Error()},Object.defineProperty(I.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(I,[])}catch(g){var e=g}Reflect.construct(g,[],I)}else{try{I.call()}catch(g){e=g}g.call(I.prototype)}else{try{throw Error()}catch(g){e=g}g()}}catch(g){if(g&&e&&"string"==typeof g.stack){for(var t=g.stack.split("\n"),A=e.stack.split("\n"),i=t.length-1,o=A.length-1;1<=i&&0<=o&&t[i]!==A[o];)o--;for(;1<=i&&0<=o;i--,o--)if(t[i]!==A[o]){if(1!==i||1!==o)do{if(i--,0>--o||t[i]!==A[o])return"\n"+t[i].replace(" at new "," at ")}while(1<=i&&0<=o);break}}}finally{jg=!1,Error.prepareStackTrace=C}return(g=g?g.displayName||g.name:"")?Eg(g):""}var Og=[],Pg=-1;function _g(g){return{current:g}}function qg(g){0>Pg||(g.current=Og[Pg],Og[Pg]=null,Pg--)}function $g(g,I){Pg++,Og[Pg]=g.current,g.current=I}var gI={},II=_g(gI),CI=_g(!1),eI=gI;function tI(g,I){var C=g.type.contextTypes;if(!C)return gI;var e=g.stateNode;if(e&&e.__reactInternalMemoizedUnmaskedChildContext===I)return e.__reactInternalMemoizedMaskedChildContext;var t,A={};for(t in C)A[t]=I[t];return e&&((g=g.stateNode).__reactInternalMemoizedUnmaskedChildContext=I,g.__reactInternalMemoizedMaskedChildContext=A),A}function AI(g){return null!=g.childContextTypes}function iI(){qg(CI),qg(II)}function oI(g,I,C){if(II.current!==gI)throw Error(o(168));$g(II,I),$g(CI,C)}function nI(g,I,C){var e=g.stateNode;if(g=I.childContextTypes,"function"!=typeof e.getChildContext)return C;for(var A in e=e.getChildContext())if(!(A in g))throw Error(o(108,X(I)||"Unknown",A));return t({},C,e)}function lI(g){return g=(g=g.stateNode)&&g.__reactInternalMemoizedMergedChildContext||gI,eI=II.current,$g(II,g),$g(CI,CI.current),!0}function aI(g,I,C){var e=g.stateNode;if(!e)throw Error(o(169));C?(g=nI(g,I,eI),e.__reactInternalMemoizedMergedChildContext=g,qg(CI),qg(II),$g(II,g)):qg(CI),$g(CI,C)}var cI=null,sI=null;(0,i.unstable_now)();var dI=0,bI=8;function rI(g){if(0!=(1&g))return bI=15,1;if(0!=(2&g))return bI=14,2;if(0!=(4&g))return bI=13,4;var I=24&g;return 0!==I?(bI=12,I):0!=(32&g)?(bI=11,32):0!=(I=192&g)?(bI=10,I):0!=(256&g)?(bI=9,256):0!=(I=3584&g)?(bI=8,I):0!=(4096&g)?(bI=7,4096):0!=(I=4186112&g)?(bI=6,I):0!=(I=62914560&g)?(bI=5,I):67108864&g?(bI=4,67108864):0!=(134217728&g)?(bI=3,134217728):0!=(I=805306368&g)?(bI=2,I):0!=(1073741824&g)?(bI=1,1073741824):(bI=8,g)}function GI(g,I){var C=g.pendingLanes;if(0===C)return bI=0;var e=0,t=0,A=g.expiredLanes,i=g.suspendedLanes,o=g.pingedLanes;if(0!==A)e=A,t=bI=15;else if(0!=(A=134217727&C)){var n=A&~i;0!==n?(e=rI(n),t=bI):0!=(o&=A)&&(e=rI(o),t=bI)}else 0!=(A=C&~i)?(e=rI(A),t=bI):0!==o&&(e=rI(o),t=bI);if(0===e)return 0;if(e=C&((0>(e=31-pI(e))?0:1<<e)<<1)-1,0!==I&&I!==e&&0==(I&i)){if(rI(I),t<=bI)return I;bI=t}if(0!==(I=g.entangledLanes))for(g=g.entanglements,I&=e;0<I;)t=1<<(C=31-pI(I)),e|=g[C],I&=~t;return e}function hI(g){return 0!=(g=-1073741825&g.pendingLanes)?g:1073741824&g?1073741824:0}function mI(g,I){switch(g){case 15:return 1;case 14:return 2;case 12:return 0===(g=uI(24&~I))?mI(10,I):g;case 10:return 0===(g=uI(192&~I))?mI(8,I):g;case 8:return 0===(g=uI(3584&~I))&&0===(g=uI(4186112&~I))&&(g=512),g;case 2:return 0===(I=uI(805306368&~I))&&(I=268435456),I}throw Error(o(358,g))}function uI(g){return g&-g}function BI(g){for(var I=[],C=0;31>C;C++)I.push(g);return I}function ZI(g,I,C){g.pendingLanes|=I;var e=I-1;g.suspendedLanes&=e,g.pingedLanes&=e,(g=g.eventTimes)[I=31-pI(I)]=C}var pI=Math.clz32?Math.clz32:function(g){return 0===g?32:31-(WI(g)/yI|0)|0},WI=Math.log,yI=Math.LN2,VI=i.unstable_runWithPriority,vI=i.unstable_scheduleCallback,YI=i.unstable_cancelCallback,XI=i.unstable_shouldYield,RI=i.unstable_requestPaint,HI=i.unstable_now,wI=i.unstable_getCurrentPriorityLevel,KI=i.unstable_ImmediatePriority,SI=i.unstable_UserBlockingPriority,NI=i.unstable_NormalPriority,FI=i.unstable_LowPriority,zI=i.unstable_IdlePriority,fI={},xI=void 0!==RI?RI:function(){},JI=null,LI=null,kI=!1,MI=HI(),QI=1e4>MI?HI:function(){return HI()-MI};function UI(){switch(wI()){case KI:return 99;case SI:return 98;case NI:return 97;case FI:return 96;case zI:return 95;default:throw Error(o(332))}}function TI(g){switch(g){case 99:return KI;case 98:return SI;case 97:return NI;case 96:return FI;case 95:return zI;default:throw Error(o(332))}}function EI(g,I){return g=TI(g),VI(g,I)}function jI(g,I,C){return g=TI(g),vI(g,I,C)}function DI(){if(null!==LI){var g=LI;LI=null,YI(g)}OI()}function OI(){if(!kI&&null!==JI){kI=!0;var g=0;try{var I=JI;EI(99,(function(){for(;g<I.length;g++){var C=I[g];do{C=C(!0)}while(null!==C)}})),JI=null}catch(I){throw null!==JI&&(JI=JI.slice(g+1)),vI(KI,DI),I}finally{kI=!1}}}var PI=n.ReactCurrentBatchConfig,_I="function"==typeof Object.is?Object.is:function(g,I){return g===I&&(0!==g||1/g==1/I)||g!=g&&I!=I},qI=Object.prototype.hasOwnProperty;function $I(g,I){if(_I(g,I))return!0;if("object"!=typeof g||null===g||"object"!=typeof I||null===I)return!1;var C=Object.keys(g),e=Object.keys(I);if(C.length!==e.length)return!1;for(e=0;e<C.length;e++)if(!qI.call(I,C[e])||!_I(g[C[e]],I[C[e]]))return!1;return!0}function gC(g){switch(g.tag){case 5:return Eg(g.type);case 16:return Eg("Lazy");case 13:return Eg("Suspense");case 19:return Eg("SuspenseList");case 0:case 2:case 15:return Dg(g.type,!1);case 11:return Dg(g.type.render,!1);case 22:return Dg(g.type._render,!1);case 1:return Dg(g.type,!0);default:return""}}function IC(g,I){if(g&&g.defaultProps){for(var C in I=t({},I),g=g.defaultProps)void 0===I[C]&&(I[C]=g[C]);return I}return I}var CC=_g(null),eC=null,tC=null,AC=null;function iC(){AC=tC=eC=null}function oC(g,I){g=g.type._context,O?($g(CC,g._currentValue),g._currentValue=I):($g(CC,g._currentValue2),g._currentValue2=I)}function nC(g){var I=CC.current;qg(CC),g=g.type._context,O?g._currentValue=I:g._currentValue2=I}function lC(g,I){for(;null!==g;){var C=g.alternate;if((g.childLanes&I)===I){if(null===C||(C.childLanes&I)===I)break;C.childLanes|=I}else g.childLanes|=I,null!==C&&(C.childLanes|=I);g=g.return}}function aC(g,I){eC=g,AC=tC=null,null!==(g=g.dependencies)&&null!==g.firstContext&&(0!=(g.lanes&I)&&(ke=!0),g.firstContext=null)}function cC(g,I){if(AC!==g&&!1!==I&&0!==I)if("number"==typeof I&&1073741823!==I||(AC=g,I=1073741823),I={context:g,observedBits:I,next:null},null===tC){if(null===eC)throw Error(o(308));tC=I,eC.dependencies={lanes:0,firstContext:I,responders:null}}else tC=tC.next=I;return O?g._currentValue:g._currentValue2}var sC=!1;function dC(g){g.updateQueue={baseState:g.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function bC(g,I){g=g.updateQueue,I.updateQueue===g&&(I.updateQueue={baseState:g.baseState,firstBaseUpdate:g.firstBaseUpdate,lastBaseUpdate:g.lastBaseUpdate,shared:g.shared,effects:g.effects})}function rC(g,I){return{eventTime:g,lane:I,tag:0,payload:null,callback:null,next:null}}function GC(g,I){if(null!==(g=g.updateQueue)){var C=(g=g.shared).pending;null===C?I.next=I:(I.next=C.next,C.next=I),g.pending=I}}function hC(g,I){var C=g.updateQueue,e=g.alternate;if(null!==e&&C===(e=e.updateQueue)){var t=null,A=null;if(null!==(C=C.firstBaseUpdate)){do{var i={eventTime:C.eventTime,lane:C.lane,tag:C.tag,payload:C.payload,callback:C.callback,next:null};null===A?t=A=i:A=A.next=i,C=C.next}while(null!==C);null===A?t=A=I:A=A.next=I}else t=A=I;return C={baseState:e.baseState,firstBaseUpdate:t,lastBaseUpdate:A,shared:e.shared,effects:e.effects},void(g.updateQueue=C)}null===(g=C.lastBaseUpdate)?C.firstBaseUpdate=I:g.next=I,C.lastBaseUpdate=I}function mC(g,I,C,e){var A=g.updateQueue;sC=!1;var i=A.firstBaseUpdate,o=A.lastBaseUpdate,n=A.shared.pending;if(null!==n){A.shared.pending=null;var l=n,a=l.next;l.next=null,null===o?i=a:o.next=a,o=l;var c=g.alternate;if(null!==c){var s=(c=c.updateQueue).lastBaseUpdate;s!==o&&(null===s?c.firstBaseUpdate=a:s.next=a,c.lastBaseUpdate=l)}}if(null!==i){for(s=A.baseState,o=0,c=a=l=null;;){n=i.lane;var d=i.eventTime;if((e&n)===n){null!==c&&(c=c.next={eventTime:d,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});g:{var b=g,r=i;switch(n=I,d=C,r.tag){case 1:if("function"==typeof(b=r.payload)){s=b.call(d,s,n);break g}s=b;break g;case 3:b.flags=-4097&b.flags|64;case 0:if(null==(n="function"==typeof(b=r.payload)?b.call(d,s,n):b))break g;s=t({},s,n);break g;case 2:sC=!0}}null!==i.callback&&(g.flags|=32,null===(n=A.effects)?A.effects=[i]:n.push(i))}else d={eventTime:d,lane:n,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(a=c=d,l=s):c=c.next=d,o|=n;if(null===(i=i.next)){if(null===(n=A.shared.pending))break;i=n.next,n.next=null,A.lastBaseUpdate=n,A.shared.pending=null}}null===c&&(l=s),A.baseState=l,A.firstBaseUpdate=a,A.lastBaseUpdate=c,nA|=o,g.lanes=o,g.memoizedState=s}}function uC(g,I,C){if(g=I.effects,I.effects=null,null!==g)for(I=0;I<g.length;I++){var e=g[I],t=e.callback;if(null!==t){if(e.callback=null,e=C,"function"!=typeof t)throw Error(o(191,t));t.call(e)}}}var BC=(new A.Component).refs;function ZC(g,I,C,e){C=null==(C=C(e,I=g.memoizedState))?I:t({},I,C),g.memoizedState=C,0===g.lanes&&(g.updateQueue.baseState=C)}var pC={isMounted:function(g){return!!(g=g._reactInternals)&&R(g)===g},enqueueSetState:function(g,I,C){g=g._reactInternals;var e=SA(),t=NA(g),A=rC(e,t);A.payload=I,null!=C&&(A.callback=C),GC(g,A),FA(g,t,e)},enqueueReplaceState:function(g,I,C){g=g._reactInternals;var e=SA(),t=NA(g),A=rC(e,t);A.tag=1,A.payload=I,null!=C&&(A.callback=C),GC(g,A),FA(g,t,e)},enqueueForceUpdate:function(g,I){g=g._reactInternals;var C=SA(),e=NA(g),t=rC(C,e);t.tag=2,null!=I&&(t.callback=I),GC(g,t),FA(g,e,C)}};function WC(g,I,C,e,t,A,i){return"function"==typeof(g=g.stateNode).shouldComponentUpdate?g.shouldComponentUpdate(e,A,i):!(I.prototype&&I.prototype.isPureReactComponent&&$I(C,e)&&$I(t,A))}function yC(g,I,C){var e=!1,t=gI,A=I.contextType;return"object"==typeof A&&null!==A?A=cC(A):(t=AI(I)?eI:II.current,A=(e=null!=(e=I.contextTypes))?tI(g,t):gI),I=new I(C,A),g.memoizedState=null!==I.state&&void 0!==I.state?I.state:null,I.updater=pC,g.stateNode=I,I._reactInternals=g,e&&((g=g.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,g.__reactInternalMemoizedMaskedChildContext=A),I}function VC(g,I,C,e){g=I.state,"function"==typeof I.componentWillReceiveProps&&I.componentWillReceiveProps(C,e),"function"==typeof I.UNSAFE_componentWillReceiveProps&&I.UNSAFE_componentWillReceiveProps(C,e),I.state!==g&&pC.enqueueReplaceState(I,I.state,null)}function vC(g,I,C,e){var t=g.stateNode;t.props=C,t.state=g.memoizedState,t.refs=BC,dC(g);var A=I.contextType;"object"==typeof A&&null!==A?t.context=cC(A):(A=AI(I)?eI:II.current,t.context=tI(g,A)),mC(g,C,t,e),t.state=g.memoizedState,"function"==typeof(A=I.getDerivedStateFromProps)&&(ZC(g,I,A,C),t.state=g.memoizedState),"function"==typeof I.getDerivedStateFromProps||"function"==typeof t.getSnapshotBeforeUpdate||"function"!=typeof t.UNSAFE_componentWillMount&&"function"!=typeof t.componentWillMount||(I=t.state,"function"==typeof t.componentWillMount&&t.componentWillMount(),"function"==typeof t.UNSAFE_componentWillMount&&t.UNSAFE_componentWillMount(),I!==t.state&&pC.enqueueReplaceState(t,t.state,null),mC(g,C,t,e),t.state=g.memoizedState),"function"==typeof t.componentDidMount&&(g.flags|=4)}var YC=Array.isArray;function XC(g,I,C){if(null!==(g=C.ref)&&"function"!=typeof g&&"object"!=typeof g){if(C._owner){if(C=C._owner){if(1!==C.tag)throw Error(o(309));var e=C.stateNode}if(!e)throw Error(o(147,g));var t=""+g;return null!==I&&null!==I.ref&&"function"==typeof I.ref&&I.ref._stringRef===t?I.ref:((I=function(g){var I=e.refs;I===BC&&(I=e.refs={}),null===g?delete I[t]:I[t]=g})._stringRef=t,I)}if("string"!=typeof g)throw Error(o(284));if(!C._owner)throw Error(o(290,g))}return g}function RC(g,I){if("textarea"!==g.type)throw Error(o(31,"[object Object]"===Object.prototype.toString.call(I)?"object with keys {"+Object.keys(I).join(", ")+"}":I))}function HC(g){function I(I,C){if(g){var e=I.lastEffect;null!==e?(e.nextEffect=C,I.lastEffect=C):I.firstEffect=I.lastEffect=C,C.nextEffect=null,C.flags=8}}function C(C,e){if(!g)return null;for(;null!==e;)I(C,e),e=e.sibling;return null}function e(g,I){for(g=new Map;null!==I;)null!==I.key?g.set(I.key,I):g.set(I.index,I),I=I.sibling;return g}function t(g,I){return(g=Bi(g,I)).index=0,g.sibling=null,g}function A(I,C,e){return I.index=e,g?null!==(e=I.alternate)?(e=e.index)<C?(I.flags=2,C):e:(I.flags=2,C):C}function i(I){return g&&null===I.alternate&&(I.flags=2),I}function n(g,I,C,e){return null===I||6!==I.tag?((I=yi(C,g.mode,e)).return=g,I):((I=t(I,C)).return=g,I)}function s(g,I,C,e){return null!==I&&I.elementType===C.type?((e=t(I,C.props)).ref=XC(g,I,C),e.return=g,e):((e=Zi(C.type,C.key,C.props,null,g.mode,e)).ref=XC(g,I,C),e.return=g,e)}function d(g,I,C,e){return null===I||4!==I.tag||I.stateNode.containerInfo!==C.containerInfo||I.stateNode.implementation!==C.implementation?((I=Vi(C,g.mode,e)).return=g,I):((I=t(I,C.children||[])).return=g,I)}function b(g,I,C,e,A){return null===I||7!==I.tag?((I=pi(C,g.mode,e,A)).return=g,I):((I=t(I,C)).return=g,I)}function r(g,I,C){if("string"==typeof I||"number"==typeof I)return(I=yi(""+I,g.mode,C)).return=g,I;if("object"==typeof I&&null!==I){switch(I.$$typeof){case l:return(C=Zi(I.type,I.key,I.props,null,g.mode,C)).ref=XC(g,null,I),C.return=g,C;case a:return(I=Vi(I,g.mode,C)).return=g,I}if(YC(I)||Y(I))return(I=pi(I,g.mode,C,null)).return=g,I;RC(g,I)}return null}function G(g,I,C,e){var t=null!==I?I.key:null;if("string"==typeof C||"number"==typeof C)return null!==t?null:n(g,I,""+C,e);if("object"==typeof C&&null!==C){switch(C.$$typeof){case l:return C.key===t?C.type===c?b(g,I,C.props.children,e,t):s(g,I,C,e):null;case a:return C.key===t?d(g,I,C,e):null}if(YC(C)||Y(C))return null!==t?null:b(g,I,C,e,null);RC(g,C)}return null}function h(g,I,C,e,t){if("string"==typeof e||"number"==typeof e)return n(I,g=g.get(C)||null,""+e,t);if("object"==typeof e&&null!==e){switch(e.$$typeof){case l:return g=g.get(null===e.key?C:e.key)||null,e.type===c?b(I,g,e.props.children,t,e.key):s(I,g,e,t);case a:return d(I,g=g.get(null===e.key?C:e.key)||null,e,t)}if(YC(e)||Y(e))return b(I,g=g.get(C)||null,e,t,null);RC(I,e)}return null}function m(t,i,o,n){for(var l=null,a=null,c=i,s=i=0,d=null;null!==c&&s<o.length;s++){c.index>s?(d=c,c=null):d=c.sibling;var b=G(t,c,o[s],n);if(null===b){null===c&&(c=d);break}g&&c&&null===b.alternate&&I(t,c),i=A(b,i,s),null===a?l=b:a.sibling=b,a=b,c=d}if(s===o.length)return C(t,c),l;if(null===c){for(;s<o.length;s++)null!==(c=r(t,o[s],n))&&(i=A(c,i,s),null===a?l=c:a.sibling=c,a=c);return l}for(c=e(t,c);s<o.length;s++)null!==(d=h(c,t,s,o[s],n))&&(g&&null!==d.alternate&&c.delete(null===d.key?s:d.key),i=A(d,i,s),null===a?l=d:a.sibling=d,a=d);return g&&c.forEach((function(g){return I(t,g)})),l}function u(t,i,n,l){var a=Y(n);if("function"!=typeof a)throw Error(o(150));if(null==(n=a.call(n)))throw Error(o(151));for(var c=a=null,s=i,d=i=0,b=null,m=n.next();null!==s&&!m.done;d++,m=n.next()){s.index>d?(b=s,s=null):b=s.sibling;var u=G(t,s,m.value,l);if(null===u){null===s&&(s=b);break}g&&s&&null===u.alternate&&I(t,s),i=A(u,i,d),null===c?a=u:c.sibling=u,c=u,s=b}if(m.done)return C(t,s),a;if(null===s){for(;!m.done;d++,m=n.next())null!==(m=r(t,m.value,l))&&(i=A(m,i,d),null===c?a=m:c.sibling=m,c=m);return a}for(s=e(t,s);!m.done;d++,m=n.next())null!==(m=h(s,t,d,m.value,l))&&(g&&null!==m.alternate&&s.delete(null===m.key?d:m.key),i=A(m,i,d),null===c?a=m:c.sibling=m,c=m);return g&&s.forEach((function(g){return I(t,g)})),a}return function(g,e,A,n){var s="object"==typeof A&&null!==A&&A.type===c&&null===A.key;s&&(A=A.props.children);var d="object"==typeof A&&null!==A;if(d)switch(A.$$typeof){case l:g:{for(d=A.key,s=e;null!==s;){if(s.key===d){switch(s.tag){case 7:if(A.type===c){C(g,s.sibling),(e=t(s,A.props.children)).return=g,g=e;break g}break;default:if(s.elementType===A.type){C(g,s.sibling),(e=t(s,A.props)).ref=XC(g,s,A),e.return=g,g=e;break g}}C(g,s);break}I(g,s),s=s.sibling}A.type===c?((e=pi(A.props.children,g.mode,n,A.key)).return=g,g=e):((n=Zi(A.type,A.key,A.props,null,g.mode,n)).ref=XC(g,e,A),n.return=g,g=n)}return i(g);case a:g:{for(s=A.key;null!==e;){if(e.key===s){if(4===e.tag&&e.stateNode.containerInfo===A.containerInfo&&e.stateNode.implementation===A.implementation){C(g,e.sibling),(e=t(e,A.children||[])).return=g,g=e;break g}C(g,e);break}I(g,e),e=e.sibling}(e=Vi(A,g.mode,n)).return=g,g=e}return i(g)}if("string"==typeof A||"number"==typeof A)return A=""+A,null!==e&&6===e.tag?(C(g,e.sibling),(e=t(e,A)).return=g,g=e):(C(g,e),(e=yi(A,g.mode,n)).return=g,g=e),i(g);if(YC(A))return m(g,e,A,n);if(Y(A))return u(g,e,A,n);if(d&&RC(g,A),void 0===A&&!s)switch(g.tag){case 1:case 22:case 0:case 11:case 15:throw Error(o(152,X(g.type)||"Component"))}return C(g,e)}}var wC=HC(!0),KC=HC(!1),SC={},NC=_g(SC),FC=_g(SC),zC=_g(SC);function fC(g){if(g===SC)throw Error(o(174));return g}function xC(g,I){$g(zC,I),$g(FC,g),$g(NC,SC),g=z(I),qg(NC),$g(NC,g)}function JC(){qg(NC),qg(FC),qg(zC)}function LC(g){var I=fC(zC.current),C=fC(NC.current);C!==(I=f(C,g.type,I))&&($g(FC,g),$g(NC,I))}function kC(g){FC.current===g&&(qg(NC),qg(FC))}var MC=_g(0);function QC(g){for(var I=g;null!==I;){if(13===I.tag){var C=I.memoizedState;if(null!==C&&(null===(C=C.dehydrated)||fg(C)||xg(C)))return I}else if(19===I.tag&&void 0!==I.memoizedProps.revealOrder){if(0!=(64&I.flags))return I}else if(null!==I.child){I.child.return=I,I=I.child;continue}if(I===g)break;for(;null===I.sibling;){if(null===I.return||I.return===g)return null;I=I.return}I.sibling.return=I.return,I=I.sibling}return null}var UC=null,TC=null,EC=!1;function jC(g,I){var C=mi(5,null,null,0);C.elementType="DELETED",C.type="DELETED",C.stateNode=I,C.return=g,C.flags=8,null!==g.lastEffect?(g.lastEffect.nextEffect=C,g.lastEffect=C):g.firstEffect=g.lastEffect=C}function DC(g,I){switch(g.tag){case 5:return null!==(I=Fg(I,g.type,g.pendingProps))&&(g.stateNode=I,!0);case 6:return null!==(I=zg(I,g.pendingProps))&&(g.stateNode=I,!0);case 13:default:return!1}}function OC(g){if(EC){var I=TC;if(I){var C=I;if(!DC(g,I)){if(!(I=Jg(C))||!DC(g,I))return g.flags=-1025&g.flags|2,EC=!1,void(UC=g);jC(UC,C)}UC=g,TC=Lg(I)}else g.flags=-1025&g.flags|2,EC=!1,UC=g}}function PC(g){for(g=g.return;null!==g&&5!==g.tag&&3!==g.tag&&13!==g.tag;)g=g.return;UC=g}function _C(g){if(!q||g!==UC)return!1;if(!EC)return PC(g),EC=!0,!1;var I=g.type;if(5!==g.tag||"head"!==I&&"body"!==I&&!U(I,g.memoizedProps))for(I=TC;I;)jC(g,I),I=Jg(I);if(PC(g),13===g.tag){if(!q)throw Error(o(316));if(!(g=null!==(g=g.memoizedState)?g.dehydrated:null))throw Error(o(317));TC=Qg(g)}else TC=UC?Jg(g.stateNode):null;return!0}function qC(){q&&(TC=UC=null,EC=!1)}var $C=[];function ge(){for(var g=0;g<$C.length;g++){var I=$C[g];O?I._workInProgressVersionPrimary=null:I._workInProgressVersionSecondary=null}$C.length=0}var Ie=n.ReactCurrentDispatcher,Ce=n.ReactCurrentBatchConfig,ee=0,te=null,Ae=null,ie=null,oe=!1,ne=!1;function le(){throw Error(o(321))}function ae(g,I){if(null===I)return!1;for(var C=0;C<I.length&&C<g.length;C++)if(!_I(g[C],I[C]))return!1;return!0}function ce(g,I,C,e,t,A){if(ee=A,te=I,I.memoizedState=null,I.updateQueue=null,I.lanes=0,Ie.current=null===g||null===g.memoizedState?fe:xe,g=C(e,t),ne){A=0;do{if(ne=!1,!(25>A))throw Error(o(301));A+=1,ie=Ae=null,I.updateQueue=null,Ie.current=Je,g=C(e,t)}while(ne)}if(Ie.current=ze,I=null!==Ae&&null!==Ae.next,ee=0,ie=Ae=te=null,oe=!1,I)throw Error(o(300));return g}function se(){var g={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ie?te.memoizedState=ie=g:ie=ie.next=g,ie}function de(){if(null===Ae){var g=te.alternate;g=null!==g?g.memoizedState:null}else g=Ae.next;var I=null===ie?te.memoizedState:ie.next;if(null!==I)ie=I,Ae=g;else{if(null===g)throw Error(o(310));g={memoizedState:(Ae=g).memoizedState,baseState:Ae.baseState,baseQueue:Ae.baseQueue,queue:Ae.queue,next:null},null===ie?te.memoizedState=ie=g:ie=ie.next=g}return ie}function be(g,I){return"function"==typeof I?I(g):I}function re(g){var I=de(),C=I.queue;if(null===C)throw Error(o(311));C.lastRenderedReducer=g;var e=Ae,t=e.baseQueue,A=C.pending;if(null!==A){if(null!==t){var i=t.next;t.next=A.next,A.next=i}e.baseQueue=t=A,C.pending=null}if(null!==t){t=t.next,e=e.baseState;var n=i=A=null,l=t;do{var a=l.lane;if((ee&a)===a)null!==n&&(n=n.next={lane:0,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null}),e=l.eagerReducer===g?l.eagerState:g(e,l.action);else{var c={lane:a,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null};null===n?(i=n=c,A=e):n=n.next=c,te.lanes|=a,nA|=a}l=l.next}while(null!==l&&l!==t);null===n?A=e:n.next=i,_I(e,I.memoizedState)||(ke=!0),I.memoizedState=e,I.baseState=A,I.baseQueue=n,C.lastRenderedState=e}return[I.memoizedState,C.dispatch]}function Ge(g){var I=de(),C=I.queue;if(null===C)throw Error(o(311));C.lastRenderedReducer=g;var e=C.dispatch,t=C.pending,A=I.memoizedState;if(null!==t){C.pending=null;var i=t=t.next;do{A=g(A,i.action),i=i.next}while(i!==t);_I(A,I.memoizedState)||(ke=!0),I.memoizedState=A,null===I.baseQueue&&(I.baseState=A),C.lastRenderedState=A}return[A,e]}function he(g,I,C){var e=I._getVersion;e=e(I._source);var t=O?I._workInProgressVersionPrimary:I._workInProgressVersionSecondary;if(null!==t?g=t===e:(g=g.mutableReadLanes,(g=(ee&g)===g)&&(O?I._workInProgressVersionPrimary=e:I._workInProgressVersionSecondary=e,$C.push(I))),g)return C(I._source);throw $C.push(I),Error(o(350))}function me(g,I,C,e){var t=gA;if(null===t)throw Error(o(349));var A=I._getVersion,i=A(I._source),n=Ie.current,l=n.useState((function(){return he(t,I,C)})),a=l[1],c=l[0];l=ie;var s=g.memoizedState,d=s.refs,b=d.getSnapshot,r=s.source;s=s.subscribe;var G=te;return g.memoizedState={refs:d,source:I,subscribe:e},n.useEffect((function(){d.getSnapshot=C,d.setSnapshot=a;var g=A(I._source);if(!_I(i,g)){g=C(I._source),_I(c,g)||(a(g),g=NA(G),t.mutableReadLanes|=g&t.pendingLanes),g=t.mutableReadLanes,t.entangledLanes|=g;for(var e=t.entanglements,o=g;0<o;){var n=31-pI(o),l=1<<n;e[n]|=g,o&=~l}}}),[C,I,e]),n.useEffect((function(){return e(I._source,(function(){var g=d.getSnapshot,C=d.setSnapshot;try{C(g(I._source));var e=NA(G);t.mutableReadLanes|=e&t.pendingLanes}catch(g){C((function(){throw g}))}}))}),[I,e]),_I(b,C)&&_I(r,I)&&_I(s,e)||((g={pending:null,dispatch:null,lastRenderedReducer:be,lastRenderedState:c}).dispatch=a=Fe.bind(null,te,g),l.queue=g,l.baseQueue=null,c=he(t,I,C),l.memoizedState=l.baseState=c),c}function ue(g,I,C){return me(de(),g,I,C)}function Be(g){var I=se();return"function"==typeof g&&(g=g()),I.memoizedState=I.baseState=g,g=(g=I.queue={pending:null,dispatch:null,lastRenderedReducer:be,lastRenderedState:g}).dispatch=Fe.bind(null,te,g),[I.memoizedState,g]}function Ze(g,I,C,e){return g={tag:g,create:I,destroy:C,deps:e,next:null},null===(I=te.updateQueue)?(I={lastEffect:null},te.updateQueue=I,I.lastEffect=g.next=g):null===(C=I.lastEffect)?I.lastEffect=g.next=g:(e=C.next,C.next=g,g.next=e,I.lastEffect=g),g}function pe(g){return g={current:g},se().memoizedState=g}function We(){return de().memoizedState}function ye(g,I,C,e){var t=se();te.flags|=g,t.memoizedState=Ze(1|I,C,void 0,void 0===e?null:e)}function Ve(g,I,C,e){var t=de();e=void 0===e?null:e;var A=void 0;if(null!==Ae){var i=Ae.memoizedState;if(A=i.destroy,null!==e&&ae(e,i.deps))return void Ze(I,C,A,e)}te.flags|=g,t.memoizedState=Ze(1|I,C,A,e)}function ve(g,I){return ye(516,4,g,I)}function Ye(g,I){return Ve(516,4,g,I)}function Xe(g,I){return Ve(4,2,g,I)}function Re(g,I){return"function"==typeof I?(g=g(),I(g),function(){I(null)}):null!=I?(g=g(),I.current=g,function(){I.current=null}):void 0}function He(g,I,C){return C=null!=C?C.concat([g]):null,Ve(4,2,Re.bind(null,I,g),C)}function we(){}function Ke(g,I){var C=de();I=void 0===I?null:I;var e=C.memoizedState;return null!==e&&null!==I&&ae(I,e[1])?e[0]:(C.memoizedState=[g,I],g)}function Se(g,I){var C=de();I=void 0===I?null:I;var e=C.memoizedState;return null!==e&&null!==I&&ae(I,e[1])?e[0]:(g=g(),C.memoizedState=[g,I],g)}function Ne(g,I){var C=UI();EI(98>C?98:C,(function(){g(!0)})),EI(97<C?97:C,(function(){var C=Ce.transition;Ce.transition=1;try{g(!1),I()}finally{Ce.transition=C}}))}function Fe(g,I,C){var e=SA(),t=NA(g),A={lane:t,action:C,eagerReducer:null,eagerState:null,next:null},i=I.pending;if(null===i?A.next=A:(A.next=i.next,i.next=A),I.pending=A,i=g.alternate,g===te||null!==i&&i===te)ne=oe=!0;else{if(0===g.lanes&&(null===i||0===i.lanes)&&null!==(i=I.lastRenderedReducer))try{var o=I.lastRenderedState,n=i(o,C);if(A.eagerReducer=i,A.eagerState=n,_I(n,o))return}catch(g){}FA(g,t,e)}}var ze={readContext:cC,useCallback:le,useContext:le,useEffect:le,useImperativeHandle:le,useLayoutEffect:le,useMemo:le,useReducer:le,useRef:le,useState:le,useDebugValue:le,useDeferredValue:le,useTransition:le,useMutableSource:le,useOpaqueIdentifier:le,unstable_isNewReconciler:!1},fe={readContext:cC,useCallback:function(g,I){return se().memoizedState=[g,void 0===I?null:I],g},useContext:cC,useEffect:ve,useImperativeHandle:function(g,I,C){return C=null!=C?C.concat([g]):null,ye(4,2,Re.bind(null,I,g),C)},useLayoutEffect:function(g,I){return ye(4,2,g,I)},useMemo:function(g,I){var C=se();return I=void 0===I?null:I,g=g(),C.memoizedState=[g,I],g},useReducer:function(g,I,C){var e=se();return I=void 0!==C?C(I):I,e.memoizedState=e.baseState=I,g=(g=e.queue={pending:null,dispatch:null,lastRenderedReducer:g,lastRenderedState:I}).dispatch=Fe.bind(null,te,g),[e.memoizedState,g]},useRef:pe,useState:Be,useDebugValue:we,useDeferredValue:function(g){var I=Be(g),C=I[0],e=I[1];return ve((function(){var I=Ce.transition;Ce.transition=1;try{e(g)}finally{Ce.transition=I}}),[g]),C},useTransition:function(){var g=Be(!1),I=g[0];return pe(g=Ne.bind(null,g[1])),[g,I]},useMutableSource:function(g,I,C){var e=se();return e.memoizedState={refs:{getSnapshot:I,setSnapshot:null},source:g,subscribe:C},me(e,g,I,C)},useOpaqueIdentifier:function(){if(EC){var g=!1,I=gg((function(){throw g||(g=!0,C(Ig())),Error(o(355))})),C=Be(I)[1];return 0==(2&te.mode)&&(te.flags|=516,Ze(5,(function(){C(Ig())}),void 0,null)),I}return Be(I=Ig()),I},unstable_isNewReconciler:!1},xe={readContext:cC,useCallback:Ke,useContext:cC,useEffect:Ye,useImperativeHandle:He,useLayoutEffect:Xe,useMemo:Se,useReducer:re,useRef:We,useState:function(){return re(be)},useDebugValue:we,useDeferredValue:function(g){var I=re(be),C=I[0],e=I[1];return Ye((function(){var I=Ce.transition;Ce.transition=1;try{e(g)}finally{Ce.transition=I}}),[g]),C},useTransition:function(){var g=re(be)[0];return[We().current,g]},useMutableSource:ue,useOpaqueIdentifier:function(){return re(be)[0]},unstable_isNewReconciler:!1},Je={readContext:cC,useCallback:Ke,useContext:cC,useEffect:Ye,useImperativeHandle:He,useLayoutEffect:Xe,useMemo:Se,useReducer:Ge,useRef:We,useState:function(){return Ge(be)},useDebugValue:we,useDeferredValue:function(g){var I=Ge(be),C=I[0],e=I[1];return Ye((function(){var I=Ce.transition;Ce.transition=1;try{e(g)}finally{Ce.transition=I}}),[g]),C},useTransition:function(){var g=Ge(be)[0];return[We().current,g]},useMutableSource:ue,useOpaqueIdentifier:function(){return Ge(be)[0]},unstable_isNewReconciler:!1},Le=n.ReactCurrentOwner,ke=!1;function Me(g,I,C,e){I.child=null===g?KC(I,null,C,e):wC(I,g.child,C,e)}function Qe(g,I,C,e,t){C=C.render;var A=I.ref;return aC(I,t),e=ce(g,I,C,e,A,t),null===g||ke?(I.flags|=1,Me(g,I,e,t),I.child):(I.updateQueue=g.updateQueue,I.flags&=-517,g.lanes&=~t,nt(g,I,t))}function Ue(g,I,C,e,t,A){if(null===g){var i=C.type;return"function"!=typeof i||ui(i)||void 0!==i.defaultProps||null!==C.compare||void 0!==C.defaultProps?((g=Zi(C.type,null,e,I,I.mode,A)).ref=I.ref,g.return=I,I.child=g):(I.tag=15,I.type=i,Te(g,I,i,e,t,A))}return i=g.child,0==(t&A)&&(t=i.memoizedProps,(C=null!==(C=C.compare)?C:$I)(t,e)&&g.ref===I.ref)?nt(g,I,A):(I.flags|=1,(g=Bi(i,e)).ref=I.ref,g.return=I,I.child=g)}function Te(g,I,C,e,t,A){if(null!==g&&$I(g.memoizedProps,e)&&g.ref===I.ref){if(ke=!1,0==(A&t))return I.lanes=g.lanes,nt(g,I,A);0!=(16384&g.flags)&&(ke=!0)}return De(g,I,C,e,A)}function Ee(g,I,C){var e=I.pendingProps,t=e.children,A=null!==g?g.memoizedState:null;if("hidden"===e.mode||"unstable-defer-without-hiding"===e.mode)if(0==(4&I.mode))I.memoizedState={baseLanes:0},QA(0,C);else{if(0==(1073741824&C))return g=null!==A?A.baseLanes|C:C,I.lanes=I.childLanes=1073741824,I.memoizedState={baseLanes:g},QA(0,g),null;I.memoizedState={baseLanes:0},QA(0,null!==A?A.baseLanes:C)}else null!==A?(e=A.baseLanes|C,I.memoizedState=null):e=C,QA(0,e);return Me(g,I,t,C),I.child}function je(g,I){var C=I.ref;(null===g&&null!==C||null!==g&&g.ref!==C)&&(I.flags|=128)}function De(g,I,C,e,t){var A=AI(C)?eI:II.current;return A=tI(I,A),aC(I,t),C=ce(g,I,C,e,A,t),null===g||ke?(I.flags|=1,Me(g,I,C,t),I.child):(I.updateQueue=g.updateQueue,I.flags&=-517,g.lanes&=~t,nt(g,I,t))}function Oe(g,I,C,e,t){if(AI(C)){var A=!0;lI(I)}else A=!1;if(aC(I,t),null===I.stateNode)null!==g&&(g.alternate=null,I.alternate=null,I.flags|=2),yC(I,C,e),vC(I,C,e,t),e=!0;else if(null===g){var i=I.stateNode,o=I.memoizedProps;i.props=o;var n=i.context,l=C.contextType;l="object"==typeof l&&null!==l?cC(l):tI(I,l=AI(C)?eI:II.current);var a=C.getDerivedStateFromProps,c="function"==typeof a||"function"==typeof i.getSnapshotBeforeUpdate;c||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(o!==e||n!==l)&&VC(I,i,e,l),sC=!1;var s=I.memoizedState;i.state=s,mC(I,e,i,t),n=I.memoizedState,o!==e||s!==n||CI.current||sC?("function"==typeof a&&(ZC(I,C,a,e),n=I.memoizedState),(o=sC||WC(I,C,o,e,s,n,l))?(c||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(I.flags|=4)):("function"==typeof i.componentDidMount&&(I.flags|=4),I.memoizedProps=e,I.memoizedState=n),i.props=e,i.state=n,i.context=l,e=o):("function"==typeof i.componentDidMount&&(I.flags|=4),e=!1)}else{i=I.stateNode,bC(g,I),o=I.memoizedProps,l=I.type===I.elementType?o:IC(I.type,o),i.props=l,c=I.pendingProps,s=i.context,n="object"==typeof(n=C.contextType)&&null!==n?cC(n):tI(I,n=AI(C)?eI:II.current);var d=C.getDerivedStateFromProps;(a="function"==typeof d||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(o!==c||s!==n)&&VC(I,i,e,n),sC=!1,s=I.memoizedState,i.state=s,mC(I,e,i,t);var b=I.memoizedState;o!==c||s!==b||CI.current||sC?("function"==typeof d&&(ZC(I,C,d,e),b=I.memoizedState),(l=sC||WC(I,C,l,e,s,b,n))?(a||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(e,b,n),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(e,b,n)),"function"==typeof i.componentDidUpdate&&(I.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(I.flags|=256)):("function"!=typeof i.componentDidUpdate||o===g.memoizedProps&&s===g.memoizedState||(I.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||o===g.memoizedProps&&s===g.memoizedState||(I.flags|=256),I.memoizedProps=e,I.memoizedState=b),i.props=e,i.state=b,i.context=n,e=l):("function"!=typeof i.componentDidUpdate||o===g.memoizedProps&&s===g.memoizedState||(I.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||o===g.memoizedProps&&s===g.memoizedState||(I.flags|=256),e=!1)}return Pe(g,I,C,e,A,t)}function Pe(g,I,C,e,t,A){je(g,I);var i=0!=(64&I.flags);if(!e&&!i)return t&&aI(I,C,!1),nt(g,I,A);e=I.stateNode,Le.current=I;var o=i&&"function"!=typeof C.getDerivedStateFromError?null:e.render();return I.flags|=1,null!==g&&i?(I.child=wC(I,g.child,null,A),I.child=wC(I,null,o,A)):Me(g,I,o,A),I.memoizedState=e.state,t&&aI(I,C,!0),I.child}function _e(g){var I=g.stateNode;I.pendingContext?oI(0,I.pendingContext,I.pendingContext!==I.context):I.context&&oI(0,I.context,!1),xC(g,I.containerInfo)}var qe,$e,gt,It,Ct={dehydrated:null,retryLane:0};function et(g,I,C){var e,t=I.pendingProps,A=MC.current,i=!1;return(e=0!=(64&I.flags))||(e=(null===g||null!==g.memoizedState)&&0!=(2&A)),e?(i=!0,I.flags&=-65):null!==g&&null===g.memoizedState||void 0===t.fallback||!0===t.unstable_avoidThisFallback||(A|=1),$g(MC,1&A),null===g?(void 0!==t.fallback&&OC(I),g=t.children,A=t.fallback,i?(g=tt(I,g,A,C),I.child.memoizedState={baseLanes:C},I.memoizedState=Ct,g):"number"==typeof t.unstable_expectedLoadTime?(g=tt(I,g,A,C),I.child.memoizedState={baseLanes:C},I.memoizedState=Ct,I.lanes=33554432,g):((C=Wi({mode:"visible",children:g},I.mode,C,null)).return=I,I.child=C)):(g.memoizedState,i?(t=function(g,I,C,e,t){var A=I.mode,i=g.child;g=i.sibling;var o={mode:"hidden",children:C};return 0==(2&A)&&I.child!==i?((C=I.child).childLanes=0,C.pendingProps=o,null!==(i=C.lastEffect)?(I.firstEffect=C.firstEffect,I.lastEffect=i,i.nextEffect=null):I.firstEffect=I.lastEffect=null):C=Bi(i,o),null!==g?e=Bi(g,e):(e=pi(e,A,t,null)).flags|=2,e.return=I,C.return=I,C.sibling=e,I.child=C,e}(g,I,t.children,t.fallback,C),i=I.child,A=g.child.memoizedState,i.memoizedState=null===A?{baseLanes:C}:{baseLanes:A.baseLanes|C},i.childLanes=g.childLanes&~C,I.memoizedState=Ct,t):(C=function(g,I,C,e){var t=g.child;return g=t.sibling,C=Bi(t,{mode:"visible",children:C}),0==(2&I.mode)&&(C.lanes=e),C.return=I,C.sibling=null,null!==g&&(g.nextEffect=null,g.flags=8,I.firstEffect=I.lastEffect=g),I.child=C}(g,I,t.children,C),I.memoizedState=null,C))}function tt(g,I,C,e){var t=g.mode,A=g.child;return I={mode:"hidden",children:I},0==(2&t)&&null!==A?(A.childLanes=0,A.pendingProps=I):A=Wi(I,t,0,null),C=pi(C,t,e,null),A.return=g,C.return=g,A.sibling=C,g.child=A,C}function At(g,I){g.lanes|=I;var C=g.alternate;null!==C&&(C.lanes|=I),lC(g.return,I)}function it(g,I,C,e,t,A){var i=g.memoizedState;null===i?g.memoizedState={isBackwards:I,rendering:null,renderingStartTime:0,last:e,tail:C,tailMode:t,lastEffect:A}:(i.isBackwards=I,i.rendering=null,i.renderingStartTime=0,i.last=e,i.tail=C,i.tailMode=t,i.lastEffect=A)}function ot(g,I,C){var e=I.pendingProps,t=e.revealOrder,A=e.tail;if(Me(g,I,e.children,C),0!=(2&(e=MC.current)))e=1&e|2,I.flags|=64;else{if(null!==g&&0!=(64&g.flags))g:for(g=I.child;null!==g;){if(13===g.tag)null!==g.memoizedState&&At(g,C);else if(19===g.tag)At(g,C);else if(null!==g.child){g.child.return=g,g=g.child;continue}if(g===I)break g;for(;null===g.sibling;){if(null===g.return||g.return===I)break g;g=g.return}g.sibling.return=g.return,g=g.sibling}e&=1}if($g(MC,e),0==(2&I.mode))I.memoizedState=null;else switch(t){case"forwards":for(C=I.child,t=null;null!==C;)null!==(g=C.alternate)&&null===QC(g)&&(t=C),C=C.sibling;null===(C=t)?(t=I.child,I.child=null):(t=C.sibling,C.sibling=null),it(I,!1,t,C,A,I.lastEffect);break;case"backwards":for(C=null,t=I.child,I.child=null;null!==t;){if(null!==(g=t.alternate)&&null===QC(g)){I.child=t;break}g=t.sibling,t.sibling=C,C=t,t=g}it(I,!0,C,null,A,I.lastEffect);break;case"together":it(I,!1,null,null,void 0,I.lastEffect);break;default:I.memoizedState=null}return I.child}function nt(g,I,C){if(null!==g&&(I.dependencies=g.dependencies),nA|=I.lanes,0!=(C&I.childLanes)){if(null!==g&&I.child!==g.child)throw Error(o(153));if(null!==I.child){for(C=Bi(g=I.child,g.pendingProps),I.child=C,C.return=I;null!==g.sibling;)g=g.sibling,(C=C.sibling=Bi(g,g.pendingProps)).return=I;C.sibling=null}return I.child}return null}function lt(g){g.flags|=4}if(P)qe=function(g,I){for(var C=I.child;null!==C;){if(5===C.tag||6===C.tag)k(g,C.stateNode);else if(4!==C.tag&&null!==C.child){C.child.return=C,C=C.child;continue}if(C===I)break;for(;null===C.sibling;){if(null===C.return||C.return===I)return;C=C.return}C.sibling.return=C.return,C=C.sibling}},$e=function(){},gt=function(g,I,C,e,t){if((g=g.memoizedProps)!==e){var A=I.stateNode,i=fC(NC.current);C=Q(A,C,g,e,t,i),(I.updateQueue=C)&&lt(I)}},It=function(g,I,C,e){C!==e&&lt(I)};else if(_){qe=function(g,I,C,e){for(var t=I.child;null!==t;){if(5===t.tag){var A=t.stateNode;C&&e&&(A=Sg(A,t.type,t.memoizedProps,t)),k(g,A)}else if(6===t.tag)A=t.stateNode,C&&e&&(A=Ng(A,t.memoizedProps,t)),k(g,A);else if(4!==t.tag){if(13===t.tag&&0!=(4&t.flags)&&(A=null!==t.memoizedState)){var i=t.child;if(null!==i&&(null!==i.child&&(i.child.return=i,qe(g,i,!0,A)),null!==(A=i.sibling))){A.return=t,t=A;continue}}if(null!==t.child){t.child.return=t,t=t.child;continue}}if(t===I)break;for(;null===t.sibling;){if(null===t.return||t.return===I)return;t=t.return}t.sibling.return=t.return,t=t.sibling}};var at=function(g,I,C,e){for(var t=I.child;null!==t;){if(5===t.tag){var A=t.stateNode;C&&e&&(A=Sg(A,t.type,t.memoizedProps,t)),Hg(g,A)}else if(6===t.tag)A=t.stateNode,C&&e&&(A=Ng(A,t.memoizedProps,t)),Hg(g,A);else if(4!==t.tag){if(13===t.tag&&0!=(4&t.flags)&&(A=null!==t.memoizedState)){var i=t.child;if(null!==i&&(null!==i.child&&(i.child.return=i,at(g,i,!0,A)),null!==(A=i.sibling))){A.return=t,t=A;continue}}if(null!==t.child){t.child.return=t,t=t.child;continue}}if(t===I)break;for(;null===t.sibling;){if(null===t.return||t.return===I)return;t=t.return}t.sibling.return=t.return,t=t.sibling}};$e=function(g){var I=g.stateNode;if(null!==g.firstEffect){var C=I.containerInfo,e=Rg(C);at(e,g,!1,!1),I.pendingChildren=e,lt(g),wg(C,e)}},gt=function(g,I,C,e,t){var A=g.stateNode,i=g.memoizedProps;if((g=null===I.firstEffect)&&i===e)I.stateNode=A;else{var o=I.stateNode,n=fC(NC.current),l=null;i!==e&&(l=Q(o,C,i,e,t,n)),g&&null===l?I.stateNode=A:(A=Xg(A,l,C,i,e,I,g,o),M(A,C,e,t,n)&&lt(I),I.stateNode=A,g?lt(I):qe(A,I,!1,!1))}},It=function(g,I,C,e){C!==e?(g=fC(zC.current),C=fC(NC.current),I.stateNode=T(e,g,C,I),lt(I)):I.stateNode=g.stateNode}}else $e=function(){},gt=function(){},It=function(){};function ct(g,I){if(!EC)switch(g.tailMode){case"hidden":I=g.tail;for(var C=null;null!==I;)null!==I.alternate&&(C=I),I=I.sibling;null===C?g.tail=null:C.sibling=null;break;case"collapsed":C=g.tail;for(var e=null;null!==C;)null!==C.alternate&&(e=C),C=C.sibling;null===e?I||null===g.tail?g.tail=null:g.tail.sibling=null:e.sibling=null}}function st(g,I,C){var e=I.pendingProps;switch(I.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return AI(I.type)&&iI(),null;case 3:return JC(),qg(CI),qg(II),ge(),(e=I.stateNode).pendingContext&&(e.context=e.pendingContext,e.pendingContext=null),null!==g&&null!==g.child||(_C(I)?lt(I):e.hydrate||(I.flags|=256)),$e(I),null;case 5:kC(I);var t=fC(zC.current);if(C=I.type,null!==g&&null!=I.stateNode)gt(g,I,C,e,t),g.ref!==I.ref&&(I.flags|=128);else{if(!e){if(null===I.stateNode)throw Error(o(166));return null}if(g=fC(NC.current),_C(I)){if(!q)throw Error(o(175));g=kg(I.stateNode,I.type,I.memoizedProps,t,g,I),I.updateQueue=g,null!==g&&lt(I)}else{var A=L(C,e,t,g,I);qe(A,I,!1,!1),I.stateNode=A,M(A,C,e,t,g)&&lt(I)}null!==I.ref&&(I.flags|=128)}return null;case 6:if(g&&null!=I.stateNode)It(g,I,g.memoizedProps,e);else{if("string"!=typeof e&&null===I.stateNode)throw Error(o(166));if(g=fC(zC.current),t=fC(NC.current),_C(I)){if(!q)throw Error(o(176));Mg(I.stateNode,I.memoizedProps,I)&&lt(I)}else I.stateNode=T(e,g,t,I)}return null;case 13:return qg(MC),e=I.memoizedState,0!=(64&I.flags)?(I.lanes=C,I):(e=null!==e,t=!1,null===g?void 0!==I.memoizedProps.fallback&&_C(I):t=null!==g.memoizedState,e&&!t&&0!=(2&I.mode)&&(null===g&&!0!==I.memoizedProps.unstable_avoidThisFallback||0!=(1&MC.current)?0===AA&&(AA=3):(0!==AA&&3!==AA||(AA=4),null===gA||0==(134217727&nA)&&0==(134217727&lA)||JA(gA,CA))),_&&e&&(I.flags|=4),P&&(e||t)&&(I.flags|=4),null);case 4:return JC(),$e(I),null===g&&tg(I.stateNode.containerInfo),null;case 10:return nC(I),null;case 17:return AI(I.type)&&iI(),null;case 19:if(qg(MC),null===(e=I.memoizedState))return null;if(t=0!=(64&I.flags),null===(A=e.rendering))if(t)ct(e,!1);else{if(0!==AA||null!==g&&0!=(64&g.flags))for(g=I.child;null!==g;){if(null!==(A=QC(g))){for(I.flags|=64,ct(e,!1),null!==(g=A.updateQueue)&&(I.updateQueue=g,I.flags|=4),null===e.lastEffect&&(I.firstEffect=null),I.lastEffect=e.lastEffect,g=C,e=I.child;null!==e;)C=g,(t=e).flags&=2,t.nextEffect=null,t.firstEffect=null,t.lastEffect=null,null===(A=t.alternate)?(t.childLanes=0,t.lanes=C,t.child=null,t.memoizedProps=null,t.memoizedState=null,t.updateQueue=null,t.dependencies=null,t.stateNode=null):(t.childLanes=A.childLanes,t.lanes=A.lanes,t.child=A.child,t.memoizedProps=A.memoizedProps,t.memoizedState=A.memoizedState,t.updateQueue=A.updateQueue,t.type=A.type,C=A.dependencies,t.dependencies=null===C?null:{lanes:C.lanes,firstContext:C.firstContext}),e=e.sibling;return $g(MC,1&MC.current|2),I.child}g=g.sibling}null!==e.tail&&QI()>dA&&(I.flags|=64,t=!0,ct(e,!1),I.lanes=33554432)}else{if(!t)if(null!==(g=QC(A))){if(I.flags|=64,t=!0,null!==(g=g.updateQueue)&&(I.updateQueue=g,I.flags|=4),ct(e,!0),null===e.tail&&"hidden"===e.tailMode&&!A.alternate&&!EC)return null!==(I=I.lastEffect=e.lastEffect)&&(I.nextEffect=null),null}else 2*QI()-e.renderingStartTime>dA&&1073741824!==C&&(I.flags|=64,t=!0,ct(e,!1),I.lanes=33554432);e.isBackwards?(A.sibling=I.child,I.child=A):(null!==(g=e.last)?g.sibling=A:I.child=A,e.last=A)}return null!==e.tail?(g=e.tail,e.rendering=g,e.tail=g.sibling,e.lastEffect=I.lastEffect,e.renderingStartTime=QI(),g.sibling=null,I=MC.current,$g(MC,t?1&I|2:1&I),g):null;case 23:case 24:return UA(),null!==g&&null!==g.memoizedState!=(null!==I.memoizedState)&&"unstable-defer-without-hiding"!==e.mode&&(I.flags|=4),null}throw Error(o(156,I.tag))}function dt(g){switch(g.tag){case 1:AI(g.type)&&iI();var I=g.flags;return 4096&I?(g.flags=-4097&I|64,g):null;case 3:if(JC(),qg(CI),qg(II),ge(),0!=(64&(I=g.flags)))throw Error(o(285));return g.flags=-4097&I|64,g;case 5:return kC(g),null;case 13:return qg(MC),4096&(I=g.flags)?(g.flags=-4097&I|64,g):null;case 19:return qg(MC),null;case 4:return JC(),null;case 10:return nC(g),null;case 23:case 24:return UA(),null;default:return null}}function bt(g,I){try{var C="",e=I;do{C+=gC(e),e=e.return}while(e);var t=C}catch(g){t="\nError generating stack: "+g.message+"\n"+g.stack}return{value:g,source:I,stack:t}}function rt(g,I){try{console.error(I.value)}catch(g){setTimeout((function(){throw g}))}}var Gt="function"==typeof WeakMap?WeakMap:Map;function ht(g,I,C){(C=rC(-1,C)).tag=3,C.payload={element:null};var e=I.value;return C.callback=function(){hA||(hA=!0,mA=e),rt(0,I)},C}function mt(g,I,C){(C=rC(-1,C)).tag=3;var e=g.type.getDerivedStateFromError;if("function"==typeof e){var t=I.value;C.payload=function(){return rt(0,I),e(t)}}var A=g.stateNode;return null!==A&&"function"==typeof A.componentDidCatch&&(C.callback=function(){"function"!=typeof e&&(null===uA?uA=new Set([this]):uA.add(this),rt(0,I));var g=I.stack;this.componentDidCatch(I.value,{componentStack:null!==g?g:""})}),C}var ut="function"==typeof WeakSet?WeakSet:Set;function Bt(g){var I=g.ref;if(null!==I)if("function"==typeof I)try{I(null)}catch(I){oi(g,I)}else I.current=null}function Zt(g,I){switch(I.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&I.flags&&null!==g){var C=g.memoizedProps,e=g.memoizedState;I=(g=I.stateNode).getSnapshotBeforeUpdate(I.elementType===I.type?C:IC(I.type,C),e),g.__reactInternalSnapshotBeforeUpdate=I}return;case 3:return void(P&&256&I.flags&&Yg(I.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(o(163))}function pt(g,I){if(null!==(I=null!==(I=I.updateQueue)?I.lastEffect:null)){var C=I=I.next;do{if((C.tag&g)===g){var e=C.destroy;C.destroy=void 0,void 0!==e&&e()}C=C.next}while(C!==I)}}function Wt(g,I,C){switch(C.tag){case 0:case 11:case 15:case 22:if(null!==(I=null!==(I=C.updateQueue)?I.lastEffect:null)){g=I=I.next;do{if(3==(3&g.tag)){var e=g.create;g.destroy=e()}g=g.next}while(g!==I)}if(null!==(I=null!==(I=C.updateQueue)?I.lastEffect:null)){g=I=I.next;do{var t=g;e=t.next,0!=(4&(t=t.tag))&&0!=(1&t)&&(ti(C,g),ei(C,g)),g=e}while(g!==I)}return;case 1:return g=C.stateNode,4&C.flags&&(null===I?g.componentDidMount():(e=C.elementType===C.type?I.memoizedProps:IC(C.type,I.memoizedProps),g.componentDidUpdate(e,I.memoizedState,g.__reactInternalSnapshotBeforeUpdate))),void(null!==(I=C.updateQueue)&&uC(C,I,g));case 3:if(null!==(I=C.updateQueue)){if(g=null,null!==C.child)switch(C.child.tag){case 5:g=F(C.child.stateNode);break;case 1:g=C.child.stateNode}uC(C,I,g)}return;case 5:return g=C.stateNode,void(null===I&&4&C.flags&&Gg(g,C.type,C.memoizedProps,C));case 6:case 4:case 12:return;case 13:return void(q&&null===C.memoizedState&&(C=C.alternate,null!==C&&(C=C.memoizedState,null!==C&&(C=C.dehydrated,null!==C&&Tg(C)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(o(163))}function yt(g,I){if(P)for(var C=g;;){if(5===C.tag){var e=C.stateNode;I?Wg(e):Vg(C.stateNode,C.memoizedProps)}else if(6===C.tag)e=C.stateNode,I?yg(e):vg(e,C.memoizedProps);else if((23!==C.tag&&24!==C.tag||null===C.memoizedState||C===g)&&null!==C.child){C.child.return=C,C=C.child;continue}if(C===g)break;for(;null===C.sibling;){if(null===C.return||C.return===g)return;C=C.return}C.sibling.return=C.return,C=C.sibling}}function Vt(g,I){if(sI&&"function"==typeof sI.onCommitFiberUnmount)try{sI.onCommitFiberUnmount(cI,I)}catch(g){}switch(I.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(g=I.updateQueue)&&null!==(g=g.lastEffect)){var C=g=g.next;do{var e=C,t=e.destroy;if(e=e.tag,void 0!==t)if(0!=(4&e))ti(I,C);else{e=I;try{t()}catch(g){oi(e,g)}}C=C.next}while(C!==g)}break;case 1:if(Bt(I),"function"==typeof(g=I.stateNode).componentWillUnmount)try{g.props=I.memoizedProps,g.state=I.memoizedState,g.componentWillUnmount()}catch(g){oi(I,g)}break;case 5:Bt(I);break;case 4:P?Kt(g,I):_&&_&&(I=I.stateNode.containerInfo,g=Rg(I),Kg(I,g))}}function vt(g,I){for(var C=I;;)if(Vt(g,C),null===C.child||P&&4===C.tag){if(C===I)break;for(;null===C.sibling;){if(null===C.return||C.return===I)return;C=C.return}C.sibling.return=C.return,C=C.sibling}else C.child.return=C,C=C.child}function Yt(g){g.alternate=null,g.child=null,g.dependencies=null,g.firstEffect=null,g.lastEffect=null,g.memoizedProps=null,g.memoizedState=null,g.pendingProps=null,g.return=null,g.updateQueue=null}function Xt(g){return 5===g.tag||3===g.tag||4===g.tag}function Rt(g){if(P){g:{for(var I=g.return;null!==I;){if(Xt(I))break g;I=I.return}throw Error(o(160))}var C=I;switch(I=C.stateNode,C.tag){case 5:var e=!1;break;case 3:case 4:I=I.containerInfo,e=!0;break;default:throw Error(o(161))}16&C.flags&&(pg(I),C.flags&=-17);g:I:for(C=g;;){for(;null===C.sibling;){if(null===C.return||Xt(C.return)){C=null;break g}C=C.return}for(C.sibling.return=C.return,C=C.sibling;5!==C.tag&&6!==C.tag&&18!==C.tag;){if(2&C.flags)continue I;if(null===C.child||4===C.tag)continue I;C.child.return=C,C=C.child}if(!(2&C.flags)){C=C.stateNode;break g}}e?Ht(g,C,I):wt(g,C,I)}}function Ht(g,I,C){var e=g.tag,t=5===e||6===e;if(t)g=t?g.stateNode:g.stateNode.instance,I?ug(C,g,I):bg(C,g);else if(4!==e&&null!==(g=g.child))for(Ht(g,I,C),g=g.sibling;null!==g;)Ht(g,I,C),g=g.sibling}function wt(g,I,C){var e=g.tag,t=5===e||6===e;if(t)g=t?g.stateNode:g.stateNode.instance,I?mg(C,g,I):dg(C,g);else if(4!==e&&null!==(g=g.child))for(wt(g,I,C),g=g.sibling;null!==g;)wt(g,I,C),g=g.sibling}function Kt(g,I){for(var C,e,t=I,A=!1;;){if(!A){A=t.return;g:for(;;){if(null===A)throw Error(o(160));switch(C=A.stateNode,A.tag){case 5:e=!1;break g;case 3:case 4:C=C.containerInfo,e=!0;break g}A=A.return}A=!0}if(5===t.tag||6===t.tag)vt(g,t),e?Zg(C,t.stateNode):Bg(C,t.stateNode);else if(4===t.tag){if(null!==t.child){C=t.stateNode.containerInfo,e=!0,t.child.return=t,t=t.child;continue}}else if(Vt(g,t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===I)break;for(;null===t.sibling;){if(null===t.return||t.return===I)return;4===(t=t.return).tag&&(A=!1)}t.sibling.return=t.return,t=t.sibling}}function St(g,I){if(P){switch(I.tag){case 0:case 11:case 14:case 15:case 22:return void pt(3,I);case 1:return;case 5:var C=I.stateNode;if(null!=C){var e=I.memoizedProps;g=null!==g?g.memoizedProps:e;var t=I.type,A=I.updateQueue;I.updateQueue=null,null!==A&&hg(C,A,t,g,e,I)}return;case 6:if(null===I.stateNode)throw Error(o(162));return C=I.memoizedProps,void rg(I.stateNode,null!==g?g.memoizedProps:C,C);case 3:return void(q&&(I=I.stateNode,I.hydrate&&(I.hydrate=!1,Ug(I.containerInfo))));case 12:return;case 13:return Nt(I),void Ft(I);case 19:return void Ft(I);case 17:return;case 23:case 24:return void yt(I,null!==I.memoizedState)}throw Error(o(163))}switch(I.tag){case 0:case 11:case 14:case 15:case 22:return void pt(3,I);case 12:return;case 13:return Nt(I),void Ft(I);case 19:return void Ft(I);case 3:q&&(C=I.stateNode).hydrate&&(C.hydrate=!1,Ug(C.containerInfo));break;case 23:case 24:return}g:if(_){switch(I.tag){case 1:case 5:case 6:case 20:break g;case 3:case 4:I=I.stateNode,Kg(I.containerInfo,I.pendingChildren);break g}throw Error(o(163))}}function Nt(g){null!==g.memoizedState&&(sA=QI(),P&&yt(g.child,!0))}function Ft(g){var I=g.updateQueue;if(null!==I){g.updateQueue=null;var C=g.stateNode;null===C&&(C=g.stateNode=new ut),I.forEach((function(I){var e=li.bind(null,g,I);C.has(I)||(C.add(I),I.then(e,e))}))}}function zt(g,I){return null!==g&&(null===(g=g.memoizedState)||null!==g.dehydrated)&&null!==(I=I.memoizedState)&&null===I.dehydrated}var ft=0,xt=1,Jt=2,Lt=3,kt=4;if("function"==typeof Symbol&&Symbol.for){var Mt=Symbol.for;ft=Mt("selector.component"),xt=Mt("selector.has_pseudo_class"),Jt=Mt("selector.role"),Lt=Mt("selector.test_id"),kt=Mt("selector.text")}function Qt(g){var I=$(g);if(null!=I){if("string"!=typeof I.memoizedProps["data-testname"])throw Error(o(364));return I}if(null===(g=ig(g)))throw Error(o(362));return g.stateNode.current}function Ut(g,I){switch(I.$$typeof){case ft:if(g.type===I.value)return!0;break;case xt:g:{I=I.value,g=[g,0];for(var C=0;C<g.length;){var e=g[C++],t=g[C++],A=I[t];if(5!==e.tag||!lg(e)){for(;null!=A&&Ut(e,A);)A=I[++t];if(t===I.length){I=!0;break g}for(e=e.child;null!==e;)g.push(e,t),e=e.sibling}}I=!1}return I;case Jt:if(5===g.tag&&ag(g.stateNode,I.value))return!0;break;case kt:if((5===g.tag||6===g.tag)&&null!==(g=ng(g))&&0<=g.indexOf(I.value))return!0;break;case Lt:if(5===g.tag&&"string"==typeof(g=g.memoizedProps["data-testname"])&&g.toLowerCase()===I.value.toLowerCase())return!0;break;default:throw Error(o(365,I))}return!1}function Tt(g){switch(g.$$typeof){case ft:return"<"+(X(g.value)||"Unknown")+">";case xt:return":has("+(Tt(g)||"")+")";case Jt:return'[role="'+g.value+'"]';case kt:return'"'+g.value+'"';case Lt:return'[data-testname="'+g.value+'"]';default:throw Error(o(365,g))}}function Et(g,I){var C=[];g=[g,0];for(var e=0;e<g.length;){var t=g[e++],A=g[e++],i=I[A];if(5!==t.tag||!lg(t)){for(;null!=i&&Ut(t,i);)i=I[++A];if(A===I.length)C.push(t);else for(t=t.child;null!==t;)g.push(t,A),t=t.sibling}}return C}function jt(g,I){if(!Ag)throw Error(o(363));g=Et(g=Qt(g),I),I=[],g=Array.from(g);for(var C=0;C<g.length;){var e=g[C++];if(5===e.tag)lg(e)||I.push(e.stateNode);else for(e=e.child;null!==e;)g.push(e),e=e.sibling}return I}var Dt=null,Ot=Math.ceil,Pt=n.ReactCurrentDispatcher,_t=n.ReactCurrentOwner,qt=n.IsSomeRendererActing,$t=0,gA=null,IA=null,CA=0,eA=0,tA=_g(0),AA=0,iA=null,oA=0,nA=0,lA=0,aA=0,cA=null,sA=0,dA=1/0;function bA(){dA=QI()+500}var rA,GA=null,hA=!1,mA=null,uA=null,BA=!1,ZA=null,pA=90,WA=[],yA=[],VA=null,vA=0,YA=null,XA=-1,RA=0,HA=0,wA=null,KA=!1;function SA(){return 0!=(48&$t)?QI():-1!==XA?XA:XA=QI()}function NA(g){if(0==(2&(g=g.mode)))return 1;if(0==(4&g))return 99===UI()?1:2;if(0===RA&&(RA=oA),0!==PI.transition){0!==HA&&(HA=null!==cA?cA.pendingLanes:0),g=RA;var I=4186112&~HA;return 0==(I&=-I)&&0==(I=(g=4186112&~g)&-g)&&(I=8192),I}return g=UI(),g=mI(0!=(4&$t)&&98===g?12:g=function(g){switch(g){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(g),RA)}function FA(g,I,C){if(50<vA)throw vA=0,YA=null,Error(o(185));if(null===(g=zA(g,I)))return null;ZI(g,I,C),g===gA&&(lA|=I,4===AA&&JA(g,CA));var e=UI();1===I?0!=(8&$t)&&0==(48&$t)?LA(g):(fA(g,C),0===$t&&(bA(),DI())):(0==(4&$t)||98!==e&&99!==e||(null===VA?VA=new Set([g]):VA.add(g)),fA(g,C)),cA=g}function zA(g,I){g.lanes|=I;var C=g.alternate;for(null!==C&&(C.lanes|=I),C=g,g=g.return;null!==g;)g.childLanes|=I,null!==(C=g.alternate)&&(C.childLanes|=I),C=g,g=g.return;return 3===C.tag?C.stateNode:null}function fA(g,I){for(var C=g.callbackNode,e=g.suspendedLanes,t=g.pingedLanes,A=g.expirationTimes,i=g.pendingLanes;0<i;){var n=31-pI(i),l=1<<n,a=A[n];if(-1===a){if(0==(l&e)||0!=(l&t)){a=I,rI(l);var c=bI;A[n]=10<=c?a+250:6<=c?a+5e3:-1}}else a<=I&&(g.expiredLanes|=l);i&=~l}if(e=GI(g,g===gA?CA:0),I=bI,0===e)null!==C&&(C!==fI&&YI(C),g.callbackNode=null,g.callbackPriority=0);else{if(null!==C){if(g.callbackPriority===I)return;C!==fI&&YI(C)}15===I?(C=LA.bind(null,g),null===JI?(JI=[C],LI=vI(KI,OI)):JI.push(C),C=fI):C=14===I?jI(99,LA.bind(null,g)):jI(C=function(g){switch(g){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(o(358,g))}}(I),xA.bind(null,g)),g.callbackPriority=I,g.callbackNode=C}}function xA(g){if(XA=-1,HA=RA=0,0!=(48&$t))throw Error(o(327));var I=g.callbackNode;if(Ci()&&g.callbackNode!==I)return null;var C=GI(g,g===gA?CA:0);if(0===C)return null;var e=C,t=$t;$t|=16;var A=jA();for(gA===g&&CA===e||(bA(),TA(g,e));;)try{PA();break}catch(I){EA(g,I)}if(iC(),Pt.current=A,$t=t,null!==IA?e=0:(gA=null,CA=0,e=AA),0!=(oA&lA))TA(g,0);else if(0!==e){if(2===e&&($t|=64,g.hydrate&&(g.hydrate=!1,Yg(g.containerInfo)),0!==(C=hI(g))&&(e=DA(g,C))),1===e)throw I=iA,TA(g,0),JA(g,C),fA(g,QI()),I;switch(g.finishedWork=g.current.alternate,g.finishedLanes=C,e){case 0:case 1:throw Error(o(345));case 2:$A(g);break;case 3:if(JA(g,C),(62914560&C)===C&&10<(e=sA+500-QI())){if(0!==GI(g,0))break;if(((t=g.suspendedLanes)&C)!==C){SA(),g.pingedLanes|=g.suspendedLanes&t;break}g.timeoutHandle=E($A.bind(null,g),e);break}$A(g);break;case 4:if(JA(g,C),(4186112&C)===C)break;for(e=g.eventTimes,t=-1;0<C;){var i=31-pI(C);A=1<<i,(i=e[i])>t&&(t=i),C&=~A}if(C=t,10<(C=(120>(C=QI()-C)?120:480>C?480:1080>C?1080:1920>C?1920:3e3>C?3e3:4320>C?4320:1960*Ot(C/1960))-C)){g.timeoutHandle=E($A.bind(null,g),C);break}$A(g);break;case 5:$A(g);break;default:throw Error(o(329))}}return fA(g,QI()),g.callbackNode===I?xA.bind(null,g):null}function JA(g,I){for(I&=~aA,I&=~lA,g.suspendedLanes|=I,g.pingedLanes&=~I,g=g.expirationTimes;0<I;){var C=31-pI(I),e=1<<C;g[C]=-1,I&=~e}}function LA(g){if(0!=(48&$t))throw Error(o(327));if(Ci(),g===gA&&0!=(g.expiredLanes&CA)){var I=CA,C=DA(g,I);0!=(oA&lA)&&(C=DA(g,I=GI(g,I)))}else C=DA(g,I=GI(g,0));if(0!==g.tag&&2===C&&($t|=64,g.hydrate&&(g.hydrate=!1,Yg(g.containerInfo)),0!==(I=hI(g))&&(C=DA(g,I))),1===C)throw C=iA,TA(g,0),JA(g,I),fA(g,QI()),C;return g.finishedWork=g.current.alternate,g.finishedLanes=I,$A(g),fA(g,QI()),null}function kA(g,I){var C=$t;$t|=1;try{return g(I)}finally{0===($t=C)&&(bA(),DI())}}function MA(g,I){var C=$t;if(0!=(48&C))return g(I);$t|=1;try{if(g)return EI(99,g.bind(null,I))}finally{$t=C,DI()}}function QA(g,I){$g(tA,eA),eA|=I,oA|=I}function UA(){eA=tA.current,qg(tA)}function TA(g,I){g.finishedWork=null,g.finishedLanes=0;var C=g.timeoutHandle;if(C!==D&&(g.timeoutHandle=D,j(C)),null!==IA)for(C=IA.return;null!==C;){var e=C;switch(e.tag){case 1:null!=(e=e.type.childContextTypes)&&iI();break;case 3:JC(),qg(CI),qg(II),ge();break;case 5:kC(e);break;case 4:JC();break;case 13:case 19:qg(MC);break;case 10:nC(e);break;case 23:case 24:UA()}C=C.return}gA=g,IA=Bi(g.current,null),CA=eA=oA=I,AA=0,iA=null,aA=lA=nA=0}function EA(g,I){for(;;){var C=IA;try{if(iC(),Ie.current=ze,oe){for(var e=te.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}oe=!1}if(ee=0,ie=Ae=te=null,ne=!1,_t.current=null,null===C||null===C.return){AA=1,iA=I,IA=null;break}g:{var A=g,i=C.return,o=C,n=I;if(I=CA,o.flags|=2048,o.firstEffect=o.lastEffect=null,null!==n&&"object"==typeof n&&"function"==typeof n.then){var l=n;if(0==(2&o.mode)){var a=o.alternate;a?(o.updateQueue=a.updateQueue,o.memoizedState=a.memoizedState,o.lanes=a.lanes):(o.updateQueue=null,o.memoizedState=null)}var c=0!=(1&MC.current),s=i;do{var d;if(d=13===s.tag){var b=s.memoizedState;if(null!==b)d=null!==b.dehydrated;else{var r=s.memoizedProps;d=void 0!==r.fallback&&(!0!==r.unstable_avoidThisFallback||!c)}}if(d){var G=s.updateQueue;if(null===G){var h=new Set;h.add(l),s.updateQueue=h}else G.add(l);if(0==(2&s.mode)){if(s.flags|=64,o.flags|=16384,o.flags&=-2981,1===o.tag)if(null===o.alternate)o.tag=17;else{var m=rC(-1,1);m.tag=2,GC(o,m)}o.lanes|=1;break g}n=void 0,o=I;var u=A.pingCache;if(null===u?(u=A.pingCache=new Gt,n=new Set,u.set(l,n)):void 0===(n=u.get(l))&&(n=new Set,u.set(l,n)),!n.has(o)){n.add(o);var B=ni.bind(null,A,l,o);l.then(B,B)}s.flags|=4096,s.lanes=I;break g}s=s.return}while(null!==s);n=Error((X(o.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==AA&&(AA=2),n=bt(n,o),s=i;do{switch(s.tag){case 3:A=n,s.flags|=4096,I&=-I,s.lanes|=I,hC(s,ht(0,A,I));break g;case 1:A=n;var Z=s.type,p=s.stateNode;if(0==(64&s.flags)&&("function"==typeof Z.getDerivedStateFromError||null!==p&&"function"==typeof p.componentDidCatch&&(null===uA||!uA.has(p)))){s.flags|=4096,I&=-I,s.lanes|=I,hC(s,mt(s,A,I));break g}}s=s.return}while(null!==s)}qA(C)}catch(g){I=g,IA===C&&null!==C&&(IA=C=C.return);continue}break}}function jA(){var g=Pt.current;return Pt.current=ze,null===g?ze:g}function DA(g,I){var C=$t;$t|=16;var e=jA();for(gA===g&&CA===I||TA(g,I);;)try{OA();break}catch(I){EA(g,I)}if(iC(),$t=C,Pt.current=e,null!==IA)throw Error(o(261));return gA=null,CA=0,AA}function OA(){for(;null!==IA;)_A(IA)}function PA(){for(;null!==IA&&!XI();)_A(IA)}function _A(g){var I=rA(g.alternate,g,eA);g.memoizedProps=g.pendingProps,null===I?qA(g):IA=I,_t.current=null}function qA(g){var I=g;do{var C=I.alternate;if(g=I.return,0==(2048&I.flags)){if(null!==(C=st(C,I,eA)))return void(IA=C);if(24!==(C=I).tag&&23!==C.tag||null===C.memoizedState||0!=(1073741824&eA)||0==(4&C.mode)){for(var e=0,t=C.child;null!==t;)e|=t.lanes|t.childLanes,t=t.sibling;C.childLanes=e}null!==g&&0==(2048&g.flags)&&(null===g.firstEffect&&(g.firstEffect=I.firstEffect),null!==I.lastEffect&&(null!==g.lastEffect&&(g.lastEffect.nextEffect=I.firstEffect),g.lastEffect=I.lastEffect),1<I.flags&&(null!==g.lastEffect?g.lastEffect.nextEffect=I:g.firstEffect=I,g.lastEffect=I))}else{if(null!==(C=dt(I)))return C.flags&=2047,void(IA=C);null!==g&&(g.firstEffect=g.lastEffect=null,g.flags|=2048)}if(null!==(I=I.sibling))return void(IA=I);IA=I=g}while(null!==I);0===AA&&(AA=5)}function $A(g){var I=UI();return EI(99,gi.bind(null,g,I)),null}function gi(g,I){do{Ci()}while(null!==ZA);if(0!=(48&$t))throw Error(o(327));var C=g.finishedWork;if(null===C)return null;if(g.finishedWork=null,g.finishedLanes=0,C===g.current)throw Error(o(177));g.callbackNode=null;var e=C.lanes|C.childLanes,t=e,A=g.pendingLanes&~t;g.pendingLanes=t,g.suspendedLanes=0,g.pingedLanes=0,g.expiredLanes&=t,g.mutableReadLanes&=t,g.entangledLanes&=t,t=g.entanglements;for(var i=g.eventTimes,n=g.expirationTimes;0<A;){var l=31-pI(A),a=1<<l;t[l]=0,i[l]=-1,n[l]=-1,A&=~a}if(null!==VA&&0==(24&e)&&VA.has(g)&&VA.delete(g),g===gA&&(IA=gA=null,CA=0),1<C.flags?null!==C.lastEffect?(C.lastEffect.nextEffect=C,e=C.firstEffect):e=C:e=C.firstEffect,null!==e){t=$t,$t|=32,_t.current=null,wA=x(g.containerInfo),KA=!1,GA=e;do{try{Ii()}catch(g){if(null===GA)throw Error(o(330));oi(GA,g),GA=GA.nextEffect}}while(null!==GA);wA=null,GA=e;do{try{for(i=g;null!==GA;){var c=GA.flags;if(16&c&&P&&pg(GA.stateNode),128&c){var s=GA.alternate;if(null!==s){var d=s.ref;null!==d&&("function"==typeof d?d(null):d.current=null)}}switch(1038&c){case 2:Rt(GA),GA.flags&=-3;break;case 6:Rt(GA),GA.flags&=-3,St(GA.alternate,GA);break;case 1024:GA.flags&=-1025;break;case 1028:GA.flags&=-1025,St(GA.alternate,GA);break;case 4:St(GA.alternate,GA);break;case 8:n=i,A=GA,P?Kt(n,A):vt(n,A);var b=A.alternate;Yt(A),null!==b&&Yt(b)}GA=GA.nextEffect}}catch(g){if(null===GA)throw Error(o(330));oi(GA,g),GA=GA.nextEffect}}while(null!==GA);KA&&eg(),J(g.containerInfo),g.current=C,GA=e;do{try{for(c=g;null!==GA;){var r=GA.flags;if(36&r&&Wt(c,GA.alternate,GA),128&r){s=void 0;var G=GA.ref;if(null!==G){var h=GA.stateNode;switch(GA.tag){case 5:s=F(h);break;default:s=h}"function"==typeof G?G(s):G.current=s}}GA=GA.nextEffect}}catch(g){if(null===GA)throw Error(o(330));oi(GA,g),GA=GA.nextEffect}}while(null!==GA);GA=null,xI(),$t=t}else g.current=C;if(BA)BA=!1,ZA=g,pA=I;else for(GA=e;null!==GA;)I=GA.nextEffect,GA.nextEffect=null,8&GA.flags&&((r=GA).sibling=null,r.stateNode=null),GA=I;if(0===(e=g.pendingLanes)&&(uA=null),1===e?g===YA?vA++:(vA=0,YA=g):vA=0,C=C.stateNode,sI&&"function"==typeof sI.onCommitFiberRoot)try{sI.onCommitFiberRoot(cI,C,void 0,64==(64&C.current.flags))}catch(g){}if(fA(g,QI()),hA)throw hA=!1,g=mA,mA=null,g;return 0!=(8&$t)||DI(),null}function Ii(){for(;null!==GA;){var g=GA.alternate;KA||null===wA||(0!=(8&GA.flags)?S(GA,wA)&&(KA=!0,Cg()):13===GA.tag&&zt(g,GA)&&S(GA,wA)&&(KA=!0,Cg()));var I=GA.flags;0!=(256&I)&&Zt(g,GA),0==(512&I)||BA||(BA=!0,jI(97,(function(){return Ci(),null}))),GA=GA.nextEffect}}function Ci(){if(90!==pA){var g=97<pA?97:pA;return pA=90,EI(g,Ai)}return!1}function ei(g,I){WA.push(I,g),BA||(BA=!0,jI(97,(function(){return Ci(),null})))}function ti(g,I){yA.push(I,g),BA||(BA=!0,jI(97,(function(){return Ci(),null})))}function Ai(){if(null===ZA)return!1;var g=ZA;if(ZA=null,0!=(48&$t))throw Error(o(331));var I=$t;$t|=32;var C=yA;yA=[];for(var e=0;e<C.length;e+=2){var t=C[e],A=C[e+1],i=t.destroy;if(t.destroy=void 0,"function"==typeof i)try{i()}catch(g){if(null===A)throw Error(o(330));oi(A,g)}}for(C=WA,WA=[],e=0;e<C.length;e+=2){t=C[e],A=C[e+1];try{var n=t.create;t.destroy=n()}catch(g){if(null===A)throw Error(o(330));oi(A,g)}}for(n=g.current.firstEffect;null!==n;)g=n.nextEffect,n.nextEffect=null,8&n.flags&&(n.sibling=null,n.stateNode=null),n=g;return $t=I,DI(),!0}function ii(g,I,C){GC(g,I=ht(0,I=bt(C,I),1)),I=SA(),null!==(g=zA(g,1))&&(ZI(g,1,I),fA(g,I))}function oi(g,I){if(3===g.tag)ii(g,g,I);else for(var C=g.return;null!==C;){if(3===C.tag){ii(C,g,I);break}if(1===C.tag){var e=C.stateNode;if("function"==typeof C.type.getDerivedStateFromError||"function"==typeof e.componentDidCatch&&(null===uA||!uA.has(e))){var t=mt(C,g=bt(I,g),1);if(GC(C,t),t=SA(),null!==(C=zA(C,1)))ZI(C,1,t),fA(C,t);else if("function"==typeof e.componentDidCatch&&(null===uA||!uA.has(e)))try{e.componentDidCatch(I,g)}catch(g){}break}}C=C.return}}function ni(g,I,C){var e=g.pingCache;null!==e&&e.delete(I),I=SA(),g.pingedLanes|=g.suspendedLanes&C,gA===g&&(CA&C)===C&&(4===AA||3===AA&&(62914560&CA)===CA&&500>QI()-sA?TA(g,0):aA|=C),fA(g,I)}function li(g,I){var C=g.stateNode;null!==C&&C.delete(I),0==(I=0)&&(0==(2&(I=g.mode))?I=1:0==(4&I)?I=99===UI()?1:2:(0===RA&&(RA=oA),0===(I=uI(62914560&~RA))&&(I=4194304))),C=SA(),null!==(g=zA(g,I))&&(ZI(g,I,C),fA(g,C))}rA=function(g,I,C){var e=I.lanes;if(null!==g)if(g.memoizedProps!==I.pendingProps||CI.current)ke=!0;else{if(0==(C&e)){switch(ke=!1,I.tag){case 3:_e(I),qC();break;case 5:LC(I);break;case 1:AI(I.type)&&lI(I);break;case 4:xC(I,I.stateNode.containerInfo);break;case 10:oC(I,I.memoizedProps.value);break;case 13:if(null!==I.memoizedState)return 0!=(C&I.child.childLanes)?et(g,I,C):($g(MC,1&MC.current),null!==(I=nt(g,I,C))?I.sibling:null);$g(MC,1&MC.current);break;case 19:if(e=0!=(C&I.childLanes),0!=(64&g.flags)){if(e)return ot(g,I,C);I.flags|=64}var t=I.memoizedState;if(null!==t&&(t.rendering=null,t.tail=null,t.lastEffect=null),$g(MC,MC.current),e)break;return null;case 23:case 24:return I.lanes=0,Ee(g,I,C)}return nt(g,I,C)}ke=0!=(16384&g.flags)}else ke=!1;switch(I.lanes=0,I.tag){case 2:if(e=I.type,null!==g&&(g.alternate=null,I.alternate=null,I.flags|=2),g=I.pendingProps,t=tI(I,II.current),aC(I,C),t=ce(null,I,e,g,t,C),I.flags|=1,"object"==typeof t&&null!==t&&"function"==typeof t.render&&void 0===t.$$typeof){if(I.tag=1,I.memoizedState=null,I.updateQueue=null,AI(e)){var A=!0;lI(I)}else A=!1;I.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,dC(I);var i=e.getDerivedStateFromProps;"function"==typeof i&&ZC(I,e,i,g),t.updater=pC,I.stateNode=t,t._reactInternals=I,vC(I,e,g,C),I=Pe(null,I,e,!0,A,C)}else I.tag=0,Me(null,I,t,C),I=I.child;return I;case 16:t=I.elementType;g:{switch(null!==g&&(g.alternate=null,I.alternate=null,I.flags|=2),g=I.pendingProps,t=(A=t._init)(t._payload),I.type=t,A=I.tag=function(g){if("function"==typeof g)return ui(g)?1:0;if(null!=g){if((g=g.$$typeof)===G)return 11;if(g===u)return 14}return 2}(t),g=IC(t,g),A){case 0:I=De(null,I,t,g,C);break g;case 1:I=Oe(null,I,t,g,C);break g;case 11:I=Qe(null,I,t,g,C);break g;case 14:I=Ue(null,I,t,IC(t.type,g),e,C);break g}throw Error(o(306,t,""))}return I;case 0:return e=I.type,t=I.pendingProps,De(g,I,e,t=I.elementType===e?t:IC(e,t),C);case 1:return e=I.type,t=I.pendingProps,Oe(g,I,e,t=I.elementType===e?t:IC(e,t),C);case 3:if(_e(I),e=I.updateQueue,null===g||null===e)throw Error(o(282));if(e=I.pendingProps,t=null!==(t=I.memoizedState)?t.element:null,bC(g,I),mC(I,e,null,C),(e=I.memoizedState.element)===t)qC(),I=nt(g,I,C);else{if((A=(t=I.stateNode).hydrate)&&(q?(TC=Lg(I.stateNode.containerInfo),UC=I,A=EC=!0):A=!1),A){if(q&&null!=(g=t.mutableSourceEagerHydrationData))for(t=0;t<g.length;t+=2)A=g[t],i=g[t+1],O?A._workInProgressVersionPrimary=i:A._workInProgressVersionSecondary=i,$C.push(A);for(C=KC(I,null,e,C),I.child=C;C;)C.flags=-3&C.flags|1024,C=C.sibling}else Me(g,I,e,C),qC();I=I.child}return I;case 5:return LC(I),null===g&&OC(I),e=I.type,t=I.pendingProps,A=null!==g?g.memoizedProps:null,i=t.children,U(e,t)?i=null:null!==A&&U(e,A)&&(I.flags|=16),je(g,I),Me(g,I,i,C),I.child;case 6:return null===g&&OC(I),null;case 13:return et(g,I,C);case 4:return xC(I,I.stateNode.containerInfo),e=I.pendingProps,null===g?I.child=wC(I,null,e,C):Me(g,I,e,C),I.child;case 11:return e=I.type,t=I.pendingProps,Qe(g,I,e,t=I.elementType===e?t:IC(e,t),C);case 7:return Me(g,I,I.pendingProps,C),I.child;case 8:case 12:return Me(g,I,I.pendingProps.children,C),I.child;case 10:g:{if(e=I.type._context,t=I.pendingProps,i=I.memoizedProps,oC(I,A=t.value),null!==i){var n=i.value;if(0==(A=_I(n,A)?0:0|("function"==typeof e._calculateChangedBits?e._calculateChangedBits(n,A):1073741823))){if(i.children===t.children&&!CI.current){I=nt(g,I,C);break g}}else for(null!==(n=I.child)&&(n.return=I);null!==n;){var l=n.dependencies;if(null!==l){i=n.child;for(var a=l.firstContext;null!==a;){if(a.context===e&&0!=(a.observedBits&A)){1===n.tag&&((a=rC(-1,C&-C)).tag=2,GC(n,a)),n.lanes|=C,null!==(a=n.alternate)&&(a.lanes|=C),lC(n.return,C),l.lanes|=C;break}a=a.next}}else i=10===n.tag&&n.type===I.type?null:n.child;if(null!==i)i.return=n;else for(i=n;null!==i;){if(i===I){i=null;break}if(null!==(n=i.sibling)){n.return=i.return,i=n;break}i=i.return}n=i}}Me(g,I,t.children,C),I=I.child}return I;case 9:return t=I.type,e=(A=I.pendingProps).children,aC(I,C),e=e(t=cC(t,A.unstable_observedBits)),I.flags|=1,Me(g,I,e,C),I.child;case 14:return A=IC(t=I.type,I.pendingProps),Ue(g,I,t,A=IC(t.type,A),e,C);case 15:return Te(g,I,I.type,I.pendingProps,e,C);case 17:return e=I.type,t=I.pendingProps,t=I.elementType===e?t:IC(e,t),null!==g&&(g.alternate=null,I.alternate=null,I.flags|=2),I.tag=1,AI(e)?(g=!0,lI(I)):g=!1,aC(I,C),yC(I,e,t),vC(I,e,t,C),Pe(null,I,e,!0,g,C);case 19:return ot(g,I,C);case 23:case 24:return Ee(g,I,C)}throw Error(o(156,I.tag))};var ai={current:!1},ci=i.unstable_flushAllWithoutAsserting,si="function"==typeof ci;function di(){if(void 0!==ci)return ci();for(var g=!1;Ci();)g=!0;return g}function bi(I){try{di(),function(I){if(null===Dt)try{var C=("require"+Math.random()).slice(0,7);Dt=(g&&g[C]).call(g,"timers").setImmediate}catch(g){Dt=function(g){var I=new MessageChannel;I.port1.onmessage=g,I.port2.postMessage(void 0)}}Dt(I)}((function(){di()?bi(I):I()}))}catch(g){I(g)}}var ri=0,Gi=!1;function hi(g,I,C,e){this.tag=g,this.key=C,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=I,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=e,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function mi(g,I,C,e){return new hi(g,I,C,e)}function ui(g){return!(!(g=g.prototype)||!g.isReactComponent)}function Bi(g,I){var C=g.alternate;return null===C?((C=mi(g.tag,I,g.key,g.mode)).elementType=g.elementType,C.type=g.type,C.stateNode=g.stateNode,C.alternate=g,g.alternate=C):(C.pendingProps=I,C.type=g.type,C.flags=0,C.nextEffect=null,C.firstEffect=null,C.lastEffect=null),C.childLanes=g.childLanes,C.lanes=g.lanes,C.child=g.child,C.memoizedProps=g.memoizedProps,C.memoizedState=g.memoizedState,C.updateQueue=g.updateQueue,I=g.dependencies,C.dependencies=null===I?null:{lanes:I.lanes,firstContext:I.firstContext},C.sibling=g.sibling,C.index=g.index,C.ref=g.ref,C}function Zi(g,I,C,e,t,A){var i=2;if(e=g,"function"==typeof g)ui(g)&&(i=1);else if("string"==typeof g)i=5;else g:switch(g){case c:return pi(C.children,t,A,I);case p:i=8,t|=16;break;case s:i=8,t|=1;break;case d:return(g=mi(12,C,I,8|t)).elementType=d,g.type=d,g.lanes=A,g;case h:return(g=mi(13,C,I,t)).type=h,g.elementType=h,g.lanes=A,g;case m:return(g=mi(19,C,I,t)).elementType=m,g.lanes=A,g;case W:return Wi(C,t,A,I);case y:return(g=mi(24,C,I,t)).elementType=y,g.lanes=A,g;default:if("object"==typeof g&&null!==g)switch(g.$$typeof){case b:i=10;break g;case r:i=9;break g;case G:i=11;break g;case u:i=14;break g;case B:i=16,e=null;break g;case Z:i=22;break g}throw Error(o(130,null==g?g:typeof g,""))}return(I=mi(i,C,I,t)).elementType=g,I.type=e,I.lanes=A,I}function pi(g,I,C,e){return(g=mi(7,g,e,I)).lanes=C,g}function Wi(g,I,C,e){return(g=mi(23,g,e,I)).elementType=W,g.lanes=C,g}function yi(g,I,C){return(g=mi(6,g,null,I)).lanes=C,g}function Vi(g,I,C){return(I=mi(4,null!==g.children?g.children:[],g.key,I)).lanes=C,I.stateNode={containerInfo:g.containerInfo,pendingChildren:null,implementation:g.implementation},I}function vi(g,I,C){this.tag=I,this.containerInfo=g,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=D,this.pendingContext=this.context=null,this.hydrate=C,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=BI(0),this.expirationTimes=BI(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=BI(0),q&&(this.mutableSourceEagerHydrationData=null)}function Yi(g){var I=g._reactInternals;if(void 0===I){if("function"==typeof g.render)throw Error(o(188));throw Error(o(268,Object.keys(g)))}return null===(g=K(I))?null:g.stateNode}function Xi(g,I){if(null!==(g=g.memoizedState)&&null!==g.dehydrated){var C=g.retryLane;g.retryLane=0!==C&&C<I?C:I}}function Ri(g,I){Xi(g,I),(g=g.alternate)&&Xi(g,I)}function Hi(g){return null===(g=K(g))?null:g.stateNode}function wi(){return null}return e.IsThisRendererActing=ai,e.act=function(g){function I(){ri--,qt.current=C,ai.current=e}!1===Gi&&(Gi=!0,console.error("act(...) is not supported in production builds of React, and might not behave as expected.")),ri++;var C=qt.current,e=ai.current;qt.current=!0,ai.current=!0;try{var t=kA(g)}catch(g){throw I(),g}if(null!==t&&"object"==typeof t&&"function"==typeof t.then)return{then:function(g,e){t.then((function(){1<ri||!0===si&&!0===C?(I(),g()):bi((function(C){I(),C?e(C):g()}))}),(function(g){I(),e(g)}))}};try{1!==ri||!1!==si&&!1!==C||di(),I()}catch(g){throw I(),g}return{then:function(g){g()}}},e.attemptContinuousHydration=function(g){13===g.tag&&(FA(g,67108864,SA()),Ri(g,67108864))},e.attemptHydrationAtCurrentPriority=function(g){if(13===g.tag){var I=SA(),C=NA(g);FA(g,C,I),Ri(g,C)}},e.attemptSynchronousHydration=function(g){switch(g.tag){case 3:var I=g.stateNode;if(I.hydrate){var C=rI(I.pendingLanes);I.expiredLanes|=C&I.pendingLanes,fA(I,QI()),0==(48&$t)&&(bA(),DI())}break;case 13:var e=SA();MA((function(){return FA(g,1,e)})),Ri(g,4)}},e.attemptUserBlockingHydration=function(g){13===g.tag&&(FA(g,4,SA()),Ri(g,4))},e.batchedEventUpdates=function(g,I){var C=$t;$t|=2;try{return g(I)}finally{0===($t=C)&&(bA(),DI())}},e.batchedUpdates=kA,e.createComponentSelector=function(g){return{$$typeof:ft,value:g}},e.createContainer=function(g,I,C){return g=new vi(g,I,C),I=mi(3,null,null,2===I?7:1===I?3:0),g.current=I,I.stateNode=g,dC(I),g},e.createHasPsuedoClassSelector=function(g){return{$$typeof:xt,value:g}},e.createPortal=function(g,I,C){var e=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:a,key:null==e?null:""+e,children:g,containerInfo:I,implementation:C}},e.createRoleSelector=function(g){return{$$typeof:Jt,value:g}},e.createTestNameSelector=function(g){return{$$typeof:Lt,value:g}},e.createTextSelector=function(g){return{$$typeof:kt,value:g}},e.deferredUpdates=function(g){return EI(97,g)},e.discreteUpdates=function(g,I,C,e,t){var A=$t;$t|=4;try{return EI(98,g.bind(null,I,C,e,t))}finally{0===($t=A)&&(bA(),DI())}},e.findAllNodes=jt,e.findBoundingRects=function(g,I){if(!Ag)throw Error(o(363));I=jt(g,I),g=[];for(var C=0;C<I.length;C++)g.push(og(I[C]));for(I=g.length-1;0<I;I--)for(var e=(C=g[I]).x,t=e+C.width,A=C.y,i=A+C.height,n=I-1;0<=n;n--)if(I!==n){var l=g[n],a=l.x,c=a+l.width,s=l.y,d=s+l.height;if(e>=a&&A>=s&&t<=c&&i<=d){g.splice(I,1);break}if(!(e!==a||C.width!==l.width||d<A||s>i)){s>A&&(l.height+=s-A,l.y=A),d<i&&(l.height=i-s),g.splice(I,1);break}if(!(A!==s||C.height!==l.height||c<e||a>t)){a>e&&(l.width+=a-e,l.x=e),c<t&&(l.width=t-a),g.splice(I,1);break}}return g},e.findHostInstance=Yi,e.findHostInstanceWithNoPortals=function(g){return null===(g=function(g){if(!(g=w(g)))return null;for(var I=g;;){if(5===I.tag||6===I.tag)return I;if(I.child&&4!==I.tag)I.child.return=I,I=I.child;else{if(I===g)break;for(;!I.sibling;){if(!I.return||I.return===g)return null;I=I.return}I.sibling.return=I.return,I=I.sibling}}return null}(g))?null:20===g.tag?g.stateNode.instance:g.stateNode},e.findHostInstanceWithWarning=function(g){return Yi(g)},e.flushControlled=function(g){var I=$t;$t|=1;try{EI(99,g)}finally{0===($t=I)&&(bA(),DI())}},e.flushDiscreteUpdates=function(){0==(49&$t)&&(function(){if(null!==VA){var g=VA;VA=null,g.forEach((function(g){g.expiredLanes|=24&g.pendingLanes,fA(g,QI())}))}DI()}(),Ci())},e.flushPassiveEffects=Ci,e.flushSync=MA,e.focusWithin=function(g,I){if(!Ag)throw Error(o(363));for(I=Et(g=Qt(g),I),I=Array.from(I),g=0;g<I.length;){var C=I[g++];if(!lg(C)){if(5===C.tag&&cg(C.stateNode))return!0;for(C=C.child;null!==C;)I.push(C),C=C.sibling}}return!1},e.getCurrentUpdateLanePriority=function(){return dI},e.getFindAllNodesFailureDescription=function(g,I){if(!Ag)throw Error(o(363));var C=0,e=[];g=[Qt(g),0];for(var t=0;t<g.length;){var A=g[t++],i=g[t++],n=I[i];if((5!==A.tag||!lg(A))&&(Ut(A,n)&&(e.push(Tt(n)),++i>C&&(C=i)),i<I.length))for(A=A.child;null!==A;)g.push(A,i),A=A.sibling}if(C<I.length){for(g=[];C<I.length;C++)g.push(Tt(I[C]));return"findAllNodes was able to match part of the selector:\n  "+e.join(" > ")+"\n\nNo matching component was found for:\n  "+g.join(" > ")}return null},e.getPublicRootInstance=function(g){if(!(g=g.current).child)return null;switch(g.child.tag){case 5:return F(g.child.stateNode);default:return g.child.stateNode}},e.injectIntoDevTools=function(g){if(g={bundleType:g.bundleType,version:g.version,rendererPackageName:g.rendererPackageName,rendererConfig:g.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:n.ReactCurrentDispatcher,findHostInstanceByFiber:Hi,findFiberByHostInstance:g.findFiberByHostInstance||wi,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null},"undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)g=!1;else{var I=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!I.isDisabled&&I.supportsFiber)try{cI=I.inject(g),sI=I}catch(g){}g=!0}return g},e.observeVisibleRects=function(g,I,C,e){if(!Ag)throw Error(o(363));g=jt(g,I);var t=sg(g,C,e).disconnect;return{disconnect:function(){t()}}},e.registerMutableSourceForHydration=function(g,I){var C=I._getVersion;C=C(I._source),null==g.mutableSourceEagerHydrationData?g.mutableSourceEagerHydrationData=[I,C]:g.mutableSourceEagerHydrationData.push(I,C)},e.runWithPriority=function(g,I){var C=dI;try{return dI=g,I()}finally{dI=C}},e.shouldSuspend=function(){return!1},e.unbatchedUpdates=function(g,I){var C=$t;$t&=-2,$t|=8;try{return g(I)}finally{0===($t=C)&&(bA(),DI())}},e.updateContainer=function(g,I,C,e){var t=I.current,A=SA(),i=NA(t);g:if(C){I:{if(R(C=C._reactInternals)!==C||1!==C.tag)throw Error(o(170));var n=C;do{switch(n.tag){case 3:n=n.stateNode.context;break I;case 1:if(AI(n.type)){n=n.stateNode.__reactInternalMemoizedMergedChildContext;break I}}n=n.return}while(null!==n);throw Error(o(171))}if(1===C.tag){var l=C.type;if(AI(l)){C=nI(C,l,n);break g}}C=n}else C=gI;return null===I.context?I.context=C:I.pendingContext=C,(I=rC(A,i)).payload={element:g},null!==(e=void 0===e?null:e)&&(I.callback=e),GC(t,I),FA(t,i,A),i},e}},962:(g,I,C)=>{"use strict";g.exports=C(166)},775:(g,I)=>{"use strict";var C,e,t,A;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;I.unstable_now=function(){return i.now()}}else{var o=Date,n=o.now();I.unstable_now=function(){return o.now()-n}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,a=null,c=function(){if(null!==l)try{var g=I.unstable_now();l(!0,g),l=null}catch(g){throw setTimeout(c,0),g}};C=function(g){null!==l?setTimeout(C,0,g):(l=g,setTimeout(c,0))},e=function(g,I){a=setTimeout(g,I)},t=function(){clearTimeout(a)},I.unstable_shouldYield=function(){return!1},A=I.unstable_forceFrameRate=function(){}}else{var s=window.setTimeout,d=window.clearTimeout;if("undefined"!=typeof console){var b=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof b&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var r=!1,G=null,h=-1,m=5,u=0;I.unstable_shouldYield=function(){return I.unstable_now()>=u},A=function(){},I.unstable_forceFrameRate=function(g){0>g||125<g?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):m=0<g?Math.floor(1e3/g):5};var B=new MessageChannel,Z=B.port2;B.port1.onmessage=function(){if(null!==G){var g=I.unstable_now();u=g+m;try{G(!0,g)?Z.postMessage(null):(r=!1,G=null)}catch(g){throw Z.postMessage(null),g}}else r=!1},C=function(g){G=g,r||(r=!0,Z.postMessage(null))},e=function(g,C){h=s((function(){g(I.unstable_now())}),C)},t=function(){d(h),h=-1}}function p(g,I){var C=g.length;g.push(I);g:for(;;){var e=C-1>>>1,t=g[e];if(!(void 0!==t&&0<V(t,I)))break g;g[e]=I,g[C]=t,C=e}}function W(g){return void 0===(g=g[0])?null:g}function y(g){var I=g[0];if(void 0!==I){var C=g.pop();if(C!==I){g[0]=C;g:for(var e=0,t=g.length;e<t;){var A=2*(e+1)-1,i=g[A],o=A+1,n=g[o];if(void 0!==i&&0>V(i,C))void 0!==n&&0>V(n,i)?(g[e]=n,g[o]=C,e=o):(g[e]=i,g[A]=C,e=A);else{if(!(void 0!==n&&0>V(n,C)))break g;g[e]=n,g[o]=C,e=o}}}return I}return null}function V(g,I){var C=g.sortIndex-I.sortIndex;return 0!==C?C:g.id-I.id}var v=[],Y=[],X=1,R=null,H=3,w=!1,K=!1,S=!1;function N(g){for(var I=W(Y);null!==I;){if(null===I.callback)y(Y);else{if(!(I.startTime<=g))break;y(Y),I.sortIndex=I.expirationTime,p(v,I)}I=W(Y)}}function F(g){if(S=!1,N(g),!K)if(null!==W(v))K=!0,C(z);else{var I=W(Y);null!==I&&e(F,I.startTime-g)}}function z(g,C){K=!1,S&&(S=!1,t()),w=!0;var A=H;try{for(N(C),R=W(v);null!==R&&(!(R.expirationTime>C)||g&&!I.unstable_shouldYield());){var i=R.callback;if("function"==typeof i){R.callback=null,H=R.priorityLevel;var o=i(R.expirationTime<=C);C=I.unstable_now(),"function"==typeof o?R.callback=o:R===W(v)&&y(v),N(C)}else y(v);R=W(v)}if(null!==R)var n=!0;else{var l=W(Y);null!==l&&e(F,l.startTime-C),n=!1}return n}finally{R=null,H=A,w=!1}}var f=A;I.unstable_IdlePriority=5,I.unstable_ImmediatePriority=1,I.unstable_LowPriority=4,I.unstable_NormalPriority=3,I.unstable_Profiling=null,I.unstable_UserBlockingPriority=2,I.unstable_cancelCallback=function(g){g.callback=null},I.unstable_continueExecution=function(){K||w||(K=!0,C(z))},I.unstable_getCurrentPriorityLevel=function(){return H},I.unstable_getFirstCallbackNode=function(){return W(v)},I.unstable_next=function(g){switch(H){case 1:case 2:case 3:var I=3;break;default:I=H}var C=H;H=I;try{return g()}finally{H=C}},I.unstable_pauseExecution=function(){},I.unstable_requestPaint=f,I.unstable_runWithPriority=function(g,I){switch(g){case 1:case 2:case 3:case 4:case 5:break;default:g=3}var C=H;H=g;try{return I()}finally{H=C}},I.unstable_scheduleCallback=function(g,A,i){var o=I.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?o+i:o,g){case 1:var n=-1;break;case 2:n=250;break;case 5:n=1073741823;break;case 4:n=1e4;break;default:n=5e3}return g={id:X++,callback:A,priorityLevel:g,startTime:i,expirationTime:n=i+n,sortIndex:-1},i>o?(g.sortIndex=i,p(Y,g),null===W(v)&&g===W(Y)&&(S?t():S=!0,e(F,i-o))):(g.sortIndex=n,p(v,g),K||w||(K=!0,C(z))),g},I.unstable_wrapCallback=function(g){var I=H;return function(){var C=H;H=I;try{return g.apply(this,arguments)}finally{H=C}}}},533:(g,I,C)=>{"use strict";g.exports=C(775)},280:(g,I,C)=>{"use strict";function e(g,I,C){return I in g?Object.defineProperty(g,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):g[I]=C,g}C.d(I,{Z:()=>e})},955:(g,I,C)=>{"use strict";C.r(I),C.d(I,{ACESFilmicToneMapping:()=>Cg,AddEquation:()=>V,AddOperation:()=>_,AdditiveAnimationBlendMode:()=>EI,AdditiveBlending:()=>Z,AlphaFormat:()=>zg,AlwaysDepth:()=>M,AlwaysStencilFunc:()=>WC,AmbientLight:()=>wc,AmbientLightProbe:()=>$c,AnimationClip:()=>Ka,AnimationLoader:()=>La,AnimationMixer:()=>Hs,AnimationObjectGroup:()=>Xs,AnimationUtils:()=>ua,ArcCurve:()=>Da,ArrayCamera:()=>Eo,ArrowHelper:()=>Bd,Audio:()=>as,AudioAnalyser:()=>Gs,AudioContext:()=>Pc,AudioListener:()=>ls,AudioLoader:()=>_c,AxesHelper:()=>Zd,AxisHelper:()=>mb,BackSide:()=>r,BasicDepthPacking:()=>tC,BasicShadowMap:()=>a,BinaryTextureLoader:()=>Wb,Bone:()=>Kn,BooleanKeyframeTrack:()=>Va,BoundingBoxHelper:()=>ub,Box2:()=>Ls,Box3:()=>ne,Box3Helper:()=>rd,BoxBufferGeometry:()=>pA,BoxGeometry:()=>pA,BoxHelper:()=>bd,BufferAttribute:()=>Ft,BufferGeometry:()=>CA,BufferGeometryLoader:()=>Jc,ByteType:()=>Vg,Cache:()=>Na,Camera:()=>YA,CameraHelper:()=>cd,CanvasRenderer:()=>Vb,CanvasTexture:()=>ol,CatmullRomCurve3:()=>gc,CineonToneMapping:()=>Ig,CircleBufferGeometry:()=>ll,CircleGeometry:()=>ll,ClampToEdgeWrapping:()=>sg,Clock:()=>es,Color:()=>wt,ColorKeyframeTrack:()=>va,CompressedTexture:()=>il,CompressedTextureLoader:()=>ka,ConeBufferGeometry:()=>cl,ConeGeometry:()=>cl,CubeCamera:()=>HA,CubeReflectionMapping:()=>Ag,CubeRefractionMapping:()=>ig,CubeTexture:()=>wA,CubeTextureLoader:()=>Qa,CubeUVReflectionMapping:()=>lg,CubeUVRefractionMapping:()=>ag,CubicBezierCurve:()=>tc,CubicBezierCurve3:()=>Ac,CubicInterpolant:()=>Za,CullFaceBack:()=>o,CullFaceFront:()=>n,CullFaceFrontBack:()=>l,CullFaceNone:()=>i,Curve:()=>Ea,CurvePath:()=>sc,CustomBlending:()=>y,CustomToneMapping:()=>eg,CylinderBufferGeometry:()=>al,CylinderGeometry:()=>al,Cylindrical:()=>xs,DataTexture:()=>SA,DataTexture2DArray:()=>ei,DataTexture3D:()=>ti,DataTextureLoader:()=>Ua,DataUtils:()=>yd,DecrementStencilOp:()=>sC,DecrementWrapStencilOp:()=>bC,DefaultLoadingManager:()=>za,DepthFormat:()=>Mg,DepthStencilFormat:()=>Qg,DepthTexture:()=>nl,DirectionalLight:()=>Hc,DirectionalLightHelper:()=>nd,DiscreteInterpolant:()=>Wa,DodecahedronBufferGeometry:()=>dl,DodecahedronGeometry:()=>dl,DoubleSide:()=>G,DstAlphaFactor:()=>z,DstColorFactor:()=>x,DynamicBufferAttribute:()=>nb,DynamicCopyUsage:()=>wC,DynamicDrawUsage:()=>VC,DynamicReadUsage:()=>XC,EdgesGeometry:()=>ml,EdgesHelper:()=>Bb,EllipseCurve:()=>ja,EqualDepth:()=>T,EqualStencilFunc:()=>mC,EquirectangularReflectionMapping:()=>og,EquirectangularRefractionMapping:()=>ng,Euler:()=>Ee,EventDispatcher:()=>FC,ExtrudeBufferGeometry:()=>El,ExtrudeGeometry:()=>El,FaceColors:()=>_d,FileLoader:()=>Ja,FlatShading:()=>h,Float16BufferAttribute:()=>Qt,Float32Attribute:()=>Gb,Float32BufferAttribute:()=>Ut,Float64Attribute:()=>hb,Float64BufferAttribute:()=>Tt,FloatType:()=>Hg,Fog:()=>In,FogExp2:()=>gn,Font:()=>Ec,FontLoader:()=>Dc,FrontSide:()=>b,Frustum:()=>zA,GLBufferAttribute:()=>Ss,GLSL1:()=>SC,GLSL3:()=>NC,GammaEncoding:()=>qI,GreaterDepth:()=>j,GreaterEqualDepth:()=>E,GreaterEqualStencilFunc:()=>pC,GreaterStencilFunc:()=>BC,GridHelper:()=>ed,Group:()=>jo,HalfFloatType:()=>wg,HemisphereLight:()=>Gc,HemisphereLightHelper:()=>Cd,HemisphereLightProbe:()=>qc,IcosahedronBufferGeometry:()=>Dl,IcosahedronGeometry:()=>Dl,ImageBitmapLoader:()=>Uc,ImageLoader:()=>Ma,ImageUtils:()=>_C,ImmediateRenderObject:()=>Us,IncrementStencilOp:()=>cC,IncrementWrapStencilOp:()=>dC,InstancedBufferAttribute:()=>xc,InstancedBufferGeometry:()=>fc,InstancedInterleavedBuffer:()=>Ks,InstancedMesh:()=>Ln,Int16Attribute:()=>sb,Int16BufferAttribute:()=>Jt,Int32Attribute:()=>bb,Int32BufferAttribute:()=>kt,Int8Attribute:()=>lb,Int8BufferAttribute:()=>zt,IntType:()=>Xg,InterleavedBuffer:()=>en,InterleavedBufferAttribute:()=>An,Interpolant:()=>Ba,InterpolateDiscrete:()=>JI,InterpolateLinear:()=>LI,InterpolateSmooth:()=>kI,InvertStencilOp:()=>rC,JSONLoader:()=>vb,KeepStencilOp:()=>lC,KeyframeTrack:()=>ya,LOD:()=>Vn,LatheBufferGeometry:()=>Ol,LatheGeometry:()=>Ol,Layers:()=>je,LensFlare:()=>Xb,LessDepth:()=>Q,LessEqualDepth:()=>U,LessEqualStencilFunc:()=>uC,LessStencilFunc:()=>hC,Light:()=>rc,LightProbe:()=>Nc,Line:()=>jn,Line3:()=>Qs,LineBasicMaterial:()=>kn,LineCurve:()=>ic,LineCurve3:()=>oc,LineDashedMaterial:()=>ha,LineLoop:()=>_n,LinePieces:()=>Od,LineSegments:()=>Pn,LineStrip:()=>Dd,LinearEncoding:()=>PI,LinearFilter:()=>ug,LinearInterpolant:()=>pa,LinearMipMapLinearFilter:()=>Wg,LinearMipMapNearestFilter:()=>Zg,LinearMipmapLinearFilter:()=>pg,LinearMipmapNearestFilter:()=>Bg,LinearToneMapping:()=>$,Loader:()=>fa,LoaderUtils:()=>zc,LoadingManager:()=>Fa,LogLuvEncoding:()=>gC,LoopOnce:()=>zI,LoopPingPong:()=>xI,LoopRepeat:()=>fI,LuminanceAlphaFormat:()=>Lg,LuminanceFormat:()=>Jg,MOUSE:()=>t,Material:()=>yt,MaterialLoader:()=>Fc,Math:()=>jC,MathUtils:()=>jC,Matrix3:()=>OC,Matrix4:()=>ze,MaxEquation:()=>R,Mesh:()=>BA,MeshBasicMaterial:()=>Kt,MeshDepthMaterial:()=>Lo,MeshDistanceMaterial:()=>ko,MeshFaceMaterial:()=>$d,MeshLambertMaterial:()=>ra,MeshMatcapMaterial:()=>Ga,MeshNormalMaterial:()=>ba,MeshPhongMaterial:()=>sa,MeshPhysicalMaterial:()=>ca,MeshStandardMaterial:()=>aa,MeshToonMaterial:()=>da,MinEquation:()=>X,MirroredRepeatWrapping:()=>dg,MixOperation:()=>P,MultiMaterial:()=>gb,MultiplyBlending:()=>W,MultiplyOperation:()=>O,NearestFilter:()=>bg,NearestMipMapLinearFilter:()=>mg,NearestMipMapNearestFilter:()=>Gg,NearestMipmapLinearFilter:()=>hg,NearestMipmapNearestFilter:()=>rg,NeverDepth:()=>k,NeverStencilFunc:()=>GC,NoBlending:()=>u,NoColors:()=>Pd,NoToneMapping:()=>q,NormalAnimationBlendMode:()=>TI,NormalBlending:()=>B,NotEqualDepth:()=>D,NotEqualStencilFunc:()=>ZC,NumberKeyframeTrack:()=>Ya,Object3D:()=>ot,ObjectLoader:()=>Lc,ObjectSpaceNormalMap:()=>oC,OctahedronBufferGeometry:()=>Pl,OctahedronGeometry:()=>Pl,OneFactor:()=>w,OneMinusDstAlphaFactor:()=>f,OneMinusDstColorFactor:()=>J,OneMinusSrcAlphaFactor:()=>F,OneMinusSrcColorFactor:()=>S,OrthographicCamera:()=>Xc,PCFShadowMap:()=>c,PCFSoftShadowMap:()=>s,PMREMGenerator:()=>kd,ParametricBufferGeometry:()=>_l,ParametricGeometry:()=>_l,Particle:()=>Cb,ParticleBasicMaterial:()=>Ab,ParticleSystem:()=>eb,ParticleSystemMaterial:()=>ib,Path:()=>dc,PerspectiveCamera:()=>XA,Plane:()=>ct,PlaneBufferGeometry:()=>JA,PlaneGeometry:()=>JA,PlaneHelper:()=>Gd,PointCloud:()=>Ib,PointCloudMaterial:()=>tb,PointLight:()=>Yc,PointLightHelper:()=>qs,Points:()=>el,PointsMaterial:()=>qn,PolarGridHelper:()=>td,PolyhedronBufferGeometry:()=>sl,PolyhedronGeometry:()=>sl,PositionalAudio:()=>rs,PropertyBinding:()=>Ys,PropertyMixer:()=>hs,QuadraticBezierCurve:()=>nc,QuadraticBezierCurve3:()=>lc,Quaternion:()=>te,QuaternionKeyframeTrack:()=>Ra,QuaternionLinearInterpolant:()=>Xa,REVISION:()=>e,RGBADepthPacking:()=>AC,RGBAFormat:()=>xg,RGBAIntegerFormat:()=>Og,RGBA_ASTC_10x10_Format:()=>mI,RGBA_ASTC_10x5_Format:()=>rI,RGBA_ASTC_10x6_Format:()=>GI,RGBA_ASTC_10x8_Format:()=>hI,RGBA_ASTC_12x10_Format:()=>uI,RGBA_ASTC_12x12_Format:()=>BI,RGBA_ASTC_4x4_Format:()=>oI,RGBA_ASTC_5x4_Format:()=>nI,RGBA_ASTC_5x5_Format:()=>lI,RGBA_ASTC_6x5_Format:()=>aI,RGBA_ASTC_6x6_Format:()=>cI,RGBA_ASTC_8x5_Format:()=>sI,RGBA_ASTC_8x6_Format:()=>dI,RGBA_ASTC_8x8_Format:()=>bI,RGBA_BPTC_Format:()=>ZI,RGBA_ETC2_EAC_Format:()=>iI,RGBA_PVRTC_2BPPV1_Format:()=>eI,RGBA_PVRTC_4BPPV1_Format:()=>CI,RGBA_S3TC_DXT1_Format:()=>_g,RGBA_S3TC_DXT3_Format:()=>qg,RGBA_S3TC_DXT5_Format:()=>$g,RGBDEncoding:()=>eC,RGBEEncoding:()=>$I,RGBEFormat:()=>kg,RGBFormat:()=>fg,RGBIntegerFormat:()=>Dg,RGBM16Encoding:()=>CC,RGBM7Encoding:()=>IC,RGB_ETC1_Format:()=>tI,RGB_ETC2_Format:()=>AI,RGB_PVRTC_2BPPV1_Format:()=>II,RGB_PVRTC_4BPPV1_Format:()=>gI,RGB_S3TC_DXT1_Format:()=>Pg,RGFormat:()=>Eg,RGIntegerFormat:()=>jg,RawShaderMaterial:()=>la,Ray:()=>Fe,Raycaster:()=>Ns,RectAreaLight:()=>Kc,RedFormat:()=>Ug,RedIntegerFormat:()=>Tg,ReinhardToneMapping:()=>gg,RepeatWrapping:()=>cg,ReplaceStencilOp:()=>aC,ReverseSubtractEquation:()=>Y,RingBufferGeometry:()=>ql,RingGeometry:()=>ql,SRGB8_ALPHA8_ASTC_10x10_Format:()=>SI,SRGB8_ALPHA8_ASTC_10x5_Format:()=>HI,SRGB8_ALPHA8_ASTC_10x6_Format:()=>wI,SRGB8_ALPHA8_ASTC_10x8_Format:()=>KI,SRGB8_ALPHA8_ASTC_12x10_Format:()=>NI,SRGB8_ALPHA8_ASTC_12x12_Format:()=>FI,SRGB8_ALPHA8_ASTC_4x4_Format:()=>pI,SRGB8_ALPHA8_ASTC_5x4_Format:()=>WI,SRGB8_ALPHA8_ASTC_5x5_Format:()=>yI,SRGB8_ALPHA8_ASTC_6x5_Format:()=>VI,SRGB8_ALPHA8_ASTC_6x6_Format:()=>vI,SRGB8_ALPHA8_ASTC_8x5_Format:()=>YI,SRGB8_ALPHA8_ASTC_8x6_Format:()=>XI,SRGB8_ALPHA8_ASTC_8x8_Format:()=>RI,Scene:()=>Cn,SceneUtils:()=>Yb,ShaderChunk:()=>LA,ShaderLib:()=>MA,ShaderMaterial:()=>vA,ShadowMaterial:()=>na,Shape:()=>bc,ShapeBufferGeometry:()=>$l,ShapeGeometry:()=>$l,ShapePath:()=>Tc,ShapeUtils:()=>Ql,ShortType:()=>vg,Skeleton:()=>Fn,SkeletonHelper:()=>Ps,SkinnedMesh:()=>wn,SmoothShading:()=>m,Sphere:()=>Ye,SphereBufferGeometry:()=>ga,SphereGeometry:()=>ga,Spherical:()=>fs,SphericalHarmonics3:()=>Sc,SplineCurve:()=>ac,SpotLight:()=>pc,SpotLightHelper:()=>Es,Sprite:()=>Zn,SpriteMaterial:()=>on,SrcAlphaFactor:()=>N,SrcAlphaSaturateFactor:()=>L,SrcColorFactor:()=>K,StaticCopyUsage:()=>HC,StaticDrawUsage:()=>yC,StaticReadUsage:()=>YC,StereoCamera:()=>Cs,StreamCopyUsage:()=>KC,StreamDrawUsage:()=>vC,StreamReadUsage:()=>RC,StringKeyframeTrack:()=>Ha,SubtractEquation:()=>v,SubtractiveBlending:()=>p,TOUCH:()=>A,TangentSpaceNormalMap:()=>iC,TetrahedronBufferGeometry:()=>Ia,TetrahedronGeometry:()=>Ia,TextBufferGeometry:()=>Ca,TextGeometry:()=>Ca,Texture:()=>$C,TextureLoader:()=>Ta,TorusBufferGeometry:()=>ea,TorusGeometry:()=>ea,TorusKnotBufferGeometry:()=>ta,TorusKnotGeometry:()=>ta,Triangle:()=>pt,TriangleFanDrawMode:()=>OI,TriangleStripDrawMode:()=>DI,TrianglesDrawMode:()=>jI,TubeBufferGeometry:()=>Aa,TubeGeometry:()=>Aa,UVMapping:()=>tg,Uint16Attribute:()=>db,Uint16BufferAttribute:()=>Lt,Uint32Attribute:()=>rb,Uint32BufferAttribute:()=>Mt,Uint8Attribute:()=>ab,Uint8BufferAttribute:()=>ft,Uint8ClampedAttribute:()=>cb,Uint8ClampedBufferAttribute:()=>xt,Uniform:()=>ws,UniformsLib:()=>kA,UniformsUtils:()=>VA,UnsignedByteType:()=>yg,UnsignedInt248Type:()=>Fg,UnsignedIntType:()=>Rg,UnsignedShort4444Type:()=>Kg,UnsignedShort5551Type:()=>Sg,UnsignedShort565Type:()=>Ng,UnsignedShortType:()=>Yg,VSMShadowMap:()=>d,Vector2:()=>DC,Vector3:()=>Ae,Vector4:()=>Ie,VectorKeyframeTrack:()=>wa,Vertex:()=>ob,VertexColors:()=>qd,VideoTexture:()=>Al,WebGL1Renderer:()=>$o,WebGLCubeRenderTarget:()=>KA,WebGLMultisampleRenderTarget:()=>ee,WebGLRenderTarget:()=>Ce,WebGLRenderTargetCube:()=>yb,WebGLRenderer:()=>qo,WebGLUtils:()=>To,WireframeGeometry:()=>ia,WireframeHelper:()=>Zb,WrapAroundEnding:()=>UI,XHRLoader:()=>pb,ZeroCurvatureEnding:()=>MI,ZeroFactor:()=>H,ZeroSlopeEnding:()=>QI,ZeroStencilOp:()=>nC,sRGBEncoding:()=>_I});const e="128",t={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},A={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},i=0,o=1,n=2,l=3,a=0,c=1,s=2,d=3,b=0,r=1,G=2,h=1,m=2,u=0,B=1,Z=2,p=3,W=4,y=5,V=100,v=101,Y=102,X=103,R=104,H=200,w=201,K=202,S=203,N=204,F=205,z=206,f=207,x=208,J=209,L=210,k=0,M=1,Q=2,U=3,T=4,E=5,j=6,D=7,O=0,P=1,_=2,q=0,$=1,gg=2,Ig=3,Cg=4,eg=5,tg=300,Ag=301,ig=302,og=303,ng=304,lg=306,ag=307,cg=1e3,sg=1001,dg=1002,bg=1003,rg=1004,Gg=1004,hg=1005,mg=1005,ug=1006,Bg=1007,Zg=1007,pg=1008,Wg=1008,yg=1009,Vg=1010,vg=1011,Yg=1012,Xg=1013,Rg=1014,Hg=1015,wg=1016,Kg=1017,Sg=1018,Ng=1019,Fg=1020,zg=1021,fg=1022,xg=1023,Jg=1024,Lg=1025,kg=xg,Mg=1026,Qg=1027,Ug=1028,Tg=1029,Eg=1030,jg=1031,Dg=1032,Og=1033,Pg=33776,_g=33777,qg=33778,$g=33779,gI=35840,II=35841,CI=35842,eI=35843,tI=36196,AI=37492,iI=37496,oI=37808,nI=37809,lI=37810,aI=37811,cI=37812,sI=37813,dI=37814,bI=37815,rI=37816,GI=37817,hI=37818,mI=37819,uI=37820,BI=37821,ZI=36492,pI=37840,WI=37841,yI=37842,VI=37843,vI=37844,YI=37845,XI=37846,RI=37847,HI=37848,wI=37849,KI=37850,SI=37851,NI=37852,FI=37853,zI=2200,fI=2201,xI=2202,JI=2300,LI=2301,kI=2302,MI=2400,QI=2401,UI=2402,TI=2500,EI=2501,jI=0,DI=1,OI=2,PI=3e3,_I=3001,qI=3007,$I=3002,gC=3003,IC=3004,CC=3005,eC=3006,tC=3200,AC=3201,iC=0,oC=1,nC=0,lC=7680,aC=7681,cC=7682,sC=7683,dC=34055,bC=34056,rC=5386,GC=512,hC=513,mC=514,uC=515,BC=516,ZC=517,pC=518,WC=519,yC=35044,VC=35048,vC=35040,YC=35045,XC=35049,RC=35041,HC=35046,wC=35050,KC=35042,SC="100",NC="300 es";class FC{addEventListener(g,I){void 0===this._listeners&&(this._listeners={});const C=this._listeners;void 0===C[g]&&(C[g]=[]),-1===C[g].indexOf(I)&&C[g].push(I)}hasEventListener(g,I){if(void 0===this._listeners)return!1;const C=this._listeners;return void 0!==C[g]&&-1!==C[g].indexOf(I)}removeEventListener(g,I){if(void 0===this._listeners)return;const C=this._listeners[g];if(void 0!==C){const g=C.indexOf(I);-1!==g&&C.splice(g,1)}}dispatchEvent(g){if(void 0===this._listeners)return;const I=this._listeners[g.type];if(void 0!==I){g.target=this;const C=I.slice(0);for(let I=0,e=C.length;I<e;I++)C[I].call(this,g);g.target=null}}}const zC=[];for(let g=0;g<256;g++)zC[g]=(g<16?"0":"")+g.toString(16);let fC=1234567;const xC=Math.PI/180,JC=180/Math.PI;function LC(){const g=4294967295*Math.random()|0,I=4294967295*Math.random()|0,C=4294967295*Math.random()|0,e=4294967295*Math.random()|0;return(zC[255&g]+zC[g>>8&255]+zC[g>>16&255]+zC[g>>24&255]+"-"+zC[255&I]+zC[I>>8&255]+"-"+zC[I>>16&15|64]+zC[I>>24&255]+"-"+zC[63&C|128]+zC[C>>8&255]+"-"+zC[C>>16&255]+zC[C>>24&255]+zC[255&e]+zC[e>>8&255]+zC[e>>16&255]+zC[e>>24&255]).toUpperCase()}function kC(g,I,C){return Math.max(I,Math.min(C,g))}function MC(g,I){return(g%I+I)%I}function QC(g,I,C){return(1-C)*g+C*I}function UC(g){return 0==(g&g-1)&&0!==g}function TC(g){return Math.pow(2,Math.ceil(Math.log(g)/Math.LN2))}function EC(g){return Math.pow(2,Math.floor(Math.log(g)/Math.LN2))}var jC=Object.freeze({__proto__:null,DEG2RAD:xC,RAD2DEG:JC,generateUUID:LC,clamp:kC,euclideanModulo:MC,mapLinear:function(g,I,C,e,t){return e+(g-I)*(t-e)/(C-I)},inverseLerp:function(g,I,C){return g!==I?(C-g)/(I-g):0},lerp:QC,damp:function(g,I,C,e){return QC(g,I,1-Math.exp(-C*e))},pingpong:function(g,I=1){return I-Math.abs(MC(g,2*I)-I)},smoothstep:function(g,I,C){return g<=I?0:g>=C?1:(g=(g-I)/(C-I))*g*(3-2*g)},smootherstep:function(g,I,C){return g<=I?0:g>=C?1:(g=(g-I)/(C-I))*g*g*(g*(6*g-15)+10)},randInt:function(g,I){return g+Math.floor(Math.random()*(I-g+1))},randFloat:function(g,I){return g+Math.random()*(I-g)},randFloatSpread:function(g){return g*(.5-Math.random())},seededRandom:function(g){return void 0!==g&&(fC=g%2147483647),fC=16807*fC%2147483647,(fC-1)/2147483646},degToRad:function(g){return g*xC},radToDeg:function(g){return g*JC},isPowerOfTwo:UC,ceilPowerOfTwo:TC,floorPowerOfTwo:EC,setQuaternionFromProperEuler:function(g,I,C,e,t){const A=Math.cos,i=Math.sin,o=A(C/2),n=i(C/2),l=A((I+e)/2),a=i((I+e)/2),c=A((I-e)/2),s=i((I-e)/2),d=A((e-I)/2),b=i((e-I)/2);switch(t){case"XYX":g.set(o*a,n*c,n*s,o*l);break;case"YZY":g.set(n*s,o*a,n*c,o*l);break;case"ZXZ":g.set(n*c,n*s,o*a,o*l);break;case"XZX":g.set(o*a,n*b,n*d,o*l);break;case"YXY":g.set(n*d,o*a,n*b,o*l);break;case"ZYZ":g.set(n*b,n*d,o*a,o*l);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+t)}}});class DC{constructor(g=0,I=0){this.x=g,this.y=I}get width(){return this.x}set width(g){this.x=g}get height(){return this.y}set height(g){this.y=g}set(g,I){return this.x=g,this.y=I,this}setScalar(g){return this.x=g,this.y=g,this}setX(g){return this.x=g,this}setY(g){return this.y=g,this}setComponent(g,I){switch(g){case 0:this.x=I;break;case 1:this.y=I;break;default:throw new Error("index is out of range: "+g)}return this}getComponent(g){switch(g){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+g)}}clone(){return new this.constructor(this.x,this.y)}copy(g){return this.x=g.x,this.y=g.y,this}add(g,I){return void 0!==I?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(g,I)):(this.x+=g.x,this.y+=g.y,this)}addScalar(g){return this.x+=g,this.y+=g,this}addVectors(g,I){return this.x=g.x+I.x,this.y=g.y+I.y,this}addScaledVector(g,I){return this.x+=g.x*I,this.y+=g.y*I,this}sub(g,I){return void 0!==I?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(g,I)):(this.x-=g.x,this.y-=g.y,this)}subScalar(g){return this.x-=g,this.y-=g,this}subVectors(g,I){return this.x=g.x-I.x,this.y=g.y-I.y,this}multiply(g){return this.x*=g.x,this.y*=g.y,this}multiplyScalar(g){return this.x*=g,this.y*=g,this}divide(g){return this.x/=g.x,this.y/=g.y,this}divideScalar(g){return this.multiplyScalar(1/g)}applyMatrix3(g){const I=this.x,C=this.y,e=g.elements;return this.x=e[0]*I+e[3]*C+e[6],this.y=e[1]*I+e[4]*C+e[7],this}min(g){return this.x=Math.min(this.x,g.x),this.y=Math.min(this.y,g.y),this}max(g){return this.x=Math.max(this.x,g.x),this.y=Math.max(this.y,g.y),this}clamp(g,I){return this.x=Math.max(g.x,Math.min(I.x,this.x)),this.y=Math.max(g.y,Math.min(I.y,this.y)),this}clampScalar(g,I){return this.x=Math.max(g,Math.min(I,this.x)),this.y=Math.max(g,Math.min(I,this.y)),this}clampLength(g,I){const C=this.length();return this.divideScalar(C||1).multiplyScalar(Math.max(g,Math.min(I,C)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(g){return this.x*g.x+this.y*g.y}cross(g){return this.x*g.y-this.y*g.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(g){return Math.sqrt(this.distanceToSquared(g))}distanceToSquared(g){const I=this.x-g.x,C=this.y-g.y;return I*I+C*C}manhattanDistanceTo(g){return Math.abs(this.x-g.x)+Math.abs(this.y-g.y)}setLength(g){return this.normalize().multiplyScalar(g)}lerp(g,I){return this.x+=(g.x-this.x)*I,this.y+=(g.y-this.y)*I,this}lerpVectors(g,I,C){return this.x=g.x+(I.x-g.x)*C,this.y=g.y+(I.y-g.y)*C,this}equals(g){return g.x===this.x&&g.y===this.y}fromArray(g,I=0){return this.x=g[I],this.y=g[I+1],this}toArray(g=[],I=0){return g[I]=this.x,g[I+1]=this.y,g}fromBufferAttribute(g,I,C){return void 0!==C&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=g.getX(I),this.y=g.getY(I),this}rotateAround(g,I){const C=Math.cos(I),e=Math.sin(I),t=this.x-g.x,A=this.y-g.y;return this.x=t*C-A*e+g.x,this.y=t*e+A*C+g.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}}DC.prototype.isVector2=!0;class OC{constructor(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}set(g,I,C,e,t,A,i,o,n){const l=this.elements;return l[0]=g,l[1]=e,l[2]=i,l[3]=I,l[4]=t,l[5]=o,l[6]=C,l[7]=A,l[8]=n,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(g){const I=this.elements,C=g.elements;return I[0]=C[0],I[1]=C[1],I[2]=C[2],I[3]=C[3],I[4]=C[4],I[5]=C[5],I[6]=C[6],I[7]=C[7],I[8]=C[8],this}extractBasis(g,I,C){return g.setFromMatrix3Column(this,0),I.setFromMatrix3Column(this,1),C.setFromMatrix3Column(this,2),this}setFromMatrix4(g){const I=g.elements;return this.set(I[0],I[4],I[8],I[1],I[5],I[9],I[2],I[6],I[10]),this}multiply(g){return this.multiplyMatrices(this,g)}premultiply(g){return this.multiplyMatrices(g,this)}multiplyMatrices(g,I){const C=g.elements,e=I.elements,t=this.elements,A=C[0],i=C[3],o=C[6],n=C[1],l=C[4],a=C[7],c=C[2],s=C[5],d=C[8],b=e[0],r=e[3],G=e[6],h=e[1],m=e[4],u=e[7],B=e[2],Z=e[5],p=e[8];return t[0]=A*b+i*h+o*B,t[3]=A*r+i*m+o*Z,t[6]=A*G+i*u+o*p,t[1]=n*b+l*h+a*B,t[4]=n*r+l*m+a*Z,t[7]=n*G+l*u+a*p,t[2]=c*b+s*h+d*B,t[5]=c*r+s*m+d*Z,t[8]=c*G+s*u+d*p,this}multiplyScalar(g){const I=this.elements;return I[0]*=g,I[3]*=g,I[6]*=g,I[1]*=g,I[4]*=g,I[7]*=g,I[2]*=g,I[5]*=g,I[8]*=g,this}determinant(){const g=this.elements,I=g[0],C=g[1],e=g[2],t=g[3],A=g[4],i=g[5],o=g[6],n=g[7],l=g[8];return I*A*l-I*i*n-C*t*l+C*i*o+e*t*n-e*A*o}invert(){const g=this.elements,I=g[0],C=g[1],e=g[2],t=g[3],A=g[4],i=g[5],o=g[6],n=g[7],l=g[8],a=l*A-i*n,c=i*o-l*t,s=n*t-A*o,d=I*a+C*c+e*s;if(0===d)return this.set(0,0,0,0,0,0,0,0,0);const b=1/d;return g[0]=a*b,g[1]=(e*n-l*C)*b,g[2]=(i*C-e*A)*b,g[3]=c*b,g[4]=(l*I-e*o)*b,g[5]=(e*t-i*I)*b,g[6]=s*b,g[7]=(C*o-n*I)*b,g[8]=(A*I-C*t)*b,this}transpose(){let g;const I=this.elements;return g=I[1],I[1]=I[3],I[3]=g,g=I[2],I[2]=I[6],I[6]=g,g=I[5],I[5]=I[7],I[7]=g,this}getNormalMatrix(g){return this.setFromMatrix4(g).invert().transpose()}transposeIntoArray(g){const I=this.elements;return g[0]=I[0],g[1]=I[3],g[2]=I[6],g[3]=I[1],g[4]=I[4],g[5]=I[7],g[6]=I[2],g[7]=I[5],g[8]=I[8],this}setUvTransform(g,I,C,e,t,A,i){const o=Math.cos(t),n=Math.sin(t);return this.set(C*o,C*n,-C*(o*A+n*i)+A+g,-e*n,e*o,-e*(-n*A+o*i)+i+I,0,0,1),this}scale(g,I){const C=this.elements;return C[0]*=g,C[3]*=g,C[6]*=g,C[1]*=I,C[4]*=I,C[7]*=I,this}rotate(g){const I=Math.cos(g),C=Math.sin(g),e=this.elements,t=e[0],A=e[3],i=e[6],o=e[1],n=e[4],l=e[7];return e[0]=I*t+C*o,e[3]=I*A+C*n,e[6]=I*i+C*l,e[1]=-C*t+I*o,e[4]=-C*A+I*n,e[7]=-C*i+I*l,this}translate(g,I){const C=this.elements;return C[0]+=g*C[2],C[3]+=g*C[5],C[6]+=g*C[8],C[1]+=I*C[2],C[4]+=I*C[5],C[7]+=I*C[8],this}equals(g){const I=this.elements,C=g.elements;for(let g=0;g<9;g++)if(I[g]!==C[g])return!1;return!0}fromArray(g,I=0){for(let C=0;C<9;C++)this.elements[C]=g[C+I];return this}toArray(g=[],I=0){const C=this.elements;return g[I]=C[0],g[I+1]=C[1],g[I+2]=C[2],g[I+3]=C[3],g[I+4]=C[4],g[I+5]=C[5],g[I+6]=C[6],g[I+7]=C[7],g[I+8]=C[8],g}clone(){return(new this.constructor).fromArray(this.elements)}}let PC;OC.prototype.isMatrix3=!0;class _C{static getDataURL(g){if(/^data:/i.test(g.src))return g.src;if("undefined"==typeof HTMLCanvasElement)return g.src;let I;if(g instanceof HTMLCanvasElement)I=g;else{void 0===PC&&(PC=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")),PC.width=g.width,PC.height=g.height;const C=PC.getContext("2d");g instanceof ImageData?C.putImageData(g,0,0):C.drawImage(g,0,0,g.width,g.height),I=PC}return I.width>2048||I.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",g),I.toDataURL("image/jpeg",.6)):I.toDataURL("image/png")}}let qC=0;class $C extends FC{constructor(g=$C.DEFAULT_IMAGE,I=$C.DEFAULT_MAPPING,C=sg,e=sg,t=ug,A=pg,i=xg,o=yg,n=1,l=PI){super(),Object.defineProperty(this,"id",{value:qC++}),this.uuid=LC(),this.name="",this.image=g,this.mipmaps=[],this.mapping=I,this.wrapS=C,this.wrapT=e,this.magFilter=t,this.minFilter=A,this.anisotropy=n,this.format=i,this.internalFormat=null,this.type=o,this.offset=new DC(0,0),this.repeat=new DC(1,1),this.center=new DC(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new OC,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=l,this.version=0,this.onUpdate=null}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(g){return this.name=g.name,this.image=g.image,this.mipmaps=g.mipmaps.slice(0),this.mapping=g.mapping,this.wrapS=g.wrapS,this.wrapT=g.wrapT,this.magFilter=g.magFilter,this.minFilter=g.minFilter,this.anisotropy=g.anisotropy,this.format=g.format,this.internalFormat=g.internalFormat,this.type=g.type,this.offset.copy(g.offset),this.repeat.copy(g.repeat),this.center.copy(g.center),this.rotation=g.rotation,this.matrixAutoUpdate=g.matrixAutoUpdate,this.matrix.copy(g.matrix),this.generateMipmaps=g.generateMipmaps,this.premultiplyAlpha=g.premultiplyAlpha,this.flipY=g.flipY,this.unpackAlignment=g.unpackAlignment,this.encoding=g.encoding,this}toJSON(g){const I=void 0===g||"string"==typeof g;if(!I&&void 0!==g.textures[this.uuid])return g.textures[this.uuid];const C={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(void 0!==this.image){const e=this.image;if(void 0===e.uuid&&(e.uuid=LC()),!I&&void 0===g.images[e.uuid]){let I;if(Array.isArray(e)){I=[];for(let g=0,C=e.length;g<C;g++)e[g].isDataTexture?I.push(ge(e[g].image)):I.push(ge(e[g]))}else I=ge(e);g.images[e.uuid]={uuid:e.uuid,url:I}}C.image=e.uuid}return I||(g.textures[this.uuid]=C),C}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(g){if(this.mapping!==tg)return g;if(g.applyMatrix3(this.matrix),g.x<0||g.x>1)switch(this.wrapS){case cg:g.x=g.x-Math.floor(g.x);break;case sg:g.x=g.x<0?0:1;break;case dg:1===Math.abs(Math.floor(g.x)%2)?g.x=Math.ceil(g.x)-g.x:g.x=g.x-Math.floor(g.x)}if(g.y<0||g.y>1)switch(this.wrapT){case cg:g.y=g.y-Math.floor(g.y);break;case sg:g.y=g.y<0?0:1;break;case dg:1===Math.abs(Math.floor(g.y)%2)?g.y=Math.ceil(g.y)-g.y:g.y=g.y-Math.floor(g.y)}return this.flipY&&(g.y=1-g.y),g}set needsUpdate(g){!0===g&&this.version++}}function ge(g){return"undefined"!=typeof HTMLImageElement&&g instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&g instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&g instanceof ImageBitmap?_C.getDataURL(g):g.data?{data:Array.prototype.slice.call(g.data),width:g.width,height:g.height,type:g.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}$C.DEFAULT_IMAGE=void 0,$C.DEFAULT_MAPPING=tg,$C.prototype.isTexture=!0;class Ie{constructor(g=0,I=0,C=0,e=1){this.x=g,this.y=I,this.z=C,this.w=e}get width(){return this.z}set width(g){this.z=g}get height(){return this.w}set height(g){this.w=g}set(g,I,C,e){return this.x=g,this.y=I,this.z=C,this.w=e,this}setScalar(g){return this.x=g,this.y=g,this.z=g,this.w=g,this}setX(g){return this.x=g,this}setY(g){return this.y=g,this}setZ(g){return this.z=g,this}setW(g){return this.w=g,this}setComponent(g,I){switch(g){case 0:this.x=I;break;case 1:this.y=I;break;case 2:this.z=I;break;case 3:this.w=I;break;default:throw new Error("index is out of range: "+g)}return this}getComponent(g){switch(g){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+g)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(g){return this.x=g.x,this.y=g.y,this.z=g.z,this.w=void 0!==g.w?g.w:1,this}add(g,I){return void 0!==I?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(g,I)):(this.x+=g.x,this.y+=g.y,this.z+=g.z,this.w+=g.w,this)}addScalar(g){return this.x+=g,this.y+=g,this.z+=g,this.w+=g,this}addVectors(g,I){return this.x=g.x+I.x,this.y=g.y+I.y,this.z=g.z+I.z,this.w=g.w+I.w,this}addScaledVector(g,I){return this.x+=g.x*I,this.y+=g.y*I,this.z+=g.z*I,this.w+=g.w*I,this}sub(g,I){return void 0!==I?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(g,I)):(this.x-=g.x,this.y-=g.y,this.z-=g.z,this.w-=g.w,this)}subScalar(g){return this.x-=g,this.y-=g,this.z-=g,this.w-=g,this}subVectors(g,I){return this.x=g.x-I.x,this.y=g.y-I.y,this.z=g.z-I.z,this.w=g.w-I.w,this}multiply(g){return this.x*=g.x,this.y*=g.y,this.z*=g.z,this.w*=g.w,this}multiplyScalar(g){return this.x*=g,this.y*=g,this.z*=g,this.w*=g,this}applyMatrix4(g){const I=this.x,C=this.y,e=this.z,t=this.w,A=g.elements;return this.x=A[0]*I+A[4]*C+A[8]*e+A[12]*t,this.y=A[1]*I+A[5]*C+A[9]*e+A[13]*t,this.z=A[2]*I+A[6]*C+A[10]*e+A[14]*t,this.w=A[3]*I+A[7]*C+A[11]*e+A[15]*t,this}divideScalar(g){return this.multiplyScalar(1/g)}setAxisAngleFromQuaternion(g){this.w=2*Math.acos(g.w);const I=Math.sqrt(1-g.w*g.w);return I<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=g.x/I,this.y=g.y/I,this.z=g.z/I),this}setAxisAngleFromRotationMatrix(g){let I,C,e,t;const A=.01,i=.1,o=g.elements,n=o[0],l=o[4],a=o[8],c=o[1],s=o[5],d=o[9],b=o[2],r=o[6],G=o[10];if(Math.abs(l-c)<A&&Math.abs(a-b)<A&&Math.abs(d-r)<A){if(Math.abs(l+c)<i&&Math.abs(a+b)<i&&Math.abs(d+r)<i&&Math.abs(n+s+G-3)<i)return this.set(1,0,0,0),this;I=Math.PI;const g=(n+1)/2,o=(s+1)/2,h=(G+1)/2,m=(l+c)/4,u=(a+b)/4,B=(d+r)/4;return g>o&&g>h?g<A?(C=0,e=.707106781,t=.707106781):(C=Math.sqrt(g),e=m/C,t=u/C):o>h?o<A?(C=.707106781,e=0,t=.707106781):(e=Math.sqrt(o),C=m/e,t=B/e):h<A?(C=.707106781,e=.707106781,t=0):(t=Math.sqrt(h),C=u/t,e=B/t),this.set(C,e,t,I),this}let h=Math.sqrt((r-d)*(r-d)+(a-b)*(a-b)+(c-l)*(c-l));return Math.abs(h)<.001&&(h=1),this.x=(r-d)/h,this.y=(a-b)/h,this.z=(c-l)/h,this.w=Math.acos((n+s+G-1)/2),this}min(g){return this.x=Math.min(this.x,g.x),this.y=Math.min(this.y,g.y),this.z=Math.min(this.z,g.z),this.w=Math.min(this.w,g.w),this}max(g){return this.x=Math.max(this.x,g.x),this.y=Math.max(this.y,g.y),this.z=Math.max(this.z,g.z),this.w=Math.max(this.w,g.w),this}clamp(g,I){return this.x=Math.max(g.x,Math.min(I.x,this.x)),this.y=Math.max(g.y,Math.min(I.y,this.y)),this.z=Math.max(g.z,Math.min(I.z,this.z)),this.w=Math.max(g.w,Math.min(I.w,this.w)),this}clampScalar(g,I){return this.x=Math.max(g,Math.min(I,this.x)),this.y=Math.max(g,Math.min(I,this.y)),this.z=Math.max(g,Math.min(I,this.z)),this.w=Math.max(g,Math.min(I,this.w)),this}clampLength(g,I){const C=this.length();return this.divideScalar(C||1).multiplyScalar(Math.max(g,Math.min(I,C)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(g){return this.x*g.x+this.y*g.y+this.z*g.z+this.w*g.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(g){return this.normalize().multiplyScalar(g)}lerp(g,I){return this.x+=(g.x-this.x)*I,this.y+=(g.y-this.y)*I,this.z+=(g.z-this.z)*I,this.w+=(g.w-this.w)*I,this}lerpVectors(g,I,C){return this.x=g.x+(I.x-g.x)*C,this.y=g.y+(I.y-g.y)*C,this.z=g.z+(I.z-g.z)*C,this.w=g.w+(I.w-g.w)*C,this}equals(g){return g.x===this.x&&g.y===this.y&&g.z===this.z&&g.w===this.w}fromArray(g,I=0){return this.x=g[I],this.y=g[I+1],this.z=g[I+2],this.w=g[I+3],this}toArray(g=[],I=0){return g[I]=this.x,g[I+1]=this.y,g[I+2]=this.z,g[I+3]=this.w,g}fromBufferAttribute(g,I,C){return void 0!==C&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=g.getX(I),this.y=g.getY(I),this.z=g.getZ(I),this.w=g.getW(I),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}}Ie.prototype.isVector4=!0;class Ce extends FC{constructor(g,I,C){super(),this.width=g,this.height=I,this.depth=1,this.scissor=new Ie(0,0,g,I),this.scissorTest=!1,this.viewport=new Ie(0,0,g,I),C=C||{},this.texture=new $C(void 0,C.mapping,C.wrapS,C.wrapT,C.magFilter,C.minFilter,C.format,C.type,C.anisotropy,C.encoding),this.texture.image={},this.texture.image.width=g,this.texture.image.height=I,this.texture.image.depth=1,this.texture.generateMipmaps=void 0!==C.generateMipmaps&&C.generateMipmaps,this.texture.minFilter=void 0!==C.minFilter?C.minFilter:ug,this.depthBuffer=void 0===C.depthBuffer||C.depthBuffer,this.stencilBuffer=void 0!==C.stencilBuffer&&C.stencilBuffer,this.depthTexture=void 0!==C.depthTexture?C.depthTexture:null}setTexture(g){g.image={width:this.width,height:this.height,depth:this.depth},this.texture=g}setSize(g,I,C=1){this.width===g&&this.height===I&&this.depth===C||(this.width=g,this.height=I,this.depth=C,this.texture.image.width=g,this.texture.image.height=I,this.texture.image.depth=C,this.dispose()),this.viewport.set(0,0,g,I),this.scissor.set(0,0,g,I)}clone(){return(new this.constructor).copy(this)}copy(g){return this.width=g.width,this.height=g.height,this.depth=g.depth,this.viewport.copy(g.viewport),this.texture=g.texture.clone(),this.depthBuffer=g.depthBuffer,this.stencilBuffer=g.stencilBuffer,this.depthTexture=g.depthTexture,this}dispose(){this.dispatchEvent({type:"dispose"})}}Ce.prototype.isWebGLRenderTarget=!0;class ee extends Ce{constructor(g,I,C){super(g,I,C),this.samples=4}copy(g){return super.copy.call(this,g),this.samples=g.samples,this}}ee.prototype.isWebGLMultisampleRenderTarget=!0;class te{constructor(g=0,I=0,C=0,e=1){this._x=g,this._y=I,this._z=C,this._w=e}static slerp(g,I,C,e){return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."),C.slerpQuaternions(g,I,e)}static slerpFlat(g,I,C,e,t,A,i){let o=C[e+0],n=C[e+1],l=C[e+2],a=C[e+3];const c=t[A+0],s=t[A+1],d=t[A+2],b=t[A+3];if(0===i)return g[I+0]=o,g[I+1]=n,g[I+2]=l,void(g[I+3]=a);if(1===i)return g[I+0]=c,g[I+1]=s,g[I+2]=d,void(g[I+3]=b);if(a!==b||o!==c||n!==s||l!==d){let g=1-i;const I=o*c+n*s+l*d+a*b,C=I>=0?1:-1,e=1-I*I;if(e>Number.EPSILON){const t=Math.sqrt(e),A=Math.atan2(t,I*C);g=Math.sin(g*A)/t,i=Math.sin(i*A)/t}const t=i*C;if(o=o*g+c*t,n=n*g+s*t,l=l*g+d*t,a=a*g+b*t,g===1-i){const g=1/Math.sqrt(o*o+n*n+l*l+a*a);o*=g,n*=g,l*=g,a*=g}}g[I]=o,g[I+1]=n,g[I+2]=l,g[I+3]=a}static multiplyQuaternionsFlat(g,I,C,e,t,A){const i=C[e],o=C[e+1],n=C[e+2],l=C[e+3],a=t[A],c=t[A+1],s=t[A+2],d=t[A+3];return g[I]=i*d+l*a+o*s-n*c,g[I+1]=o*d+l*c+n*a-i*s,g[I+2]=n*d+l*s+i*c-o*a,g[I+3]=l*d-i*a-o*c-n*s,g}get x(){return this._x}set x(g){this._x=g,this._onChangeCallback()}get y(){return this._y}set y(g){this._y=g,this._onChangeCallback()}get z(){return this._z}set z(g){this._z=g,this._onChangeCallback()}get w(){return this._w}set w(g){this._w=g,this._onChangeCallback()}set(g,I,C,e){return this._x=g,this._y=I,this._z=C,this._w=e,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(g){return this._x=g.x,this._y=g.y,this._z=g.z,this._w=g.w,this._onChangeCallback(),this}setFromEuler(g,I){if(!g||!g.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");const C=g._x,e=g._y,t=g._z,A=g._order,i=Math.cos,o=Math.sin,n=i(C/2),l=i(e/2),a=i(t/2),c=o(C/2),s=o(e/2),d=o(t/2);switch(A){case"XYZ":this._x=c*l*a+n*s*d,this._y=n*s*a-c*l*d,this._z=n*l*d+c*s*a,this._w=n*l*a-c*s*d;break;case"YXZ":this._x=c*l*a+n*s*d,this._y=n*s*a-c*l*d,this._z=n*l*d-c*s*a,this._w=n*l*a+c*s*d;break;case"ZXY":this._x=c*l*a-n*s*d,this._y=n*s*a+c*l*d,this._z=n*l*d+c*s*a,this._w=n*l*a-c*s*d;break;case"ZYX":this._x=c*l*a-n*s*d,this._y=n*s*a+c*l*d,this._z=n*l*d-c*s*a,this._w=n*l*a+c*s*d;break;case"YZX":this._x=c*l*a+n*s*d,this._y=n*s*a+c*l*d,this._z=n*l*d-c*s*a,this._w=n*l*a-c*s*d;break;case"XZY":this._x=c*l*a-n*s*d,this._y=n*s*a-c*l*d,this._z=n*l*d+c*s*a,this._w=n*l*a+c*s*d;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+A)}return!1!==I&&this._onChangeCallback(),this}setFromAxisAngle(g,I){const C=I/2,e=Math.sin(C);return this._x=g.x*e,this._y=g.y*e,this._z=g.z*e,this._w=Math.cos(C),this._onChangeCallback(),this}setFromRotationMatrix(g){const I=g.elements,C=I[0],e=I[4],t=I[8],A=I[1],i=I[5],o=I[9],n=I[2],l=I[6],a=I[10],c=C+i+a;if(c>0){const g=.5/Math.sqrt(c+1);this._w=.25/g,this._x=(l-o)*g,this._y=(t-n)*g,this._z=(A-e)*g}else if(C>i&&C>a){const g=2*Math.sqrt(1+C-i-a);this._w=(l-o)/g,this._x=.25*g,this._y=(e+A)/g,this._z=(t+n)/g}else if(i>a){const g=2*Math.sqrt(1+i-C-a);this._w=(t-n)/g,this._x=(e+A)/g,this._y=.25*g,this._z=(o+l)/g}else{const g=2*Math.sqrt(1+a-C-i);this._w=(A-e)/g,this._x=(t+n)/g,this._y=(o+l)/g,this._z=.25*g}return this._onChangeCallback(),this}setFromUnitVectors(g,I){let C=g.dot(I)+1;return C<Number.EPSILON?(C=0,Math.abs(g.x)>Math.abs(g.z)?(this._x=-g.y,this._y=g.x,this._z=0,this._w=C):(this._x=0,this._y=-g.z,this._z=g.y,this._w=C)):(this._x=g.y*I.z-g.z*I.y,this._y=g.z*I.x-g.x*I.z,this._z=g.x*I.y-g.y*I.x,this._w=C),this.normalize()}angleTo(g){return 2*Math.acos(Math.abs(kC(this.dot(g),-1,1)))}rotateTowards(g,I){const C=this.angleTo(g);if(0===C)return this;const e=Math.min(1,I/C);return this.slerp(g,e),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(g){return this._x*g._x+this._y*g._y+this._z*g._z+this._w*g._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let g=this.length();return 0===g?(this._x=0,this._y=0,this._z=0,this._w=1):(g=1/g,this._x=this._x*g,this._y=this._y*g,this._z=this._z*g,this._w=this._w*g),this._onChangeCallback(),this}multiply(g,I){return void 0!==I?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(g,I)):this.multiplyQuaternions(this,g)}premultiply(g){return this.multiplyQuaternions(g,this)}multiplyQuaternions(g,I){const C=g._x,e=g._y,t=g._z,A=g._w,i=I._x,o=I._y,n=I._z,l=I._w;return this._x=C*l+A*i+e*n-t*o,this._y=e*l+A*o+t*i-C*n,this._z=t*l+A*n+C*o-e*i,this._w=A*l-C*i-e*o-t*n,this._onChangeCallback(),this}slerp(g,I){if(0===I)return this;if(1===I)return this.copy(g);const C=this._x,e=this._y,t=this._z,A=this._w;let i=A*g._w+C*g._x+e*g._y+t*g._z;if(i<0?(this._w=-g._w,this._x=-g._x,this._y=-g._y,this._z=-g._z,i=-i):this.copy(g),i>=1)return this._w=A,this._x=C,this._y=e,this._z=t,this;const o=1-i*i;if(o<=Number.EPSILON){const g=1-I;return this._w=g*A+I*this._w,this._x=g*C+I*this._x,this._y=g*e+I*this._y,this._z=g*t+I*this._z,this.normalize(),this._onChangeCallback(),this}const n=Math.sqrt(o),l=Math.atan2(n,i),a=Math.sin((1-I)*l)/n,c=Math.sin(I*l)/n;return this._w=A*a+this._w*c,this._x=C*a+this._x*c,this._y=e*a+this._y*c,this._z=t*a+this._z*c,this._onChangeCallback(),this}slerpQuaternions(g,I,C){this.copy(g).slerp(I,C)}equals(g){return g._x===this._x&&g._y===this._y&&g._z===this._z&&g._w===this._w}fromArray(g,I=0){return this._x=g[I],this._y=g[I+1],this._z=g[I+2],this._w=g[I+3],this._onChangeCallback(),this}toArray(g=[],I=0){return g[I]=this._x,g[I+1]=this._y,g[I+2]=this._z,g[I+3]=this._w,g}fromBufferAttribute(g,I){return this._x=g.getX(I),this._y=g.getY(I),this._z=g.getZ(I),this._w=g.getW(I),this}_onChange(g){return this._onChangeCallback=g,this}_onChangeCallback(){}}te.prototype.isQuaternion=!0;class Ae{constructor(g=0,I=0,C=0){this.x=g,this.y=I,this.z=C}set(g,I,C){return void 0===C&&(C=this.z),this.x=g,this.y=I,this.z=C,this}setScalar(g){return this.x=g,this.y=g,this.z=g,this}setX(g){return this.x=g,this}setY(g){return this.y=g,this}setZ(g){return this.z=g,this}setComponent(g,I){switch(g){case 0:this.x=I;break;case 1:this.y=I;break;case 2:this.z=I;break;default:throw new Error("index is out of range: "+g)}return this}getComponent(g){switch(g){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+g)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(g){return this.x=g.x,this.y=g.y,this.z=g.z,this}add(g,I){return void 0!==I?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(g,I)):(this.x+=g.x,this.y+=g.y,this.z+=g.z,this)}addScalar(g){return this.x+=g,this.y+=g,this.z+=g,this}addVectors(g,I){return this.x=g.x+I.x,this.y=g.y+I.y,this.z=g.z+I.z,this}addScaledVector(g,I){return this.x+=g.x*I,this.y+=g.y*I,this.z+=g.z*I,this}sub(g,I){return void 0!==I?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(g,I)):(this.x-=g.x,this.y-=g.y,this.z-=g.z,this)}subScalar(g){return this.x-=g,this.y-=g,this.z-=g,this}subVectors(g,I){return this.x=g.x-I.x,this.y=g.y-I.y,this.z=g.z-I.z,this}multiply(g,I){return void 0!==I?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(g,I)):(this.x*=g.x,this.y*=g.y,this.z*=g.z,this)}multiplyScalar(g){return this.x*=g,this.y*=g,this.z*=g,this}multiplyVectors(g,I){return this.x=g.x*I.x,this.y=g.y*I.y,this.z=g.z*I.z,this}applyEuler(g){return g&&g.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(oe.setFromEuler(g))}applyAxisAngle(g,I){return this.applyQuaternion(oe.setFromAxisAngle(g,I))}applyMatrix3(g){const I=this.x,C=this.y,e=this.z,t=g.elements;return this.x=t[0]*I+t[3]*C+t[6]*e,this.y=t[1]*I+t[4]*C+t[7]*e,this.z=t[2]*I+t[5]*C+t[8]*e,this}applyNormalMatrix(g){return this.applyMatrix3(g).normalize()}applyMatrix4(g){const I=this.x,C=this.y,e=this.z,t=g.elements,A=1/(t[3]*I+t[7]*C+t[11]*e+t[15]);return this.x=(t[0]*I+t[4]*C+t[8]*e+t[12])*A,this.y=(t[1]*I+t[5]*C+t[9]*e+t[13])*A,this.z=(t[2]*I+t[6]*C+t[10]*e+t[14])*A,this}applyQuaternion(g){const I=this.x,C=this.y,e=this.z,t=g.x,A=g.y,i=g.z,o=g.w,n=o*I+A*e-i*C,l=o*C+i*I-t*e,a=o*e+t*C-A*I,c=-t*I-A*C-i*e;return this.x=n*o+c*-t+l*-i-a*-A,this.y=l*o+c*-A+a*-t-n*-i,this.z=a*o+c*-i+n*-A-l*-t,this}project(g){return this.applyMatrix4(g.matrixWorldInverse).applyMatrix4(g.projectionMatrix)}unproject(g){return this.applyMatrix4(g.projectionMatrixInverse).applyMatrix4(g.matrixWorld)}transformDirection(g){const I=this.x,C=this.y,e=this.z,t=g.elements;return this.x=t[0]*I+t[4]*C+t[8]*e,this.y=t[1]*I+t[5]*C+t[9]*e,this.z=t[2]*I+t[6]*C+t[10]*e,this.normalize()}divide(g){return this.x/=g.x,this.y/=g.y,this.z/=g.z,this}divideScalar(g){return this.multiplyScalar(1/g)}min(g){return this.x=Math.min(this.x,g.x),this.y=Math.min(this.y,g.y),this.z=Math.min(this.z,g.z),this}max(g){return this.x=Math.max(this.x,g.x),this.y=Math.max(this.y,g.y),this.z=Math.max(this.z,g.z),this}clamp(g,I){return this.x=Math.max(g.x,Math.min(I.x,this.x)),this.y=Math.max(g.y,Math.min(I.y,this.y)),this.z=Math.max(g.z,Math.min(I.z,this.z)),this}clampScalar(g,I){return this.x=Math.max(g,Math.min(I,this.x)),this.y=Math.max(g,Math.min(I,this.y)),this.z=Math.max(g,Math.min(I,this.z)),this}clampLength(g,I){const C=this.length();return this.divideScalar(C||1).multiplyScalar(Math.max(g,Math.min(I,C)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(g){return this.x*g.x+this.y*g.y+this.z*g.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(g){return this.normalize().multiplyScalar(g)}lerp(g,I){return this.x+=(g.x-this.x)*I,this.y+=(g.y-this.y)*I,this.z+=(g.z-this.z)*I,this}lerpVectors(g,I,C){return this.x=g.x+(I.x-g.x)*C,this.y=g.y+(I.y-g.y)*C,this.z=g.z+(I.z-g.z)*C,this}cross(g,I){return void 0!==I?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(g,I)):this.crossVectors(this,g)}crossVectors(g,I){const C=g.x,e=g.y,t=g.z,A=I.x,i=I.y,o=I.z;return this.x=e*o-t*i,this.y=t*A-C*o,this.z=C*i-e*A,this}projectOnVector(g){const I=g.lengthSq();if(0===I)return this.set(0,0,0);const C=g.dot(this)/I;return this.copy(g).multiplyScalar(C)}projectOnPlane(g){return ie.copy(this).projectOnVector(g),this.sub(ie)}reflect(g){return this.sub(ie.copy(g).multiplyScalar(2*this.dot(g)))}angleTo(g){const I=Math.sqrt(this.lengthSq()*g.lengthSq());if(0===I)return Math.PI/2;const C=this.dot(g)/I;return Math.acos(kC(C,-1,1))}distanceTo(g){return Math.sqrt(this.distanceToSquared(g))}distanceToSquared(g){const I=this.x-g.x,C=this.y-g.y,e=this.z-g.z;return I*I+C*C+e*e}manhattanDistanceTo(g){return Math.abs(this.x-g.x)+Math.abs(this.y-g.y)+Math.abs(this.z-g.z)}setFromSpherical(g){return this.setFromSphericalCoords(g.radius,g.phi,g.theta)}setFromSphericalCoords(g,I,C){const e=Math.sin(I)*g;return this.x=e*Math.sin(C),this.y=Math.cos(I)*g,this.z=e*Math.cos(C),this}setFromCylindrical(g){return this.setFromCylindricalCoords(g.radius,g.theta,g.y)}setFromCylindricalCoords(g,I,C){return this.x=g*Math.sin(I),this.y=C,this.z=g*Math.cos(I),this}setFromMatrixPosition(g){const I=g.elements;return this.x=I[12],this.y=I[13],this.z=I[14],this}setFromMatrixScale(g){const I=this.setFromMatrixColumn(g,0).length(),C=this.setFromMatrixColumn(g,1).length(),e=this.setFromMatrixColumn(g,2).length();return this.x=I,this.y=C,this.z=e,this}setFromMatrixColumn(g,I){return this.fromArray(g.elements,4*I)}setFromMatrix3Column(g,I){return this.fromArray(g.elements,3*I)}equals(g){return g.x===this.x&&g.y===this.y&&g.z===this.z}fromArray(g,I=0){return this.x=g[I],this.y=g[I+1],this.z=g[I+2],this}toArray(g=[],I=0){return g[I]=this.x,g[I+1]=this.y,g[I+2]=this.z,g}fromBufferAttribute(g,I,C){return void 0!==C&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=g.getX(I),this.y=g.getY(I),this.z=g.getZ(I),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}}Ae.prototype.isVector3=!0;const ie=new Ae,oe=new te;class ne{constructor(g=new Ae(1/0,1/0,1/0),I=new Ae(-1/0,-1/0,-1/0)){this.min=g,this.max=I}set(g,I){return this.min.copy(g),this.max.copy(I),this}setFromArray(g){let I=1/0,C=1/0,e=1/0,t=-1/0,A=-1/0,i=-1/0;for(let o=0,n=g.length;o<n;o+=3){const n=g[o],l=g[o+1],a=g[o+2];n<I&&(I=n),l<C&&(C=l),a<e&&(e=a),n>t&&(t=n),l>A&&(A=l),a>i&&(i=a)}return this.min.set(I,C,e),this.max.set(t,A,i),this}setFromBufferAttribute(g){let I=1/0,C=1/0,e=1/0,t=-1/0,A=-1/0,i=-1/0;for(let o=0,n=g.count;o<n;o++){const n=g.getX(o),l=g.getY(o),a=g.getZ(o);n<I&&(I=n),l<C&&(C=l),a<e&&(e=a),n>t&&(t=n),l>A&&(A=l),a>i&&(i=a)}return this.min.set(I,C,e),this.max.set(t,A,i),this}setFromPoints(g){this.makeEmpty();for(let I=0,C=g.length;I<C;I++)this.expandByPoint(g[I]);return this}setFromCenterAndSize(g,I){const C=ae.copy(I).multiplyScalar(.5);return this.min.copy(g).sub(C),this.max.copy(g).add(C),this}setFromObject(g){return this.makeEmpty(),this.expandByObject(g)}clone(){return(new this.constructor).copy(this)}copy(g){return this.min.copy(g.min),this.max.copy(g.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(g){return void 0===g&&(console.warn("THREE.Box3: .getCenter() target is now required"),g=new Ae),this.isEmpty()?g.set(0,0,0):g.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(g){return void 0===g&&(console.warn("THREE.Box3: .getSize() target is now required"),g=new Ae),this.isEmpty()?g.set(0,0,0):g.subVectors(this.max,this.min)}expandByPoint(g){return this.min.min(g),this.max.max(g),this}expandByVector(g){return this.min.sub(g),this.max.add(g),this}expandByScalar(g){return this.min.addScalar(-g),this.max.addScalar(g),this}expandByObject(g){g.updateWorldMatrix(!1,!1);const I=g.geometry;void 0!==I&&(null===I.boundingBox&&I.computeBoundingBox(),ce.copy(I.boundingBox),ce.applyMatrix4(g.matrixWorld),this.union(ce));const C=g.children;for(let g=0,I=C.length;g<I;g++)this.expandByObject(C[g]);return this}containsPoint(g){return!(g.x<this.min.x||g.x>this.max.x||g.y<this.min.y||g.y>this.max.y||g.z<this.min.z||g.z>this.max.z)}containsBox(g){return this.min.x<=g.min.x&&g.max.x<=this.max.x&&this.min.y<=g.min.y&&g.max.y<=this.max.y&&this.min.z<=g.min.z&&g.max.z<=this.max.z}getParameter(g,I){return void 0===I&&(console.warn("THREE.Box3: .getParameter() target is now required"),I=new Ae),I.set((g.x-this.min.x)/(this.max.x-this.min.x),(g.y-this.min.y)/(this.max.y-this.min.y),(g.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(g){return!(g.max.x<this.min.x||g.min.x>this.max.x||g.max.y<this.min.y||g.min.y>this.max.y||g.max.z<this.min.z||g.min.z>this.max.z)}intersectsSphere(g){return this.clampPoint(g.center,ae),ae.distanceToSquared(g.center)<=g.radius*g.radius}intersectsPlane(g){let I,C;return g.normal.x>0?(I=g.normal.x*this.min.x,C=g.normal.x*this.max.x):(I=g.normal.x*this.max.x,C=g.normal.x*this.min.x),g.normal.y>0?(I+=g.normal.y*this.min.y,C+=g.normal.y*this.max.y):(I+=g.normal.y*this.max.y,C+=g.normal.y*this.min.y),g.normal.z>0?(I+=g.normal.z*this.min.z,C+=g.normal.z*this.max.z):(I+=g.normal.z*this.max.z,C+=g.normal.z*this.min.z),I<=-g.constant&&C>=-g.constant}intersectsTriangle(g){if(this.isEmpty())return!1;this.getCenter(me),ue.subVectors(this.max,me),se.subVectors(g.a,me),de.subVectors(g.b,me),be.subVectors(g.c,me),re.subVectors(de,se),Ge.subVectors(be,de),he.subVectors(se,be);let I=[0,-re.z,re.y,0,-Ge.z,Ge.y,0,-he.z,he.y,re.z,0,-re.x,Ge.z,0,-Ge.x,he.z,0,-he.x,-re.y,re.x,0,-Ge.y,Ge.x,0,-he.y,he.x,0];return!!pe(I,se,de,be,ue)&&(I=[1,0,0,0,1,0,0,0,1],!!pe(I,se,de,be,ue)&&(Be.crossVectors(re,Ge),I=[Be.x,Be.y,Be.z],pe(I,se,de,be,ue)))}clampPoint(g,I){return void 0===I&&(console.warn("THREE.Box3: .clampPoint() target is now required"),I=new Ae),I.copy(g).clamp(this.min,this.max)}distanceToPoint(g){return ae.copy(g).clamp(this.min,this.max).sub(g).length()}getBoundingSphere(g){return void 0===g&&console.error("THREE.Box3: .getBoundingSphere() target is now required"),this.getCenter(g.center),g.radius=.5*this.getSize(ae).length(),g}intersect(g){return this.min.max(g.min),this.max.min(g.max),this.isEmpty()&&this.makeEmpty(),this}union(g){return this.min.min(g.min),this.max.max(g.max),this}applyMatrix4(g){return this.isEmpty()||(le[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(g),le[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(g),le[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(g),le[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(g),le[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(g),le[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(g),le[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(g),le[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(g),this.setFromPoints(le)),this}translate(g){return this.min.add(g),this.max.add(g),this}equals(g){return g.min.equals(this.min)&&g.max.equals(this.max)}}ne.prototype.isBox3=!0;const le=[new Ae,new Ae,new Ae,new Ae,new Ae,new Ae,new Ae,new Ae],ae=new Ae,ce=new ne,se=new Ae,de=new Ae,be=new Ae,re=new Ae,Ge=new Ae,he=new Ae,me=new Ae,ue=new Ae,Be=new Ae,Ze=new Ae;function pe(g,I,C,e,t){for(let A=0,i=g.length-3;A<=i;A+=3){Ze.fromArray(g,A);const i=t.x*Math.abs(Ze.x)+t.y*Math.abs(Ze.y)+t.z*Math.abs(Ze.z),o=I.dot(Ze),n=C.dot(Ze),l=e.dot(Ze);if(Math.max(-Math.max(o,n,l),Math.min(o,n,l))>i)return!1}return!0}const We=new ne,ye=new Ae,Ve=new Ae,ve=new Ae;class Ye{constructor(g=new Ae,I=-1){this.center=g,this.radius=I}set(g,I){return this.center.copy(g),this.radius=I,this}setFromPoints(g,I){const C=this.center;void 0!==I?C.copy(I):We.setFromPoints(g).getCenter(C);let e=0;for(let I=0,t=g.length;I<t;I++)e=Math.max(e,C.distanceToSquared(g[I]));return this.radius=Math.sqrt(e),this}copy(g){return this.center.copy(g.center),this.radius=g.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(g){return g.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(g){return g.distanceTo(this.center)-this.radius}intersectsSphere(g){const I=this.radius+g.radius;return g.center.distanceToSquared(this.center)<=I*I}intersectsBox(g){return g.intersectsSphere(this)}intersectsPlane(g){return Math.abs(g.distanceToPoint(this.center))<=this.radius}clampPoint(g,I){const C=this.center.distanceToSquared(g);return void 0===I&&(console.warn("THREE.Sphere: .clampPoint() target is now required"),I=new Ae),I.copy(g),C>this.radius*this.radius&&(I.sub(this.center).normalize(),I.multiplyScalar(this.radius).add(this.center)),I}getBoundingBox(g){return void 0===g&&(console.warn("THREE.Sphere: .getBoundingBox() target is now required"),g=new ne),this.isEmpty()?(g.makeEmpty(),g):(g.set(this.center,this.center),g.expandByScalar(this.radius),g)}applyMatrix4(g){return this.center.applyMatrix4(g),this.radius=this.radius*g.getMaxScaleOnAxis(),this}translate(g){return this.center.add(g),this}expandByPoint(g){ve.subVectors(g,this.center);const I=ve.lengthSq();if(I>this.radius*this.radius){const g=Math.sqrt(I),C=.5*(g-this.radius);this.center.add(ve.multiplyScalar(C/g)),this.radius+=C}return this}union(g){return Ve.subVectors(g.center,this.center).normalize().multiplyScalar(g.radius),this.expandByPoint(ye.copy(g.center).add(Ve)),this.expandByPoint(ye.copy(g.center).sub(Ve)),this}equals(g){return g.center.equals(this.center)&&g.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const Xe=new Ae,Re=new Ae,He=new Ae,we=new Ae,Ke=new Ae,Se=new Ae,Ne=new Ae;class Fe{constructor(g=new Ae,I=new Ae(0,0,-1)){this.origin=g,this.direction=I}set(g,I){return this.origin.copy(g),this.direction.copy(I),this}copy(g){return this.origin.copy(g.origin),this.direction.copy(g.direction),this}at(g,I){return void 0===I&&(console.warn("THREE.Ray: .at() target is now required"),I=new Ae),I.copy(this.direction).multiplyScalar(g).add(this.origin)}lookAt(g){return this.direction.copy(g).sub(this.origin).normalize(),this}recast(g){return this.origin.copy(this.at(g,Xe)),this}closestPointToPoint(g,I){void 0===I&&(console.warn("THREE.Ray: .closestPointToPoint() target is now required"),I=new Ae),I.subVectors(g,this.origin);const C=I.dot(this.direction);return C<0?I.copy(this.origin):I.copy(this.direction).multiplyScalar(C).add(this.origin)}distanceToPoint(g){return Math.sqrt(this.distanceSqToPoint(g))}distanceSqToPoint(g){const I=Xe.subVectors(g,this.origin).dot(this.direction);return I<0?this.origin.distanceToSquared(g):(Xe.copy(this.direction).multiplyScalar(I).add(this.origin),Xe.distanceToSquared(g))}distanceSqToSegment(g,I,C,e){Re.copy(g).add(I).multiplyScalar(.5),He.copy(I).sub(g).normalize(),we.copy(this.origin).sub(Re);const t=.5*g.distanceTo(I),A=-this.direction.dot(He),i=we.dot(this.direction),o=-we.dot(He),n=we.lengthSq(),l=Math.abs(1-A*A);let a,c,s,d;if(l>0)if(a=A*o-i,c=A*i-o,d=t*l,a>=0)if(c>=-d)if(c<=d){const g=1/l;a*=g,c*=g,s=a*(a+A*c+2*i)+c*(A*a+c+2*o)+n}else c=t,a=Math.max(0,-(A*c+i)),s=-a*a+c*(c+2*o)+n;else c=-t,a=Math.max(0,-(A*c+i)),s=-a*a+c*(c+2*o)+n;else c<=-d?(a=Math.max(0,-(-A*t+i)),c=a>0?-t:Math.min(Math.max(-t,-o),t),s=-a*a+c*(c+2*o)+n):c<=d?(a=0,c=Math.min(Math.max(-t,-o),t),s=c*(c+2*o)+n):(a=Math.max(0,-(A*t+i)),c=a>0?t:Math.min(Math.max(-t,-o),t),s=-a*a+c*(c+2*o)+n);else c=A>0?-t:t,a=Math.max(0,-(A*c+i)),s=-a*a+c*(c+2*o)+n;return C&&C.copy(this.direction).multiplyScalar(a).add(this.origin),e&&e.copy(He).multiplyScalar(c).add(Re),s}intersectSphere(g,I){Xe.subVectors(g.center,this.origin);const C=Xe.dot(this.direction),e=Xe.dot(Xe)-C*C,t=g.radius*g.radius;if(e>t)return null;const A=Math.sqrt(t-e),i=C-A,o=C+A;return i<0&&o<0?null:i<0?this.at(o,I):this.at(i,I)}intersectsSphere(g){return this.distanceSqToPoint(g.center)<=g.radius*g.radius}distanceToPlane(g){const I=g.normal.dot(this.direction);if(0===I)return 0===g.distanceToPoint(this.origin)?0:null;const C=-(this.origin.dot(g.normal)+g.constant)/I;return C>=0?C:null}intersectPlane(g,I){const C=this.distanceToPlane(g);return null===C?null:this.at(C,I)}intersectsPlane(g){const I=g.distanceToPoint(this.origin);return 0===I||g.normal.dot(this.direction)*I<0}intersectBox(g,I){let C,e,t,A,i,o;const n=1/this.direction.x,l=1/this.direction.y,a=1/this.direction.z,c=this.origin;return n>=0?(C=(g.min.x-c.x)*n,e=(g.max.x-c.x)*n):(C=(g.max.x-c.x)*n,e=(g.min.x-c.x)*n),l>=0?(t=(g.min.y-c.y)*l,A=(g.max.y-c.y)*l):(t=(g.max.y-c.y)*l,A=(g.min.y-c.y)*l),C>A||t>e?null:((t>C||C!=C)&&(C=t),(A<e||e!=e)&&(e=A),a>=0?(i=(g.min.z-c.z)*a,o=(g.max.z-c.z)*a):(i=(g.max.z-c.z)*a,o=(g.min.z-c.z)*a),C>o||i>e?null:((i>C||C!=C)&&(C=i),(o<e||e!=e)&&(e=o),e<0?null:this.at(C>=0?C:e,I)))}intersectsBox(g){return null!==this.intersectBox(g,Xe)}intersectTriangle(g,I,C,e,t){Ke.subVectors(I,g),Se.subVectors(C,g),Ne.crossVectors(Ke,Se);let A,i=this.direction.dot(Ne);if(i>0){if(e)return null;A=1}else{if(!(i<0))return null;A=-1,i=-i}we.subVectors(this.origin,g);const o=A*this.direction.dot(Se.crossVectors(we,Se));if(o<0)return null;const n=A*this.direction.dot(Ke.cross(we));if(n<0)return null;if(o+n>i)return null;const l=-A*we.dot(Ne);return l<0?null:this.at(l/i,t)}applyMatrix4(g){return this.origin.applyMatrix4(g),this.direction.transformDirection(g),this}equals(g){return g.origin.equals(this.origin)&&g.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class ze{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}set(g,I,C,e,t,A,i,o,n,l,a,c,s,d,b,r){const G=this.elements;return G[0]=g,G[4]=I,G[8]=C,G[12]=e,G[1]=t,G[5]=A,G[9]=i,G[13]=o,G[2]=n,G[6]=l,G[10]=a,G[14]=c,G[3]=s,G[7]=d,G[11]=b,G[15]=r,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new ze).fromArray(this.elements)}copy(g){const I=this.elements,C=g.elements;return I[0]=C[0],I[1]=C[1],I[2]=C[2],I[3]=C[3],I[4]=C[4],I[5]=C[5],I[6]=C[6],I[7]=C[7],I[8]=C[8],I[9]=C[9],I[10]=C[10],I[11]=C[11],I[12]=C[12],I[13]=C[13],I[14]=C[14],I[15]=C[15],this}copyPosition(g){const I=this.elements,C=g.elements;return I[12]=C[12],I[13]=C[13],I[14]=C[14],this}setFromMatrix3(g){const I=g.elements;return this.set(I[0],I[3],I[6],0,I[1],I[4],I[7],0,I[2],I[5],I[8],0,0,0,0,1),this}extractBasis(g,I,C){return g.setFromMatrixColumn(this,0),I.setFromMatrixColumn(this,1),C.setFromMatrixColumn(this,2),this}makeBasis(g,I,C){return this.set(g.x,I.x,C.x,0,g.y,I.y,C.y,0,g.z,I.z,C.z,0,0,0,0,1),this}extractRotation(g){const I=this.elements,C=g.elements,e=1/fe.setFromMatrixColumn(g,0).length(),t=1/fe.setFromMatrixColumn(g,1).length(),A=1/fe.setFromMatrixColumn(g,2).length();return I[0]=C[0]*e,I[1]=C[1]*e,I[2]=C[2]*e,I[3]=0,I[4]=C[4]*t,I[5]=C[5]*t,I[6]=C[6]*t,I[7]=0,I[8]=C[8]*A,I[9]=C[9]*A,I[10]=C[10]*A,I[11]=0,I[12]=0,I[13]=0,I[14]=0,I[15]=1,this}makeRotationFromEuler(g){g&&g.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");const I=this.elements,C=g.x,e=g.y,t=g.z,A=Math.cos(C),i=Math.sin(C),o=Math.cos(e),n=Math.sin(e),l=Math.cos(t),a=Math.sin(t);if("XYZ"===g.order){const g=A*l,C=A*a,e=i*l,t=i*a;I[0]=o*l,I[4]=-o*a,I[8]=n,I[1]=C+e*n,I[5]=g-t*n,I[9]=-i*o,I[2]=t-g*n,I[6]=e+C*n,I[10]=A*o}else if("YXZ"===g.order){const g=o*l,C=o*a,e=n*l,t=n*a;I[0]=g+t*i,I[4]=e*i-C,I[8]=A*n,I[1]=A*a,I[5]=A*l,I[9]=-i,I[2]=C*i-e,I[6]=t+g*i,I[10]=A*o}else if("ZXY"===g.order){const g=o*l,C=o*a,e=n*l,t=n*a;I[0]=g-t*i,I[4]=-A*a,I[8]=e+C*i,I[1]=C+e*i,I[5]=A*l,I[9]=t-g*i,I[2]=-A*n,I[6]=i,I[10]=A*o}else if("ZYX"===g.order){const g=A*l,C=A*a,e=i*l,t=i*a;I[0]=o*l,I[4]=e*n-C,I[8]=g*n+t,I[1]=o*a,I[5]=t*n+g,I[9]=C*n-e,I[2]=-n,I[6]=i*o,I[10]=A*o}else if("YZX"===g.order){const g=A*o,C=A*n,e=i*o,t=i*n;I[0]=o*l,I[4]=t-g*a,I[8]=e*a+C,I[1]=a,I[5]=A*l,I[9]=-i*l,I[2]=-n*l,I[6]=C*a+e,I[10]=g-t*a}else if("XZY"===g.order){const g=A*o,C=A*n,e=i*o,t=i*n;I[0]=o*l,I[4]=-a,I[8]=n*l,I[1]=g*a+t,I[5]=A*l,I[9]=C*a-e,I[2]=e*a-C,I[6]=i*l,I[10]=t*a+g}return I[3]=0,I[7]=0,I[11]=0,I[12]=0,I[13]=0,I[14]=0,I[15]=1,this}makeRotationFromQuaternion(g){return this.compose(Je,g,Le)}lookAt(g,I,C){const e=this.elements;return Qe.subVectors(g,I),0===Qe.lengthSq()&&(Qe.z=1),Qe.normalize(),ke.crossVectors(C,Qe),0===ke.lengthSq()&&(1===Math.abs(C.z)?Qe.x+=1e-4:Qe.z+=1e-4,Qe.normalize(),ke.crossVectors(C,Qe)),ke.normalize(),Me.crossVectors(Qe,ke),e[0]=ke.x,e[4]=Me.x,e[8]=Qe.x,e[1]=ke.y,e[5]=Me.y,e[9]=Qe.y,e[2]=ke.z,e[6]=Me.z,e[10]=Qe.z,this}multiply(g,I){return void 0!==I?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(g,I)):this.multiplyMatrices(this,g)}premultiply(g){return this.multiplyMatrices(g,this)}multiplyMatrices(g,I){const C=g.elements,e=I.elements,t=this.elements,A=C[0],i=C[4],o=C[8],n=C[12],l=C[1],a=C[5],c=C[9],s=C[13],d=C[2],b=C[6],r=C[10],G=C[14],h=C[3],m=C[7],u=C[11],B=C[15],Z=e[0],p=e[4],W=e[8],y=e[12],V=e[1],v=e[5],Y=e[9],X=e[13],R=e[2],H=e[6],w=e[10],K=e[14],S=e[3],N=e[7],F=e[11],z=e[15];return t[0]=A*Z+i*V+o*R+n*S,t[4]=A*p+i*v+o*H+n*N,t[8]=A*W+i*Y+o*w+n*F,t[12]=A*y+i*X+o*K+n*z,t[1]=l*Z+a*V+c*R+s*S,t[5]=l*p+a*v+c*H+s*N,t[9]=l*W+a*Y+c*w+s*F,t[13]=l*y+a*X+c*K+s*z,t[2]=d*Z+b*V+r*R+G*S,t[6]=d*p+b*v+r*H+G*N,t[10]=d*W+b*Y+r*w+G*F,t[14]=d*y+b*X+r*K+G*z,t[3]=h*Z+m*V+u*R+B*S,t[7]=h*p+m*v+u*H+B*N,t[11]=h*W+m*Y+u*w+B*F,t[15]=h*y+m*X+u*K+B*z,this}multiplyScalar(g){const I=this.elements;return I[0]*=g,I[4]*=g,I[8]*=g,I[12]*=g,I[1]*=g,I[5]*=g,I[9]*=g,I[13]*=g,I[2]*=g,I[6]*=g,I[10]*=g,I[14]*=g,I[3]*=g,I[7]*=g,I[11]*=g,I[15]*=g,this}determinant(){const g=this.elements,I=g[0],C=g[4],e=g[8],t=g[12],A=g[1],i=g[5],o=g[9],n=g[13],l=g[2],a=g[6],c=g[10],s=g[14];return g[3]*(+t*o*a-e*n*a-t*i*c+C*n*c+e*i*s-C*o*s)+g[7]*(+I*o*s-I*n*c+t*A*c-e*A*s+e*n*l-t*o*l)+g[11]*(+I*n*a-I*i*s-t*A*a+C*A*s+t*i*l-C*n*l)+g[15]*(-e*i*l-I*o*a+I*i*c+e*A*a-C*A*c+C*o*l)}transpose(){const g=this.elements;let I;return I=g[1],g[1]=g[4],g[4]=I,I=g[2],g[2]=g[8],g[8]=I,I=g[6],g[6]=g[9],g[9]=I,I=g[3],g[3]=g[12],g[12]=I,I=g[7],g[7]=g[13],g[13]=I,I=g[11],g[11]=g[14],g[14]=I,this}setPosition(g,I,C){const e=this.elements;return g.isVector3?(e[12]=g.x,e[13]=g.y,e[14]=g.z):(e[12]=g,e[13]=I,e[14]=C),this}invert(){const g=this.elements,I=g[0],C=g[1],e=g[2],t=g[3],A=g[4],i=g[5],o=g[6],n=g[7],l=g[8],a=g[9],c=g[10],s=g[11],d=g[12],b=g[13],r=g[14],G=g[15],h=a*r*n-b*c*n+b*o*s-i*r*s-a*o*G+i*c*G,m=d*c*n-l*r*n-d*o*s+A*r*s+l*o*G-A*c*G,u=l*b*n-d*a*n+d*i*s-A*b*s-l*i*G+A*a*G,B=d*a*o-l*b*o-d*i*c+A*b*c+l*i*r-A*a*r,Z=I*h+C*m+e*u+t*B;if(0===Z)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const p=1/Z;return g[0]=h*p,g[1]=(b*c*t-a*r*t-b*e*s+C*r*s+a*e*G-C*c*G)*p,g[2]=(i*r*t-b*o*t+b*e*n-C*r*n-i*e*G+C*o*G)*p,g[3]=(a*o*t-i*c*t-a*e*n+C*c*n+i*e*s-C*o*s)*p,g[4]=m*p,g[5]=(l*r*t-d*c*t+d*e*s-I*r*s-l*e*G+I*c*G)*p,g[6]=(d*o*t-A*r*t-d*e*n+I*r*n+A*e*G-I*o*G)*p,g[7]=(A*c*t-l*o*t+l*e*n-I*c*n-A*e*s+I*o*s)*p,g[8]=u*p,g[9]=(d*a*t-l*b*t-d*C*s+I*b*s+l*C*G-I*a*G)*p,g[10]=(A*b*t-d*i*t+d*C*n-I*b*n-A*C*G+I*i*G)*p,g[11]=(l*i*t-A*a*t-l*C*n+I*a*n+A*C*s-I*i*s)*p,g[12]=B*p,g[13]=(l*b*e-d*a*e+d*C*c-I*b*c-l*C*r+I*a*r)*p,g[14]=(d*i*e-A*b*e-d*C*o+I*b*o+A*C*r-I*i*r)*p,g[15]=(A*a*e-l*i*e+l*C*o-I*a*o-A*C*c+I*i*c)*p,this}scale(g){const I=this.elements,C=g.x,e=g.y,t=g.z;return I[0]*=C,I[4]*=e,I[8]*=t,I[1]*=C,I[5]*=e,I[9]*=t,I[2]*=C,I[6]*=e,I[10]*=t,I[3]*=C,I[7]*=e,I[11]*=t,this}getMaxScaleOnAxis(){const g=this.elements,I=g[0]*g[0]+g[1]*g[1]+g[2]*g[2],C=g[4]*g[4]+g[5]*g[5]+g[6]*g[6],e=g[8]*g[8]+g[9]*g[9]+g[10]*g[10];return Math.sqrt(Math.max(I,C,e))}makeTranslation(g,I,C){return this.set(1,0,0,g,0,1,0,I,0,0,1,C,0,0,0,1),this}makeRotationX(g){const I=Math.cos(g),C=Math.sin(g);return this.set(1,0,0,0,0,I,-C,0,0,C,I,0,0,0,0,1),this}makeRotationY(g){const I=Math.cos(g),C=Math.sin(g);return this.set(I,0,C,0,0,1,0,0,-C,0,I,0,0,0,0,1),this}makeRotationZ(g){const I=Math.cos(g),C=Math.sin(g);return this.set(I,-C,0,0,C,I,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(g,I){const C=Math.cos(I),e=Math.sin(I),t=1-C,A=g.x,i=g.y,o=g.z,n=t*A,l=t*i;return this.set(n*A+C,n*i-e*o,n*o+e*i,0,n*i+e*o,l*i+C,l*o-e*A,0,n*o-e*i,l*o+e*A,t*o*o+C,0,0,0,0,1),this}makeScale(g,I,C){return this.set(g,0,0,0,0,I,0,0,0,0,C,0,0,0,0,1),this}makeShear(g,I,C){return this.set(1,I,C,0,g,1,C,0,g,I,1,0,0,0,0,1),this}compose(g,I,C){const e=this.elements,t=I._x,A=I._y,i=I._z,o=I._w,n=t+t,l=A+A,a=i+i,c=t*n,s=t*l,d=t*a,b=A*l,r=A*a,G=i*a,h=o*n,m=o*l,u=o*a,B=C.x,Z=C.y,p=C.z;return e[0]=(1-(b+G))*B,e[1]=(s+u)*B,e[2]=(d-m)*B,e[3]=0,e[4]=(s-u)*Z,e[5]=(1-(c+G))*Z,e[6]=(r+h)*Z,e[7]=0,e[8]=(d+m)*p,e[9]=(r-h)*p,e[10]=(1-(c+b))*p,e[11]=0,e[12]=g.x,e[13]=g.y,e[14]=g.z,e[15]=1,this}decompose(g,I,C){const e=this.elements;let t=fe.set(e[0],e[1],e[2]).length();const A=fe.set(e[4],e[5],e[6]).length(),i=fe.set(e[8],e[9],e[10]).length();this.determinant()<0&&(t=-t),g.x=e[12],g.y=e[13],g.z=e[14],xe.copy(this);const o=1/t,n=1/A,l=1/i;return xe.elements[0]*=o,xe.elements[1]*=o,xe.elements[2]*=o,xe.elements[4]*=n,xe.elements[5]*=n,xe.elements[6]*=n,xe.elements[8]*=l,xe.elements[9]*=l,xe.elements[10]*=l,I.setFromRotationMatrix(xe),C.x=t,C.y=A,C.z=i,this}makePerspective(g,I,C,e,t,A){void 0===A&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");const i=this.elements,o=2*t/(I-g),n=2*t/(C-e),l=(I+g)/(I-g),a=(C+e)/(C-e),c=-(A+t)/(A-t),s=-2*A*t/(A-t);return i[0]=o,i[4]=0,i[8]=l,i[12]=0,i[1]=0,i[5]=n,i[9]=a,i[13]=0,i[2]=0,i[6]=0,i[10]=c,i[14]=s,i[3]=0,i[7]=0,i[11]=-1,i[15]=0,this}makeOrthographic(g,I,C,e,t,A){const i=this.elements,o=1/(I-g),n=1/(C-e),l=1/(A-t),a=(I+g)*o,c=(C+e)*n,s=(A+t)*l;return i[0]=2*o,i[4]=0,i[8]=0,i[12]=-a,i[1]=0,i[5]=2*n,i[9]=0,i[13]=-c,i[2]=0,i[6]=0,i[10]=-2*l,i[14]=-s,i[3]=0,i[7]=0,i[11]=0,i[15]=1,this}equals(g){const I=this.elements,C=g.elements;for(let g=0;g<16;g++)if(I[g]!==C[g])return!1;return!0}fromArray(g,I=0){for(let C=0;C<16;C++)this.elements[C]=g[C+I];return this}toArray(g=[],I=0){const C=this.elements;return g[I]=C[0],g[I+1]=C[1],g[I+2]=C[2],g[I+3]=C[3],g[I+4]=C[4],g[I+5]=C[5],g[I+6]=C[6],g[I+7]=C[7],g[I+8]=C[8],g[I+9]=C[9],g[I+10]=C[10],g[I+11]=C[11],g[I+12]=C[12],g[I+13]=C[13],g[I+14]=C[14],g[I+15]=C[15],g}}ze.prototype.isMatrix4=!0;const fe=new Ae,xe=new ze,Je=new Ae(0,0,0),Le=new Ae(1,1,1),ke=new Ae,Me=new Ae,Qe=new Ae,Ue=new ze,Te=new te;class Ee{constructor(g=0,I=0,C=0,e=Ee.DefaultOrder){this._x=g,this._y=I,this._z=C,this._order=e}get x(){return this._x}set x(g){this._x=g,this._onChangeCallback()}get y(){return this._y}set y(g){this._y=g,this._onChangeCallback()}get z(){return this._z}set z(g){this._z=g,this._onChangeCallback()}get order(){return this._order}set order(g){this._order=g,this._onChangeCallback()}set(g,I,C,e){return this._x=g,this._y=I,this._z=C,this._order=e||this._order,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(g){return this._x=g._x,this._y=g._y,this._z=g._z,this._order=g._order,this._onChangeCallback(),this}setFromRotationMatrix(g,I,C){const e=g.elements,t=e[0],A=e[4],i=e[8],o=e[1],n=e[5],l=e[9],a=e[2],c=e[6],s=e[10];switch(I=I||this._order){case"XYZ":this._y=Math.asin(kC(i,-1,1)),Math.abs(i)<.9999999?(this._x=Math.atan2(-l,s),this._z=Math.atan2(-A,t)):(this._x=Math.atan2(c,n),this._z=0);break;case"YXZ":this._x=Math.asin(-kC(l,-1,1)),Math.abs(l)<.9999999?(this._y=Math.atan2(i,s),this._z=Math.atan2(o,n)):(this._y=Math.atan2(-a,t),this._z=0);break;case"ZXY":this._x=Math.asin(kC(c,-1,1)),Math.abs(c)<.9999999?(this._y=Math.atan2(-a,s),this._z=Math.atan2(-A,n)):(this._y=0,this._z=Math.atan2(o,t));break;case"ZYX":this._y=Math.asin(-kC(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(c,s),this._z=Math.atan2(o,t)):(this._x=0,this._z=Math.atan2(-A,n));break;case"YZX":this._z=Math.asin(kC(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-l,n),this._y=Math.atan2(-a,t)):(this._x=0,this._y=Math.atan2(i,s));break;case"XZY":this._z=Math.asin(-kC(A,-1,1)),Math.abs(A)<.9999999?(this._x=Math.atan2(c,n),this._y=Math.atan2(i,t)):(this._x=Math.atan2(-l,s),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+I)}return this._order=I,!1!==C&&this._onChangeCallback(),this}setFromQuaternion(g,I,C){return Ue.makeRotationFromQuaternion(g),this.setFromRotationMatrix(Ue,I,C)}setFromVector3(g,I){return this.set(g.x,g.y,g.z,I||this._order)}reorder(g){return Te.setFromEuler(this),this.setFromQuaternion(Te,g)}equals(g){return g._x===this._x&&g._y===this._y&&g._z===this._z&&g._order===this._order}fromArray(g){return this._x=g[0],this._y=g[1],this._z=g[2],void 0!==g[3]&&(this._order=g[3]),this._onChangeCallback(),this}toArray(g=[],I=0){return g[I]=this._x,g[I+1]=this._y,g[I+2]=this._z,g[I+3]=this._order,g}toVector3(g){return g?g.set(this._x,this._y,this._z):new Ae(this._x,this._y,this._z)}_onChange(g){return this._onChangeCallback=g,this}_onChangeCallback(){}}Ee.prototype.isEuler=!0,Ee.DefaultOrder="XYZ",Ee.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class je{constructor(){this.mask=1}set(g){this.mask=1<<g|0}enable(g){this.mask|=1<<g|0}enableAll(){this.mask=-1}toggle(g){this.mask^=1<<g|0}disable(g){this.mask&=~(1<<g|0)}disableAll(){this.mask=0}test(g){return 0!=(this.mask&g.mask)}}let De=0;const Oe=new Ae,Pe=new te,_e=new ze,qe=new Ae,$e=new Ae,gt=new Ae,It=new te,Ct=new Ae(1,0,0),et=new Ae(0,1,0),tt=new Ae(0,0,1),At={type:"added"},it={type:"removed"};class ot extends FC{constructor(){super(),Object.defineProperty(this,"id",{value:De++}),this.uuid=LC(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=ot.DefaultUp.clone();const g=new Ae,I=new Ee,C=new te,e=new Ae(1,1,1);I._onChange((function(){C.setFromEuler(I,!1)})),C._onChange((function(){I.setFromQuaternion(C,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:g},rotation:{configurable:!0,enumerable:!0,value:I},quaternion:{configurable:!0,enumerable:!0,value:C},scale:{configurable:!0,enumerable:!0,value:e},modelViewMatrix:{value:new ze},normalMatrix:{value:new OC}}),this.matrix=new ze,this.matrixWorld=new ze,this.matrixAutoUpdate=ot.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new je,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(g){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(g),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(g){return this.quaternion.premultiply(g),this}setRotationFromAxisAngle(g,I){this.quaternion.setFromAxisAngle(g,I)}setRotationFromEuler(g){this.quaternion.setFromEuler(g,!0)}setRotationFromMatrix(g){this.quaternion.setFromRotationMatrix(g)}setRotationFromQuaternion(g){this.quaternion.copy(g)}rotateOnAxis(g,I){return Pe.setFromAxisAngle(g,I),this.quaternion.multiply(Pe),this}rotateOnWorldAxis(g,I){return Pe.setFromAxisAngle(g,I),this.quaternion.premultiply(Pe),this}rotateX(g){return this.rotateOnAxis(Ct,g)}rotateY(g){return this.rotateOnAxis(et,g)}rotateZ(g){return this.rotateOnAxis(tt,g)}translateOnAxis(g,I){return Oe.copy(g).applyQuaternion(this.quaternion),this.position.add(Oe.multiplyScalar(I)),this}translateX(g){return this.translateOnAxis(Ct,g)}translateY(g){return this.translateOnAxis(et,g)}translateZ(g){return this.translateOnAxis(tt,g)}localToWorld(g){return g.applyMatrix4(this.matrixWorld)}worldToLocal(g){return g.applyMatrix4(_e.copy(this.matrixWorld).invert())}lookAt(g,I,C){g.isVector3?qe.copy(g):qe.set(g,I,C);const e=this.parent;this.updateWorldMatrix(!0,!1),$e.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?_e.lookAt($e,qe,this.up):_e.lookAt(qe,$e,this.up),this.quaternion.setFromRotationMatrix(_e),e&&(_e.extractRotation(e.matrixWorld),Pe.setFromRotationMatrix(_e),this.quaternion.premultiply(Pe.invert()))}add(g){if(arguments.length>1){for(let g=0;g<arguments.length;g++)this.add(arguments[g]);return this}return g===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",g),this):(g&&g.isObject3D?(null!==g.parent&&g.parent.remove(g),g.parent=this,this.children.push(g),g.dispatchEvent(At)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",g),this)}remove(g){if(arguments.length>1){for(let g=0;g<arguments.length;g++)this.remove(arguments[g]);return this}const I=this.children.indexOf(g);return-1!==I&&(g.parent=null,this.children.splice(I,1),g.dispatchEvent(it)),this}clear(){for(let g=0;g<this.children.length;g++){const I=this.children[g];I.parent=null,I.dispatchEvent(it)}return this.children.length=0,this}attach(g){return this.updateWorldMatrix(!0,!1),_e.copy(this.matrixWorld).invert(),null!==g.parent&&(g.parent.updateWorldMatrix(!0,!1),_e.multiply(g.parent.matrixWorld)),g.applyMatrix4(_e),this.add(g),g.updateWorldMatrix(!1,!0),this}getObjectById(g){return this.getObjectByProperty("id",g)}getObjectByName(g){return this.getObjectByProperty("name",g)}getObjectByProperty(g,I){if(this[g]===I)return this;for(let C=0,e=this.children.length;C<e;C++){const e=this.children[C].getObjectByProperty(g,I);if(void 0!==e)return e}}getWorldPosition(g){return void 0===g&&(console.warn("THREE.Object3D: .getWorldPosition() target is now required"),g=new Ae),this.updateWorldMatrix(!0,!1),g.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(g){return void 0===g&&(console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"),g=new te),this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose($e,g,gt),g}getWorldScale(g){return void 0===g&&(console.warn("THREE.Object3D: .getWorldScale() target is now required"),g=new Ae),this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose($e,It,g),g}getWorldDirection(g){void 0===g&&(console.warn("THREE.Object3D: .getWorldDirection() target is now required"),g=new Ae),this.updateWorldMatrix(!0,!1);const I=this.matrixWorld.elements;return g.set(I[8],I[9],I[10]).normalize()}raycast(){}traverse(g){g(this);const I=this.children;for(let C=0,e=I.length;C<e;C++)I[C].traverse(g)}traverseVisible(g){if(!1===this.visible)return;g(this);const I=this.children;for(let C=0,e=I.length;C<e;C++)I[C].traverseVisible(g)}traverseAncestors(g){const I=this.parent;null!==I&&(g(I),I.traverseAncestors(g))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(g){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||g)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,g=!0);const I=this.children;for(let C=0,e=I.length;C<e;C++)I[C].updateMatrixWorld(g)}updateWorldMatrix(g,I){const C=this.parent;if(!0===g&&null!==C&&C.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===I){const g=this.children;for(let I=0,C=g.length;I<C;I++)g[I].updateWorldMatrix(!1,!0)}}toJSON(g){const I=void 0===g||"string"==typeof g,C={};I&&(g={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{}},C.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const e={};function t(I,C){return void 0===I[C.uuid]&&(I[C.uuid]=C.toJSON(g)),C.uuid}if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),!0===this.castShadow&&(e.castShadow=!0),!0===this.receiveShadow&&(e.receiveShadow=!0),!1===this.visible&&(e.visible=!1),!1===this.frustumCulled&&(e.frustumCulled=!1),0!==this.renderOrder&&(e.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(e.userData=this.userData),e.layers=this.layers.mask,e.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(e.matrixAutoUpdate=!1),this.isInstancedMesh&&(e.type="InstancedMesh",e.count=this.count,e.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(e.instanceColor=this.instanceColor.toJSON())),this.isMesh||this.isLine||this.isPoints){e.geometry=t(g.geometries,this.geometry);const I=this.geometry.parameters;if(void 0!==I&&void 0!==I.shapes){const C=I.shapes;if(Array.isArray(C))for(let I=0,e=C.length;I<e;I++){const e=C[I];t(g.shapes,e)}else t(g.shapes,C)}}if(this.isSkinnedMesh&&(e.bindMode=this.bindMode,e.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(t(g.skeletons,this.skeleton),e.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const I=[];for(let C=0,e=this.material.length;C<e;C++)I.push(t(g.materials,this.material[C]));e.material=I}else e.material=t(g.materials,this.material);if(this.children.length>0){e.children=[];for(let I=0;I<this.children.length;I++)e.children.push(this.children[I].toJSON(g).object)}if(this.animations.length>0){e.animations=[];for(let I=0;I<this.animations.length;I++){const C=this.animations[I];e.animations.push(t(g.animations,C))}}if(I){const I=A(g.geometries),e=A(g.materials),t=A(g.textures),i=A(g.images),o=A(g.shapes),n=A(g.skeletons),l=A(g.animations);I.length>0&&(C.geometries=I),e.length>0&&(C.materials=e),t.length>0&&(C.textures=t),i.length>0&&(C.images=i),o.length>0&&(C.shapes=o),n.length>0&&(C.skeletons=n),l.length>0&&(C.animations=l)}return C.object=e,C;function A(g){const I=[];for(const C in g){const e=g[C];delete e.metadata,I.push(e)}return I}}clone(g){return(new this.constructor).copy(this,g)}copy(g,I=!0){if(this.name=g.name,this.up.copy(g.up),this.position.copy(g.position),this.rotation.order=g.rotation.order,this.quaternion.copy(g.quaternion),this.scale.copy(g.scale),this.matrix.copy(g.matrix),this.matrixWorld.copy(g.matrixWorld),this.matrixAutoUpdate=g.matrixAutoUpdate,this.matrixWorldNeedsUpdate=g.matrixWorldNeedsUpdate,this.layers.mask=g.layers.mask,this.visible=g.visible,this.castShadow=g.castShadow,this.receiveShadow=g.receiveShadow,this.frustumCulled=g.frustumCulled,this.renderOrder=g.renderOrder,this.userData=JSON.parse(JSON.stringify(g.userData)),!0===I)for(let I=0;I<g.children.length;I++){const C=g.children[I];this.add(C.clone())}return this}}ot.DefaultUp=new Ae(0,1,0),ot.DefaultMatrixAutoUpdate=!0,ot.prototype.isObject3D=!0;const nt=new Ae,lt=new Ae,at=new OC;class ct{constructor(g=new Ae(1,0,0),I=0){this.normal=g,this.constant=I}set(g,I){return this.normal.copy(g),this.constant=I,this}setComponents(g,I,C,e){return this.normal.set(g,I,C),this.constant=e,this}setFromNormalAndCoplanarPoint(g,I){return this.normal.copy(g),this.constant=-I.dot(this.normal),this}setFromCoplanarPoints(g,I,C){const e=nt.subVectors(C,I).cross(lt.subVectors(g,I)).normalize();return this.setFromNormalAndCoplanarPoint(e,g),this}copy(g){return this.normal.copy(g.normal),this.constant=g.constant,this}normalize(){const g=1/this.normal.length();return this.normal.multiplyScalar(g),this.constant*=g,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(g){return this.normal.dot(g)+this.constant}distanceToSphere(g){return this.distanceToPoint(g.center)-g.radius}projectPoint(g,I){return void 0===I&&(console.warn("THREE.Plane: .projectPoint() target is now required"),I=new Ae),I.copy(this.normal).multiplyScalar(-this.distanceToPoint(g)).add(g)}intersectLine(g,I){void 0===I&&(console.warn("THREE.Plane: .intersectLine() target is now required"),I=new Ae);const C=g.delta(nt),e=this.normal.dot(C);if(0===e)return 0===this.distanceToPoint(g.start)?I.copy(g.start):null;const t=-(g.start.dot(this.normal)+this.constant)/e;return t<0||t>1?null:I.copy(C).multiplyScalar(t).add(g.start)}intersectsLine(g){const I=this.distanceToPoint(g.start),C=this.distanceToPoint(g.end);return I<0&&C>0||C<0&&I>0}intersectsBox(g){return g.intersectsPlane(this)}intersectsSphere(g){return g.intersectsPlane(this)}coplanarPoint(g){return void 0===g&&(console.warn("THREE.Plane: .coplanarPoint() target is now required"),g=new Ae),g.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(g,I){const C=I||at.getNormalMatrix(g),e=this.coplanarPoint(nt).applyMatrix4(g),t=this.normal.applyMatrix3(C).normalize();return this.constant=-e.dot(t),this}translate(g){return this.constant-=g.dot(this.normal),this}equals(g){return g.normal.equals(this.normal)&&g.constant===this.constant}clone(){return(new this.constructor).copy(this)}}ct.prototype.isPlane=!0;const st=new Ae,dt=new Ae,bt=new Ae,rt=new Ae,Gt=new Ae,ht=new Ae,mt=new Ae,ut=new Ae,Bt=new Ae,Zt=new Ae;class pt{constructor(g=new Ae,I=new Ae,C=new Ae){this.a=g,this.b=I,this.c=C}static getNormal(g,I,C,e){void 0===e&&(console.warn("THREE.Triangle: .getNormal() target is now required"),e=new Ae),e.subVectors(C,I),st.subVectors(g,I),e.cross(st);const t=e.lengthSq();return t>0?e.multiplyScalar(1/Math.sqrt(t)):e.set(0,0,0)}static getBarycoord(g,I,C,e,t){st.subVectors(e,I),dt.subVectors(C,I),bt.subVectors(g,I);const A=st.dot(st),i=st.dot(dt),o=st.dot(bt),n=dt.dot(dt),l=dt.dot(bt),a=A*n-i*i;if(void 0===t&&(console.warn("THREE.Triangle: .getBarycoord() target is now required"),t=new Ae),0===a)return t.set(-2,-1,-1);const c=1/a,s=(n*o-i*l)*c,d=(A*l-i*o)*c;return t.set(1-s-d,d,s)}static containsPoint(g,I,C,e){return this.getBarycoord(g,I,C,e,rt),rt.x>=0&&rt.y>=0&&rt.x+rt.y<=1}static getUV(g,I,C,e,t,A,i,o){return this.getBarycoord(g,I,C,e,rt),o.set(0,0),o.addScaledVector(t,rt.x),o.addScaledVector(A,rt.y),o.addScaledVector(i,rt.z),o}static isFrontFacing(g,I,C,e){return st.subVectors(C,I),dt.subVectors(g,I),st.cross(dt).dot(e)<0}set(g,I,C){return this.a.copy(g),this.b.copy(I),this.c.copy(C),this}setFromPointsAndIndices(g,I,C,e){return this.a.copy(g[I]),this.b.copy(g[C]),this.c.copy(g[e]),this}clone(){return(new this.constructor).copy(this)}copy(g){return this.a.copy(g.a),this.b.copy(g.b),this.c.copy(g.c),this}getArea(){return st.subVectors(this.c,this.b),dt.subVectors(this.a,this.b),.5*st.cross(dt).length()}getMidpoint(g){return void 0===g&&(console.warn("THREE.Triangle: .getMidpoint() target is now required"),g=new Ae),g.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(g){return pt.getNormal(this.a,this.b,this.c,g)}getPlane(g){return void 0===g&&(console.warn("THREE.Triangle: .getPlane() target is now required"),g=new ct),g.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(g,I){return pt.getBarycoord(g,this.a,this.b,this.c,I)}getUV(g,I,C,e,t){return pt.getUV(g,this.a,this.b,this.c,I,C,e,t)}containsPoint(g){return pt.containsPoint(g,this.a,this.b,this.c)}isFrontFacing(g){return pt.isFrontFacing(this.a,this.b,this.c,g)}intersectsBox(g){return g.intersectsTriangle(this)}closestPointToPoint(g,I){void 0===I&&(console.warn("THREE.Triangle: .closestPointToPoint() target is now required"),I=new Ae);const C=this.a,e=this.b,t=this.c;let A,i;Gt.subVectors(e,C),ht.subVectors(t,C),ut.subVectors(g,C);const o=Gt.dot(ut),n=ht.dot(ut);if(o<=0&&n<=0)return I.copy(C);Bt.subVectors(g,e);const l=Gt.dot(Bt),a=ht.dot(Bt);if(l>=0&&a<=l)return I.copy(e);const c=o*a-l*n;if(c<=0&&o>=0&&l<=0)return A=o/(o-l),I.copy(C).addScaledVector(Gt,A);Zt.subVectors(g,t);const s=Gt.dot(Zt),d=ht.dot(Zt);if(d>=0&&s<=d)return I.copy(t);const b=s*n-o*d;if(b<=0&&n>=0&&d<=0)return i=n/(n-d),I.copy(C).addScaledVector(ht,i);const r=l*d-s*a;if(r<=0&&a-l>=0&&s-d>=0)return mt.subVectors(t,e),i=(a-l)/(a-l+(s-d)),I.copy(e).addScaledVector(mt,i);const G=1/(r+b+c);return A=b*G,i=c*G,I.copy(C).addScaledVector(Gt,A).addScaledVector(ht,i)}equals(g){return g.a.equals(this.a)&&g.b.equals(this.b)&&g.c.equals(this.c)}}let Wt=0;function yt(){Object.defineProperty(this,"id",{value:Wt++}),this.uuid=LC(),this.name="",this.type="Material",this.fog=!0,this.blending=B,this.side=b,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=N,this.blendDst=F,this.blendEquation=V,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=U,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=WC,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=lC,this.stencilZFail=lC,this.stencilZPass=lC,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0}yt.prototype=Object.assign(Object.create(FC.prototype),{constructor:yt,isMaterial:!0,onBuild:function(){},onBeforeCompile:function(){},customProgramCacheKey:function(){return this.onBeforeCompile.toString()},setValues:function(g){if(void 0!==g)for(const I in g){const C=g[I];if(void 0===C){console.warn("THREE.Material: '"+I+"' parameter is undefined.");continue}if("shading"===I){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=C===h;continue}const e=this[I];void 0!==e?e&&e.isColor?e.set(C):e&&e.isVector3&&C&&C.isVector3?e.copy(C):this[I]=C:console.warn("THREE."+this.type+": '"+I+"' is not a property of this material.")}},toJSON:function(g){const I=void 0===g||"string"==typeof g;I&&(g={textures:{},images:{}});const C={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function e(g){const I=[];for(const C in g){const e=g[C];delete e.metadata,I.push(e)}return I}if(C.uuid=this.uuid,C.type=this.type,""!==this.name&&(C.name=this.name),this.color&&this.color.isColor&&(C.color=this.color.getHex()),void 0!==this.roughness&&(C.roughness=this.roughness),void 0!==this.metalness&&(C.metalness=this.metalness),this.sheen&&this.sheen.isColor&&(C.sheen=this.sheen.getHex()),this.emissive&&this.emissive.isColor&&(C.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(C.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(C.specular=this.specular.getHex()),void 0!==this.shininess&&(C.shininess=this.shininess),void 0!==this.clearcoat&&(C.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(C.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(C.clearcoatMap=this.clearcoatMap.toJSON(g).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(C.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(g).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(C.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(g).uuid,C.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(C.map=this.map.toJSON(g).uuid),this.matcap&&this.matcap.isTexture&&(C.matcap=this.matcap.toJSON(g).uuid),this.alphaMap&&this.alphaMap.isTexture&&(C.alphaMap=this.alphaMap.toJSON(g).uuid),this.lightMap&&this.lightMap.isTexture&&(C.lightMap=this.lightMap.toJSON(g).uuid,C.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(C.aoMap=this.aoMap.toJSON(g).uuid,C.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(C.bumpMap=this.bumpMap.toJSON(g).uuid,C.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(C.normalMap=this.normalMap.toJSON(g).uuid,C.normalMapType=this.normalMapType,C.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(C.displacementMap=this.displacementMap.toJSON(g).uuid,C.displacementScale=this.displacementScale,C.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(C.roughnessMap=this.roughnessMap.toJSON(g).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(C.metalnessMap=this.metalnessMap.toJSON(g).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(C.emissiveMap=this.emissiveMap.toJSON(g).uuid),this.specularMap&&this.specularMap.isTexture&&(C.specularMap=this.specularMap.toJSON(g).uuid),this.envMap&&this.envMap.isTexture&&(C.envMap=this.envMap.toJSON(g).uuid,void 0!==this.combine&&(C.combine=this.combine)),void 0!==this.envMapIntensity&&(C.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(C.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(C.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(C.gradientMap=this.gradientMap.toJSON(g).uuid),void 0!==this.size&&(C.size=this.size),null!==this.shadowSide&&(C.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(C.sizeAttenuation=this.sizeAttenuation),this.blending!==B&&(C.blending=this.blending),this.side!==b&&(C.side=this.side),this.vertexColors&&(C.vertexColors=!0),this.opacity<1&&(C.opacity=this.opacity),!0===this.transparent&&(C.transparent=this.transparent),C.depthFunc=this.depthFunc,C.depthTest=this.depthTest,C.depthWrite=this.depthWrite,C.colorWrite=this.colorWrite,C.stencilWrite=this.stencilWrite,C.stencilWriteMask=this.stencilWriteMask,C.stencilFunc=this.stencilFunc,C.stencilRef=this.stencilRef,C.stencilFuncMask=this.stencilFuncMask,C.stencilFail=this.stencilFail,C.stencilZFail=this.stencilZFail,C.stencilZPass=this.stencilZPass,this.rotation&&0!==this.rotation&&(C.rotation=this.rotation),!0===this.polygonOffset&&(C.polygonOffset=!0),0!==this.polygonOffsetFactor&&(C.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(C.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&1!==this.linewidth&&(C.linewidth=this.linewidth),void 0!==this.dashSize&&(C.dashSize=this.dashSize),void 0!==this.gapSize&&(C.gapSize=this.gapSize),void 0!==this.scale&&(C.scale=this.scale),!0===this.dithering&&(C.dithering=!0),this.alphaTest>0&&(C.alphaTest=this.alphaTest),!0===this.alphaToCoverage&&(C.alphaToCoverage=this.alphaToCoverage),!0===this.premultipliedAlpha&&(C.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(C.wireframe=this.wireframe),this.wireframeLinewidth>1&&(C.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(C.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(C.wireframeLinejoin=this.wireframeLinejoin),!0===this.morphTargets&&(C.morphTargets=!0),!0===this.morphNormals&&(C.morphNormals=!0),!0===this.skinning&&(C.skinning=!0),!0===this.flatShading&&(C.flatShading=this.flatShading),!1===this.visible&&(C.visible=!1),!1===this.toneMapped&&(C.toneMapped=!1),"{}"!==JSON.stringify(this.userData)&&(C.userData=this.userData),I){const I=e(g.textures),t=e(g.images);I.length>0&&(C.textures=I),t.length>0&&(C.images=t)}return C},clone:function(){return(new this.constructor).copy(this)},copy:function(g){this.name=g.name,this.fog=g.fog,this.blending=g.blending,this.side=g.side,this.vertexColors=g.vertexColors,this.opacity=g.opacity,this.transparent=g.transparent,this.blendSrc=g.blendSrc,this.blendDst=g.blendDst,this.blendEquation=g.blendEquation,this.blendSrcAlpha=g.blendSrcAlpha,this.blendDstAlpha=g.blendDstAlpha,this.blendEquationAlpha=g.blendEquationAlpha,this.depthFunc=g.depthFunc,this.depthTest=g.depthTest,this.depthWrite=g.depthWrite,this.stencilWriteMask=g.stencilWriteMask,this.stencilFunc=g.stencilFunc,this.stencilRef=g.stencilRef,this.stencilFuncMask=g.stencilFuncMask,this.stencilFail=g.stencilFail,this.stencilZFail=g.stencilZFail,this.stencilZPass=g.stencilZPass,this.stencilWrite=g.stencilWrite;const I=g.clippingPlanes;let C=null;if(null!==I){const g=I.length;C=new Array(g);for(let e=0;e!==g;++e)C[e]=I[e].clone()}return this.clippingPlanes=C,this.clipIntersection=g.clipIntersection,this.clipShadows=g.clipShadows,this.shadowSide=g.shadowSide,this.colorWrite=g.colorWrite,this.precision=g.precision,this.polygonOffset=g.polygonOffset,this.polygonOffsetFactor=g.polygonOffsetFactor,this.polygonOffsetUnits=g.polygonOffsetUnits,this.dithering=g.dithering,this.alphaTest=g.alphaTest,this.alphaToCoverage=g.alphaToCoverage,this.premultipliedAlpha=g.premultipliedAlpha,this.visible=g.visible,this.toneMapped=g.toneMapped,this.userData=JSON.parse(JSON.stringify(g.userData)),this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),Object.defineProperty(yt.prototype,"needsUpdate",{set:function(g){!0===g&&this.version++}});const Vt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},vt={h:0,s:0,l:0},Yt={h:0,s:0,l:0};function Xt(g,I,C){return C<0&&(C+=1),C>1&&(C-=1),C<1/6?g+6*(I-g)*C:C<.5?I:C<2/3?g+6*(I-g)*(2/3-C):g}function Rt(g){return g<.04045?.0773993808*g:Math.pow(.9478672986*g+.0521327014,2.4)}function Ht(g){return g<.0031308?12.92*g:1.055*Math.pow(g,.41666)-.055}class wt{constructor(g,I,C){return void 0===I&&void 0===C?this.set(g):this.setRGB(g,I,C)}set(g){return g&&g.isColor?this.copy(g):"number"==typeof g?this.setHex(g):"string"==typeof g&&this.setStyle(g),this}setScalar(g){return this.r=g,this.g=g,this.b=g,this}setHex(g){return g=Math.floor(g),this.r=(g>>16&255)/255,this.g=(g>>8&255)/255,this.b=(255&g)/255,this}setRGB(g,I,C){return this.r=g,this.g=I,this.b=C,this}setHSL(g,I,C){if(g=MC(g,1),I=kC(I,0,1),C=kC(C,0,1),0===I)this.r=this.g=this.b=C;else{const e=C<=.5?C*(1+I):C+I-C*I,t=2*C-e;this.r=Xt(t,e,g+1/3),this.g=Xt(t,e,g),this.b=Xt(t,e,g-1/3)}return this}setStyle(g){function I(I){void 0!==I&&parseFloat(I)<1&&console.warn("THREE.Color: Alpha component of "+g+" will be ignored.")}let C;if(C=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(g)){let g;const e=C[1],t=C[2];switch(e){case"rgb":case"rgba":if(g=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(t))return this.r=Math.min(255,parseInt(g[1],10))/255,this.g=Math.min(255,parseInt(g[2],10))/255,this.b=Math.min(255,parseInt(g[3],10))/255,I(g[4]),this;if(g=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(t))return this.r=Math.min(100,parseInt(g[1],10))/100,this.g=Math.min(100,parseInt(g[2],10))/100,this.b=Math.min(100,parseInt(g[3],10))/100,I(g[4]),this;break;case"hsl":case"hsla":if(g=/^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(t)){const C=parseFloat(g[1])/360,e=parseInt(g[2],10)/100,t=parseInt(g[3],10)/100;return I(g[4]),this.setHSL(C,e,t)}}}else if(C=/^\#([A-Fa-f\d]+)$/.exec(g)){const g=C[1],I=g.length;if(3===I)return this.r=parseInt(g.charAt(0)+g.charAt(0),16)/255,this.g=parseInt(g.charAt(1)+g.charAt(1),16)/255,this.b=parseInt(g.charAt(2)+g.charAt(2),16)/255,this;if(6===I)return this.r=parseInt(g.charAt(0)+g.charAt(1),16)/255,this.g=parseInt(g.charAt(2)+g.charAt(3),16)/255,this.b=parseInt(g.charAt(4)+g.charAt(5),16)/255,this}return g&&g.length>0?this.setColorName(g):this}setColorName(g){const I=Vt[g.toLowerCase()];return void 0!==I?this.setHex(I):console.warn("THREE.Color: Unknown color "+g),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(g){return this.r=g.r,this.g=g.g,this.b=g.b,this}copyGammaToLinear(g,I=2){return this.r=Math.pow(g.r,I),this.g=Math.pow(g.g,I),this.b=Math.pow(g.b,I),this}copyLinearToGamma(g,I=2){const C=I>0?1/I:1;return this.r=Math.pow(g.r,C),this.g=Math.pow(g.g,C),this.b=Math.pow(g.b,C),this}convertGammaToLinear(g){return this.copyGammaToLinear(this,g),this}convertLinearToGamma(g){return this.copyLinearToGamma(this,g),this}copySRGBToLinear(g){return this.r=Rt(g.r),this.g=Rt(g.g),this.b=Rt(g.b),this}copyLinearToSRGB(g){return this.r=Ht(g.r),this.g=Ht(g.g),this.b=Ht(g.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0}getHexString(){return("000000"+this.getHex().toString(16)).slice(-6)}getHSL(g){void 0===g&&(console.warn("THREE.Color: .getHSL() target is now required"),g={h:0,s:0,l:0});const I=this.r,C=this.g,e=this.b,t=Math.max(I,C,e),A=Math.min(I,C,e);let i,o;const n=(A+t)/2;if(A===t)i=0,o=0;else{const g=t-A;switch(o=n<=.5?g/(t+A):g/(2-t-A),t){case I:i=(C-e)/g+(C<e?6:0);break;case C:i=(e-I)/g+2;break;case e:i=(I-C)/g+4}i/=6}return g.h=i,g.s=o,g.l=n,g}getStyle(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"}offsetHSL(g,I,C){return this.getHSL(vt),vt.h+=g,vt.s+=I,vt.l+=C,this.setHSL(vt.h,vt.s,vt.l),this}add(g){return this.r+=g.r,this.g+=g.g,this.b+=g.b,this}addColors(g,I){return this.r=g.r+I.r,this.g=g.g+I.g,this.b=g.b+I.b,this}addScalar(g){return this.r+=g,this.g+=g,this.b+=g,this}sub(g){return this.r=Math.max(0,this.r-g.r),this.g=Math.max(0,this.g-g.g),this.b=Math.max(0,this.b-g.b),this}multiply(g){return this.r*=g.r,this.g*=g.g,this.b*=g.b,this}multiplyScalar(g){return this.r*=g,this.g*=g,this.b*=g,this}lerp(g,I){return this.r+=(g.r-this.r)*I,this.g+=(g.g-this.g)*I,this.b+=(g.b-this.b)*I,this}lerpColors(g,I,C){return this.r=g.r+(I.r-g.r)*C,this.g=g.g+(I.g-g.g)*C,this.b=g.b+(I.b-g.b)*C,this}lerpHSL(g,I){this.getHSL(vt),g.getHSL(Yt);const C=QC(vt.h,Yt.h,I),e=QC(vt.s,Yt.s,I),t=QC(vt.l,Yt.l,I);return this.setHSL(C,e,t),this}equals(g){return g.r===this.r&&g.g===this.g&&g.b===this.b}fromArray(g,I=0){return this.r=g[I],this.g=g[I+1],this.b=g[I+2],this}toArray(g=[],I=0){return g[I]=this.r,g[I+1]=this.g,g[I+2]=this.b,g}fromBufferAttribute(g,I){return this.r=g.getX(I),this.g=g.getY(I),this.b=g.getZ(I),!0===g.normalized&&(this.r/=255,this.g/=255,this.b/=255),this}toJSON(){return this.getHex()}}wt.NAMES=Vt,wt.prototype.isColor=!0,wt.prototype.r=1,wt.prototype.g=1,wt.prototype.b=1;class Kt extends yt{constructor(g){super(),this.type="MeshBasicMaterial",this.color=new wt(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=O,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.setValues(g)}copy(g){return super.copy(g),this.color.copy(g.color),this.map=g.map,this.lightMap=g.lightMap,this.lightMapIntensity=g.lightMapIntensity,this.aoMap=g.aoMap,this.aoMapIntensity=g.aoMapIntensity,this.specularMap=g.specularMap,this.alphaMap=g.alphaMap,this.envMap=g.envMap,this.combine=g.combine,this.reflectivity=g.reflectivity,this.refractionRatio=g.refractionRatio,this.wireframe=g.wireframe,this.wireframeLinewidth=g.wireframeLinewidth,this.wireframeLinecap=g.wireframeLinecap,this.wireframeLinejoin=g.wireframeLinejoin,this.skinning=g.skinning,this.morphTargets=g.morphTargets,this}}Kt.prototype.isMeshBasicMaterial=!0;const St=new Ae,Nt=new DC;class Ft{constructor(g,I,C){if(Array.isArray(g))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=g,this.itemSize=I,this.count=void 0!==g?g.length/I:0,this.normalized=!0===C,this.usage=yC,this.updateRange={offset:0,count:-1},this.version=0,this.onUploadCallback=function(){}}set needsUpdate(g){!0===g&&this.version++}setUsage(g){return this.usage=g,this}copy(g){return this.name=g.name,this.array=new g.array.constructor(g.array),this.itemSize=g.itemSize,this.count=g.count,this.normalized=g.normalized,this.usage=g.usage,this}copyAt(g,I,C){g*=this.itemSize,C*=I.itemSize;for(let e=0,t=this.itemSize;e<t;e++)this.array[g+e]=I.array[C+e];return this}copyArray(g){return this.array.set(g),this}copyColorsArray(g){const I=this.array;let C=0;for(let e=0,t=g.length;e<t;e++){let t=g[e];void 0===t&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",e),t=new wt),I[C++]=t.r,I[C++]=t.g,I[C++]=t.b}return this}copyVector2sArray(g){const I=this.array;let C=0;for(let e=0,t=g.length;e<t;e++){let t=g[e];void 0===t&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",e),t=new DC),I[C++]=t.x,I[C++]=t.y}return this}copyVector3sArray(g){const I=this.array;let C=0;for(let e=0,t=g.length;e<t;e++){let t=g[e];void 0===t&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",e),t=new Ae),I[C++]=t.x,I[C++]=t.y,I[C++]=t.z}return this}copyVector4sArray(g){const I=this.array;let C=0;for(let e=0,t=g.length;e<t;e++){let t=g[e];void 0===t&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",e),t=new Ie),I[C++]=t.x,I[C++]=t.y,I[C++]=t.z,I[C++]=t.w}return this}applyMatrix3(g){if(2===this.itemSize)for(let I=0,C=this.count;I<C;I++)Nt.fromBufferAttribute(this,I),Nt.applyMatrix3(g),this.setXY(I,Nt.x,Nt.y);else if(3===this.itemSize)for(let I=0,C=this.count;I<C;I++)St.fromBufferAttribute(this,I),St.applyMatrix3(g),this.setXYZ(I,St.x,St.y,St.z);return this}applyMatrix4(g){for(let I=0,C=this.count;I<C;I++)St.x=this.getX(I),St.y=this.getY(I),St.z=this.getZ(I),St.applyMatrix4(g),this.setXYZ(I,St.x,St.y,St.z);return this}applyNormalMatrix(g){for(let I=0,C=this.count;I<C;I++)St.x=this.getX(I),St.y=this.getY(I),St.z=this.getZ(I),St.applyNormalMatrix(g),this.setXYZ(I,St.x,St.y,St.z);return this}transformDirection(g){for(let I=0,C=this.count;I<C;I++)St.x=this.getX(I),St.y=this.getY(I),St.z=this.getZ(I),St.transformDirection(g),this.setXYZ(I,St.x,St.y,St.z);return this}set(g,I=0){return this.array.set(g,I),this}getX(g){return this.array[g*this.itemSize]}setX(g,I){return this.array[g*this.itemSize]=I,this}getY(g){return this.array[g*this.itemSize+1]}setY(g,I){return this.array[g*this.itemSize+1]=I,this}getZ(g){return this.array[g*this.itemSize+2]}setZ(g,I){return this.array[g*this.itemSize+2]=I,this}getW(g){return this.array[g*this.itemSize+3]}setW(g,I){return this.array[g*this.itemSize+3]=I,this}setXY(g,I,C){return g*=this.itemSize,this.array[g+0]=I,this.array[g+1]=C,this}setXYZ(g,I,C,e){return g*=this.itemSize,this.array[g+0]=I,this.array[g+1]=C,this.array[g+2]=e,this}setXYZW(g,I,C,e,t){return g*=this.itemSize,this.array[g+0]=I,this.array[g+1]=C,this.array[g+2]=e,this.array[g+3]=t,this}onUpload(g){return this.onUploadCallback=g,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const g={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};return""!==this.name&&(g.name=this.name),this.usage!==yC&&(g.usage=this.usage),0===this.updateRange.offset&&-1===this.updateRange.count||(g.updateRange=this.updateRange),g}}Ft.prototype.isBufferAttribute=!0;class zt extends Ft{constructor(g,I,C){super(new Int8Array(g),I,C)}}class ft extends Ft{constructor(g,I,C){super(new Uint8Array(g),I,C)}}class xt extends Ft{constructor(g,I,C){super(new Uint8ClampedArray(g),I,C)}}class Jt extends Ft{constructor(g,I,C){super(new Int16Array(g),I,C)}}class Lt extends Ft{constructor(g,I,C){super(new Uint16Array(g),I,C)}}class kt extends Ft{constructor(g,I,C){super(new Int32Array(g),I,C)}}class Mt extends Ft{constructor(g,I,C){super(new Uint32Array(g),I,C)}}class Qt extends Ft{constructor(g,I,C){super(new Uint16Array(g),I,C)}}Qt.prototype.isFloat16BufferAttribute=!0;class Ut extends Ft{constructor(g,I,C){super(new Float32Array(g),I,C)}}class Tt extends Ft{constructor(g,I,C){super(new Float64Array(g),I,C)}}function Et(g){if(0===g.length)return-1/0;let I=g[0];for(let C=1,e=g.length;C<e;++C)g[C]>I&&(I=g[C]);return I}const jt={Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array};function Dt(g,I){return new jt[g](I)}let Ot=0;const Pt=new ze,_t=new ot,qt=new Ae,$t=new ne,gA=new ne,IA=new Ae;class CA extends FC{constructor(){super(),Object.defineProperty(this,"id",{value:Ot++}),this.uuid=LC(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(g){return Array.isArray(g)?this.index=new(Et(g)>65535?Mt:Lt)(g,1):this.index=g,this}getAttribute(g){return this.attributes[g]}setAttribute(g,I){return this.attributes[g]=I,this}deleteAttribute(g){return delete this.attributes[g],this}hasAttribute(g){return void 0!==this.attributes[g]}addGroup(g,I,C=0){this.groups.push({start:g,count:I,materialIndex:C})}clearGroups(){this.groups=[]}setDrawRange(g,I){this.drawRange.start=g,this.drawRange.count=I}applyMatrix4(g){const I=this.attributes.position;void 0!==I&&(I.applyMatrix4(g),I.needsUpdate=!0);const C=this.attributes.normal;if(void 0!==C){const I=(new OC).getNormalMatrix(g);C.applyNormalMatrix(I),C.needsUpdate=!0}const e=this.attributes.tangent;return void 0!==e&&(e.transformDirection(g),e.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}rotateX(g){return Pt.makeRotationX(g),this.applyMatrix4(Pt),this}rotateY(g){return Pt.makeRotationY(g),this.applyMatrix4(Pt),this}rotateZ(g){return Pt.makeRotationZ(g),this.applyMatrix4(Pt),this}translate(g,I,C){return Pt.makeTranslation(g,I,C),this.applyMatrix4(Pt),this}scale(g,I,C){return Pt.makeScale(g,I,C),this.applyMatrix4(Pt),this}lookAt(g){return _t.lookAt(g),_t.updateMatrix(),this.applyMatrix4(_t.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(qt).negate(),this.translate(qt.x,qt.y,qt.z),this}setFromPoints(g){const I=[];for(let C=0,e=g.length;C<e;C++){const e=g[C];I.push(e.x,e.y,e.z||0)}return this.setAttribute("position",new Ut(I,3)),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new ne);const g=this.attributes.position,I=this.morphAttributes.position;if(g&&g.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingBox.set(new Ae(-1/0,-1/0,-1/0),new Ae(1/0,1/0,1/0));if(void 0!==g){if(this.boundingBox.setFromBufferAttribute(g),I)for(let g=0,C=I.length;g<C;g++){const C=I[g];$t.setFromBufferAttribute(C),this.morphTargetsRelative?(IA.addVectors(this.boundingBox.min,$t.min),this.boundingBox.expandByPoint(IA),IA.addVectors(this.boundingBox.max,$t.max),this.boundingBox.expandByPoint(IA)):(this.boundingBox.expandByPoint($t.min),this.boundingBox.expandByPoint($t.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new Ye);const g=this.attributes.position,I=this.morphAttributes.position;if(g&&g.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingSphere.set(new Ae,1/0);if(g){const C=this.boundingSphere.center;if($t.setFromBufferAttribute(g),I)for(let g=0,C=I.length;g<C;g++){const C=I[g];gA.setFromBufferAttribute(C),this.morphTargetsRelative?(IA.addVectors($t.min,gA.min),$t.expandByPoint(IA),IA.addVectors($t.max,gA.max),$t.expandByPoint(IA)):($t.expandByPoint(gA.min),$t.expandByPoint(gA.max))}$t.getCenter(C);let e=0;for(let I=0,t=g.count;I<t;I++)IA.fromBufferAttribute(g,I),e=Math.max(e,C.distanceToSquared(IA));if(I)for(let t=0,A=I.length;t<A;t++){const A=I[t],i=this.morphTargetsRelative;for(let I=0,t=A.count;I<t;I++)IA.fromBufferAttribute(A,I),i&&(qt.fromBufferAttribute(g,I),IA.add(qt)),e=Math.max(e,C.distanceToSquared(IA))}this.boundingSphere.radius=Math.sqrt(e),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeFaceNormals(){}computeTangents(){const g=this.index,I=this.attributes;if(null===g||void 0===I.position||void 0===I.normal||void 0===I.uv)return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");const C=g.array,e=I.position.array,t=I.normal.array,A=I.uv.array,i=e.length/3;void 0===I.tangent&&this.setAttribute("tangent",new Ft(new Float32Array(4*i),4));const o=I.tangent.array,n=[],l=[];for(let g=0;g<i;g++)n[g]=new Ae,l[g]=new Ae;const a=new Ae,c=new Ae,s=new Ae,d=new DC,b=new DC,r=new DC,G=new Ae,h=new Ae;function m(g,I,C){a.fromArray(e,3*g),c.fromArray(e,3*I),s.fromArray(e,3*C),d.fromArray(A,2*g),b.fromArray(A,2*I),r.fromArray(A,2*C),c.sub(a),s.sub(a),b.sub(d),r.sub(d);const t=1/(b.x*r.y-r.x*b.y);isFinite(t)&&(G.copy(c).multiplyScalar(r.y).addScaledVector(s,-b.y).multiplyScalar(t),h.copy(s).multiplyScalar(b.x).addScaledVector(c,-r.x).multiplyScalar(t),n[g].add(G),n[I].add(G),n[C].add(G),l[g].add(h),l[I].add(h),l[C].add(h))}let u=this.groups;0===u.length&&(u=[{start:0,count:C.length}]);for(let g=0,I=u.length;g<I;++g){const I=u[g],e=I.start;for(let g=e,t=e+I.count;g<t;g+=3)m(C[g+0],C[g+1],C[g+2])}const B=new Ae,Z=new Ae,p=new Ae,W=new Ae;function y(g){p.fromArray(t,3*g),W.copy(p);const I=n[g];B.copy(I),B.sub(p.multiplyScalar(p.dot(I))).normalize(),Z.crossVectors(W,I);const C=Z.dot(l[g])<0?-1:1;o[4*g]=B.x,o[4*g+1]=B.y,o[4*g+2]=B.z,o[4*g+3]=C}for(let g=0,I=u.length;g<I;++g){const I=u[g],e=I.start;for(let g=e,t=e+I.count;g<t;g+=3)y(C[g+0]),y(C[g+1]),y(C[g+2])}}computeVertexNormals(){const g=this.index,I=this.getAttribute("position");if(void 0!==I){let C=this.getAttribute("normal");if(void 0===C)C=new Ft(new Float32Array(3*I.count),3),this.setAttribute("normal",C);else for(let g=0,I=C.count;g<I;g++)C.setXYZ(g,0,0,0);const e=new Ae,t=new Ae,A=new Ae,i=new Ae,o=new Ae,n=new Ae,l=new Ae,a=new Ae;if(g)for(let c=0,s=g.count;c<s;c+=3){const s=g.getX(c+0),d=g.getX(c+1),b=g.getX(c+2);e.fromBufferAttribute(I,s),t.fromBufferAttribute(I,d),A.fromBufferAttribute(I,b),l.subVectors(A,t),a.subVectors(e,t),l.cross(a),i.fromBufferAttribute(C,s),o.fromBufferAttribute(C,d),n.fromBufferAttribute(C,b),i.add(l),o.add(l),n.add(l),C.setXYZ(s,i.x,i.y,i.z),C.setXYZ(d,o.x,o.y,o.z),C.setXYZ(b,n.x,n.y,n.z)}else for(let g=0,i=I.count;g<i;g+=3)e.fromBufferAttribute(I,g+0),t.fromBufferAttribute(I,g+1),A.fromBufferAttribute(I,g+2),l.subVectors(A,t),a.subVectors(e,t),l.cross(a),C.setXYZ(g+0,l.x,l.y,l.z),C.setXYZ(g+1,l.x,l.y,l.z),C.setXYZ(g+2,l.x,l.y,l.z);this.normalizeNormals(),C.needsUpdate=!0}}merge(g,I){if(!g||!g.isBufferGeometry)return void console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",g);void 0===I&&(I=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));const C=this.attributes;for(const e in C){if(void 0===g.attributes[e])continue;const t=C[e].array,A=g.attributes[e],i=A.array,o=A.itemSize*I,n=Math.min(i.length,t.length-o);for(let g=0,I=o;g<n;g++,I++)t[I]=i[g]}return this}normalizeNormals(){const g=this.attributes.normal;for(let I=0,C=g.count;I<C;I++)IA.fromBufferAttribute(g,I),IA.normalize(),g.setXYZ(I,IA.x,IA.y,IA.z)}toNonIndexed(){function g(g,I){const C=g.array,e=g.itemSize,t=g.normalized,A=new C.constructor(I.length*e);let i=0,o=0;for(let g=0,t=I.length;g<t;g++){i=I[g]*e;for(let g=0;g<e;g++)A[o++]=C[i++]}return new Ft(A,e,t)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const I=new CA,C=this.index.array,e=this.attributes;for(const t in e){const A=g(e[t],C);I.setAttribute(t,A)}const t=this.morphAttributes;for(const e in t){const A=[],i=t[e];for(let I=0,e=i.length;I<e;I++){const e=g(i[I],C);A.push(e)}I.morphAttributes[e]=A}I.morphTargetsRelative=this.morphTargetsRelative;const A=this.groups;for(let g=0,C=A.length;g<C;g++){const C=A[g];I.addGroup(C.start,C.count,C.materialIndex)}return I}toJSON(){const g={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(g.uuid=this.uuid,g.type=this.type,""!==this.name&&(g.name=this.name),Object.keys(this.userData).length>0&&(g.userData=this.userData),void 0!==this.parameters){const I=this.parameters;for(const C in I)void 0!==I[C]&&(g[C]=I[C]);return g}g.data={attributes:{}};const I=this.index;null!==I&&(g.data.index={type:I.array.constructor.name,array:Array.prototype.slice.call(I.array)});const C=this.attributes;for(const I in C){const e=C[I];g.data.attributes[I]=e.toJSON(g.data)}const e={};let t=!1;for(const I in this.morphAttributes){const C=this.morphAttributes[I],A=[];for(let I=0,e=C.length;I<e;I++){const e=C[I];A.push(e.toJSON(g.data))}A.length>0&&(e[I]=A,t=!0)}t&&(g.data.morphAttributes=e,g.data.morphTargetsRelative=this.morphTargetsRelative);const A=this.groups;A.length>0&&(g.data.groups=JSON.parse(JSON.stringify(A)));const i=this.boundingSphere;return null!==i&&(g.data.boundingSphere={center:i.center.toArray(),radius:i.radius}),g}clone(){return(new CA).copy(this)}copy(g){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const I={};this.name=g.name;const C=g.index;null!==C&&this.setIndex(C.clone(I));const e=g.attributes;for(const g in e){const C=e[g];this.setAttribute(g,C.clone(I))}const t=g.morphAttributes;for(const g in t){const C=[],e=t[g];for(let g=0,t=e.length;g<t;g++)C.push(e[g].clone(I));this.morphAttributes[g]=C}this.morphTargetsRelative=g.morphTargetsRelative;const A=g.groups;for(let g=0,I=A.length;g<I;g++){const I=A[g];this.addGroup(I.start,I.count,I.materialIndex)}const i=g.boundingBox;null!==i&&(this.boundingBox=i.clone());const o=g.boundingSphere;return null!==o&&(this.boundingSphere=o.clone()),this.drawRange.start=g.drawRange.start,this.drawRange.count=g.drawRange.count,this.userData=g.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}CA.prototype.isBufferGeometry=!0;const eA=new ze,tA=new Fe,AA=new Ye,iA=new Ae,oA=new Ae,nA=new Ae,lA=new Ae,aA=new Ae,cA=new Ae,sA=new Ae,dA=new Ae,bA=new Ae,rA=new DC,GA=new DC,hA=new DC,mA=new Ae,uA=new Ae;class BA extends ot{constructor(g=new CA,I=new Kt){super(),this.type="Mesh",this.geometry=g,this.material=I,this.updateMorphTargets()}copy(g){return super.copy(g),void 0!==g.morphTargetInfluences&&(this.morphTargetInfluences=g.morphTargetInfluences.slice()),void 0!==g.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},g.morphTargetDictionary)),this.material=g.material,this.geometry=g.geometry,this}updateMorphTargets(){const g=this.geometry;if(g.isBufferGeometry){const I=g.morphAttributes,C=Object.keys(I);if(C.length>0){const g=I[C[0]];if(void 0!==g){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let I=0,C=g.length;I<C;I++){const C=g[I].name||String(I);this.morphTargetInfluences.push(0),this.morphTargetDictionary[C]=I}}}}else{const I=g.morphTargets;void 0!==I&&I.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}raycast(g,I){const C=this.geometry,e=this.material,t=this.matrixWorld;if(void 0===e)return;if(null===C.boundingSphere&&C.computeBoundingSphere(),AA.copy(C.boundingSphere),AA.applyMatrix4(t),!1===g.ray.intersectsSphere(AA))return;if(eA.copy(t).invert(),tA.copy(g.ray).applyMatrix4(eA),null!==C.boundingBox&&!1===tA.intersectsBox(C.boundingBox))return;let A;if(C.isBufferGeometry){const t=C.index,i=C.attributes.position,o=C.morphAttributes.position,n=C.morphTargetsRelative,l=C.attributes.uv,a=C.attributes.uv2,c=C.groups,s=C.drawRange;if(null!==t)if(Array.isArray(e))for(let C=0,d=c.length;C<d;C++){const d=c[C],b=e[d.materialIndex];for(let C=Math.max(d.start,s.start),e=Math.min(d.start+d.count,s.start+s.count);C<e;C+=3){const e=t.getX(C),c=t.getX(C+1),s=t.getX(C+2);A=ZA(this,b,g,tA,i,o,n,l,a,e,c,s),A&&(A.faceIndex=Math.floor(C/3),A.face.materialIndex=d.materialIndex,I.push(A))}}else for(let C=Math.max(0,s.start),c=Math.min(t.count,s.start+s.count);C<c;C+=3){const c=t.getX(C),s=t.getX(C+1),d=t.getX(C+2);A=ZA(this,e,g,tA,i,o,n,l,a,c,s,d),A&&(A.faceIndex=Math.floor(C/3),I.push(A))}else if(void 0!==i)if(Array.isArray(e))for(let C=0,t=c.length;C<t;C++){const t=c[C],d=e[t.materialIndex];for(let C=Math.max(t.start,s.start),e=Math.min(t.start+t.count,s.start+s.count);C<e;C+=3)A=ZA(this,d,g,tA,i,o,n,l,a,C,C+1,C+2),A&&(A.faceIndex=Math.floor(C/3),A.face.materialIndex=t.materialIndex,I.push(A))}else for(let C=Math.max(0,s.start),t=Math.min(i.count,s.start+s.count);C<t;C+=3)A=ZA(this,e,g,tA,i,o,n,l,a,C,C+1,C+2),A&&(A.faceIndex=Math.floor(C/3),I.push(A))}else C.isGeometry&&console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}function ZA(g,I,C,e,t,A,i,o,n,l,a,c){iA.fromBufferAttribute(t,l),oA.fromBufferAttribute(t,a),nA.fromBufferAttribute(t,c);const s=g.morphTargetInfluences;if(I.morphTargets&&A&&s){sA.set(0,0,0),dA.set(0,0,0),bA.set(0,0,0);for(let g=0,I=A.length;g<I;g++){const I=s[g],C=A[g];0!==I&&(lA.fromBufferAttribute(C,l),aA.fromBufferAttribute(C,a),cA.fromBufferAttribute(C,c),i?(sA.addScaledVector(lA,I),dA.addScaledVector(aA,I),bA.addScaledVector(cA,I)):(sA.addScaledVector(lA.sub(iA),I),dA.addScaledVector(aA.sub(oA),I),bA.addScaledVector(cA.sub(nA),I)))}iA.add(sA),oA.add(dA),nA.add(bA)}g.isSkinnedMesh&&I.skinning&&(g.boneTransform(l,iA),g.boneTransform(a,oA),g.boneTransform(c,nA));const d=function(g,I,C,e,t,A,i,o){let n;if(n=I.side===r?e.intersectTriangle(i,A,t,!0,o):e.intersectTriangle(t,A,i,I.side!==G,o),null===n)return null;uA.copy(o),uA.applyMatrix4(g.matrixWorld);const l=C.ray.origin.distanceTo(uA);return l<C.near||l>C.far?null:{distance:l,point:uA.clone(),object:g}}(g,I,C,e,iA,oA,nA,mA);if(d){o&&(rA.fromBufferAttribute(o,l),GA.fromBufferAttribute(o,a),hA.fromBufferAttribute(o,c),d.uv=pt.getUV(mA,iA,oA,nA,rA,GA,hA,new DC)),n&&(rA.fromBufferAttribute(n,l),GA.fromBufferAttribute(n,a),hA.fromBufferAttribute(n,c),d.uv2=pt.getUV(mA,iA,oA,nA,rA,GA,hA,new DC));const g={a:l,b:a,c,normal:new Ae,materialIndex:0};pt.getNormal(iA,oA,nA,g.normal),d.face=g}return d}BA.prototype.isMesh=!0;class pA extends CA{constructor(g=1,I=1,C=1,e=1,t=1,A=1){super(),this.type="BoxGeometry",this.parameters={width:g,height:I,depth:C,widthSegments:e,heightSegments:t,depthSegments:A};const i=this;e=Math.floor(e),t=Math.floor(t),A=Math.floor(A);const o=[],n=[],l=[],a=[];let c=0,s=0;function d(g,I,C,e,t,A,d,b,r,G,h){const m=A/r,u=d/G,B=A/2,Z=d/2,p=b/2,W=r+1,y=G+1;let V=0,v=0;const Y=new Ae;for(let A=0;A<y;A++){const i=A*u-Z;for(let o=0;o<W;o++){const c=o*m-B;Y[g]=c*e,Y[I]=i*t,Y[C]=p,n.push(Y.x,Y.y,Y.z),Y[g]=0,Y[I]=0,Y[C]=b>0?1:-1,l.push(Y.x,Y.y,Y.z),a.push(o/r),a.push(1-A/G),V+=1}}for(let g=0;g<G;g++)for(let I=0;I<r;I++){const C=c+I+W*g,e=c+I+W*(g+1),t=c+(I+1)+W*(g+1),A=c+(I+1)+W*g;o.push(C,e,A),o.push(e,t,A),v+=6}i.addGroup(s,v,h),s+=v,c+=V}d("z","y","x",-1,-1,C,I,g,A,t,0),d("z","y","x",1,-1,C,I,-g,A,t,1),d("x","z","y",1,1,g,C,I,e,A,2),d("x","z","y",1,-1,g,C,-I,e,A,3),d("x","y","z",1,-1,g,I,C,e,t,4),d("x","y","z",-1,-1,g,I,-C,e,t,5),this.setIndex(o),this.setAttribute("position",new Ut(n,3)),this.setAttribute("normal",new Ut(l,3)),this.setAttribute("uv",new Ut(a,2))}}function WA(g){const I={};for(const C in g){I[C]={};for(const e in g[C]){const t=g[C][e];t&&(t.isColor||t.isMatrix3||t.isMatrix4||t.isVector2||t.isVector3||t.isVector4||t.isTexture||t.isQuaternion)?I[C][e]=t.clone():Array.isArray(t)?I[C][e]=t.slice():I[C][e]=t}}return I}function yA(g){const I={};for(let C=0;C<g.length;C++){const e=WA(g[C]);for(const g in e)I[g]=e[g]}return I}const VA={clone:WA,merge:yA};class vA extends yt{constructor(g){super(),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==g&&(void 0!==g.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(g))}copy(g){return super.copy(g),this.fragmentShader=g.fragmentShader,this.vertexShader=g.vertexShader,this.uniforms=WA(g.uniforms),this.defines=Object.assign({},g.defines),this.wireframe=g.wireframe,this.wireframeLinewidth=g.wireframeLinewidth,this.lights=g.lights,this.clipping=g.clipping,this.skinning=g.skinning,this.morphTargets=g.morphTargets,this.morphNormals=g.morphNormals,this.extensions=Object.assign({},g.extensions),this.glslVersion=g.glslVersion,this}toJSON(g){const I=super.toJSON(g);I.glslVersion=this.glslVersion,I.uniforms={};for(const C in this.uniforms){const e=this.uniforms[C].value;e&&e.isTexture?I.uniforms[C]={type:"t",value:e.toJSON(g).uuid}:e&&e.isColor?I.uniforms[C]={type:"c",value:e.getHex()}:e&&e.isVector2?I.uniforms[C]={type:"v2",value:e.toArray()}:e&&e.isVector3?I.uniforms[C]={type:"v3",value:e.toArray()}:e&&e.isVector4?I.uniforms[C]={type:"v4",value:e.toArray()}:e&&e.isMatrix3?I.uniforms[C]={type:"m3",value:e.toArray()}:e&&e.isMatrix4?I.uniforms[C]={type:"m4",value:e.toArray()}:I.uniforms[C]={value:e}}Object.keys(this.defines).length>0&&(I.defines=this.defines),I.vertexShader=this.vertexShader,I.fragmentShader=this.fragmentShader;const C={};for(const g in this.extensions)!0===this.extensions[g]&&(C[g]=!0);return Object.keys(C).length>0&&(I.extensions=C),I}}vA.prototype.isShaderMaterial=!0;class YA extends ot{constructor(){super(),this.type="Camera",this.matrixWorldInverse=new ze,this.projectionMatrix=new ze,this.projectionMatrixInverse=new ze}copy(g,I){return super.copy(g,I),this.matrixWorldInverse.copy(g.matrixWorldInverse),this.projectionMatrix.copy(g.projectionMatrix),this.projectionMatrixInverse.copy(g.projectionMatrixInverse),this}getWorldDirection(g){void 0===g&&(console.warn("THREE.Camera: .getWorldDirection() target is now required"),g=new Ae),this.updateWorldMatrix(!0,!1);const I=this.matrixWorld.elements;return g.set(-I[8],-I[9],-I[10]).normalize()}updateMatrixWorld(g){super.updateMatrixWorld(g),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(g,I){super.updateWorldMatrix(g,I),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}YA.prototype.isCamera=!0;class XA extends YA{constructor(g=50,I=1,C=.1,e=2e3){super(),this.type="PerspectiveCamera",this.fov=g,this.zoom=1,this.near=C,this.far=e,this.focus=10,this.aspect=I,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(g,I){return super.copy(g,I),this.fov=g.fov,this.zoom=g.zoom,this.near=g.near,this.far=g.far,this.focus=g.focus,this.aspect=g.aspect,this.view=null===g.view?null:Object.assign({},g.view),this.filmGauge=g.filmGauge,this.filmOffset=g.filmOffset,this}setFocalLength(g){const I=.5*this.getFilmHeight()/g;this.fov=2*JC*Math.atan(I),this.updateProjectionMatrix()}getFocalLength(){const g=Math.tan(.5*xC*this.fov);return.5*this.getFilmHeight()/g}getEffectiveFOV(){return 2*JC*Math.atan(Math.tan(.5*xC*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(g,I,C,e,t,A){this.aspect=g/I,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=g,this.view.fullHeight=I,this.view.offsetX=C,this.view.offsetY=e,this.view.width=t,this.view.height=A,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const g=this.near;let I=g*Math.tan(.5*xC*this.fov)/this.zoom,C=2*I,e=this.aspect*C,t=-.5*e;const A=this.view;if(null!==this.view&&this.view.enabled){const g=A.fullWidth,i=A.fullHeight;t+=A.offsetX*e/g,I-=A.offsetY*C/i,e*=A.width/g,C*=A.height/i}const i=this.filmOffset;0!==i&&(t+=g*i/this.getFilmWidth()),this.projectionMatrix.makePerspective(t,t+e,I,I-C,g,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(g){const I=super.toJSON(g);return I.object.fov=this.fov,I.object.zoom=this.zoom,I.object.near=this.near,I.object.far=this.far,I.object.focus=this.focus,I.object.aspect=this.aspect,null!==this.view&&(I.object.view=Object.assign({},this.view)),I.object.filmGauge=this.filmGauge,I.object.filmOffset=this.filmOffset,I}}XA.prototype.isPerspectiveCamera=!0;const RA=90;class HA extends ot{constructor(g,I,C){if(super(),this.type="CubeCamera",!0!==C.isWebGLCubeRenderTarget)return void console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");this.renderTarget=C;const e=new XA(RA,1,g,I);e.layers=this.layers,e.up.set(0,-1,0),e.lookAt(new Ae(1,0,0)),this.add(e);const t=new XA(RA,1,g,I);t.layers=this.layers,t.up.set(0,-1,0),t.lookAt(new Ae(-1,0,0)),this.add(t);const A=new XA(RA,1,g,I);A.layers=this.layers,A.up.set(0,0,1),A.lookAt(new Ae(0,1,0)),this.add(A);const i=new XA(RA,1,g,I);i.layers=this.layers,i.up.set(0,0,-1),i.lookAt(new Ae(0,-1,0)),this.add(i);const o=new XA(RA,1,g,I);o.layers=this.layers,o.up.set(0,-1,0),o.lookAt(new Ae(0,0,1)),this.add(o);const n=new XA(RA,1,g,I);n.layers=this.layers,n.up.set(0,-1,0),n.lookAt(new Ae(0,0,-1)),this.add(n)}update(g,I){null===this.parent&&this.updateMatrixWorld();const C=this.renderTarget,[e,t,A,i,o,n]=this.children,l=g.xr.enabled,a=g.getRenderTarget();g.xr.enabled=!1;const c=C.texture.generateMipmaps;C.texture.generateMipmaps=!1,g.setRenderTarget(C,0),g.render(I,e),g.setRenderTarget(C,1),g.render(I,t),g.setRenderTarget(C,2),g.render(I,A),g.setRenderTarget(C,3),g.render(I,i),g.setRenderTarget(C,4),g.render(I,o),C.texture.generateMipmaps=c,g.setRenderTarget(C,5),g.render(I,n),g.setRenderTarget(a),g.xr.enabled=l}}class wA extends $C{constructor(g,I,C,e,t,A,i,o,n,l){super(g=void 0!==g?g:[],I=void 0!==I?I:Ag,C,e,t,A,i=void 0!==i?i:fg,o,n,l),this._needsFlipEnvMap=!0,this.flipY=!1}get images(){return this.image}set images(g){this.image=g}}wA.prototype.isCubeTexture=!0;class KA extends Ce{constructor(g,I,C){Number.isInteger(I)&&(console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"),I=C),super(g,g,I),I=I||{},this.texture=new wA(void 0,I.mapping,I.wrapS,I.wrapT,I.magFilter,I.minFilter,I.format,I.type,I.anisotropy,I.encoding),this.texture.generateMipmaps=void 0!==I.generateMipmaps&&I.generateMipmaps,this.texture.minFilter=void 0!==I.minFilter?I.minFilter:ug,this.texture._needsFlipEnvMap=!1}fromEquirectangularTexture(g,I){this.texture.type=I.type,this.texture.format=xg,this.texture.encoding=I.encoding,this.texture.generateMipmaps=I.generateMipmaps,this.texture.minFilter=I.minFilter,this.texture.magFilter=I.magFilter;const C={tEquirect:{value:null}},e="\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",t="\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t",A=new pA(5,5,5),i=new vA({name:"CubemapFromEquirect",uniforms:WA(C),vertexShader:e,fragmentShader:t,side:r,blending:u});i.uniforms.tEquirect.value=I;const o=new BA(A,i),n=I.minFilter;return I.minFilter===pg&&(I.minFilter=ug),new HA(1,10,this).update(g,o),I.minFilter=n,o.geometry.dispose(),o.material.dispose(),this}clear(g,I,C,e){const t=g.getRenderTarget();for(let t=0;t<6;t++)g.setRenderTarget(this,t),g.clear(I,C,e);g.setRenderTarget(t)}}KA.prototype.isWebGLCubeRenderTarget=!0;class SA extends $C{constructor(g,I,C,e,t,A,i,o,n,l,a,c){super(null,A,i,o,n,l,e,t,a,c),this.image={data:g||null,width:I||1,height:C||1},this.magFilter=void 0!==n?n:bg,this.minFilter=void 0!==l?l:bg,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}SA.prototype.isDataTexture=!0;const NA=new Ye,FA=new Ae;class zA{constructor(g=new ct,I=new ct,C=new ct,e=new ct,t=new ct,A=new ct){this.planes=[g,I,C,e,t,A]}set(g,I,C,e,t,A){const i=this.planes;return i[0].copy(g),i[1].copy(I),i[2].copy(C),i[3].copy(e),i[4].copy(t),i[5].copy(A),this}copy(g){const I=this.planes;for(let C=0;C<6;C++)I[C].copy(g.planes[C]);return this}setFromProjectionMatrix(g){const I=this.planes,C=g.elements,e=C[0],t=C[1],A=C[2],i=C[3],o=C[4],n=C[5],l=C[6],a=C[7],c=C[8],s=C[9],d=C[10],b=C[11],r=C[12],G=C[13],h=C[14],m=C[15];return I[0].setComponents(i-e,a-o,b-c,m-r).normalize(),I[1].setComponents(i+e,a+o,b+c,m+r).normalize(),I[2].setComponents(i+t,a+n,b+s,m+G).normalize(),I[3].setComponents(i-t,a-n,b-s,m-G).normalize(),I[4].setComponents(i-A,a-l,b-d,m-h).normalize(),I[5].setComponents(i+A,a+l,b+d,m+h).normalize(),this}intersectsObject(g){const I=g.geometry;return null===I.boundingSphere&&I.computeBoundingSphere(),NA.copy(I.boundingSphere).applyMatrix4(g.matrixWorld),this.intersectsSphere(NA)}intersectsSprite(g){return NA.center.set(0,0,0),NA.radius=.7071067811865476,NA.applyMatrix4(g.matrixWorld),this.intersectsSphere(NA)}intersectsSphere(g){const I=this.planes,C=g.center,e=-g.radius;for(let g=0;g<6;g++)if(I[g].distanceToPoint(C)<e)return!1;return!0}intersectsBox(g){const I=this.planes;for(let C=0;C<6;C++){const e=I[C];if(FA.x=e.normal.x>0?g.max.x:g.min.x,FA.y=e.normal.y>0?g.max.y:g.min.y,FA.z=e.normal.z>0?g.max.z:g.min.z,e.distanceToPoint(FA)<0)return!1}return!0}containsPoint(g){const I=this.planes;for(let C=0;C<6;C++)if(I[C].distanceToPoint(g)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}function fA(){let g=null,I=!1,C=null,e=null;function t(I,A){C(I,A),e=g.requestAnimationFrame(t)}return{start:function(){!0!==I&&null!==C&&(e=g.requestAnimationFrame(t),I=!0)},stop:function(){g.cancelAnimationFrame(e),I=!1},setAnimationLoop:function(g){C=g},setContext:function(I){g=I}}}function xA(g,I){const C=I.isWebGL2,e=new WeakMap;return{get:function(g){return g.isInterleavedBufferAttribute&&(g=g.data),e.get(g)},remove:function(I){I.isInterleavedBufferAttribute&&(I=I.data);const C=e.get(I);C&&(g.deleteBuffer(C.buffer),e.delete(I))},update:function(I,t){if(I.isGLBufferAttribute){const g=e.get(I);return void((!g||g.version<I.version)&&e.set(I,{buffer:I.buffer,type:I.type,bytesPerElement:I.elementSize,version:I.version}))}I.isInterleavedBufferAttribute&&(I=I.data);const A=e.get(I);void 0===A?e.set(I,function(I,e){const t=I.array,A=I.usage,i=g.createBuffer();g.bindBuffer(e,i),g.bufferData(e,t,A),I.onUploadCallback();let o=5126;return t instanceof Float32Array?o=5126:t instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):t instanceof Uint16Array?I.isFloat16BufferAttribute?C?o=5131:console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2."):o=5123:t instanceof Int16Array?o=5122:t instanceof Uint32Array?o=5125:t instanceof Int32Array?o=5124:t instanceof Int8Array?o=5120:t instanceof Uint8Array&&(o=5121),{buffer:i,type:o,bytesPerElement:t.BYTES_PER_ELEMENT,version:I.version}}(I,t)):A.version<I.version&&(function(I,e,t){const A=e.array,i=e.updateRange;g.bindBuffer(t,I),-1===i.count?g.bufferSubData(t,0,A):(C?g.bufferSubData(t,i.offset*A.BYTES_PER_ELEMENT,A,i.offset,i.count):g.bufferSubData(t,i.offset*A.BYTES_PER_ELEMENT,A.subarray(i.offset,i.offset+i.count)),i.count=-1)}(A.buffer,I,t),A.version=I.version)}}}class JA extends CA{constructor(g=1,I=1,C=1,e=1){super(),this.type="PlaneGeometry",this.parameters={width:g,height:I,widthSegments:C,heightSegments:e};const t=g/2,A=I/2,i=Math.floor(C),o=Math.floor(e),n=i+1,l=o+1,a=g/i,c=I/o,s=[],d=[],b=[],r=[];for(let g=0;g<l;g++){const I=g*c-A;for(let C=0;C<n;C++){const e=C*a-t;d.push(e,-I,0),b.push(0,0,1),r.push(C/i),r.push(1-g/o)}}for(let g=0;g<o;g++)for(let I=0;I<i;I++){const C=I+n*g,e=I+n*(g+1),t=I+1+n*(g+1),A=I+1+n*g;s.push(C,e,A),s.push(e,t,A)}this.setIndex(s),this.setAttribute("position",new Ut(d,3)),this.setAttribute("normal",new Ut(b,3)),this.setAttribute("uv",new Ut(r,2))}}const LA={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_maxMipLevel 8.0\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_maxTileSize 256.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\n\t\tvec2 f = fract( uv );\n\t\tuv += 0.5 - f;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tif ( mipInt < cubeUV_maxMipLevel ) {\n\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\t\t}\n\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\t\tuv *= texelSize;\n\t\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x += texelSize;\n\t\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.y += texelSize;\n\t\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x -= texelSize;\n\t\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tvec3 tm = mix( tl, tr, f.x );\n\t\tvec3 bm = mix( bl, br, f.x );\n\t\treturn mix( tm, bm, f.y );\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value ) {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tfogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat specularRoughness;\n\tvec3 specularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifndef USE_MORPHNORMALS\n\t\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\t\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t#endif\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmissionmap_fragment:"#ifdef USE_TRANSMISSIONMAP\n\ttotalTransmission *= texture2D( transmissionMap, vUv ).r;\n#endif",transmissionmap_pars_fragment:"#ifdef USE_TRANSMISSIONMAP\n\tuniform sampler2D transmissionMap;\n#endif",uv_pars_fragment:"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",cube_frag:"#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSMISSION\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSMISSION\n\tuniform float transmission;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <transmissionmap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#ifdef TRANSMISSION\n\t\tfloat totalTransmission = transmission;\n\t#endif\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <transmissionmap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSMISSION\n\t\tdiffuseColor.a *= mix( saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) ), 1.0, metalness );\n\t#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",normal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",normal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",shadow_vert:"#include <common>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}"},kA={common:{diffuse:{value:new wt(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new OC},uv2Transform:{value:new OC},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new DC(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new wt(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new wt(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},uvTransform:{value:new OC}},sprite:{diffuse:{value:new wt(15658734)},opacity:{value:1},center:{value:new DC(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},uvTransform:{value:new OC}}},MA={basic:{uniforms:yA([kA.common,kA.specularmap,kA.envmap,kA.aomap,kA.lightmap,kA.fog]),vertexShader:LA.meshbasic_vert,fragmentShader:LA.meshbasic_frag},lambert:{uniforms:yA([kA.common,kA.specularmap,kA.envmap,kA.aomap,kA.lightmap,kA.emissivemap,kA.fog,kA.lights,{emissive:{value:new wt(0)}}]),vertexShader:LA.meshlambert_vert,fragmentShader:LA.meshlambert_frag},phong:{uniforms:yA([kA.common,kA.specularmap,kA.envmap,kA.aomap,kA.lightmap,kA.emissivemap,kA.bumpmap,kA.normalmap,kA.displacementmap,kA.fog,kA.lights,{emissive:{value:new wt(0)},specular:{value:new wt(1118481)},shininess:{value:30}}]),vertexShader:LA.meshphong_vert,fragmentShader:LA.meshphong_frag},standard:{uniforms:yA([kA.common,kA.envmap,kA.aomap,kA.lightmap,kA.emissivemap,kA.bumpmap,kA.normalmap,kA.displacementmap,kA.roughnessmap,kA.metalnessmap,kA.fog,kA.lights,{emissive:{value:new wt(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:LA.meshphysical_vert,fragmentShader:LA.meshphysical_frag},toon:{uniforms:yA([kA.common,kA.aomap,kA.lightmap,kA.emissivemap,kA.bumpmap,kA.normalmap,kA.displacementmap,kA.gradientmap,kA.fog,kA.lights,{emissive:{value:new wt(0)}}]),vertexShader:LA.meshtoon_vert,fragmentShader:LA.meshtoon_frag},matcap:{uniforms:yA([kA.common,kA.bumpmap,kA.normalmap,kA.displacementmap,kA.fog,{matcap:{value:null}}]),vertexShader:LA.meshmatcap_vert,fragmentShader:LA.meshmatcap_frag},points:{uniforms:yA([kA.points,kA.fog]),vertexShader:LA.points_vert,fragmentShader:LA.points_frag},dashed:{uniforms:yA([kA.common,kA.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:LA.linedashed_vert,fragmentShader:LA.linedashed_frag},depth:{uniforms:yA([kA.common,kA.displacementmap]),vertexShader:LA.depth_vert,fragmentShader:LA.depth_frag},normal:{uniforms:yA([kA.common,kA.bumpmap,kA.normalmap,kA.displacementmap,{opacity:{value:1}}]),vertexShader:LA.normal_vert,fragmentShader:LA.normal_frag},sprite:{uniforms:yA([kA.sprite,kA.fog]),vertexShader:LA.sprite_vert,fragmentShader:LA.sprite_frag},background:{uniforms:{uvTransform:{value:new OC},t2D:{value:null}},vertexShader:LA.background_vert,fragmentShader:LA.background_frag},cube:{uniforms:yA([kA.envmap,{opacity:{value:1}}]),vertexShader:LA.cube_vert,fragmentShader:LA.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:LA.equirect_vert,fragmentShader:LA.equirect_frag},distanceRGBA:{uniforms:yA([kA.common,kA.displacementmap,{referencePosition:{value:new Ae},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:LA.distanceRGBA_vert,fragmentShader:LA.distanceRGBA_frag},shadow:{uniforms:yA([kA.lights,kA.fog,{color:{value:new wt(0)},opacity:{value:1}}]),vertexShader:LA.shadow_vert,fragmentShader:LA.shadow_frag}};function QA(g,I,C,e,t){const A=new wt(0);let i,o,n=0,l=null,a=0,c=null;function s(g,I){C.buffers.color.setClear(g.r,g.g,g.b,I,t)}return{getClearColor:function(){return A},setClearColor:function(g,I=1){A.set(g),n=I,s(A,n)},getClearAlpha:function(){return n},setClearAlpha:function(g){n=g,s(A,n)},render:function(C,t,d,G){let h=!0===t.isScene?t.background:null;h&&h.isTexture&&(h=I.get(h));const m=g.xr,u=m.getSession&&m.getSession();u&&"additive"===u.environmentBlendMode&&(h=null),null===h?s(A,n):h&&h.isColor&&(s(h,1),G=!0),(g.autoClear||G)&&g.clear(g.autoClearColor,g.autoClearDepth,g.autoClearStencil),h&&(h.isCubeTexture||h.mapping===lg)?(void 0===o&&(o=new BA(new pA(1,1,1),new vA({name:"BackgroundCubeMaterial",uniforms:WA(MA.cube.uniforms),vertexShader:MA.cube.vertexShader,fragmentShader:MA.cube.fragmentShader,side:r,depthTest:!1,depthWrite:!1,fog:!1})),o.geometry.deleteAttribute("normal"),o.geometry.deleteAttribute("uv"),o.onBeforeRender=function(g,I,C){this.matrixWorld.copyPosition(C.matrixWorld)},Object.defineProperty(o.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),e.update(o)),o.material.uniforms.envMap.value=h,o.material.uniforms.flipEnvMap.value=h.isCubeTexture&&h._needsFlipEnvMap?-1:1,l===h&&a===h.version&&c===g.toneMapping||(o.material.needsUpdate=!0,l=h,a=h.version,c=g.toneMapping),C.unshift(o,o.geometry,o.material,0,0,null)):h&&h.isTexture&&(void 0===i&&(i=new BA(new JA(2,2),new vA({name:"BackgroundMaterial",uniforms:WA(MA.background.uniforms),vertexShader:MA.background.vertexShader,fragmentShader:MA.background.fragmentShader,side:b,depthTest:!1,depthWrite:!1,fog:!1})),i.geometry.deleteAttribute("normal"),Object.defineProperty(i.material,"map",{get:function(){return this.uniforms.t2D.value}}),e.update(i)),i.material.uniforms.t2D.value=h,!0===h.matrixAutoUpdate&&h.updateMatrix(),i.material.uniforms.uvTransform.value.copy(h.matrix),l===h&&a===h.version&&c===g.toneMapping||(i.material.needsUpdate=!0,l=h,a=h.version,c=g.toneMapping),C.unshift(i,i.geometry,i.material,0,0,null))}}}function UA(g,I,C,e){const t=g.getParameter(34921),A=e.isWebGL2?null:I.get("OES_vertex_array_object"),i=e.isWebGL2||null!==A,o={},n=s(null);let l=n;function a(I){return e.isWebGL2?g.bindVertexArray(I):A.bindVertexArrayOES(I)}function c(I){return e.isWebGL2?g.deleteVertexArray(I):A.deleteVertexArrayOES(I)}function s(g){const I=[],C=[],e=[];for(let g=0;g<t;g++)I[g]=0,C[g]=0,e[g]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:I,enabledAttributes:C,attributeDivisors:e,object:g,attributes:{},index:null}}function d(){const g=l.newAttributes;for(let I=0,C=g.length;I<C;I++)g[I]=0}function b(g){r(g,0)}function r(C,t){const A=l.newAttributes,i=l.enabledAttributes,o=l.attributeDivisors;A[C]=1,0===i[C]&&(g.enableVertexAttribArray(C),i[C]=1),o[C]!==t&&((e.isWebGL2?g:I.get("ANGLE_instanced_arrays"))[e.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](C,t),o[C]=t)}function G(){const I=l.newAttributes,C=l.enabledAttributes;for(let e=0,t=C.length;e<t;e++)C[e]!==I[e]&&(g.disableVertexAttribArray(e),C[e]=0)}function h(I,C,t,A,i,o){!0!==e.isWebGL2||5124!==t&&5125!==t?g.vertexAttribPointer(I,C,t,A,i,o):g.vertexAttribIPointer(I,C,t,i,o)}function m(){u(),l!==n&&(l=n,a(l.object))}function u(){n.geometry=null,n.program=null,n.wireframe=!1}return{setup:function(t,n,c,m,u){let B=!1;if(i){const I=function(I,C,t){const i=!0===t.wireframe;let n=o[I.id];void 0===n&&(n={},o[I.id]=n);let l=n[C.id];void 0===l&&(l={},n[C.id]=l);let a=l[i];return void 0===a&&(a=s(e.isWebGL2?g.createVertexArray():A.createVertexArrayOES()),l[i]=a),a}(m,c,n);l!==I&&(l=I,a(l.object)),B=function(g,I){const C=l.attributes,e=g.attributes;let t=0;for(const g in e){const I=C[g],A=e[g];if(void 0===I)return!0;if(I.attribute!==A)return!0;if(I.data!==A.data)return!0;t++}return l.attributesNum!==t||l.index!==I}(m,u),B&&function(g,I){const C={},e=g.attributes;let t=0;for(const g in e){const I=e[g],A={};A.attribute=I,I.data&&(A.data=I.data),C[g]=A,t++}l.attributes=C,l.attributesNum=t,l.index=I}(m,u)}else{const g=!0===n.wireframe;l.geometry===m.id&&l.program===c.id&&l.wireframe===g||(l.geometry=m.id,l.program=c.id,l.wireframe=g,B=!0)}!0===t.isInstancedMesh&&(B=!0),null!==u&&C.update(u,34963),B&&(function(t,A,i,o){if(!1===e.isWebGL2&&(t.isInstancedMesh||o.isInstancedBufferGeometry)&&null===I.get("ANGLE_instanced_arrays"))return;d();const n=o.attributes,l=i.getAttributes(),a=A.defaultAttributeValues;for(const I in l){const e=l[I];if(e>=0){const A=n[I];if(void 0!==A){const I=A.normalized,t=A.itemSize,i=C.get(A);if(void 0===i)continue;const n=i.buffer,l=i.type,a=i.bytesPerElement;if(A.isInterleavedBufferAttribute){const C=A.data,i=C.stride,c=A.offset;C&&C.isInstancedInterleavedBuffer?(r(e,C.meshPerAttribute),void 0===o._maxInstanceCount&&(o._maxInstanceCount=C.meshPerAttribute*C.count)):b(e),g.bindBuffer(34962,n),h(e,t,l,I,i*a,c*a)}else A.isInstancedBufferAttribute?(r(e,A.meshPerAttribute),void 0===o._maxInstanceCount&&(o._maxInstanceCount=A.meshPerAttribute*A.count)):b(e),g.bindBuffer(34962,n),h(e,t,l,I,0,0)}else if("instanceMatrix"===I){const I=C.get(t.instanceMatrix);if(void 0===I)continue;const A=I.buffer,i=I.type;r(e+0,1),r(e+1,1),r(e+2,1),r(e+3,1),g.bindBuffer(34962,A),g.vertexAttribPointer(e+0,4,i,!1,64,0),g.vertexAttribPointer(e+1,4,i,!1,64,16),g.vertexAttribPointer(e+2,4,i,!1,64,32),g.vertexAttribPointer(e+3,4,i,!1,64,48)}else if("instanceColor"===I){const I=C.get(t.instanceColor);if(void 0===I)continue;const A=I.buffer,i=I.type;r(e,1),g.bindBuffer(34962,A),g.vertexAttribPointer(e,3,i,!1,12,0)}else if(void 0!==a){const C=a[I];if(void 0!==C)switch(C.length){case 2:g.vertexAttrib2fv(e,C);break;case 3:g.vertexAttrib3fv(e,C);break;case 4:g.vertexAttrib4fv(e,C);break;default:g.vertexAttrib1fv(e,C)}}}}G()}(t,n,c,m),null!==u&&g.bindBuffer(34963,C.get(u).buffer))},reset:m,resetDefaultState:u,dispose:function(){m();for(const g in o){const I=o[g];for(const g in I){const C=I[g];for(const g in C)c(C[g].object),delete C[g];delete I[g]}delete o[g]}},releaseStatesOfGeometry:function(g){if(void 0===o[g.id])return;const I=o[g.id];for(const g in I){const C=I[g];for(const g in C)c(C[g].object),delete C[g];delete I[g]}delete o[g.id]},releaseStatesOfProgram:function(g){for(const I in o){const C=o[I];if(void 0===C[g.id])continue;const e=C[g.id];for(const g in e)c(e[g].object),delete e[g];delete C[g.id]}},initAttributes:d,enableAttribute:b,disableUnusedAttributes:G}}function TA(g,I,C,e){const t=e.isWebGL2;let A;this.setMode=function(g){A=g},this.render=function(I,e){g.drawArrays(A,I,e),C.update(e,A,1)},this.renderInstances=function(e,i,o){if(0===o)return;let n,l;if(t)n=g,l="drawArraysInstanced";else if(n=I.get("ANGLE_instanced_arrays"),l="drawArraysInstancedANGLE",null===n)return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");n[l](A,e,i,o),C.update(i,A,o)}}function EA(g,I,C){let e;function t(I){if("highp"===I){if(g.getShaderPrecisionFormat(35633,36338).precision>0&&g.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";I="mediump"}return"mediump"===I&&g.getShaderPrecisionFormat(35633,36337).precision>0&&g.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}const A="undefined"!=typeof WebGL2RenderingContext&&g instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&g instanceof WebGL2ComputeRenderingContext;let i=void 0!==C.precision?C.precision:"highp";const o=t(i);o!==i&&(console.warn("THREE.WebGLRenderer:",i,"not supported, using",o,"instead."),i=o);const n=!0===C.logarithmicDepthBuffer,l=g.getParameter(34930),a=g.getParameter(35660),c=g.getParameter(3379),s=g.getParameter(34076),d=g.getParameter(34921),b=g.getParameter(36347),r=g.getParameter(36348),G=g.getParameter(36349),h=a>0,m=A||I.has("OES_texture_float");return{isWebGL2:A,getMaxAnisotropy:function(){if(void 0!==e)return e;if(!0===I.has("EXT_texture_filter_anisotropic")){const C=I.get("EXT_texture_filter_anisotropic");e=g.getParameter(C.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else e=0;return e},getMaxPrecision:t,precision:i,logarithmicDepthBuffer:n,maxTextures:l,maxVertexTextures:a,maxTextureSize:c,maxCubemapSize:s,maxAttributes:d,maxVertexUniforms:b,maxVaryings:r,maxFragmentUniforms:G,vertexTextures:h,floatFragmentTextures:m,floatVertexTextures:h&&m,maxSamples:A?g.getParameter(36183):0}}function jA(g){const I=this;let C=null,e=0,t=!1,A=!1;const i=new ct,o=new OC,n={value:null,needsUpdate:!1};function l(){n.value!==C&&(n.value=C,n.needsUpdate=e>0),I.numPlanes=e,I.numIntersection=0}function a(g,C,e,t){const A=null!==g?g.length:0;let l=null;if(0!==A){if(l=n.value,!0!==t||null===l){const I=e+4*A,t=C.matrixWorldInverse;o.getNormalMatrix(t),(null===l||l.length<I)&&(l=new Float32Array(I));for(let I=0,C=e;I!==A;++I,C+=4)i.copy(g[I]).applyMatrix4(t,o),i.normal.toArray(l,C),l[C+3]=i.constant}n.value=l,n.needsUpdate=!0}return I.numPlanes=A,I.numIntersection=0,l}this.uniform=n,this.numPlanes=0,this.numIntersection=0,this.init=function(g,I,A){const i=0!==g.length||I||0!==e||t;return t=I,C=a(g,A,0),e=g.length,i},this.beginShadows=function(){A=!0,a(null)},this.endShadows=function(){A=!1,l()},this.setState=function(I,i,o){const c=I.clippingPlanes,s=I.clipIntersection,d=I.clipShadows,b=g.get(I);if(!t||null===c||0===c.length||A&&!d)A?a(null):l();else{const g=A?0:e,I=4*g;let t=b.clippingState||null;n.value=t,t=a(c,i,I,o);for(let g=0;g!==I;++g)t[g]=C[g];b.clippingState=t,this.numIntersection=s?this.numPlanes:0,this.numPlanes+=g}}}function DA(g){let I=new WeakMap;function C(g,I){return I===og?g.mapping=Ag:I===ng&&(g.mapping=ig),g}function e(g){const C=g.target;C.removeEventListener("dispose",e);const t=I.get(C);void 0!==t&&(I.delete(C),t.dispose())}return{get:function(t){if(t&&t.isTexture){const A=t.mapping;if(A===og||A===ng){if(I.has(t))return C(I.get(t).texture,t.mapping);{const A=t.image;if(A&&A.height>0){const i=g.getRenderTarget(),o=new KA(A.height/2);return o.fromEquirectangularTexture(g,t),I.set(t,o),g.setRenderTarget(i),t.addEventListener("dispose",e),C(o.texture,t.mapping)}return null}}}return t},dispose:function(){I=new WeakMap}}}function OA(g){const I={};function C(C){if(void 0!==I[C])return I[C];let e;switch(C){case"WEBGL_depth_texture":e=g.getExtension("WEBGL_depth_texture")||g.getExtension("MOZ_WEBGL_depth_texture")||g.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":e=g.getExtension("EXT_texture_filter_anisotropic")||g.getExtension("MOZ_EXT_texture_filter_anisotropic")||g.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":e=g.getExtension("WEBGL_compressed_texture_s3tc")||g.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||g.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":e=g.getExtension("WEBGL_compressed_texture_pvrtc")||g.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:e=g.getExtension(C)}return I[C]=e,e}return{has:function(g){return null!==C(g)},init:function(g){g.isWebGL2?C("EXT_color_buffer_float"):(C("WEBGL_depth_texture"),C("OES_texture_float"),C("OES_texture_half_float"),C("OES_texture_half_float_linear"),C("OES_standard_derivatives"),C("OES_element_index_uint"),C("OES_vertex_array_object"),C("ANGLE_instanced_arrays")),C("OES_texture_float_linear"),C("EXT_color_buffer_half_float")},get:function(g){const I=C(g);return null===I&&console.warn("THREE.WebGLRenderer: "+g+" extension not supported."),I}}}function PA(g,I,C,e){const t={},A=new WeakMap;function i(g){const o=g.target;null!==o.index&&I.remove(o.index);for(const g in o.attributes)I.remove(o.attributes[g]);o.removeEventListener("dispose",i),delete t[o.id];const n=A.get(o);n&&(I.remove(n),A.delete(o)),e.releaseStatesOfGeometry(o),!0===o.isInstancedBufferGeometry&&delete o._maxInstanceCount,C.memory.geometries--}function o(g){const C=[],e=g.index,t=g.attributes.position;let i=0;if(null!==e){const g=e.array;i=e.version;for(let I=0,e=g.length;I<e;I+=3){const e=g[I+0],t=g[I+1],A=g[I+2];C.push(e,t,t,A,A,e)}}else{const g=t.array;i=t.version;for(let I=0,e=g.length/3-1;I<e;I+=3){const g=I+0,e=I+1,t=I+2;C.push(g,e,e,t,t,g)}}const o=new(Et(C)>65535?Mt:Lt)(C,1);o.version=i;const n=A.get(g);n&&I.remove(n),A.set(g,o)}return{get:function(g,I){return!0===t[I.id]||(I.addEventListener("dispose",i),t[I.id]=!0,C.memory.geometries++),I},update:function(g){const C=g.attributes;for(const g in C)I.update(C[g],34962);const e=g.morphAttributes;for(const g in e){const C=e[g];for(let g=0,e=C.length;g<e;g++)I.update(C[g],34962)}},getWireframeAttribute:function(g){const I=A.get(g);if(I){const C=g.index;null!==C&&I.version<C.version&&o(g)}else o(g);return A.get(g)}}}function _A(g,I,C,e){const t=e.isWebGL2;let A,i,o;this.setMode=function(g){A=g},this.setIndex=function(g){i=g.type,o=g.bytesPerElement},this.render=function(I,e){g.drawElements(A,e,i,I*o),C.update(e,A,1)},this.renderInstances=function(e,n,l){if(0===l)return;let a,c;if(t)a=g,c="drawElementsInstanced";else if(a=I.get("ANGLE_instanced_arrays"),c="drawElementsInstancedANGLE",null===a)return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");a[c](A,n,i,e*o,l),C.update(n,A,l)}}function qA(g){const I={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:I,programs:null,autoReset:!0,reset:function(){I.frame++,I.calls=0,I.triangles=0,I.points=0,I.lines=0},update:function(g,C,e){switch(I.calls++,C){case 4:I.triangles+=e*(g/3);break;case 1:I.lines+=e*(g/2);break;case 3:I.lines+=e*(g-1);break;case 2:I.lines+=e*g;break;case 0:I.points+=e*g;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",C)}}}}function $A(g,I){return g[0]-I[0]}function gi(g,I){return Math.abs(I[1])-Math.abs(g[1])}function Ii(g){const I={},C=new Float32Array(8),e=[];for(let g=0;g<8;g++)e[g]=[g,0];return{update:function(t,A,i,o){const n=t.morphTargetInfluences,l=void 0===n?0:n.length;let a=I[A.id];if(void 0===a){a=[];for(let g=0;g<l;g++)a[g]=[g,0];I[A.id]=a}for(let g=0;g<l;g++){const I=a[g];I[0]=g,I[1]=n[g]}a.sort(gi);for(let g=0;g<8;g++)g<l&&a[g][1]?(e[g][0]=a[g][0],e[g][1]=a[g][1]):(e[g][0]=Number.MAX_SAFE_INTEGER,e[g][1]=0);e.sort($A);const c=i.morphTargets&&A.morphAttributes.position,s=i.morphNormals&&A.morphAttributes.normal;let d=0;for(let g=0;g<8;g++){const I=e[g],t=I[0],i=I[1];t!==Number.MAX_SAFE_INTEGER&&i?(c&&A.getAttribute("morphTarget"+g)!==c[t]&&A.setAttribute("morphTarget"+g,c[t]),s&&A.getAttribute("morphNormal"+g)!==s[t]&&A.setAttribute("morphNormal"+g,s[t]),C[g]=i,d+=i):(c&&!0===A.hasAttribute("morphTarget"+g)&&A.deleteAttribute("morphTarget"+g),s&&!0===A.hasAttribute("morphNormal"+g)&&A.deleteAttribute("morphNormal"+g),C[g]=0)}const b=A.morphTargetsRelative?1:1-d;o.getUniforms().setValue(g,"morphTargetBaseInfluence",b),o.getUniforms().setValue(g,"morphTargetInfluences",C)}}}function Ci(g,I,C,e){let t=new WeakMap;function A(g){const I=g.target;I.removeEventListener("dispose",A),C.remove(I.instanceMatrix),null!==I.instanceColor&&C.remove(I.instanceColor)}return{update:function(g){const i=e.render.frame,o=g.geometry,n=I.get(g,o);return t.get(n)!==i&&(I.update(n),t.set(n,i)),g.isInstancedMesh&&(!1===g.hasEventListener("dispose",A)&&g.addEventListener("dispose",A),C.update(g.instanceMatrix,34962),null!==g.instanceColor&&C.update(g.instanceColor,34962)),n},dispose:function(){t=new WeakMap}}}MA.physical={uniforms:yA([MA.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new DC(1,1)},clearcoatNormalMap:{value:null},sheen:{value:new wt(0)},transmission:{value:0},transmissionMap:{value:null}}]),vertexShader:LA.meshphysical_vert,fragmentShader:LA.meshphysical_frag};class ei extends $C{constructor(g=null,I=1,C=1,e=1){super(null),this.image={data:g,width:I,height:C,depth:e},this.magFilter=bg,this.minFilter=bg,this.wrapR=sg,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}ei.prototype.isDataTexture2DArray=!0;class ti extends $C{constructor(g=null,I=1,C=1,e=1){super(null),this.image={data:g,width:I,height:C,depth:e},this.magFilter=bg,this.minFilter=bg,this.wrapR=sg,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}ti.prototype.isDataTexture3D=!0;const Ai=new $C,ii=new ei,oi=new ti,ni=new wA,li=[],ai=[],ci=new Float32Array(16),si=new Float32Array(9),di=new Float32Array(4);function bi(g,I,C){const e=g[0];if(e<=0||e>0)return g;const t=I*C;let A=li[t];if(void 0===A&&(A=new Float32Array(t),li[t]=A),0!==I){e.toArray(A,0);for(let e=1,t=0;e!==I;++e)t+=C,g[e].toArray(A,t)}return A}function ri(g,I){if(g.length!==I.length)return!1;for(let C=0,e=g.length;C<e;C++)if(g[C]!==I[C])return!1;return!0}function Gi(g,I){for(let C=0,e=I.length;C<e;C++)g[C]=I[C]}function hi(g,I){let C=ai[I];void 0===C&&(C=new Int32Array(I),ai[I]=C);for(let e=0;e!==I;++e)C[e]=g.allocateTextureUnit();return C}function mi(g,I){const C=this.cache;C[0]!==I&&(g.uniform1f(this.addr,I),C[0]=I)}function ui(g,I){const C=this.cache;if(void 0!==I.x)C[0]===I.x&&C[1]===I.y||(g.uniform2f(this.addr,I.x,I.y),C[0]=I.x,C[1]=I.y);else{if(ri(C,I))return;g.uniform2fv(this.addr,I),Gi(C,I)}}function Bi(g,I){const C=this.cache;if(void 0!==I.x)C[0]===I.x&&C[1]===I.y&&C[2]===I.z||(g.uniform3f(this.addr,I.x,I.y,I.z),C[0]=I.x,C[1]=I.y,C[2]=I.z);else if(void 0!==I.r)C[0]===I.r&&C[1]===I.g&&C[2]===I.b||(g.uniform3f(this.addr,I.r,I.g,I.b),C[0]=I.r,C[1]=I.g,C[2]=I.b);else{if(ri(C,I))return;g.uniform3fv(this.addr,I),Gi(C,I)}}function Zi(g,I){const C=this.cache;if(void 0!==I.x)C[0]===I.x&&C[1]===I.y&&C[2]===I.z&&C[3]===I.w||(g.uniform4f(this.addr,I.x,I.y,I.z,I.w),C[0]=I.x,C[1]=I.y,C[2]=I.z,C[3]=I.w);else{if(ri(C,I))return;g.uniform4fv(this.addr,I),Gi(C,I)}}function pi(g,I){const C=this.cache,e=I.elements;if(void 0===e){if(ri(C,I))return;g.uniformMatrix2fv(this.addr,!1,I),Gi(C,I)}else{if(ri(C,e))return;di.set(e),g.uniformMatrix2fv(this.addr,!1,di),Gi(C,e)}}function Wi(g,I){const C=this.cache,e=I.elements;if(void 0===e){if(ri(C,I))return;g.uniformMatrix3fv(this.addr,!1,I),Gi(C,I)}else{if(ri(C,e))return;si.set(e),g.uniformMatrix3fv(this.addr,!1,si),Gi(C,e)}}function yi(g,I){const C=this.cache,e=I.elements;if(void 0===e){if(ri(C,I))return;g.uniformMatrix4fv(this.addr,!1,I),Gi(C,I)}else{if(ri(C,e))return;ci.set(e),g.uniformMatrix4fv(this.addr,!1,ci),Gi(C,e)}}function Vi(g,I){const C=this.cache;C[0]!==I&&(g.uniform1i(this.addr,I),C[0]=I)}function vi(g,I){const C=this.cache;ri(C,I)||(g.uniform2iv(this.addr,I),Gi(C,I))}function Yi(g,I){const C=this.cache;ri(C,I)||(g.uniform3iv(this.addr,I),Gi(C,I))}function Xi(g,I){const C=this.cache;ri(C,I)||(g.uniform4iv(this.addr,I),Gi(C,I))}function Ri(g,I){const C=this.cache;C[0]!==I&&(g.uniform1ui(this.addr,I),C[0]=I)}function Hi(g,I){const C=this.cache;ri(C,I)||(g.uniform2uiv(this.addr,I),Gi(C,I))}function wi(g,I){const C=this.cache;ri(C,I)||(g.uniform3uiv(this.addr,I),Gi(C,I))}function Ki(g,I){const C=this.cache;ri(C,I)||(g.uniform4uiv(this.addr,I),Gi(C,I))}function Si(g,I,C){const e=this.cache,t=C.allocateTextureUnit();e[0]!==t&&(g.uniform1i(this.addr,t),e[0]=t),C.safeSetTexture2D(I||Ai,t)}function Ni(g,I,C){const e=this.cache,t=C.allocateTextureUnit();e[0]!==t&&(g.uniform1i(this.addr,t),e[0]=t),C.setTexture3D(I||oi,t)}function Fi(g,I,C){const e=this.cache,t=C.allocateTextureUnit();e[0]!==t&&(g.uniform1i(this.addr,t),e[0]=t),C.safeSetTextureCube(I||ni,t)}function zi(g,I,C){const e=this.cache,t=C.allocateTextureUnit();e[0]!==t&&(g.uniform1i(this.addr,t),e[0]=t),C.setTexture2DArray(I||ii,t)}function fi(g,I){g.uniform1fv(this.addr,I)}function xi(g,I){const C=bi(I,this.size,2);g.uniform2fv(this.addr,C)}function Ji(g,I){const C=bi(I,this.size,3);g.uniform3fv(this.addr,C)}function Li(g,I){const C=bi(I,this.size,4);g.uniform4fv(this.addr,C)}function ki(g,I){const C=bi(I,this.size,4);g.uniformMatrix2fv(this.addr,!1,C)}function Mi(g,I){const C=bi(I,this.size,9);g.uniformMatrix3fv(this.addr,!1,C)}function Qi(g,I){const C=bi(I,this.size,16);g.uniformMatrix4fv(this.addr,!1,C)}function Ui(g,I){g.uniform1iv(this.addr,I)}function Ti(g,I){g.uniform2iv(this.addr,I)}function Ei(g,I){g.uniform3iv(this.addr,I)}function ji(g,I){g.uniform4iv(this.addr,I)}function Di(g,I){g.uniform1uiv(this.addr,I)}function Oi(g,I){g.uniform2uiv(this.addr,I)}function Pi(g,I){g.uniform3uiv(this.addr,I)}function _i(g,I){g.uniform4uiv(this.addr,I)}function qi(g,I,C){const e=I.length,t=hi(C,e);g.uniform1iv(this.addr,t);for(let g=0;g!==e;++g)C.safeSetTexture2D(I[g]||Ai,t[g])}function $i(g,I,C){const e=I.length,t=hi(C,e);g.uniform1iv(this.addr,t);for(let g=0;g!==e;++g)C.safeSetTextureCube(I[g]||ni,t[g])}function go(g,I,C){this.id=g,this.addr=C,this.cache=[],this.setValue=function(g){switch(g){case 5126:return mi;case 35664:return ui;case 35665:return Bi;case 35666:return Zi;case 35674:return pi;case 35675:return Wi;case 35676:return yi;case 5124:case 35670:return Vi;case 35667:case 35671:return vi;case 35668:case 35672:return Yi;case 35669:case 35673:return Xi;case 5125:return Ri;case 36294:return Hi;case 36295:return wi;case 36296:return Ki;case 35678:case 36198:case 36298:case 36306:case 35682:return Si;case 35679:case 36299:case 36307:return Ni;case 35680:case 36300:case 36308:case 36293:return Fi;case 36289:case 36303:case 36311:case 36292:return zi}}(I.type)}function Io(g,I,C){this.id=g,this.addr=C,this.cache=[],this.size=I.size,this.setValue=function(g){switch(g){case 5126:return fi;case 35664:return xi;case 35665:return Ji;case 35666:return Li;case 35674:return ki;case 35675:return Mi;case 35676:return Qi;case 5124:case 35670:return Ui;case 35667:case 35671:return Ti;case 35668:case 35672:return Ei;case 35669:case 35673:return ji;case 5125:return Di;case 36294:return Oi;case 36295:return Pi;case 36296:return _i;case 35678:case 36198:case 36298:case 36306:case 35682:return qi;case 35680:case 36300:case 36308:case 36293:return $i}}(I.type)}function Co(g){this.id=g,this.seq=[],this.map={}}Io.prototype.updateCache=function(g){const I=this.cache;g instanceof Float32Array&&I.length!==g.length&&(this.cache=new Float32Array(g.length)),Gi(I,g)},Co.prototype.setValue=function(g,I,C){const e=this.seq;for(let t=0,A=e.length;t!==A;++t){const A=e[t];A.setValue(g,I[A.id],C)}};const eo=/(\w+)(\])?(\[|\.)?/g;function to(g,I){g.seq.push(I),g.map[I.id]=I}function Ao(g,I,C){const e=g.name,t=e.length;for(eo.lastIndex=0;;){const A=eo.exec(e),i=eo.lastIndex;let o=A[1];const n="]"===A[2],l=A[3];if(n&&(o|=0),void 0===l||"["===l&&i+2===t){to(C,void 0===l?new go(o,g,I):new Io(o,g,I));break}{let g=C.map[o];void 0===g&&(g=new Co(o),to(C,g)),C=g}}}function io(g,I){this.seq=[],this.map={};const C=g.getProgramParameter(I,35718);for(let e=0;e<C;++e){const C=g.getActiveUniform(I,e);Ao(C,g.getUniformLocation(I,C.name),this)}}function oo(g,I,C){const e=g.createShader(I);return g.shaderSource(e,C),g.compileShader(e),e}io.prototype.setValue=function(g,I,C,e){const t=this.map[I];void 0!==t&&t.setValue(g,C,e)},io.prototype.setOptional=function(g,I,C){const e=I[C];void 0!==e&&this.setValue(g,C,e)},io.upload=function(g,I,C,e){for(let t=0,A=I.length;t!==A;++t){const A=I[t],i=C[A.id];!1!==i.needsUpdate&&A.setValue(g,i.value,e)}},io.seqWithValue=function(g,I){const C=[];for(let e=0,t=g.length;e!==t;++e){const t=g[e];t.id in I&&C.push(t)}return C};let no=0;function lo(g){switch(g){case PI:return["Linear","( value )"];case _I:return["sRGB","( value )"];case $I:return["RGBE","( value )"];case IC:return["RGBM","( value, 7.0 )"];case CC:return["RGBM","( value, 16.0 )"];case eC:return["RGBD","( value, 256.0 )"];case qI:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case gC:return["LogLuv","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",g),["Linear","( value )"]}}function ao(g,I,C){const e=g.getShaderParameter(I,35713),t=g.getShaderInfoLog(I).trim();return e&&""===t?"":"THREE.WebGLShader: gl.getShaderInfoLog() "+C+"\n"+t+function(g){const I=g.split("\n");for(let g=0;g<I.length;g++)I[g]=g+1+": "+I[g];return I.join("\n")}(g.getShaderSource(I))}function co(g,I){const C=lo(I);return"vec4 "+g+"( vec4 value ) { return "+C[0]+"ToLinear"+C[1]+"; }"}function so(g,I){const C=lo(I);return"vec4 "+g+"( vec4 value ) { return LinearTo"+C[0]+C[1]+"; }"}function bo(g,I){let C;switch(I){case $:C="Linear";break;case gg:C="Reinhard";break;case Ig:C="OptimizedCineon";break;case Cg:C="ACESFilmic";break;case eg:C="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",I),C="Linear"}return"vec3 "+g+"( vec3 color ) { return "+C+"ToneMapping( color ); }"}function ro(g){return""!==g}function Go(g,I){return g.replace(/NUM_DIR_LIGHTS/g,I.numDirLights).replace(/NUM_SPOT_LIGHTS/g,I.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,I.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,I.numPointLights).replace(/NUM_HEMI_LIGHTS/g,I.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,I.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,I.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,I.numPointLightShadows)}function ho(g,I){return g.replace(/NUM_CLIPPING_PLANES/g,I.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,I.numClippingPlanes-I.numClipIntersection)}const mo=/^[ \t]*#include +<([\w\d./]+)>/gm;function uo(g){return g.replace(mo,Bo)}function Bo(g,I){const C=LA[I];if(void 0===C)throw new Error("Can not resolve #include <"+I+">");return uo(C)}const Zo=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,po=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function Wo(g){return g.replace(po,Vo).replace(Zo,yo)}function yo(g,I,C,e){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),Vo(0,I,C,e)}function Vo(g,I,C,e){let t="";for(let g=parseInt(I);g<parseInt(C);g++)t+=e.replace(/\[\s*i\s*\]/g,"[ "+g+" ]").replace(/UNROLLED_LOOP_INDEX/g,g);return t}function vo(g){let I="precision "+g.precision+" float;\nprecision "+g.precision+" int;";return"highp"===g.precision?I+="\n#define HIGH_PRECISION":"mediump"===g.precision?I+="\n#define MEDIUM_PRECISION":"lowp"===g.precision&&(I+="\n#define LOW_PRECISION"),I}function Yo(g,I,C,e){const t=g.getContext(),A=C.defines;let i=C.vertexShader,o=C.fragmentShader;const n=function(g){let I="SHADOWMAP_TYPE_BASIC";return g.shadowMapType===c?I="SHADOWMAP_TYPE_PCF":g.shadowMapType===s?I="SHADOWMAP_TYPE_PCF_SOFT":g.shadowMapType===d&&(I="SHADOWMAP_TYPE_VSM"),I}(C),l=function(g){let I="ENVMAP_TYPE_CUBE";if(g.envMap)switch(g.envMapMode){case Ag:case ig:I="ENVMAP_TYPE_CUBE";break;case lg:case ag:I="ENVMAP_TYPE_CUBE_UV"}return I}(C),a=function(g){let I="ENVMAP_MODE_REFLECTION";if(g.envMap)switch(g.envMapMode){case ig:case ag:I="ENVMAP_MODE_REFRACTION"}return I}(C),b=function(g){let I="ENVMAP_BLENDING_NONE";if(g.envMap)switch(g.combine){case O:I="ENVMAP_BLENDING_MULTIPLY";break;case P:I="ENVMAP_BLENDING_MIX";break;case _:I="ENVMAP_BLENDING_ADD"}return I}(C),r=g.gammaFactor>0?g.gammaFactor:1,G=C.isWebGL2?"":function(g){return[g.extensionDerivatives||g.envMapCubeUV||g.bumpMap||g.tangentSpaceNormalMap||g.clearcoatNormalMap||g.flatShading||"physical"===g.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(g.extensionFragDepth||g.logarithmicDepthBuffer)&&g.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",g.extensionDrawBuffers&&g.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(g.extensionShaderTextureLOD||g.envMap)&&g.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(ro).join("\n")}(C),h=function(g){const I=[];for(const C in g){const e=g[C];!1!==e&&I.push("#define "+C+" "+e)}return I.join("\n")}(A),m=t.createProgram();let u,B,Z=C.glslVersion?"#version "+C.glslVersion+"\n":"";C.isRawShaderMaterial?(u=[h].filter(ro).join("\n"),u.length>0&&(u+="\n"),B=[G,h].filter(ro).join("\n"),B.length>0&&(B+="\n")):(u=[vo(C),"#define SHADER_NAME "+C.shaderName,h,C.instancing?"#define USE_INSTANCING":"",C.instancingColor?"#define USE_INSTANCING_COLOR":"",C.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+r,"#define MAX_BONES "+C.maxBones,C.useFog&&C.fog?"#define USE_FOG":"",C.useFog&&C.fogExp2?"#define FOG_EXP2":"",C.map?"#define USE_MAP":"",C.envMap?"#define USE_ENVMAP":"",C.envMap?"#define "+a:"",C.lightMap?"#define USE_LIGHTMAP":"",C.aoMap?"#define USE_AOMAP":"",C.emissiveMap?"#define USE_EMISSIVEMAP":"",C.bumpMap?"#define USE_BUMPMAP":"",C.normalMap?"#define USE_NORMALMAP":"",C.normalMap&&C.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",C.normalMap&&C.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",C.clearcoatMap?"#define USE_CLEARCOATMAP":"",C.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",C.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",C.displacementMap&&C.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",C.specularMap?"#define USE_SPECULARMAP":"",C.roughnessMap?"#define USE_ROUGHNESSMAP":"",C.metalnessMap?"#define USE_METALNESSMAP":"",C.alphaMap?"#define USE_ALPHAMAP":"",C.transmissionMap?"#define USE_TRANSMISSIONMAP":"",C.vertexTangents?"#define USE_TANGENT":"",C.vertexColors?"#define USE_COLOR":"",C.vertexAlphas?"#define USE_COLOR_ALPHA":"",C.vertexUvs?"#define USE_UV":"",C.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",C.flatShading?"#define FLAT_SHADED":"",C.skinning?"#define USE_SKINNING":"",C.useVertexTexture?"#define BONE_TEXTURE":"",C.morphTargets?"#define USE_MORPHTARGETS":"",C.morphNormals&&!1===C.flatShading?"#define USE_MORPHNORMALS":"",C.doubleSided?"#define DOUBLE_SIDED":"",C.flipSided?"#define FLIP_SIDED":"",C.shadowMapEnabled?"#define USE_SHADOWMAP":"",C.shadowMapEnabled?"#define "+n:"",C.sizeAttenuation?"#define USE_SIZEATTENUATION":"",C.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",C.logarithmicDepthBuffer&&C.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(ro).join("\n"),B=[G,vo(C),"#define SHADER_NAME "+C.shaderName,h,C.alphaTest?"#define ALPHATEST "+C.alphaTest+(C.alphaTest%1?"":".0"):"","#define GAMMA_FACTOR "+r,C.useFog&&C.fog?"#define USE_FOG":"",C.useFog&&C.fogExp2?"#define FOG_EXP2":"",C.map?"#define USE_MAP":"",C.matcap?"#define USE_MATCAP":"",C.envMap?"#define USE_ENVMAP":"",C.envMap?"#define "+l:"",C.envMap?"#define "+a:"",C.envMap?"#define "+b:"",C.lightMap?"#define USE_LIGHTMAP":"",C.aoMap?"#define USE_AOMAP":"",C.emissiveMap?"#define USE_EMISSIVEMAP":"",C.bumpMap?"#define USE_BUMPMAP":"",C.normalMap?"#define USE_NORMALMAP":"",C.normalMap&&C.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",C.normalMap&&C.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",C.clearcoatMap?"#define USE_CLEARCOATMAP":"",C.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",C.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",C.specularMap?"#define USE_SPECULARMAP":"",C.roughnessMap?"#define USE_ROUGHNESSMAP":"",C.metalnessMap?"#define USE_METALNESSMAP":"",C.alphaMap?"#define USE_ALPHAMAP":"",C.sheen?"#define USE_SHEEN":"",C.transmissionMap?"#define USE_TRANSMISSIONMAP":"",C.vertexTangents?"#define USE_TANGENT":"",C.vertexColors||C.instancingColor?"#define USE_COLOR":"",C.vertexAlphas?"#define USE_COLOR_ALPHA":"",C.vertexUvs?"#define USE_UV":"",C.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",C.gradientMap?"#define USE_GRADIENTMAP":"",C.flatShading?"#define FLAT_SHADED":"",C.doubleSided?"#define DOUBLE_SIDED":"",C.flipSided?"#define FLIP_SIDED":"",C.shadowMapEnabled?"#define USE_SHADOWMAP":"",C.shadowMapEnabled?"#define "+n:"",C.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",C.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",C.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",C.logarithmicDepthBuffer&&C.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"",(C.extensionShaderTextureLOD||C.envMap)&&C.rendererExtensionShaderTextureLod?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",C.toneMapping!==q?"#define TONE_MAPPING":"",C.toneMapping!==q?LA.tonemapping_pars_fragment:"",C.toneMapping!==q?bo("toneMapping",C.toneMapping):"",C.dithering?"#define DITHERING":"",LA.encodings_pars_fragment,C.map?co("mapTexelToLinear",C.mapEncoding):"",C.matcap?co("matcapTexelToLinear",C.matcapEncoding):"",C.envMap?co("envMapTexelToLinear",C.envMapEncoding):"",C.emissiveMap?co("emissiveMapTexelToLinear",C.emissiveMapEncoding):"",C.lightMap?co("lightMapTexelToLinear",C.lightMapEncoding):"",so("linearToOutputTexel",C.outputEncoding),C.depthPacking?"#define DEPTH_PACKING "+C.depthPacking:"","\n"].filter(ro).join("\n")),i=uo(i),i=Go(i,C),i=ho(i,C),o=uo(o),o=Go(o,C),o=ho(o,C),i=Wo(i),o=Wo(o),C.isWebGL2&&!0!==C.isRawShaderMaterial&&(Z="#version 300 es\n",u=["#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+u,B=["#define varying in",C.glslVersion===NC?"":"out highp vec4 pc_fragColor;",C.glslVersion===NC?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+B);const p=Z+B+o,W=oo(t,35633,Z+u+i),y=oo(t,35632,p);if(t.attachShader(m,W),t.attachShader(m,y),void 0!==C.index0AttributeName?t.bindAttribLocation(m,0,C.index0AttributeName):!0===C.morphTargets&&t.bindAttribLocation(m,0,"position"),t.linkProgram(m),g.debug.checkShaderErrors){const g=t.getProgramInfoLog(m).trim(),I=t.getShaderInfoLog(W).trim(),C=t.getShaderInfoLog(y).trim();let e=!0,A=!0;if(!1===t.getProgramParameter(m,35714)){e=!1;const I=ao(t,W,"vertex"),C=ao(t,y,"fragment");console.error("THREE.WebGLProgram: shader error: ",t.getError(),"35715",t.getProgramParameter(m,35715),"gl.getProgramInfoLog",g,I,C)}else""!==g?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",g):""!==I&&""!==C||(A=!1);A&&(this.diagnostics={runnable:e,programLog:g,vertexShader:{log:I,prefix:u},fragmentShader:{log:C,prefix:B}})}let V,v;return t.deleteShader(W),t.deleteShader(y),this.getUniforms=function(){return void 0===V&&(V=new io(t,m)),V},this.getAttributes=function(){return void 0===v&&(v=function(g,I){const C={},e=g.getProgramParameter(I,35721);for(let t=0;t<e;t++){const e=g.getActiveAttrib(I,t).name;C[e]=g.getAttribLocation(I,e)}return C}(t,m)),v},this.destroy=function(){e.releaseStatesOfProgram(this),t.deleteProgram(m),this.program=void 0},this.name=C.shaderName,this.id=no++,this.cacheKey=I,this.usedTimes=1,this.program=m,this.vertexShader=W,this.fragmentShader=y,this}function Xo(g,I,C,e,t,A){const i=[],o=e.isWebGL2,n=e.logarithmicDepthBuffer,l=e.floatVertexTextures,a=e.maxVertexUniforms,c=e.vertexTextures;let s=e.precision;const d={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},b=["precision","isWebGL2","supportsVertexTextures","outputEncoding","instancing","instancingColor","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","envMapCubeUV","lightMap","lightMapEncoding","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","vertexAlphas","vertexTangents","vertexUvs","uvsVertexOnly","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","numDirLightShadows","numPointLightShadows","numSpotLightShadows","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","sheen","transmissionMap"];function h(g){let I;return g&&g.isTexture?I=g.encoding:g&&g.isWebGLRenderTarget?(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),I=g.texture.encoding):I=PI,I}return{getParameters:function(t,i,b,m,u){const B=m.fog,Z=t.isMeshStandardMaterial?m.environment:null,p=I.get(t.envMap||Z),W=d[t.type],y=u.isSkinnedMesh?function(g){const I=g.skeleton.bones;if(l)return 1024;{const g=a,C=Math.floor((g-20)/4),e=Math.min(C,I.length);return e<I.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+I.length+" bones. This GPU supports "+e+"."),0):e}}(u):0;let V,v;if(null!==t.precision&&(s=e.getMaxPrecision(t.precision),s!==t.precision&&console.warn("THREE.WebGLProgram.getParameters:",t.precision,"not supported, using",s,"instead.")),W){const g=MA[W];V=g.vertexShader,v=g.fragmentShader}else V=t.vertexShader,v=t.fragmentShader;const Y=g.getRenderTarget();return{isWebGL2:o,shaderID:W,shaderName:t.type,vertexShader:V,fragmentShader:v,defines:t.defines,isRawShaderMaterial:!0===t.isRawShaderMaterial,glslVersion:t.glslVersion,precision:s,instancing:!0===u.isInstancedMesh,instancingColor:!0===u.isInstancedMesh&&null!==u.instanceColor,supportsVertexTextures:c,outputEncoding:null!==Y?h(Y.texture):g.outputEncoding,map:!!t.map,mapEncoding:h(t.map),matcap:!!t.matcap,matcapEncoding:h(t.matcap),envMap:!!p,envMapMode:p&&p.mapping,envMapEncoding:h(p),envMapCubeUV:!!p&&(p.mapping===lg||p.mapping===ag),lightMap:!!t.lightMap,lightMapEncoding:h(t.lightMap),aoMap:!!t.aoMap,emissiveMap:!!t.emissiveMap,emissiveMapEncoding:h(t.emissiveMap),bumpMap:!!t.bumpMap,normalMap:!!t.normalMap,objectSpaceNormalMap:t.normalMapType===oC,tangentSpaceNormalMap:t.normalMapType===iC,clearcoatMap:!!t.clearcoatMap,clearcoatRoughnessMap:!!t.clearcoatRoughnessMap,clearcoatNormalMap:!!t.clearcoatNormalMap,displacementMap:!!t.displacementMap,roughnessMap:!!t.roughnessMap,metalnessMap:!!t.metalnessMap,specularMap:!!t.specularMap,alphaMap:!!t.alphaMap,gradientMap:!!t.gradientMap,sheen:!!t.sheen,transmissionMap:!!t.transmissionMap,combine:t.combine,vertexTangents:t.normalMap&&t.vertexTangents,vertexColors:t.vertexColors,vertexAlphas:!0===t.vertexColors&&u.geometry&&u.geometry.attributes.color&&4===u.geometry.attributes.color.itemSize,vertexUvs:!!(t.map||t.bumpMap||t.normalMap||t.specularMap||t.alphaMap||t.emissiveMap||t.roughnessMap||t.metalnessMap||t.clearcoatMap||t.clearcoatRoughnessMap||t.clearcoatNormalMap||t.displacementMap||t.transmissionMap),uvsVertexOnly:!(t.map||t.bumpMap||t.normalMap||t.specularMap||t.alphaMap||t.emissiveMap||t.roughnessMap||t.metalnessMap||t.clearcoatNormalMap||t.transmissionMap||!t.displacementMap),fog:!!B,useFog:t.fog,fogExp2:B&&B.isFogExp2,flatShading:!!t.flatShading,sizeAttenuation:t.sizeAttenuation,logarithmicDepthBuffer:n,skinning:t.skinning&&y>0,maxBones:y,useVertexTexture:l,morphTargets:t.morphTargets,morphNormals:t.morphNormals,numDirLights:i.directional.length,numPointLights:i.point.length,numSpotLights:i.spot.length,numRectAreaLights:i.rectArea.length,numHemiLights:i.hemi.length,numDirLightShadows:i.directionalShadowMap.length,numPointLightShadows:i.pointShadowMap.length,numSpotLightShadows:i.spotShadowMap.length,numClippingPlanes:A.numPlanes,numClipIntersection:A.numIntersection,dithering:t.dithering,shadowMapEnabled:g.shadowMap.enabled&&b.length>0,shadowMapType:g.shadowMap.type,toneMapping:t.toneMapped?g.toneMapping:q,physicallyCorrectLights:g.physicallyCorrectLights,premultipliedAlpha:t.premultipliedAlpha,alphaTest:t.alphaTest,doubleSided:t.side===G,flipSided:t.side===r,depthPacking:void 0!==t.depthPacking&&t.depthPacking,index0AttributeName:t.index0AttributeName,extensionDerivatives:t.extensions&&t.extensions.derivatives,extensionFragDepth:t.extensions&&t.extensions.fragDepth,extensionDrawBuffers:t.extensions&&t.extensions.drawBuffers,extensionShaderTextureLOD:t.extensions&&t.extensions.shaderTextureLOD,rendererExtensionFragDepth:o||C.has("EXT_frag_depth"),rendererExtensionDrawBuffers:o||C.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:o||C.has("EXT_shader_texture_lod"),customProgramCacheKey:t.customProgramCacheKey()}},getProgramCacheKey:function(I){const C=[];if(I.shaderID?C.push(I.shaderID):(C.push(I.fragmentShader),C.push(I.vertexShader)),void 0!==I.defines)for(const g in I.defines)C.push(g),C.push(I.defines[g]);if(!1===I.isRawShaderMaterial){for(let g=0;g<b.length;g++)C.push(I[b[g]]);C.push(g.outputEncoding),C.push(g.gammaFactor)}return C.push(I.customProgramCacheKey),C.join()},getUniforms:function(g){const I=d[g.type];let C;if(I){const g=MA[I];C=VA.clone(g.uniforms)}else C=g.uniforms;return C},acquireProgram:function(I,C){let e;for(let g=0,I=i.length;g<I;g++){const I=i[g];if(I.cacheKey===C){e=I,++e.usedTimes;break}}return void 0===e&&(e=new Yo(g,C,I,t),i.push(e)),e},releaseProgram:function(g){if(0==--g.usedTimes){const I=i.indexOf(g);i[I]=i[i.length-1],i.pop(),g.destroy()}},programs:i}}function Ro(){let g=new WeakMap;return{get:function(I){let C=g.get(I);return void 0===C&&(C={},g.set(I,C)),C},remove:function(I){g.delete(I)},update:function(I,C,e){g.get(I)[C]=e},dispose:function(){g=new WeakMap}}}function Ho(g,I){return g.groupOrder!==I.groupOrder?g.groupOrder-I.groupOrder:g.renderOrder!==I.renderOrder?g.renderOrder-I.renderOrder:g.program!==I.program?g.program.id-I.program.id:g.material.id!==I.material.id?g.material.id-I.material.id:g.z!==I.z?g.z-I.z:g.id-I.id}function wo(g,I){return g.groupOrder!==I.groupOrder?g.groupOrder-I.groupOrder:g.renderOrder!==I.renderOrder?g.renderOrder-I.renderOrder:g.z!==I.z?I.z-g.z:g.id-I.id}function Ko(g){const I=[];let C=0;const e=[],t=[],A={id:-1};function i(e,t,i,o,n,l){let a=I[C];const c=g.get(i);return void 0===a?(a={id:e.id,object:e,geometry:t,material:i,program:c.program||A,groupOrder:o,renderOrder:e.renderOrder,z:n,group:l},I[C]=a):(a.id=e.id,a.object=e,a.geometry=t,a.material=i,a.program=c.program||A,a.groupOrder=o,a.renderOrder=e.renderOrder,a.z=n,a.group=l),C++,a}return{opaque:e,transparent:t,init:function(){C=0,e.length=0,t.length=0},push:function(g,I,C,A,o,n){const l=i(g,I,C,A,o,n);(!0===C.transparent?t:e).push(l)},unshift:function(g,I,C,A,o,n){const l=i(g,I,C,A,o,n);(!0===C.transparent?t:e).unshift(l)},finish:function(){for(let g=C,e=I.length;g<e;g++){const C=I[g];if(null===C.id)break;C.id=null,C.object=null,C.geometry=null,C.material=null,C.program=null,C.group=null}},sort:function(g,I){e.length>1&&e.sort(g||Ho),t.length>1&&t.sort(I||wo)}}}function So(g){let I=new WeakMap;return{get:function(C,e){let t;return!1===I.has(C)?(t=new Ko(g),I.set(C,[t])):e>=I.get(C).length?(t=new Ko(g),I.get(C).push(t)):t=I.get(C)[e],t},dispose:function(){I=new WeakMap}}}function No(){const g={};return{get:function(I){if(void 0!==g[I.id])return g[I.id];let C;switch(I.type){case"DirectionalLight":C={direction:new Ae,color:new wt};break;case"SpotLight":C={position:new Ae,direction:new Ae,color:new wt,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":C={position:new Ae,color:new wt,distance:0,decay:0};break;case"HemisphereLight":C={direction:new Ae,skyColor:new wt,groundColor:new wt};break;case"RectAreaLight":C={color:new wt,position:new Ae,halfWidth:new Ae,halfHeight:new Ae}}return g[I.id]=C,C}}}let Fo=0;function zo(g,I){return(I.castShadow?1:0)-(g.castShadow?1:0)}function fo(g,I){const C=new No,e=function(){const g={};return{get:function(I){if(void 0!==g[I.id])return g[I.id];let C;switch(I.type){case"DirectionalLight":case"SpotLight":C={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new DC};break;case"PointLight":C={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new DC,shadowCameraNear:1,shadowCameraFar:1e3}}return g[I.id]=C,C}}}(),t={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let g=0;g<9;g++)t.probe.push(new Ae);const A=new Ae,i=new ze,o=new ze;return{setup:function(A){let i=0,o=0,n=0;for(let g=0;g<9;g++)t.probe[g].set(0,0,0);let l=0,a=0,c=0,s=0,d=0,b=0,r=0,G=0;A.sort(zo);for(let g=0,I=A.length;g<I;g++){const I=A[g],h=I.color,m=I.intensity,u=I.distance,B=I.shadow&&I.shadow.map?I.shadow.map.texture:null;if(I.isAmbientLight)i+=h.r*m,o+=h.g*m,n+=h.b*m;else if(I.isLightProbe)for(let g=0;g<9;g++)t.probe[g].addScaledVector(I.sh.coefficients[g],m);else if(I.isDirectionalLight){const g=C.get(I);if(g.color.copy(I.color).multiplyScalar(I.intensity),I.castShadow){const g=I.shadow,C=e.get(I);C.shadowBias=g.bias,C.shadowNormalBias=g.normalBias,C.shadowRadius=g.radius,C.shadowMapSize=g.mapSize,t.directionalShadow[l]=C,t.directionalShadowMap[l]=B,t.directionalShadowMatrix[l]=I.shadow.matrix,b++}t.directional[l]=g,l++}else if(I.isSpotLight){const g=C.get(I);if(g.position.setFromMatrixPosition(I.matrixWorld),g.color.copy(h).multiplyScalar(m),g.distance=u,g.coneCos=Math.cos(I.angle),g.penumbraCos=Math.cos(I.angle*(1-I.penumbra)),g.decay=I.decay,I.castShadow){const g=I.shadow,C=e.get(I);C.shadowBias=g.bias,C.shadowNormalBias=g.normalBias,C.shadowRadius=g.radius,C.shadowMapSize=g.mapSize,t.spotShadow[c]=C,t.spotShadowMap[c]=B,t.spotShadowMatrix[c]=I.shadow.matrix,G++}t.spot[c]=g,c++}else if(I.isRectAreaLight){const g=C.get(I);g.color.copy(h).multiplyScalar(m),g.halfWidth.set(.5*I.width,0,0),g.halfHeight.set(0,.5*I.height,0),t.rectArea[s]=g,s++}else if(I.isPointLight){const g=C.get(I);if(g.color.copy(I.color).multiplyScalar(I.intensity),g.distance=I.distance,g.decay=I.decay,I.castShadow){const g=I.shadow,C=e.get(I);C.shadowBias=g.bias,C.shadowNormalBias=g.normalBias,C.shadowRadius=g.radius,C.shadowMapSize=g.mapSize,C.shadowCameraNear=g.camera.near,C.shadowCameraFar=g.camera.far,t.pointShadow[a]=C,t.pointShadowMap[a]=B,t.pointShadowMatrix[a]=I.shadow.matrix,r++}t.point[a]=g,a++}else if(I.isHemisphereLight){const g=C.get(I);g.skyColor.copy(I.color).multiplyScalar(m),g.groundColor.copy(I.groundColor).multiplyScalar(m),t.hemi[d]=g,d++}}s>0&&(I.isWebGL2||!0===g.has("OES_texture_float_linear")?(t.rectAreaLTC1=kA.LTC_FLOAT_1,t.rectAreaLTC2=kA.LTC_FLOAT_2):!0===g.has("OES_texture_half_float_linear")?(t.rectAreaLTC1=kA.LTC_HALF_1,t.rectAreaLTC2=kA.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),t.ambient[0]=i,t.ambient[1]=o,t.ambient[2]=n;const h=t.hash;h.directionalLength===l&&h.pointLength===a&&h.spotLength===c&&h.rectAreaLength===s&&h.hemiLength===d&&h.numDirectionalShadows===b&&h.numPointShadows===r&&h.numSpotShadows===G||(t.directional.length=l,t.spot.length=c,t.rectArea.length=s,t.point.length=a,t.hemi.length=d,t.directionalShadow.length=b,t.directionalShadowMap.length=b,t.pointShadow.length=r,t.pointShadowMap.length=r,t.spotShadow.length=G,t.spotShadowMap.length=G,t.directionalShadowMatrix.length=b,t.pointShadowMatrix.length=r,t.spotShadowMatrix.length=G,h.directionalLength=l,h.pointLength=a,h.spotLength=c,h.rectAreaLength=s,h.hemiLength=d,h.numDirectionalShadows=b,h.numPointShadows=r,h.numSpotShadows=G,t.version=Fo++)},setupView:function(g,I){let C=0,e=0,n=0,l=0,a=0;const c=I.matrixWorldInverse;for(let I=0,s=g.length;I<s;I++){const s=g[I];if(s.isDirectionalLight){const g=t.directional[C];g.direction.setFromMatrixPosition(s.matrixWorld),A.setFromMatrixPosition(s.target.matrixWorld),g.direction.sub(A),g.direction.transformDirection(c),C++}else if(s.isSpotLight){const g=t.spot[n];g.position.setFromMatrixPosition(s.matrixWorld),g.position.applyMatrix4(c),g.direction.setFromMatrixPosition(s.matrixWorld),A.setFromMatrixPosition(s.target.matrixWorld),g.direction.sub(A),g.direction.transformDirection(c),n++}else if(s.isRectAreaLight){const g=t.rectArea[l];g.position.setFromMatrixPosition(s.matrixWorld),g.position.applyMatrix4(c),o.identity(),i.copy(s.matrixWorld),i.premultiply(c),o.extractRotation(i),g.halfWidth.set(.5*s.width,0,0),g.halfHeight.set(0,.5*s.height,0),g.halfWidth.applyMatrix4(o),g.halfHeight.applyMatrix4(o),l++}else if(s.isPointLight){const g=t.point[e];g.position.setFromMatrixPosition(s.matrixWorld),g.position.applyMatrix4(c),e++}else if(s.isHemisphereLight){const g=t.hemi[a];g.direction.setFromMatrixPosition(s.matrixWorld),g.direction.transformDirection(c),g.direction.normalize(),a++}}},state:t}}function xo(g,I){const C=new fo(g,I),e=[],t=[];return{init:function(){e.length=0,t.length=0},state:{lightsArray:e,shadowsArray:t,lights:C},setupLights:function(){C.setup(e)},setupLightsView:function(g){C.setupView(e,g)},pushLight:function(g){e.push(g)},pushShadow:function(g){t.push(g)}}}function Jo(g,I){let C=new WeakMap;return{get:function(e,t=0){let A;return!1===C.has(e)?(A=new xo(g,I),C.set(e,[A])):t>=C.get(e).length?(A=new xo(g,I),C.get(e).push(A)):A=C.get(e)[t],A},dispose:function(){C=new WeakMap}}}class Lo extends yt{constructor(g){super(),this.type="MeshDepthMaterial",this.depthPacking=tC,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(g)}copy(g){return super.copy(g),this.depthPacking=g.depthPacking,this.skinning=g.skinning,this.morphTargets=g.morphTargets,this.map=g.map,this.alphaMap=g.alphaMap,this.displacementMap=g.displacementMap,this.displacementScale=g.displacementScale,this.displacementBias=g.displacementBias,this.wireframe=g.wireframe,this.wireframeLinewidth=g.wireframeLinewidth,this}}Lo.prototype.isMeshDepthMaterial=!0;class ko extends yt{constructor(g){super(),this.type="MeshDistanceMaterial",this.referencePosition=new Ae,this.nearDistance=1,this.farDistance=1e3,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(g)}copy(g){return super.copy(g),this.referencePosition.copy(g.referencePosition),this.nearDistance=g.nearDistance,this.farDistance=g.farDistance,this.skinning=g.skinning,this.morphTargets=g.morphTargets,this.map=g.map,this.alphaMap=g.alphaMap,this.displacementMap=g.displacementMap,this.displacementScale=g.displacementScale,this.displacementBias=g.displacementBias,this}}function Mo(g,I,C){let e=new zA;const t=new DC,A=new DC,i=new Ie,o=[],n=[],l={},a=C.maxTextureSize,s={0:r,1:b,2:G},h=new vA({defines:{SAMPLE_RATE:2/8,HALF_SAMPLE_RATE:1/8},uniforms:{shadow_pass:{value:null},resolution:{value:new DC},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\n\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean * HALF_SAMPLE_RATE;\n\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),m=h.clone();m.defines.HORIZONTAL_PASS=1;const B=new CA;B.setAttribute("position",new Ft(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const Z=new BA(B,h),p=this;function W(C,e){const t=I.update(Z);h.uniforms.shadow_pass.value=C.map.texture,h.uniforms.resolution.value=C.mapSize,h.uniforms.radius.value=C.radius,g.setRenderTarget(C.mapPass),g.clear(),g.renderBufferDirect(e,null,t,h,Z,null),m.uniforms.shadow_pass.value=C.mapPass.texture,m.uniforms.resolution.value=C.mapSize,m.uniforms.radius.value=C.radius,g.setRenderTarget(C.map),g.clear(),g.renderBufferDirect(e,null,t,m,Z,null)}function y(g,I,C){const e=g<<0|I<<1|C<<2;let t=o[e];return void 0===t&&(t=new Lo({depthPacking:AC,morphTargets:g,skinning:I}),o[e]=t),t}function V(g,I,C){const e=g<<0|I<<1|C<<2;let t=n[e];return void 0===t&&(t=new ko({morphTargets:g,skinning:I}),n[e]=t),t}function v(I,C,e,t,A,i,o){let n=null,a=y,c=I.customDepthMaterial;if(!0===t.isPointLight&&(a=V,c=I.customDistanceMaterial),void 0===c){let g=!1;!0===e.morphTargets&&(g=C.morphAttributes&&C.morphAttributes.position&&C.morphAttributes.position.length>0);let t=!1;!0===I.isSkinnedMesh&&(!0===e.skinning?t=!0:console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",I)),n=a(g,t,!0===I.isInstancedMesh)}else n=c;if(g.localClippingEnabled&&!0===e.clipShadows&&0!==e.clippingPlanes.length){const g=n.uuid,I=e.uuid;let C=l[g];void 0===C&&(C={},l[g]=C);let t=C[I];void 0===t&&(t=n.clone(),C[I]=t),n=t}return n.visible=e.visible,n.wireframe=e.wireframe,n.side=o===d?null!==e.shadowSide?e.shadowSide:e.side:null!==e.shadowSide?e.shadowSide:s[e.side],n.clipShadows=e.clipShadows,n.clippingPlanes=e.clippingPlanes,n.clipIntersection=e.clipIntersection,n.wireframeLinewidth=e.wireframeLinewidth,n.linewidth=e.linewidth,!0===t.isPointLight&&!0===n.isMeshDistanceMaterial&&(n.referencePosition.setFromMatrixPosition(t.matrixWorld),n.nearDistance=A,n.farDistance=i),n}function Y(C,t,A,i,o){if(!1===C.visible)return;if(C.layers.test(t.layers)&&(C.isMesh||C.isLine||C.isPoints)&&(C.castShadow||C.receiveShadow&&o===d)&&(!C.frustumCulled||e.intersectsObject(C))){C.modelViewMatrix.multiplyMatrices(A.matrixWorldInverse,C.matrixWorld);const e=I.update(C),t=C.material;if(Array.isArray(t)){const I=e.groups;for(let n=0,l=I.length;n<l;n++){const l=I[n],a=t[l.materialIndex];if(a&&a.visible){const I=v(C,e,a,i,A.near,A.far,o);g.renderBufferDirect(A,null,e,I,C,l)}}}else if(t.visible){const I=v(C,e,t,i,A.near,A.far,o);g.renderBufferDirect(A,null,e,I,C,null)}}const n=C.children;for(let g=0,I=n.length;g<I;g++)Y(n[g],t,A,i,o)}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=c,this.render=function(I,C,o){if(!1===p.enabled)return;if(!1===p.autoUpdate&&!1===p.needsUpdate)return;if(0===I.length)return;const n=g.getRenderTarget(),l=g.getActiveCubeFace(),c=g.getActiveMipmapLevel(),s=g.state;s.setBlending(u),s.buffers.color.setClear(1,1,1,1),s.buffers.depth.setTest(!0),s.setScissorTest(!1);for(let n=0,l=I.length;n<l;n++){const l=I[n],c=l.shadow;if(void 0===c){console.warn("THREE.WebGLShadowMap:",l,"has no shadow.");continue}if(!1===c.autoUpdate&&!1===c.needsUpdate)continue;t.copy(c.mapSize);const b=c.getFrameExtents();if(t.multiply(b),A.copy(c.mapSize),(t.x>a||t.y>a)&&(t.x>a&&(A.x=Math.floor(a/b.x),t.x=A.x*b.x,c.mapSize.x=A.x),t.y>a&&(A.y=Math.floor(a/b.y),t.y=A.y*b.y,c.mapSize.y=A.y)),null===c.map&&!c.isPointLightShadow&&this.type===d){const g={minFilter:ug,magFilter:ug,format:xg};c.map=new Ce(t.x,t.y,g),c.map.texture.name=l.name+".shadowMap",c.mapPass=new Ce(t.x,t.y,g),c.camera.updateProjectionMatrix()}if(null===c.map){const g={minFilter:bg,magFilter:bg,format:xg};c.map=new Ce(t.x,t.y,g),c.map.texture.name=l.name+".shadowMap",c.camera.updateProjectionMatrix()}g.setRenderTarget(c.map),g.clear();const r=c.getViewportCount();for(let g=0;g<r;g++){const I=c.getViewport(g);i.set(A.x*I.x,A.y*I.y,A.x*I.z,A.y*I.w),s.viewport(i),c.updateMatrices(l,g),e=c.getFrustum(),Y(C,o,c.camera,l,this.type)}c.isPointLightShadow||this.type!==d||W(c,o),c.needsUpdate=!1}p.needsUpdate=!1,g.setRenderTarget(n,l,c)}}function Qo(g,I,C){const e=C.isWebGL2,t=new function(){let I=!1;const C=new Ie;let e=null;const t=new Ie(0,0,0,0);return{setMask:function(C){e===C||I||(g.colorMask(C,C,C,C),e=C)},setLocked:function(g){I=g},setClear:function(I,e,A,i,o){!0===o&&(I*=i,e*=i,A*=i),C.set(I,e,A,i),!1===t.equals(C)&&(g.clearColor(I,e,A,i),t.copy(C))},reset:function(){I=!1,e=null,t.set(-1,0,0,0)}}},A=new function(){let I=!1,C=null,e=null,t=null;return{setTest:function(g){g?Gg(2929):hg(2929)},setMask:function(e){C===e||I||(g.depthMask(e),C=e)},setFunc:function(I){if(e!==I){if(I)switch(I){case k:g.depthFunc(512);break;case M:g.depthFunc(519);break;case Q:g.depthFunc(513);break;case U:g.depthFunc(515);break;case T:g.depthFunc(514);break;case E:g.depthFunc(518);break;case j:g.depthFunc(516);break;case D:g.depthFunc(517);break;default:g.depthFunc(515)}else g.depthFunc(515);e=I}},setLocked:function(g){I=g},setClear:function(I){t!==I&&(g.clearDepth(I),t=I)},reset:function(){I=!1,C=null,e=null,t=null}}},l=new function(){let I=!1,C=null,e=null,t=null,A=null,i=null,o=null,n=null,l=null;return{setTest:function(g){I||(g?Gg(2960):hg(2960))},setMask:function(e){C===e||I||(g.stencilMask(e),C=e)},setFunc:function(I,C,i){e===I&&t===C&&A===i||(g.stencilFunc(I,C,i),e=I,t=C,A=i)},setOp:function(I,C,e){i===I&&o===C&&n===e||(g.stencilOp(I,C,e),i=I,o=C,n=e)},setLocked:function(g){I=g},setClear:function(I){l!==I&&(g.clearStencil(I),l=I)},reset:function(){I=!1,C=null,e=null,t=null,A=null,i=null,o=null,n=null,l=null}}};let a={},c=null,s={},d=null,b=!1,h=null,m=null,O=null,P=null,_=null,q=null,$=null,gg=!1,Ig=null,Cg=null,eg=null,tg=null,Ag=null;const ig=g.getParameter(35661);let og=!1,ng=0;const lg=g.getParameter(7938);-1!==lg.indexOf("WebGL")?(ng=parseFloat(/^WebGL (\d)/.exec(lg)[1]),og=ng>=1):-1!==lg.indexOf("OpenGL ES")&&(ng=parseFloat(/^OpenGL ES (\d)/.exec(lg)[1]),og=ng>=2);let ag=null,cg={};const sg=new Ie(0,0,g.canvas.width,g.canvas.height),dg=new Ie(0,0,g.canvas.width,g.canvas.height);function bg(I,C,e){const t=new Uint8Array(4),A=g.createTexture();g.bindTexture(I,A),g.texParameteri(I,10241,9728),g.texParameteri(I,10240,9728);for(let I=0;I<e;I++)g.texImage2D(C+I,0,6408,1,1,0,6408,5121,t);return A}const rg={};function Gg(I){!0!==a[I]&&(g.enable(I),a[I]=!0)}function hg(I){!1!==a[I]&&(g.disable(I),a[I]=!1)}rg[3553]=bg(3553,3553,1),rg[34067]=bg(34067,34069,6),t.setClear(0,0,0,1),A.setClear(1),l.setClear(0),Gg(2929),A.setFunc(U),Zg(!1),pg(o),Gg(2884),Bg(u);const mg={[V]:32774,[v]:32778,[Y]:32779};if(e)mg[X]=32775,mg[R]=32776;else{const g=I.get("EXT_blend_minmax");null!==g&&(mg[X]=g.MIN_EXT,mg[R]=g.MAX_EXT)}const ug={[H]:0,[w]:1,[K]:768,[N]:770,[L]:776,[x]:774,[z]:772,[S]:769,[F]:771,[J]:775,[f]:773};function Bg(I,C,e,t,A,i,o,n){if(I!==u){if(!1===b&&(Gg(3042),b=!0),I===y)A=A||C,i=i||e,o=o||t,C===m&&A===_||(g.blendEquationSeparate(mg[C],mg[A]),m=C,_=A),e===O&&t===P&&i===q&&o===$||(g.blendFuncSeparate(ug[e],ug[t],ug[i],ug[o]),O=e,P=t,q=i,$=o),h=I,gg=null;else if(I!==h||n!==gg){if(m===V&&_===V||(g.blendEquation(32774),m=V,_=V),n)switch(I){case B:g.blendFuncSeparate(1,771,1,771);break;case Z:g.blendFunc(1,1);break;case p:g.blendFuncSeparate(0,0,769,771);break;case W:g.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",I)}else switch(I){case B:g.blendFuncSeparate(770,771,1,771);break;case Z:g.blendFunc(770,1);break;case p:g.blendFunc(0,769);break;case W:g.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",I)}O=null,P=null,q=null,$=null,h=I,gg=n}}else!0===b&&(hg(3042),b=!1)}function Zg(I){Ig!==I&&(I?g.frontFace(2304):g.frontFace(2305),Ig=I)}function pg(I){I!==i?(Gg(2884),I!==Cg&&(I===o?g.cullFace(1029):I===n?g.cullFace(1028):g.cullFace(1032))):hg(2884),Cg=I}function Wg(I,C,e){I?(Gg(32823),tg===C&&Ag===e||(g.polygonOffset(C,e),tg=C,Ag=e)):hg(32823)}function yg(I){void 0===I&&(I=33984+ig-1),ag!==I&&(g.activeTexture(I),ag=I)}return{buffers:{color:t,depth:A,stencil:l},enable:Gg,disable:hg,bindFramebuffer:function(I,C){null===C&&null!==c&&(C=c),s[I]!==C&&(g.bindFramebuffer(I,C),s[I]=C,e&&(36009===I&&(s[36160]=C),36160===I&&(s[36009]=C)))},bindXRFramebuffer:function(I){I!==c&&(g.bindFramebuffer(36160,I),c=I)},useProgram:function(I){return d!==I&&(g.useProgram(I),d=I,!0)},setBlending:Bg,setMaterial:function(g,I){g.side===G?hg(2884):Gg(2884);let C=g.side===r;I&&(C=!C),Zg(C),g.blending===B&&!1===g.transparent?Bg(u):Bg(g.blending,g.blendEquation,g.blendSrc,g.blendDst,g.blendEquationAlpha,g.blendSrcAlpha,g.blendDstAlpha,g.premultipliedAlpha),A.setFunc(g.depthFunc),A.setTest(g.depthTest),A.setMask(g.depthWrite),t.setMask(g.colorWrite);const e=g.stencilWrite;l.setTest(e),e&&(l.setMask(g.stencilWriteMask),l.setFunc(g.stencilFunc,g.stencilRef,g.stencilFuncMask),l.setOp(g.stencilFail,g.stencilZFail,g.stencilZPass)),Wg(g.polygonOffset,g.polygonOffsetFactor,g.polygonOffsetUnits),!0===g.alphaToCoverage?Gg(32926):hg(32926)},setFlipSided:Zg,setCullFace:pg,setLineWidth:function(I){I!==eg&&(og&&g.lineWidth(I),eg=I)},setPolygonOffset:Wg,setScissorTest:function(g){g?Gg(3089):hg(3089)},activeTexture:yg,bindTexture:function(I,C){null===ag&&yg();let e=cg[ag];void 0===e&&(e={type:void 0,texture:void 0},cg[ag]=e),e.type===I&&e.texture===C||(g.bindTexture(I,C||rg[I]),e.type=I,e.texture=C)},unbindTexture:function(){const I=cg[ag];void 0!==I&&void 0!==I.type&&(g.bindTexture(I.type,null),I.type=void 0,I.texture=void 0)},compressedTexImage2D:function(){try{g.compressedTexImage2D.apply(g,arguments)}catch(g){console.error("THREE.WebGLState:",g)}},texImage2D:function(){try{g.texImage2D.apply(g,arguments)}catch(g){console.error("THREE.WebGLState:",g)}},texImage3D:function(){try{g.texImage3D.apply(g,arguments)}catch(g){console.error("THREE.WebGLState:",g)}},scissor:function(I){!1===sg.equals(I)&&(g.scissor(I.x,I.y,I.z,I.w),sg.copy(I))},viewport:function(I){!1===dg.equals(I)&&(g.viewport(I.x,I.y,I.z,I.w),dg.copy(I))},reset:function(){g.disable(3042),g.disable(2884),g.disable(2929),g.disable(32823),g.disable(3089),g.disable(2960),g.disable(32926),g.blendEquation(32774),g.blendFunc(1,0),g.blendFuncSeparate(1,0,1,0),g.colorMask(!0,!0,!0,!0),g.clearColor(0,0,0,0),g.depthMask(!0),g.depthFunc(513),g.clearDepth(1),g.stencilMask(4294967295),g.stencilFunc(519,0,4294967295),g.stencilOp(7680,7680,7680),g.clearStencil(0),g.cullFace(1029),g.frontFace(2305),g.polygonOffset(0,0),g.activeTexture(33984),g.bindFramebuffer(36160,null),!0===e&&(g.bindFramebuffer(36009,null),g.bindFramebuffer(36008,null)),g.useProgram(null),g.lineWidth(1),g.scissor(0,0,g.canvas.width,g.canvas.height),g.viewport(0,0,g.canvas.width,g.canvas.height),a={},ag=null,cg={},c=null,s={},d=null,b=!1,h=null,m=null,O=null,P=null,_=null,q=null,$=null,gg=!1,Ig=null,Cg=null,eg=null,tg=null,Ag=null,sg.set(0,0,g.canvas.width,g.canvas.height),dg.set(0,0,g.canvas.width,g.canvas.height),t.reset(),A.reset(),l.reset()}}}function Uo(g,I,C,e,t,A,i){const o=t.isWebGL2,n=t.maxTextures,l=t.maxCubemapSize,a=t.maxTextureSize,c=t.maxSamples,s=new WeakMap;let d,b=!1;try{b="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(g){}function r(g,I){return b?new OffscreenCanvas(g,I):document.createElementNS("http://www.w3.org/1999/xhtml","canvas")}function G(g,I,C,e){let t=1;if((g.width>e||g.height>e)&&(t=e/Math.max(g.width,g.height)),t<1||!0===I){if("undefined"!=typeof HTMLImageElement&&g instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&g instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&g instanceof ImageBitmap){const e=I?EC:Math.floor,A=e(t*g.width),i=e(t*g.height);void 0===d&&(d=r(A,i));const o=C?r(A,i):d;return o.width=A,o.height=i,o.getContext("2d").drawImage(g,0,0,A,i),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+g.width+"x"+g.height+") to ("+A+"x"+i+")."),o}return"data"in g&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+g.width+"x"+g.height+")."),g}return g}function h(g){return UC(g.width)&&UC(g.height)}function m(g,I){return g.generateMipmaps&&I&&g.minFilter!==bg&&g.minFilter!==ug}function u(I,C,t,A){g.generateMipmap(I),e.get(C).__maxMipLevel=Math.log2(Math.max(t,A))}function B(C,e,t){if(!1===o)return e;if(null!==C){if(void 0!==g[C])return g[C];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+C+"'")}let A=e;return 6403===e&&(5126===t&&(A=33326),5131===t&&(A=33325),5121===t&&(A=33321)),6407===e&&(5126===t&&(A=34837),5131===t&&(A=34843),5121===t&&(A=32849)),6408===e&&(5126===t&&(A=34836),5131===t&&(A=34842),5121===t&&(A=32856)),33325!==A&&33326!==A&&34842!==A&&34836!==A||I.get("EXT_color_buffer_float"),A}function Z(g){return g===bg||g===rg||g===hg?9728:9729}function p(I){const C=I.target;C.removeEventListener("dispose",p),function(I){const C=e.get(I);void 0!==C.__webglInit&&(g.deleteTexture(C.__webglTexture),e.remove(I))}(C),C.isVideoTexture&&s.delete(C),i.memory.textures--}function W(I){const C=I.target;C.removeEventListener("dispose",W),function(I){const C=I.texture,t=e.get(I),A=e.get(C);if(I){if(void 0!==A.__webglTexture&&g.deleteTexture(A.__webglTexture),I.depthTexture&&I.depthTexture.dispose(),I.isWebGLCubeRenderTarget)for(let I=0;I<6;I++)g.deleteFramebuffer(t.__webglFramebuffer[I]),t.__webglDepthbuffer&&g.deleteRenderbuffer(t.__webglDepthbuffer[I]);else g.deleteFramebuffer(t.__webglFramebuffer),t.__webglDepthbuffer&&g.deleteRenderbuffer(t.__webglDepthbuffer),t.__webglMultisampledFramebuffer&&g.deleteFramebuffer(t.__webglMultisampledFramebuffer),t.__webglColorRenderbuffer&&g.deleteRenderbuffer(t.__webglColorRenderbuffer),t.__webglDepthRenderbuffer&&g.deleteRenderbuffer(t.__webglDepthRenderbuffer);e.remove(C),e.remove(I)}}(C),i.memory.textures--}let y=0;function V(g,I){const t=e.get(g);if(g.isVideoTexture&&function(g){const I=i.render.frame;s.get(g)!==I&&(s.set(g,I),g.update())}(g),g.version>0&&t.__version!==g.version){const C=g.image;if(void 0===C)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else{if(!1!==C.complete)return void w(t,g,I);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}C.activeTexture(33984+I),C.bindTexture(3553,t.__webglTexture)}function v(I,t){const i=e.get(I);I.version>0&&i.__version!==I.version?function(I,e,t){if(6!==e.image.length)return;H(I,e),C.activeTexture(33984+t),C.bindTexture(34067,I.__webglTexture),g.pixelStorei(37440,e.flipY),g.pixelStorei(37441,e.premultiplyAlpha),g.pixelStorei(3317,e.unpackAlignment),g.pixelStorei(37443,0);const i=e&&(e.isCompressedTexture||e.image[0].isCompressedTexture),n=e.image[0]&&e.image[0].isDataTexture,a=[];for(let g=0;g<6;g++)a[g]=i||n?n?e.image[g].image:e.image[g]:G(e.image[g],!1,!0,l);const c=a[0],s=h(c)||o,d=A.convert(e.format),b=A.convert(e.type),r=B(e.internalFormat,d,b);let Z;if(R(34067,e,s),i){for(let g=0;g<6;g++){Z=a[g].mipmaps;for(let I=0;I<Z.length;I++){const t=Z[I];e.format!==xg&&e.format!==fg?null!==d?C.compressedTexImage2D(34069+g,I,r,t.width,t.height,0,t.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):C.texImage2D(34069+g,I,r,t.width,t.height,0,d,b,t.data)}}I.__maxMipLevel=Z.length-1}else{Z=e.mipmaps;for(let g=0;g<6;g++)if(n){C.texImage2D(34069+g,0,r,a[g].width,a[g].height,0,d,b,a[g].data);for(let I=0;I<Z.length;I++){const e=Z[I].image[g].image;C.texImage2D(34069+g,I+1,r,e.width,e.height,0,d,b,e.data)}}else{C.texImage2D(34069+g,0,r,d,b,a[g]);for(let I=0;I<Z.length;I++){const e=Z[I];C.texImage2D(34069+g,I+1,r,d,b,e.image[g])}}I.__maxMipLevel=Z.length}m(e,s)&&u(34067,e,c.width,c.height),I.__version=e.version,e.onUpdate&&e.onUpdate(e)}(i,I,t):(C.activeTexture(33984+t),C.bindTexture(34067,i.__webglTexture))}const Y={[cg]:10497,[sg]:33071,[dg]:33648},X={[bg]:9728,[rg]:9984,[hg]:9986,[ug]:9729,[Bg]:9985,[pg]:9987};function R(C,A,i){if(i?(g.texParameteri(C,10242,Y[A.wrapS]),g.texParameteri(C,10243,Y[A.wrapT]),32879!==C&&35866!==C||g.texParameteri(C,32882,Y[A.wrapR]),g.texParameteri(C,10240,X[A.magFilter]),g.texParameteri(C,10241,X[A.minFilter])):(g.texParameteri(C,10242,33071),g.texParameteri(C,10243,33071),32879!==C&&35866!==C||g.texParameteri(C,32882,33071),A.wrapS===sg&&A.wrapT===sg||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),g.texParameteri(C,10240,Z(A.magFilter)),g.texParameteri(C,10241,Z(A.minFilter)),A.minFilter!==bg&&A.minFilter!==ug&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),!0===I.has("EXT_texture_filter_anisotropic")){const i=I.get("EXT_texture_filter_anisotropic");if(A.type===Hg&&!1===I.has("OES_texture_float_linear"))return;if(!1===o&&A.type===wg&&!1===I.has("OES_texture_half_float_linear"))return;(A.anisotropy>1||e.get(A).__currentAnisotropy)&&(g.texParameterf(C,i.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(A.anisotropy,t.getMaxAnisotropy())),e.get(A).__currentAnisotropy=A.anisotropy)}}function H(I,C){void 0===I.__webglInit&&(I.__webglInit=!0,C.addEventListener("dispose",p),I.__webglTexture=g.createTexture(),i.memory.textures++)}function w(I,e,t){let i=3553;e.isDataTexture2DArray&&(i=35866),e.isDataTexture3D&&(i=32879),H(I,e),C.activeTexture(33984+t),C.bindTexture(i,I.__webglTexture),g.pixelStorei(37440,e.flipY),g.pixelStorei(37441,e.premultiplyAlpha),g.pixelStorei(3317,e.unpackAlignment),g.pixelStorei(37443,0);const n=function(g){return!o&&(g.wrapS!==sg||g.wrapT!==sg||g.minFilter!==bg&&g.minFilter!==ug)}(e)&&!1===h(e.image),l=G(e.image,n,!1,a),c=h(l)||o,s=A.convert(e.format);let d,b=A.convert(e.type),r=B(e.internalFormat,s,b);R(i,e,c);const Z=e.mipmaps;if(e.isDepthTexture)r=6402,o?r=e.type===Hg?36012:e.type===Rg?33190:e.type===Fg?35056:33189:e.type===Hg&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),e.format===Mg&&6402===r&&e.type!==Yg&&e.type!==Rg&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),e.type=Yg,b=A.convert(e.type)),e.format===Qg&&6402===r&&(r=34041,e.type!==Fg&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),e.type=Fg,b=A.convert(e.type))),C.texImage2D(3553,0,r,l.width,l.height,0,s,b,null);else if(e.isDataTexture)if(Z.length>0&&c){for(let g=0,I=Z.length;g<I;g++)d=Z[g],C.texImage2D(3553,g,r,d.width,d.height,0,s,b,d.data);e.generateMipmaps=!1,I.__maxMipLevel=Z.length-1}else C.texImage2D(3553,0,r,l.width,l.height,0,s,b,l.data),I.__maxMipLevel=0;else if(e.isCompressedTexture){for(let g=0,I=Z.length;g<I;g++)d=Z[g],e.format!==xg&&e.format!==fg?null!==s?C.compressedTexImage2D(3553,g,r,d.width,d.height,0,d.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):C.texImage2D(3553,g,r,d.width,d.height,0,s,b,d.data);I.__maxMipLevel=Z.length-1}else if(e.isDataTexture2DArray)C.texImage3D(35866,0,r,l.width,l.height,l.depth,0,s,b,l.data),I.__maxMipLevel=0;else if(e.isDataTexture3D)C.texImage3D(32879,0,r,l.width,l.height,l.depth,0,s,b,l.data),I.__maxMipLevel=0;else if(Z.length>0&&c){for(let g=0,I=Z.length;g<I;g++)d=Z[g],C.texImage2D(3553,g,r,s,b,d);e.generateMipmaps=!1,I.__maxMipLevel=Z.length-1}else C.texImage2D(3553,0,r,s,b,l),I.__maxMipLevel=0;m(e,c)&&u(i,e,l.width,l.height),I.__version=e.version,e.onUpdate&&e.onUpdate(e)}function K(I,t,i,o){const n=t.texture,l=A.convert(n.format),a=A.convert(n.type),c=B(n.internalFormat,l,a);32879===o||35866===o?C.texImage3D(o,0,c,t.width,t.height,t.depth,0,l,a,null):C.texImage2D(o,0,c,t.width,t.height,0,l,a,null),C.bindFramebuffer(36160,I),g.framebufferTexture2D(36160,i,o,e.get(n).__webglTexture,0),C.bindFramebuffer(36160,null)}function S(I,C,e){if(g.bindRenderbuffer(36161,I),C.depthBuffer&&!C.stencilBuffer){let t=33189;if(e){const I=C.depthTexture;I&&I.isDepthTexture&&(I.type===Hg?t=36012:I.type===Rg&&(t=33190));const e=N(C);g.renderbufferStorageMultisample(36161,e,t,C.width,C.height)}else g.renderbufferStorage(36161,t,C.width,C.height);g.framebufferRenderbuffer(36160,36096,36161,I)}else if(C.depthBuffer&&C.stencilBuffer){if(e){const I=N(C);g.renderbufferStorageMultisample(36161,I,35056,C.width,C.height)}else g.renderbufferStorage(36161,34041,C.width,C.height);g.framebufferRenderbuffer(36160,33306,36161,I)}else{const I=C.texture,t=A.convert(I.format),i=A.convert(I.type),o=B(I.internalFormat,t,i);if(e){const I=N(C);g.renderbufferStorageMultisample(36161,I,o,C.width,C.height)}else g.renderbufferStorage(36161,o,C.width,C.height)}g.bindRenderbuffer(36161,null)}function N(g){return o&&g.isWebGLMultisampleRenderTarget?Math.min(c,g.samples):0}let F=!1,z=!1;this.allocateTextureUnit=function(){const g=y;return g>=n&&console.warn("THREE.WebGLTextures: Trying to use "+g+" texture units while this GPU supports only "+n),y+=1,g},this.resetTextureUnits=function(){y=0},this.setTexture2D=V,this.setTexture2DArray=function(g,I){const t=e.get(g);g.version>0&&t.__version!==g.version?w(t,g,I):(C.activeTexture(33984+I),C.bindTexture(35866,t.__webglTexture))},this.setTexture3D=function(g,I){const t=e.get(g);g.version>0&&t.__version!==g.version?w(t,g,I):(C.activeTexture(33984+I),C.bindTexture(32879,t.__webglTexture))},this.setTextureCube=v,this.setupRenderTarget=function(I){const t=I.texture,n=e.get(I),l=e.get(t);I.addEventListener("dispose",W),l.__webglTexture=g.createTexture(),l.__version=t.version,i.memory.textures++;const a=!0===I.isWebGLCubeRenderTarget,c=!0===I.isWebGLMultisampleRenderTarget,s=t.isDataTexture3D||t.isDataTexture2DArray,d=h(I)||o;if(!o||t.format!==fg||t.type!==Hg&&t.type!==wg||(t.format=xg,console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")),a){n.__webglFramebuffer=[];for(let I=0;I<6;I++)n.__webglFramebuffer[I]=g.createFramebuffer()}else if(n.__webglFramebuffer=g.createFramebuffer(),c)if(o){n.__webglMultisampledFramebuffer=g.createFramebuffer(),n.__webglColorRenderbuffer=g.createRenderbuffer(),g.bindRenderbuffer(36161,n.__webglColorRenderbuffer);const e=A.convert(t.format),i=A.convert(t.type),o=B(t.internalFormat,e,i),l=N(I);g.renderbufferStorageMultisample(36161,l,o,I.width,I.height),C.bindFramebuffer(36160,n.__webglMultisampledFramebuffer),g.framebufferRenderbuffer(36160,36064,36161,n.__webglColorRenderbuffer),g.bindRenderbuffer(36161,null),I.depthBuffer&&(n.__webglDepthRenderbuffer=g.createRenderbuffer(),S(n.__webglDepthRenderbuffer,I,!0)),C.bindFramebuffer(36160,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");if(a){C.bindTexture(34067,l.__webglTexture),R(34067,t,d);for(let g=0;g<6;g++)K(n.__webglFramebuffer[g],I,36064,34069+g);m(t,d)&&u(34067,t,I.width,I.height),C.bindTexture(34067,null)}else{let g=3553;s&&(o?g=t.isDataTexture3D?32879:35866:console.warn("THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.")),C.bindTexture(g,l.__webglTexture),R(g,t,d),K(n.__webglFramebuffer,I,36064,g),m(t,d)&&u(3553,t,I.width,I.height),C.bindTexture(3553,null)}I.depthBuffer&&function(I){const t=e.get(I),A=!0===I.isWebGLCubeRenderTarget;if(I.depthTexture){if(A)throw new Error("target.depthTexture not supported in Cube render targets");!function(I,t){if(t&&t.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(C.bindFramebuffer(36160,I),!t.depthTexture||!t.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");e.get(t.depthTexture).__webglTexture&&t.depthTexture.image.width===t.width&&t.depthTexture.image.height===t.height||(t.depthTexture.image.width=t.width,t.depthTexture.image.height=t.height,t.depthTexture.needsUpdate=!0),V(t.depthTexture,0);const A=e.get(t.depthTexture).__webglTexture;if(t.depthTexture.format===Mg)g.framebufferTexture2D(36160,36096,3553,A,0);else{if(t.depthTexture.format!==Qg)throw new Error("Unknown depthTexture format");g.framebufferTexture2D(36160,33306,3553,A,0)}}(t.__webglFramebuffer,I)}else if(A){t.__webglDepthbuffer=[];for(let e=0;e<6;e++)C.bindFramebuffer(36160,t.__webglFramebuffer[e]),t.__webglDepthbuffer[e]=g.createRenderbuffer(),S(t.__webglDepthbuffer[e],I,!1)}else C.bindFramebuffer(36160,t.__webglFramebuffer),t.__webglDepthbuffer=g.createRenderbuffer(),S(t.__webglDepthbuffer,I,!1);C.bindFramebuffer(36160,null)}(I)},this.updateRenderTargetMipmap=function(g){const I=g.texture;if(m(I,h(g)||o)){const t=g.isWebGLCubeRenderTarget?34067:3553,A=e.get(I).__webglTexture;C.bindTexture(t,A),u(t,I,g.width,g.height),C.bindTexture(t,null)}},this.updateMultisampleRenderTarget=function(I){if(I.isWebGLMultisampleRenderTarget)if(o){const t=I.width,A=I.height;let i=16384;I.depthBuffer&&(i|=256),I.stencilBuffer&&(i|=1024);const o=e.get(I);C.bindFramebuffer(36008,o.__webglMultisampledFramebuffer),C.bindFramebuffer(36009,o.__webglFramebuffer),g.blitFramebuffer(0,0,t,A,0,0,t,A,i,9728),C.bindFramebuffer(36008,null),C.bindFramebuffer(36009,o.__webglMultisampledFramebuffer)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")},this.safeSetTexture2D=function(g,I){g&&g.isWebGLRenderTarget&&(!1===F&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),F=!0),g=g.texture),V(g,I)},this.safeSetTextureCube=function(g,I){g&&g.isWebGLCubeRenderTarget&&(!1===z&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),z=!0),g=g.texture),v(g,I)}}function To(g,I,C){const e=C.isWebGL2;return{convert:function(g){let C;if(g===yg)return 5121;if(g===Kg)return 32819;if(g===Sg)return 32820;if(g===Ng)return 33635;if(g===Vg)return 5120;if(g===vg)return 5122;if(g===Yg)return 5123;if(g===Xg)return 5124;if(g===Rg)return 5125;if(g===Hg)return 5126;if(g===wg)return e?5131:(C=I.get("OES_texture_half_float"),null!==C?C.HALF_FLOAT_OES:null);if(g===zg)return 6406;if(g===fg)return 6407;if(g===xg)return 6408;if(g===Jg)return 6409;if(g===Lg)return 6410;if(g===Mg)return 6402;if(g===Qg)return 34041;if(g===Ug)return 6403;if(g===Tg)return 36244;if(g===Eg)return 33319;if(g===jg)return 33320;if(g===Dg)return 36248;if(g===Og)return 36249;if(g===Pg||g===_g||g===qg||g===$g){if(C=I.get("WEBGL_compressed_texture_s3tc"),null===C)return null;if(g===Pg)return C.COMPRESSED_RGB_S3TC_DXT1_EXT;if(g===_g)return C.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(g===qg)return C.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(g===$g)return C.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(g===gI||g===II||g===CI||g===eI){if(C=I.get("WEBGL_compressed_texture_pvrtc"),null===C)return null;if(g===gI)return C.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(g===II)return C.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(g===CI)return C.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(g===eI)return C.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(g===tI)return C=I.get("WEBGL_compressed_texture_etc1"),null!==C?C.COMPRESSED_RGB_ETC1_WEBGL:null;if((g===AI||g===iI)&&(C=I.get("WEBGL_compressed_texture_etc"),null!==C)){if(g===AI)return C.COMPRESSED_RGB8_ETC2;if(g===iI)return C.COMPRESSED_RGBA8_ETC2_EAC}return g===oI||g===nI||g===lI||g===aI||g===cI||g===sI||g===dI||g===bI||g===rI||g===GI||g===hI||g===mI||g===uI||g===BI||g===pI||g===WI||g===yI||g===VI||g===vI||g===YI||g===XI||g===RI||g===HI||g===wI||g===KI||g===SI||g===NI||g===FI?(C=I.get("WEBGL_compressed_texture_astc"),null!==C?g:null):g===ZI?(C=I.get("EXT_texture_compression_bptc"),null!==C?g:null):g===Fg?e?34042:(C=I.get("WEBGL_depth_texture"),null!==C?C.UNSIGNED_INT_24_8_WEBGL:null):void 0}}}ko.prototype.isMeshDistanceMaterial=!0;class Eo extends XA{constructor(g=[]){super(),this.cameras=g}}Eo.prototype.isArrayCamera=!0;class jo extends ot{constructor(){super(),this.type="Group"}}jo.prototype.isGroup=!0;const Do={type:"move"};class Oo{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new jo,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new jo,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new Ae,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new Ae),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new jo,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new Ae,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new Ae),this._grip}dispatchEvent(g){return null!==this._targetRay&&this._targetRay.dispatchEvent(g),null!==this._grip&&this._grip.dispatchEvent(g),null!==this._hand&&this._hand.dispatchEvent(g),this}disconnect(g){return this.dispatchEvent({type:"disconnected",data:g}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(g,I,C){let e=null,t=null,A=null;const i=this._targetRay,o=this._grip,n=this._hand;if(g&&"visible-blurred"!==I.session.visibilityState)if(null!==i&&(e=I.getPose(g.targetRaySpace,C),null!==e&&(i.matrix.fromArray(e.transform.matrix),i.matrix.decompose(i.position,i.rotation,i.scale),e.linearVelocity?(i.hasLinearVelocity=!0,i.linearVelocity.copy(e.linearVelocity)):i.hasLinearVelocity=!1,e.angularVelocity?(i.hasAngularVelocity=!0,i.angularVelocity.copy(e.angularVelocity)):i.hasAngularVelocity=!1,this.dispatchEvent(Do))),n&&g.hand){A=!0;for(const e of g.hand.values()){const g=I.getJointPose(e,C);if(void 0===n.joints[e.jointName]){const g=new jo;g.matrixAutoUpdate=!1,g.visible=!1,n.joints[e.jointName]=g,n.add(g)}const t=n.joints[e.jointName];null!==g&&(t.matrix.fromArray(g.transform.matrix),t.matrix.decompose(t.position,t.rotation,t.scale),t.jointRadius=g.radius),t.visible=null!==g}const e=n.joints["index-finger-tip"],t=n.joints["thumb-tip"],i=e.position.distanceTo(t.position),o=.02,l=.005;n.inputState.pinching&&i>o+l?(n.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:g.handedness,target:this})):!n.inputState.pinching&&i<=o-l&&(n.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:g.handedness,target:this}))}else null!==o&&g.gripSpace&&(t=I.getPose(g.gripSpace,C),null!==t&&(o.matrix.fromArray(t.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),t.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(t.linearVelocity)):o.hasLinearVelocity=!1,t.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(t.angularVelocity)):o.hasAngularVelocity=!1));return null!==i&&(i.visible=null!==e),null!==o&&(o.visible=null!==t),null!==n&&(n.visible=null!==A),this}}class Po extends FC{constructor(g,I){super();const C=this,e=g.state;let t=null,A=1,i=null,o="local-floor",n=null;const l=[],a=new Map,c=new XA;c.layers.enable(1),c.viewport=new Ie;const s=new XA;s.layers.enable(2),s.viewport=new Ie;const d=[c,s],b=new Eo;b.layers.enable(1),b.layers.enable(2);let r=null,G=null;function h(g){const I=a.get(g.inputSource);I&&I.dispatchEvent({type:g.type,data:g.inputSource})}function m(){a.forEach((function(g,I){g.disconnect(I)})),a.clear(),r=null,G=null,e.bindXRFramebuffer(null),g.setRenderTarget(g.getRenderTarget()),y.stop(),C.isPresenting=!1,C.dispatchEvent({type:"sessionend"})}function u(g){const I=t.inputSources;for(let g=0;g<l.length;g++)a.set(I[g],l[g]);for(let I=0;I<g.removed.length;I++){const C=g.removed[I],e=a.get(C);e&&(e.dispatchEvent({type:"disconnected",data:C}),a.delete(C))}for(let I=0;I<g.added.length;I++){const C=g.added[I],e=a.get(C);e&&e.dispatchEvent({type:"connected",data:C})}}this.enabled=!1,this.isPresenting=!1,this.getController=function(g){let I=l[g];return void 0===I&&(I=new Oo,l[g]=I),I.getTargetRaySpace()},this.getControllerGrip=function(g){let I=l[g];return void 0===I&&(I=new Oo,l[g]=I),I.getGripSpace()},this.getHand=function(g){let I=l[g];return void 0===I&&(I=new Oo,l[g]=I),I.getHandSpace()},this.setFramebufferScaleFactor=function(g){A=g,!0===C.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(g){o=g,!0===C.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return i},this.getSession=function(){return t},this.setSession=async function(g){if(t=g,null!==t){t.addEventListener("select",h),t.addEventListener("selectstart",h),t.addEventListener("selectend",h),t.addEventListener("squeeze",h),t.addEventListener("squeezestart",h),t.addEventListener("squeezeend",h),t.addEventListener("end",m),t.addEventListener("inputsourceschange",u);const g=I.getContextAttributes();!0!==g.xrCompatible&&await I.makeXRCompatible();const e={antialias:g.antialias,alpha:g.alpha,depth:g.depth,stencil:g.stencil,framebufferScaleFactor:A},n=new XRWebGLLayer(t,I,e);t.updateRenderState({baseLayer:n}),i=await t.requestReferenceSpace(o),y.setContext(t),y.start(),C.isPresenting=!0,C.dispatchEvent({type:"sessionstart"})}};const B=new Ae,Z=new Ae;function p(g,I){null===I?g.matrixWorld.copy(g.matrix):g.matrixWorld.multiplyMatrices(I.matrixWorld,g.matrix),g.matrixWorldInverse.copy(g.matrixWorld).invert()}this.getCamera=function(g){b.near=s.near=c.near=g.near,b.far=s.far=c.far=g.far,r===b.near&&G===b.far||(t.updateRenderState({depthNear:b.near,depthFar:b.far}),r=b.near,G=b.far);const I=g.parent,C=b.cameras;p(b,I);for(let g=0;g<C.length;g++)p(C[g],I);g.matrixWorld.copy(b.matrixWorld),g.matrix.copy(b.matrix),g.matrix.decompose(g.position,g.quaternion,g.scale);const e=g.children;for(let g=0,I=e.length;g<I;g++)e[g].updateMatrixWorld(!0);return 2===C.length?function(g,I,C){B.setFromMatrixPosition(I.matrixWorld),Z.setFromMatrixPosition(C.matrixWorld);const e=B.distanceTo(Z),t=I.projectionMatrix.elements,A=C.projectionMatrix.elements,i=t[14]/(t[10]-1),o=t[14]/(t[10]+1),n=(t[9]+1)/t[5],l=(t[9]-1)/t[5],a=(t[8]-1)/t[0],c=(A[8]+1)/A[0],s=i*a,d=i*c,b=e/(-a+c),r=b*-a;I.matrixWorld.decompose(g.position,g.quaternion,g.scale),g.translateX(r),g.translateZ(b),g.matrixWorld.compose(g.position,g.quaternion,g.scale),g.matrixWorldInverse.copy(g.matrixWorld).invert();const G=i+b,h=o+b,m=s-r,u=d+(e-r),p=n*o/h*G,W=l*o/h*G;g.projectionMatrix.makePerspective(m,u,p,W,G,h)}(b,c,s):b.projectionMatrix.copy(c.projectionMatrix),b};let W=null;const y=new fA;y.setAnimationLoop((function(g,I){if(n=I.getViewerPose(i),null!==n){const g=n.views,I=t.renderState.baseLayer;e.bindXRFramebuffer(I.framebuffer);let C=!1;g.length!==b.cameras.length&&(b.cameras.length=0,C=!0);for(let e=0;e<g.length;e++){const t=g[e],A=I.getViewport(t),i=d[e];i.matrix.fromArray(t.transform.matrix),i.projectionMatrix.fromArray(t.projectionMatrix),i.viewport.set(A.x,A.y,A.width,A.height),0===e&&b.matrix.copy(i.matrix),!0===C&&b.cameras.push(i)}}const C=t.inputSources;for(let g=0;g<l.length;g++){const e=l[g],t=C[g];e.update(t,I,i)}W&&W(g,I)})),this.setAnimationLoop=function(g){W=g},this.dispose=function(){}}}function _o(g){function I(I,C){I.opacity.value=C.opacity,C.color&&I.diffuse.value.copy(C.color),C.emissive&&I.emissive.value.copy(C.emissive).multiplyScalar(C.emissiveIntensity),C.map&&(I.map.value=C.map),C.alphaMap&&(I.alphaMap.value=C.alphaMap),C.specularMap&&(I.specularMap.value=C.specularMap);const e=g.get(C).envMap;if(e){I.envMap.value=e,I.flipEnvMap.value=e.isCubeTexture&&e._needsFlipEnvMap?-1:1,I.reflectivity.value=C.reflectivity,I.refractionRatio.value=C.refractionRatio;const t=g.get(e).__maxMipLevel;void 0!==t&&(I.maxMipLevel.value=t)}let t,A;C.lightMap&&(I.lightMap.value=C.lightMap,I.lightMapIntensity.value=C.lightMapIntensity),C.aoMap&&(I.aoMap.value=C.aoMap,I.aoMapIntensity.value=C.aoMapIntensity),C.map?t=C.map:C.specularMap?t=C.specularMap:C.displacementMap?t=C.displacementMap:C.normalMap?t=C.normalMap:C.bumpMap?t=C.bumpMap:C.roughnessMap?t=C.roughnessMap:C.metalnessMap?t=C.metalnessMap:C.alphaMap?t=C.alphaMap:C.emissiveMap?t=C.emissiveMap:C.clearcoatMap?t=C.clearcoatMap:C.clearcoatNormalMap?t=C.clearcoatNormalMap:C.clearcoatRoughnessMap&&(t=C.clearcoatRoughnessMap),void 0!==t&&(t.isWebGLRenderTarget&&(t=t.texture),!0===t.matrixAutoUpdate&&t.updateMatrix(),I.uvTransform.value.copy(t.matrix)),C.aoMap?A=C.aoMap:C.lightMap&&(A=C.lightMap),void 0!==A&&(A.isWebGLRenderTarget&&(A=A.texture),!0===A.matrixAutoUpdate&&A.updateMatrix(),I.uv2Transform.value.copy(A.matrix))}function C(I,C){I.roughness.value=C.roughness,I.metalness.value=C.metalness,C.roughnessMap&&(I.roughnessMap.value=C.roughnessMap),C.metalnessMap&&(I.metalnessMap.value=C.metalnessMap),C.emissiveMap&&(I.emissiveMap.value=C.emissiveMap),C.bumpMap&&(I.bumpMap.value=C.bumpMap,I.bumpScale.value=C.bumpScale,C.side===r&&(I.bumpScale.value*=-1)),C.normalMap&&(I.normalMap.value=C.normalMap,I.normalScale.value.copy(C.normalScale),C.side===r&&I.normalScale.value.negate()),C.displacementMap&&(I.displacementMap.value=C.displacementMap,I.displacementScale.value=C.displacementScale,I.displacementBias.value=C.displacementBias),g.get(C).envMap&&(I.envMapIntensity.value=C.envMapIntensity)}return{refreshFogUniforms:function(g,I){g.fogColor.value.copy(I.color),I.isFog?(g.fogNear.value=I.near,g.fogFar.value=I.far):I.isFogExp2&&(g.fogDensity.value=I.density)},refreshMaterialUniforms:function(g,e,t,A){e.isMeshBasicMaterial?I(g,e):e.isMeshLambertMaterial?(I(g,e),function(g,I){I.emissiveMap&&(g.emissiveMap.value=I.emissiveMap)}(g,e)):e.isMeshToonMaterial?(I(g,e),function(g,I){I.gradientMap&&(g.gradientMap.value=I.gradientMap),I.emissiveMap&&(g.emissiveMap.value=I.emissiveMap),I.bumpMap&&(g.bumpMap.value=I.bumpMap,g.bumpScale.value=I.bumpScale,I.side===r&&(g.bumpScale.value*=-1)),I.normalMap&&(g.normalMap.value=I.normalMap,g.normalScale.value.copy(I.normalScale),I.side===r&&g.normalScale.value.negate()),I.displacementMap&&(g.displacementMap.value=I.displacementMap,g.displacementScale.value=I.displacementScale,g.displacementBias.value=I.displacementBias)}(g,e)):e.isMeshPhongMaterial?(I(g,e),function(g,I){g.specular.value.copy(I.specular),g.shininess.value=Math.max(I.shininess,1e-4),I.emissiveMap&&(g.emissiveMap.value=I.emissiveMap),I.bumpMap&&(g.bumpMap.value=I.bumpMap,g.bumpScale.value=I.bumpScale,I.side===r&&(g.bumpScale.value*=-1)),I.normalMap&&(g.normalMap.value=I.normalMap,g.normalScale.value.copy(I.normalScale),I.side===r&&g.normalScale.value.negate()),I.displacementMap&&(g.displacementMap.value=I.displacementMap,g.displacementScale.value=I.displacementScale,g.displacementBias.value=I.displacementBias)}(g,e)):e.isMeshStandardMaterial?(I(g,e),e.isMeshPhysicalMaterial?function(g,I){C(g,I),g.reflectivity.value=I.reflectivity,g.clearcoat.value=I.clearcoat,g.clearcoatRoughness.value=I.clearcoatRoughness,I.sheen&&g.sheen.value.copy(I.sheen),I.clearcoatMap&&(g.clearcoatMap.value=I.clearcoatMap),I.clearcoatRoughnessMap&&(g.clearcoatRoughnessMap.value=I.clearcoatRoughnessMap),I.clearcoatNormalMap&&(g.clearcoatNormalScale.value.copy(I.clearcoatNormalScale),g.clearcoatNormalMap.value=I.clearcoatNormalMap,I.side===r&&g.clearcoatNormalScale.value.negate()),g.transmission.value=I.transmission,I.transmissionMap&&(g.transmissionMap.value=I.transmissionMap)}(g,e):C(g,e)):e.isMeshMatcapMaterial?(I(g,e),function(g,I){I.matcap&&(g.matcap.value=I.matcap),I.bumpMap&&(g.bumpMap.value=I.bumpMap,g.bumpScale.value=I.bumpScale,I.side===r&&(g.bumpScale.value*=-1)),I.normalMap&&(g.normalMap.value=I.normalMap,g.normalScale.value.copy(I.normalScale),I.side===r&&g.normalScale.value.negate()),I.displacementMap&&(g.displacementMap.value=I.displacementMap,g.displacementScale.value=I.displacementScale,g.displacementBias.value=I.displacementBias)}(g,e)):e.isMeshDepthMaterial?(I(g,e),function(g,I){I.displacementMap&&(g.displacementMap.value=I.displacementMap,g.displacementScale.value=I.displacementScale,g.displacementBias.value=I.displacementBias)}(g,e)):e.isMeshDistanceMaterial?(I(g,e),function(g,I){I.displacementMap&&(g.displacementMap.value=I.displacementMap,g.displacementScale.value=I.displacementScale,g.displacementBias.value=I.displacementBias),g.referencePosition.value.copy(I.referencePosition),g.nearDistance.value=I.nearDistance,g.farDistance.value=I.farDistance}(g,e)):e.isMeshNormalMaterial?(I(g,e),function(g,I){I.bumpMap&&(g.bumpMap.value=I.bumpMap,g.bumpScale.value=I.bumpScale,I.side===r&&(g.bumpScale.value*=-1)),I.normalMap&&(g.normalMap.value=I.normalMap,g.normalScale.value.copy(I.normalScale),I.side===r&&g.normalScale.value.negate()),I.displacementMap&&(g.displacementMap.value=I.displacementMap,g.displacementScale.value=I.displacementScale,g.displacementBias.value=I.displacementBias)}(g,e)):e.isLineBasicMaterial?(function(g,I){g.diffuse.value.copy(I.color),g.opacity.value=I.opacity}(g,e),e.isLineDashedMaterial&&function(g,I){g.dashSize.value=I.dashSize,g.totalSize.value=I.dashSize+I.gapSize,g.scale.value=I.scale}(g,e)):e.isPointsMaterial?function(g,I,C,e){let t;g.diffuse.value.copy(I.color),g.opacity.value=I.opacity,g.size.value=I.size*C,g.scale.value=.5*e,I.map&&(g.map.value=I.map),I.alphaMap&&(g.alphaMap.value=I.alphaMap),I.map?t=I.map:I.alphaMap&&(t=I.alphaMap),void 0!==t&&(!0===t.matrixAutoUpdate&&t.updateMatrix(),g.uvTransform.value.copy(t.matrix))}(g,e,t,A):e.isSpriteMaterial?function(g,I){let C;g.diffuse.value.copy(I.color),g.opacity.value=I.opacity,g.rotation.value=I.rotation,I.map&&(g.map.value=I.map),I.alphaMap&&(g.alphaMap.value=I.alphaMap),I.map?C=I.map:I.alphaMap&&(C=I.alphaMap),void 0!==C&&(!0===C.matrixAutoUpdate&&C.updateMatrix(),g.uvTransform.value.copy(C.matrix))}(g,e):e.isShadowMaterial?(g.color.value.copy(e.color),g.opacity.value=e.opacity):e.isShaderMaterial&&(e.uniformsNeedUpdate=!1)}}}function qo(g){const I=void 0!==(g=g||{}).canvas?g.canvas:function(){const g=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");return g.style.display="block",g}(),C=void 0!==g.context?g.context:null,e=void 0!==g.alpha&&g.alpha,t=void 0===g.depth||g.depth,A=void 0===g.stencil||g.stencil,i=void 0!==g.antialias&&g.antialias,o=void 0===g.premultipliedAlpha||g.premultipliedAlpha,n=void 0!==g.preserveDrawingBuffer&&g.preserveDrawingBuffer,l=void 0!==g.powerPreference?g.powerPreference:"default",a=void 0!==g.failIfMajorPerformanceCaveat&&g.failIfMajorPerformanceCaveat;let c=null,s=null;const d=[],b=[];this.domElement=I,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.outputEncoding=PI,this.physicallyCorrectLights=!1,this.toneMapping=q,this.toneMappingExposure=1;const r=this;let G=!1,h=0,m=0,u=null,B=-1,Z=null;const p=new Ie,W=new Ie;let y=null,V=I.width,v=I.height,Y=1,X=null,R=null;const H=new Ie(0,0,V,v),w=new Ie(0,0,V,v);let K=!1;const S=new zA;let N=!1,F=!1;const z=new ze,f=new Ae,x={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function J(){return null===u?Y:1}let L,k,M,Q,U,T,E,j,D,O,P,_,$,gg,Ig,Cg,eg,tg,Ag,ig,og,ng,lg=C;function ag(g,C){for(let e=0;e<g.length;e++){const t=g[e],A=I.getContext(t,C);if(null!==A)return A}return null}try{const g={alpha:e,depth:t,stencil:A,antialias:i,premultipliedAlpha:o,preserveDrawingBuffer:n,powerPreference:l,failIfMajorPerformanceCaveat:a};if(I.addEventListener("webglcontextlost",dg,!1),I.addEventListener("webglcontextrestored",bg,!1),null===lg){const I=["webgl2","webgl","experimental-webgl"];if(!0===r.isWebGL1Renderer&&I.shift(),lg=ag(I,g),null===lg)throw ag(I)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}void 0===lg.getShaderPrecisionFormat&&(lg.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(g){throw console.error("THREE.WebGLRenderer: "+g.message),g}function cg(){L=new OA(lg),k=new EA(lg,L,g),L.init(k),og=new To(lg,L,k),M=new Qo(lg,L,k),Q=new qA(lg),U=new Ro,T=new Uo(lg,L,M,U,k,og,Q),E=new DA(r),j=new xA(lg,k),ng=new UA(lg,L,j,k),D=new PA(lg,j,Q,ng),O=new Ci(lg,D,j,Q),tg=new Ii(lg),Ig=new jA(U),P=new Xo(r,E,L,k,ng,Ig),_=new _o(U),$=new So(U),gg=new Jo(L,k),eg=new QA(r,E,M,O,o),Cg=new Mo(r,O,k),Ag=new TA(lg,L,Q,k),ig=new _A(lg,L,Q,k),Q.programs=P.programs,r.capabilities=k,r.extensions=L,r.properties=U,r.renderLists=$,r.shadowMap=Cg,r.state=M,r.info=Q}cg();const sg=new Po(r,lg);function dg(g){g.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),G=!0}function bg(){console.log("THREE.WebGLRenderer: Context Restored."),G=!1;const g=Q.autoReset,I=Cg.enabled,C=Cg.autoUpdate,e=Cg.needsUpdate,t=Cg.type;cg(),Q.autoReset=g,Cg.enabled=I,Cg.autoUpdate=C,Cg.needsUpdate=e,Cg.type=t}function rg(g){const I=g.target;I.removeEventListener("dispose",rg),function(g){(function(g){const I=U.get(g).programs;void 0!==I&&I.forEach((function(g){P.releaseProgram(g)}))})(g),U.remove(g)}(I)}this.xr=sg,this.getContext=function(){return lg},this.getContextAttributes=function(){return lg.getContextAttributes()},this.forceContextLoss=function(){const g=L.get("WEBGL_lose_context");g&&g.loseContext()},this.forceContextRestore=function(){const g=L.get("WEBGL_lose_context");g&&g.restoreContext()},this.getPixelRatio=function(){return Y},this.setPixelRatio=function(g){void 0!==g&&(Y=g,this.setSize(V,v,!1))},this.getSize=function(g){return void 0===g&&(console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"),g=new DC),g.set(V,v)},this.setSize=function(g,C,e){sg.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(V=g,v=C,I.width=Math.floor(g*Y),I.height=Math.floor(C*Y),!1!==e&&(I.style.width=g+"px",I.style.height=C+"px"),this.setViewport(0,0,g,C))},this.getDrawingBufferSize=function(g){return void 0===g&&(console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"),g=new DC),g.set(V*Y,v*Y).floor()},this.setDrawingBufferSize=function(g,C,e){V=g,v=C,Y=e,I.width=Math.floor(g*e),I.height=Math.floor(C*e),this.setViewport(0,0,g,C)},this.getCurrentViewport=function(g){return void 0===g&&(console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"),g=new Ie),g.copy(p)},this.getViewport=function(g){return g.copy(H)},this.setViewport=function(g,I,C,e){g.isVector4?H.set(g.x,g.y,g.z,g.w):H.set(g,I,C,e),M.viewport(p.copy(H).multiplyScalar(Y).floor())},this.getScissor=function(g){return g.copy(w)},this.setScissor=function(g,I,C,e){g.isVector4?w.set(g.x,g.y,g.z,g.w):w.set(g,I,C,e),M.scissor(W.copy(w).multiplyScalar(Y).floor())},this.getScissorTest=function(){return K},this.setScissorTest=function(g){M.setScissorTest(K=g)},this.setOpaqueSort=function(g){X=g},this.setTransparentSort=function(g){R=g},this.getClearColor=function(g){return void 0===g&&(console.warn("WebGLRenderer: .getClearColor() now requires a Color as an argument"),g=new wt),g.copy(eg.getClearColor())},this.setClearColor=function(){eg.setClearColor.apply(eg,arguments)},this.getClearAlpha=function(){return eg.getClearAlpha()},this.setClearAlpha=function(){eg.setClearAlpha.apply(eg,arguments)},this.clear=function(g,I,C){let e=0;(void 0===g||g)&&(e|=16384),(void 0===I||I)&&(e|=256),(void 0===C||C)&&(e|=1024),lg.clear(e)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){I.removeEventListener("webglcontextlost",dg,!1),I.removeEventListener("webglcontextrestored",bg,!1),$.dispose(),gg.dispose(),U.dispose(),E.dispose(),O.dispose(),ng.dispose(),sg.dispose(),sg.removeEventListener("sessionstart",hg),sg.removeEventListener("sessionend",mg),ug.stop()},this.renderBufferImmediate=function(g,I){ng.initAttributes();const C=U.get(g);g.hasPositions&&!C.position&&(C.position=lg.createBuffer()),g.hasNormals&&!C.normal&&(C.normal=lg.createBuffer()),g.hasUvs&&!C.uv&&(C.uv=lg.createBuffer()),g.hasColors&&!C.color&&(C.color=lg.createBuffer());const e=I.getAttributes();g.hasPositions&&(lg.bindBuffer(34962,C.position),lg.bufferData(34962,g.positionArray,35048),ng.enableAttribute(e.position),lg.vertexAttribPointer(e.position,3,5126,!1,0,0)),g.hasNormals&&(lg.bindBuffer(34962,C.normal),lg.bufferData(34962,g.normalArray,35048),ng.enableAttribute(e.normal),lg.vertexAttribPointer(e.normal,3,5126,!1,0,0)),g.hasUvs&&(lg.bindBuffer(34962,C.uv),lg.bufferData(34962,g.uvArray,35048),ng.enableAttribute(e.uv),lg.vertexAttribPointer(e.uv,2,5126,!1,0,0)),g.hasColors&&(lg.bindBuffer(34962,C.color),lg.bufferData(34962,g.colorArray,35048),ng.enableAttribute(e.color),lg.vertexAttribPointer(e.color,3,5126,!1,0,0)),ng.disableUnusedAttributes(),lg.drawArrays(4,0,g.count),g.count=0},this.renderBufferDirect=function(g,I,C,e,t,A){null===I&&(I=x);const i=t.isMesh&&t.matrixWorld.determinant()<0,o=vg(g,I,e,t);M.setMaterial(e,i);let n=C.index;const l=C.attributes.position;if(null===n){if(void 0===l||0===l.count)return}else if(0===n.count)return;let a,c=1;!0===e.wireframe&&(n=D.getWireframeAttribute(C),c=2),(e.morphTargets||e.morphNormals)&&tg.update(t,C,e,o),ng.setup(t,e,o,C,n);let s=Ag;null!==n&&(a=j.get(n),s=ig,s.setIndex(a));const d=null!==n?n.count:l.count,b=C.drawRange.start*c,r=C.drawRange.count*c,G=null!==A?A.start*c:0,h=null!==A?A.count*c:1/0,m=Math.max(b,G),u=Math.min(d,b+r,G+h)-1,B=Math.max(0,u-m+1);if(0!==B){if(t.isMesh)!0===e.wireframe?(M.setLineWidth(e.wireframeLinewidth*J()),s.setMode(1)):s.setMode(4);else if(t.isLine){let g=e.linewidth;void 0===g&&(g=1),M.setLineWidth(g*J()),t.isLineSegments?s.setMode(1):t.isLineLoop?s.setMode(2):s.setMode(3)}else t.isPoints?s.setMode(0):t.isSprite&&s.setMode(4);if(t.isInstancedMesh)s.renderInstances(m,B,t.count);else if(C.isInstancedBufferGeometry){const g=Math.min(C.instanceCount,C._maxInstanceCount);s.renderInstances(m,B,g)}else s.render(m,B)}},this.compile=function(g,I){s=gg.get(g),s.init(),g.traverseVisible((function(g){g.isLight&&g.layers.test(I.layers)&&(s.pushLight(g),g.castShadow&&s.pushShadow(g))})),s.setupLights(),g.traverse((function(I){const C=I.material;if(C)if(Array.isArray(C))for(let e=0;e<C.length;e++)Wg(C[e],g,I);else Wg(C,g,I)}))};let Gg=null;function hg(){ug.stop()}function mg(){ug.start()}const ug=new fA;function Bg(g,I,C,e){if(!1===g.visible)return;if(g.layers.test(I.layers))if(g.isGroup)C=g.renderOrder;else if(g.isLOD)!0===g.autoUpdate&&g.update(I);else if(g.isLight)s.pushLight(g),g.castShadow&&s.pushShadow(g);else if(g.isSprite){if(!g.frustumCulled||S.intersectsSprite(g)){e&&f.setFromMatrixPosition(g.matrixWorld).applyMatrix4(z);const I=O.update(g),t=g.material;t.visible&&c.push(g,I,t,C,f.z,null)}}else if(g.isImmediateRenderObject)e&&f.setFromMatrixPosition(g.matrixWorld).applyMatrix4(z),c.push(g,null,g.material,C,f.z,null);else if((g.isMesh||g.isLine||g.isPoints)&&(g.isSkinnedMesh&&g.skeleton.frame!==Q.render.frame&&(g.skeleton.update(),g.skeleton.frame=Q.render.frame),!g.frustumCulled||S.intersectsObject(g))){e&&f.setFromMatrixPosition(g.matrixWorld).applyMatrix4(z);const I=O.update(g),t=g.material;if(Array.isArray(t)){const e=I.groups;for(let A=0,i=e.length;A<i;A++){const i=e[A],o=t[i.materialIndex];o&&o.visible&&c.push(g,I,o,C,f.z,i)}}else t.visible&&c.push(g,I,t,C,f.z,null)}const t=g.children;for(let g=0,A=t.length;g<A;g++)Bg(t[g],I,C,e)}function Zg(g,I,C){const e=!0===I.isScene?I.overrideMaterial:null;for(let t=0,A=g.length;t<A;t++){const A=g[t],i=A.object,o=A.geometry,n=null===e?A.material:e,l=A.group;if(C.isArrayCamera){const g=C.cameras;for(let C=0,e=g.length;C<e;C++){const e=g[C];i.layers.test(e.layers)&&(M.viewport(p.copy(e.viewport)),s.setupLightsView(e),pg(i,I,e,o,n,l))}}else pg(i,I,C,o,n,l)}}function pg(g,I,C,e,t,A){if(g.onBeforeRender(r,I,C,e,t,A),g.modelViewMatrix.multiplyMatrices(C.matrixWorldInverse,g.matrixWorld),g.normalMatrix.getNormalMatrix(g.modelViewMatrix),g.isImmediateRenderObject){const e=vg(C,I,t,g);M.setMaterial(t),ng.reset(),function(g,I){g.render((function(g){r.renderBufferImmediate(g,I)}))}(g,e)}else r.renderBufferDirect(C,I,e,t,g,A);g.onAfterRender(r,I,C,e,t,A)}function Wg(g,I,C){!0!==I.isScene&&(I=x);const e=U.get(g),t=s.state.lights,A=s.state.shadowsArray,i=t.state.version,o=P.getParameters(g,t.state,A,I,C),n=P.getProgramCacheKey(o);let l=e.programs;e.environment=g.isMeshStandardMaterial?I.environment:null,e.fog=I.fog,e.envMap=E.get(g.envMap||e.environment),void 0===l&&(g.addEventListener("dispose",rg),l=new Map,e.programs=l);let a=l.get(n);if(void 0!==a){if(e.currentProgram===a&&e.lightsStateVersion===i)return Vg(g,o),a}else o.uniforms=P.getUniforms(g),g.onBuild(o,r),g.onBeforeCompile(o,r),a=P.acquireProgram(o,n),l.set(n,a),e.uniforms=o.uniforms;const c=e.uniforms;(g.isShaderMaterial||g.isRawShaderMaterial)&&!0!==g.clipping||(c.clippingPlanes=Ig.uniform),Vg(g,o),e.needsLights=function(g){return g.isMeshLambertMaterial||g.isMeshToonMaterial||g.isMeshPhongMaterial||g.isMeshStandardMaterial||g.isShadowMaterial||g.isShaderMaterial&&!0===g.lights}(g),e.lightsStateVersion=i,e.needsLights&&(c.ambientLightColor.value=t.state.ambient,c.lightProbe.value=t.state.probe,c.directionalLights.value=t.state.directional,c.directionalLightShadows.value=t.state.directionalShadow,c.spotLights.value=t.state.spot,c.spotLightShadows.value=t.state.spotShadow,c.rectAreaLights.value=t.state.rectArea,c.ltc_1.value=t.state.rectAreaLTC1,c.ltc_2.value=t.state.rectAreaLTC2,c.pointLights.value=t.state.point,c.pointLightShadows.value=t.state.pointShadow,c.hemisphereLights.value=t.state.hemi,c.directionalShadowMap.value=t.state.directionalShadowMap,c.directionalShadowMatrix.value=t.state.directionalShadowMatrix,c.spotShadowMap.value=t.state.spotShadowMap,c.spotShadowMatrix.value=t.state.spotShadowMatrix,c.pointShadowMap.value=t.state.pointShadowMap,c.pointShadowMatrix.value=t.state.pointShadowMatrix);const d=a.getUniforms(),b=io.seqWithValue(d.seq,c);return e.currentProgram=a,e.uniformsList=b,a}function Vg(g,I){const C=U.get(g);C.outputEncoding=I.outputEncoding,C.instancing=I.instancing,C.numClippingPlanes=I.numClippingPlanes,C.numIntersection=I.numClipIntersection,C.vertexAlphas=I.vertexAlphas}function vg(g,I,C,e){!0!==I.isScene&&(I=x),T.resetTextureUnits();const t=I.fog,A=C.isMeshStandardMaterial?I.environment:null,i=null===u?r.outputEncoding:u.texture.encoding,o=E.get(C.envMap||A),n=!0===C.vertexColors&&e.geometry&&e.geometry.attributes.color&&4===e.geometry.attributes.color.itemSize,l=U.get(C),a=s.state.lights;if(!0===N&&(!0===F||g!==Z)){const I=g===Z&&C.id===B;Ig.setState(C,g,I)}let c=!1;C.version===l.__version?l.needsLights&&l.lightsStateVersion!==a.state.version||l.outputEncoding!==i||e.isInstancedMesh&&!1===l.instancing?c=!0:e.isInstancedMesh||!0!==l.instancing?l.envMap!==o||C.fog&&l.fog!==t?c=!0:void 0===l.numClippingPlanes||l.numClippingPlanes===Ig.numPlanes&&l.numIntersection===Ig.numIntersection?l.vertexAlphas!==n&&(c=!0):c=!0:c=!0:(c=!0,l.__version=C.version);let d=l.currentProgram;!0===c&&(d=Wg(C,I,e));let b=!1,G=!1,h=!1;const m=d.getUniforms(),p=l.uniforms;if(M.useProgram(d.program)&&(b=!0,G=!0,h=!0),C.id!==B&&(B=C.id,G=!0),b||Z!==g){if(m.setValue(lg,"projectionMatrix",g.projectionMatrix),k.logarithmicDepthBuffer&&m.setValue(lg,"logDepthBufFC",2/(Math.log(g.far+1)/Math.LN2)),Z!==g&&(Z=g,G=!0,h=!0),C.isShaderMaterial||C.isMeshPhongMaterial||C.isMeshToonMaterial||C.isMeshStandardMaterial||C.envMap){const I=m.map.cameraPosition;void 0!==I&&I.setValue(lg,f.setFromMatrixPosition(g.matrixWorld))}(C.isMeshPhongMaterial||C.isMeshToonMaterial||C.isMeshLambertMaterial||C.isMeshBasicMaterial||C.isMeshStandardMaterial||C.isShaderMaterial)&&m.setValue(lg,"isOrthographic",!0===g.isOrthographicCamera),(C.isMeshPhongMaterial||C.isMeshToonMaterial||C.isMeshLambertMaterial||C.isMeshBasicMaterial||C.isMeshStandardMaterial||C.isShaderMaterial||C.isShadowMaterial||C.skinning)&&m.setValue(lg,"viewMatrix",g.matrixWorldInverse)}if(C.skinning){m.setOptional(lg,e,"bindMatrix"),m.setOptional(lg,e,"bindMatrixInverse");const g=e.skeleton;if(g){const I=g.bones;if(k.floatVertexTextures){if(null===g.boneTexture){let C=Math.sqrt(4*I.length);C=TC(C),C=Math.max(C,4);const e=new Float32Array(C*C*4);e.set(g.boneMatrices);const t=new SA(e,C,C,xg,Hg);g.boneMatrices=e,g.boneTexture=t,g.boneTextureSize=C}m.setValue(lg,"boneTexture",g.boneTexture,T),m.setValue(lg,"boneTextureSize",g.boneTextureSize)}else m.setOptional(lg,g,"boneMatrices")}}var W,y;return(G||l.receiveShadow!==e.receiveShadow)&&(l.receiveShadow=e.receiveShadow,m.setValue(lg,"receiveShadow",e.receiveShadow)),G&&(m.setValue(lg,"toneMappingExposure",r.toneMappingExposure),l.needsLights&&(y=h,(W=p).ambientLightColor.needsUpdate=y,W.lightProbe.needsUpdate=y,W.directionalLights.needsUpdate=y,W.directionalLightShadows.needsUpdate=y,W.pointLights.needsUpdate=y,W.pointLightShadows.needsUpdate=y,W.spotLights.needsUpdate=y,W.spotLightShadows.needsUpdate=y,W.rectAreaLights.needsUpdate=y,W.hemisphereLights.needsUpdate=y),t&&C.fog&&_.refreshFogUniforms(p,t),_.refreshMaterialUniforms(p,C,Y,v),io.upload(lg,l.uniformsList,p,T)),C.isShaderMaterial&&!0===C.uniformsNeedUpdate&&(io.upload(lg,l.uniformsList,p,T),C.uniformsNeedUpdate=!1),C.isSpriteMaterial&&m.setValue(lg,"center",e.center),m.setValue(lg,"modelViewMatrix",e.modelViewMatrix),m.setValue(lg,"normalMatrix",e.normalMatrix),m.setValue(lg,"modelMatrix",e.matrixWorld),d}ug.setAnimationLoop((function(g){Gg&&Gg(g)})),"undefined"!=typeof window&&ug.setContext(window),this.setAnimationLoop=function(g){Gg=g,sg.setAnimationLoop(g),null===g?ug.stop():ug.start()},sg.addEventListener("sessionstart",hg),sg.addEventListener("sessionend",mg),this.render=function(g,I){let C,e;if(void 0!==arguments[2]&&(console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead."),C=arguments[2]),void 0!==arguments[3]&&(console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead."),e=arguments[3]),void 0!==I&&!0!==I.isCamera)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");if(!0===G)return;!0===g.autoUpdate&&g.updateMatrixWorld(),null===I.parent&&I.updateMatrixWorld(),!0===sg.enabled&&!0===sg.isPresenting&&(I=sg.getCamera(I)),!0===g.isScene&&g.onBeforeRender(r,g,I,C||u),s=gg.get(g,b.length),s.init(),b.push(s),z.multiplyMatrices(I.projectionMatrix,I.matrixWorldInverse),S.setFromProjectionMatrix(z),F=this.localClippingEnabled,N=Ig.init(this.clippingPlanes,F,I),c=$.get(g,d.length),c.init(),d.push(c),Bg(g,I,0,r.sortObjects),c.finish(),!0===r.sortObjects&&c.sort(X,R),!0===N&&Ig.beginShadows();const t=s.state.shadowsArray;Cg.render(t,g,I),s.setupLights(),s.setupLightsView(I),!0===N&&Ig.endShadows(),!0===this.info.autoReset&&this.info.reset(),void 0!==C&&this.setRenderTarget(C),eg.render(c,g,I,e);const A=c.opaque,i=c.transparent;A.length>0&&Zg(A,g,I),i.length>0&&Zg(i,g,I),null!==u&&(T.updateRenderTargetMipmap(u),T.updateMultisampleRenderTarget(u)),!0===g.isScene&&g.onAfterRender(r,g,I),M.buffers.depth.setTest(!0),M.buffers.depth.setMask(!0),M.buffers.color.setMask(!0),M.setPolygonOffset(!1),ng.resetDefaultState(),B=-1,Z=null,b.pop(),s=b.length>0?b[b.length-1]:null,d.pop(),c=d.length>0?d[d.length-1]:null},this.getActiveCubeFace=function(){return h},this.getActiveMipmapLevel=function(){return m},this.getRenderTarget=function(){return u},this.setRenderTarget=function(g,I=0,C=0){u=g,h=I,m=C,g&&void 0===U.get(g).__webglFramebuffer&&T.setupRenderTarget(g);let e=null,t=!1,A=!1;if(g){const C=g.texture;(C.isDataTexture3D||C.isDataTexture2DArray)&&(A=!0);const i=U.get(g).__webglFramebuffer;g.isWebGLCubeRenderTarget?(e=i[I],t=!0):e=g.isWebGLMultisampleRenderTarget?U.get(g).__webglMultisampledFramebuffer:i,p.copy(g.viewport),W.copy(g.scissor),y=g.scissorTest}else p.copy(H).multiplyScalar(Y).floor(),W.copy(w).multiplyScalar(Y).floor(),y=K;if(M.bindFramebuffer(36160,e),M.viewport(p),M.scissor(W),M.setScissorTest(y),t){const e=U.get(g.texture);lg.framebufferTexture2D(36160,36064,34069+I,e.__webglTexture,C)}else if(A){const e=U.get(g.texture),t=I||0;lg.framebufferTextureLayer(36160,36064,e.__webglTexture,C||0,t)}},this.readRenderTargetPixels=function(g,I,C,e,t,A,i){if(!g||!g.isWebGLRenderTarget)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let o=U.get(g).__webglFramebuffer;if(g.isWebGLCubeRenderTarget&&void 0!==i&&(o=o[i]),o){M.bindFramebuffer(36160,o);try{const i=g.texture,o=i.format,n=i.type;if(o!==xg&&og.convert(o)!==lg.getParameter(35739))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");const l=n===wg&&(L.has("EXT_color_buffer_half_float")||k.isWebGL2&&L.has("EXT_color_buffer_float"));if(!(n===yg||og.convert(n)===lg.getParameter(35738)||n===Hg&&(k.isWebGL2||L.has("OES_texture_float")||L.has("WEBGL_color_buffer_float"))||l))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");36053===lg.checkFramebufferStatus(36160)?I>=0&&I<=g.width-e&&C>=0&&C<=g.height-t&&lg.readPixels(I,C,e,t,og.convert(o),og.convert(n),A):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{const g=null!==u?U.get(u).__webglFramebuffer:null;M.bindFramebuffer(36160,g)}}},this.copyFramebufferToTexture=function(g,I,C=0){const e=Math.pow(2,-C),t=Math.floor(I.image.width*e),A=Math.floor(I.image.height*e),i=og.convert(I.format);T.setTexture2D(I,0),lg.copyTexImage2D(3553,C,i,g.x,g.y,t,A,0),M.unbindTexture()},this.copyTextureToTexture=function(g,I,C,e=0){const t=I.image.width,A=I.image.height,i=og.convert(C.format),o=og.convert(C.type);T.setTexture2D(C,0),lg.pixelStorei(37440,C.flipY),lg.pixelStorei(37441,C.premultiplyAlpha),lg.pixelStorei(3317,C.unpackAlignment),I.isDataTexture?lg.texSubImage2D(3553,e,g.x,g.y,t,A,i,o,I.image.data):I.isCompressedTexture?lg.compressedTexSubImage2D(3553,e,g.x,g.y,I.mipmaps[0].width,I.mipmaps[0].height,i,I.mipmaps[0].data):lg.texSubImage2D(3553,e,g.x,g.y,i,o,I.image),0===e&&C.generateMipmaps&&lg.generateMipmap(3553),M.unbindTexture()},this.copyTextureToTexture3D=function(g,I,C,e,t=0){if(r.isWebGL1Renderer)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");const{width:A,height:i,data:o}=C.image,n=og.convert(e.format),l=og.convert(e.type);let a;if(e.isDataTexture3D)T.setTexture3D(e,0),a=32879;else{if(!e.isDataTexture2DArray)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");T.setTexture2DArray(e,0),a=35866}lg.pixelStorei(37440,e.flipY),lg.pixelStorei(37441,e.premultiplyAlpha),lg.pixelStorei(3317,e.unpackAlignment);const c=lg.getParameter(3314),s=lg.getParameter(32878),d=lg.getParameter(3316),b=lg.getParameter(3315),G=lg.getParameter(32877);lg.pixelStorei(3314,A),lg.pixelStorei(32878,i),lg.pixelStorei(3316,g.min.x),lg.pixelStorei(3315,g.min.y),lg.pixelStorei(32877,g.min.z),lg.texSubImage3D(a,t,I.x,I.y,I.z,g.max.x-g.min.x+1,g.max.y-g.min.y+1,g.max.z-g.min.z+1,n,l,o),lg.pixelStorei(3314,c),lg.pixelStorei(32878,s),lg.pixelStorei(3316,d),lg.pixelStorei(3315,b),lg.pixelStorei(32877,G),0===t&&e.generateMipmaps&&lg.generateMipmap(a),M.unbindTexture()},this.initTexture=function(g){T.setTexture2D(g,0),M.unbindTexture()},this.resetState=function(){h=0,m=0,u=null,M.reset(),ng.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}class $o extends qo{}$o.prototype.isWebGL1Renderer=!0;class gn{constructor(g,I=25e-5){this.name="",this.color=new wt(g),this.density=I}clone(){return new gn(this.color,this.density)}toJSON(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}gn.prototype.isFogExp2=!0;class In{constructor(g,I=1,C=1e3){this.name="",this.color=new wt(g),this.near=I,this.far=C}clone(){return new In(this.color,this.near,this.far)}toJSON(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}In.prototype.isFog=!0;class Cn extends ot{constructor(){super(),this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(g,I){return super.copy(g,I),null!==g.background&&(this.background=g.background.clone()),null!==g.environment&&(this.environment=g.environment.clone()),null!==g.fog&&(this.fog=g.fog.clone()),null!==g.overrideMaterial&&(this.overrideMaterial=g.overrideMaterial.clone()),this.autoUpdate=g.autoUpdate,this.matrixAutoUpdate=g.matrixAutoUpdate,this}toJSON(g){const I=super.toJSON(g);return null!==this.background&&(I.object.background=this.background.toJSON(g)),null!==this.environment&&(I.object.environment=this.environment.toJSON(g)),null!==this.fog&&(I.object.fog=this.fog.toJSON()),I}}Cn.prototype.isScene=!0;class en{constructor(g,I){this.array=g,this.stride=I,this.count=void 0!==g?g.length/I:0,this.usage=yC,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=LC(),this.onUploadCallback=function(){}}set needsUpdate(g){!0===g&&this.version++}setUsage(g){return this.usage=g,this}copy(g){return this.array=new g.array.constructor(g.array),this.count=g.count,this.stride=g.stride,this.usage=g.usage,this}copyAt(g,I,C){g*=this.stride,C*=I.stride;for(let e=0,t=this.stride;e<t;e++)this.array[g+e]=I.array[C+e];return this}set(g,I=0){return this.array.set(g,I),this}clone(g){void 0===g.arrayBuffers&&(g.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=LC()),void 0===g.arrayBuffers[this.array.buffer._uuid]&&(g.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const I=new this.array.constructor(g.arrayBuffers[this.array.buffer._uuid]),C=new en(I,this.stride);return C.setUsage(this.usage),C}onUpload(g){return this.onUploadCallback=g,this}toJSON(g){return void 0===g.arrayBuffers&&(g.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=LC()),void 0===g.arrayBuffers[this.array.buffer._uuid]&&(g.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}en.prototype.isInterleavedBuffer=!0;const tn=new Ae;class An{constructor(g,I,C,e){this.name="",this.data=g,this.itemSize=I,this.offset=C,this.normalized=!0===e}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(g){this.data.needsUpdate=g}applyMatrix4(g){for(let I=0,C=this.data.count;I<C;I++)tn.x=this.getX(I),tn.y=this.getY(I),tn.z=this.getZ(I),tn.applyMatrix4(g),this.setXYZ(I,tn.x,tn.y,tn.z);return this}applyNormalMatrix(g){for(let I=0,C=this.count;I<C;I++)tn.x=this.getX(I),tn.y=this.getY(I),tn.z=this.getZ(I),tn.applyNormalMatrix(g),this.setXYZ(I,tn.x,tn.y,tn.z);return this}transformDirection(g){for(let I=0,C=this.count;I<C;I++)tn.x=this.getX(I),tn.y=this.getY(I),tn.z=this.getZ(I),tn.transformDirection(g),this.setXYZ(I,tn.x,tn.y,tn.z);return this}setX(g,I){return this.data.array[g*this.data.stride+this.offset]=I,this}setY(g,I){return this.data.array[g*this.data.stride+this.offset+1]=I,this}setZ(g,I){return this.data.array[g*this.data.stride+this.offset+2]=I,this}setW(g,I){return this.data.array[g*this.data.stride+this.offset+3]=I,this}getX(g){return this.data.array[g*this.data.stride+this.offset]}getY(g){return this.data.array[g*this.data.stride+this.offset+1]}getZ(g){return this.data.array[g*this.data.stride+this.offset+2]}getW(g){return this.data.array[g*this.data.stride+this.offset+3]}setXY(g,I,C){return g=g*this.data.stride+this.offset,this.data.array[g+0]=I,this.data.array[g+1]=C,this}setXYZ(g,I,C,e){return g=g*this.data.stride+this.offset,this.data.array[g+0]=I,this.data.array[g+1]=C,this.data.array[g+2]=e,this}setXYZW(g,I,C,e,t){return g=g*this.data.stride+this.offset,this.data.array[g+0]=I,this.data.array[g+1]=C,this.data.array[g+2]=e,this.data.array[g+3]=t,this}clone(g){if(void 0===g){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");const g=[];for(let I=0;I<this.count;I++){const C=I*this.data.stride+this.offset;for(let I=0;I<this.itemSize;I++)g.push(this.data.array[C+I])}return new Ft(new this.array.constructor(g),this.itemSize,this.normalized)}return void 0===g.interleavedBuffers&&(g.interleavedBuffers={}),void 0===g.interleavedBuffers[this.data.uuid]&&(g.interleavedBuffers[this.data.uuid]=this.data.clone(g)),new An(g.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(g){if(void 0===g){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");const g=[];for(let I=0;I<this.count;I++){const C=I*this.data.stride+this.offset;for(let I=0;I<this.itemSize;I++)g.push(this.data.array[C+I])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:g,normalized:this.normalized}}return void 0===g.interleavedBuffers&&(g.interleavedBuffers={}),void 0===g.interleavedBuffers[this.data.uuid]&&(g.interleavedBuffers[this.data.uuid]=this.data.toJSON(g)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}An.prototype.isInterleavedBufferAttribute=!0;class on extends yt{constructor(g){super(),this.type="SpriteMaterial",this.color=new wt(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(g)}copy(g){return super.copy(g),this.color.copy(g.color),this.map=g.map,this.alphaMap=g.alphaMap,this.rotation=g.rotation,this.sizeAttenuation=g.sizeAttenuation,this}}let nn;on.prototype.isSpriteMaterial=!0;const ln=new Ae,an=new Ae,cn=new Ae,sn=new DC,dn=new DC,bn=new ze,rn=new Ae,Gn=new Ae,hn=new Ae,mn=new DC,un=new DC,Bn=new DC;class Zn extends ot{constructor(g){if(super(),this.type="Sprite",void 0===nn){nn=new CA;const g=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),I=new en(g,5);nn.setIndex([0,1,2,0,2,3]),nn.setAttribute("position",new An(I,3,0,!1)),nn.setAttribute("uv",new An(I,2,3,!1))}this.geometry=nn,this.material=void 0!==g?g:new on,this.center=new DC(.5,.5)}raycast(g,I){null===g.camera&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),an.setFromMatrixScale(this.matrixWorld),bn.copy(g.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(g.camera.matrixWorldInverse,this.matrixWorld),cn.setFromMatrixPosition(this.modelViewMatrix),g.camera.isPerspectiveCamera&&!1===this.material.sizeAttenuation&&an.multiplyScalar(-cn.z);const C=this.material.rotation;let e,t;0!==C&&(t=Math.cos(C),e=Math.sin(C));const A=this.center;pn(rn.set(-.5,-.5,0),cn,A,an,e,t),pn(Gn.set(.5,-.5,0),cn,A,an,e,t),pn(hn.set(.5,.5,0),cn,A,an,e,t),mn.set(0,0),un.set(1,0),Bn.set(1,1);let i=g.ray.intersectTriangle(rn,Gn,hn,!1,ln);if(null===i&&(pn(Gn.set(-.5,.5,0),cn,A,an,e,t),un.set(0,1),i=g.ray.intersectTriangle(rn,hn,Gn,!1,ln),null===i))return;const o=g.ray.origin.distanceTo(ln);o<g.near||o>g.far||I.push({distance:o,point:ln.clone(),uv:pt.getUV(ln,rn,Gn,hn,mn,un,Bn,new DC),face:null,object:this})}copy(g){return super.copy(g),void 0!==g.center&&this.center.copy(g.center),this.material=g.material,this}}function pn(g,I,C,e,t,A){sn.subVectors(g,C).addScalar(.5).multiply(e),void 0!==t?(dn.x=A*sn.x-t*sn.y,dn.y=t*sn.x+A*sn.y):dn.copy(sn),g.copy(I),g.x+=dn.x,g.y+=dn.y,g.applyMatrix4(bn)}Zn.prototype.isSprite=!0;const Wn=new Ae,yn=new Ae;class Vn extends ot{constructor(){super(),this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]},isLOD:{value:!0}}),this.autoUpdate=!0}copy(g){super.copy(g,!1);const I=g.levels;for(let g=0,C=I.length;g<C;g++){const C=I[g];this.addLevel(C.object.clone(),C.distance)}return this.autoUpdate=g.autoUpdate,this}addLevel(g,I=0){I=Math.abs(I);const C=this.levels;let e;for(e=0;e<C.length&&!(I<C[e].distance);e++);return C.splice(e,0,{distance:I,object:g}),this.add(g),this}getCurrentLevel(){return this._currentLevel}getObjectForDistance(g){const I=this.levels;if(I.length>0){let C,e;for(C=1,e=I.length;C<e&&!(g<I[C].distance);C++);return I[C-1].object}return null}raycast(g,I){if(this.levels.length>0){Wn.setFromMatrixPosition(this.matrixWorld);const C=g.ray.origin.distanceTo(Wn);this.getObjectForDistance(C).raycast(g,I)}}update(g){const I=this.levels;if(I.length>1){Wn.setFromMatrixPosition(g.matrixWorld),yn.setFromMatrixPosition(this.matrixWorld);const C=Wn.distanceTo(yn)/g.zoom;let e,t;for(I[0].object.visible=!0,e=1,t=I.length;e<t&&C>=I[e].distance;e++)I[e-1].object.visible=!1,I[e].object.visible=!0;for(this._currentLevel=e-1;e<t;e++)I[e].object.visible=!1}}toJSON(g){const I=super.toJSON(g);!1===this.autoUpdate&&(I.object.autoUpdate=!1),I.object.levels=[];const C=this.levels;for(let g=0,e=C.length;g<e;g++){const e=C[g];I.object.levels.push({object:e.object.uuid,distance:e.distance})}return I}}const vn=new Ae,Yn=new Ie,Xn=new Ie,Rn=new Ae,Hn=new ze;class wn extends BA{constructor(g,I){super(g,I),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new ze,this.bindMatrixInverse=new ze}copy(g){return super.copy(g),this.bindMode=g.bindMode,this.bindMatrix.copy(g.bindMatrix),this.bindMatrixInverse.copy(g.bindMatrixInverse),this.skeleton=g.skeleton,this}bind(g,I){this.skeleton=g,void 0===I&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),I=this.matrixWorld),this.bindMatrix.copy(I),this.bindMatrixInverse.copy(I).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const g=new Ie,I=this.geometry.attributes.skinWeight;for(let C=0,e=I.count;C<e;C++){g.x=I.getX(C),g.y=I.getY(C),g.z=I.getZ(C),g.w=I.getW(C);const e=1/g.manhattanLength();e!==1/0?g.multiplyScalar(e):g.set(1,0,0,0),I.setXYZW(C,g.x,g.y,g.z,g.w)}}updateMatrixWorld(g){super.updateMatrixWorld(g),"attached"===this.bindMode?this.bindMatrixInverse.copy(this.matrixWorld).invert():"detached"===this.bindMode?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}boneTransform(g,I){const C=this.skeleton,e=this.geometry;Yn.fromBufferAttribute(e.attributes.skinIndex,g),Xn.fromBufferAttribute(e.attributes.skinWeight,g),vn.fromBufferAttribute(e.attributes.position,g).applyMatrix4(this.bindMatrix),I.set(0,0,0);for(let g=0;g<4;g++){const e=Xn.getComponent(g);if(0!==e){const t=Yn.getComponent(g);Hn.multiplyMatrices(C.bones[t].matrixWorld,C.boneInverses[t]),I.addScaledVector(Rn.copy(vn).applyMatrix4(Hn),e)}}return I.applyMatrix4(this.bindMatrixInverse)}}wn.prototype.isSkinnedMesh=!0;class Kn extends ot{constructor(){super(),this.type="Bone"}}Kn.prototype.isBone=!0;const Sn=new ze,Nn=new ze;class Fn{constructor(g=[],I=[]){this.uuid=LC(),this.bones=g.slice(0),this.boneInverses=I,this.boneMatrices=null,this.boneTexture=null,this.boneTextureSize=0,this.frame=-1,this.init()}init(){const g=this.bones,I=this.boneInverses;if(this.boneMatrices=new Float32Array(16*g.length),0===I.length)this.calculateInverses();else if(g.length!==I.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let g=0,I=this.bones.length;g<I;g++)this.boneInverses.push(new ze)}}calculateInverses(){this.boneInverses.length=0;for(let g=0,I=this.bones.length;g<I;g++){const I=new ze;this.bones[g]&&I.copy(this.bones[g].matrixWorld).invert(),this.boneInverses.push(I)}}pose(){for(let g=0,I=this.bones.length;g<I;g++){const I=this.bones[g];I&&I.matrixWorld.copy(this.boneInverses[g]).invert()}for(let g=0,I=this.bones.length;g<I;g++){const I=this.bones[g];I&&(I.parent&&I.parent.isBone?(I.matrix.copy(I.parent.matrixWorld).invert(),I.matrix.multiply(I.matrixWorld)):I.matrix.copy(I.matrixWorld),I.matrix.decompose(I.position,I.quaternion,I.scale))}}update(){const g=this.bones,I=this.boneInverses,C=this.boneMatrices,e=this.boneTexture;for(let e=0,t=g.length;e<t;e++){const t=g[e]?g[e].matrixWorld:Nn;Sn.multiplyMatrices(t,I[e]),Sn.toArray(C,16*e)}null!==e&&(e.needsUpdate=!0)}clone(){return new Fn(this.bones,this.boneInverses)}getBoneByName(g){for(let I=0,C=this.bones.length;I<C;I++){const C=this.bones[I];if(C.name===g)return C}}dispose(){null!==this.boneTexture&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(g,I){this.uuid=g.uuid;for(let C=0,e=g.bones.length;C<e;C++){const e=g.bones[C];let t=I[e];void 0===t&&(console.warn("THREE.Skeleton: No bone found with UUID:",e),t=new Kn),this.bones.push(t),this.boneInverses.push((new ze).fromArray(g.boneInverses[C]))}return this.init(),this}toJSON(){const g={metadata:{version:4.5,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};g.uuid=this.uuid;const I=this.bones,C=this.boneInverses;for(let e=0,t=I.length;e<t;e++){const t=I[e];g.bones.push(t.uuid);const A=C[e];g.boneInverses.push(A.toArray())}return g}}const zn=new ze,fn=new ze,xn=[],Jn=new BA;class Ln extends BA{constructor(g,I,C){super(g,I),this.instanceMatrix=new Ft(new Float32Array(16*C),16),this.instanceColor=null,this.count=C,this.frustumCulled=!1}copy(g){return super.copy(g),this.instanceMatrix.copy(g.instanceMatrix),null!==g.instanceColor&&(this.instanceColor=g.instanceColor.clone()),this.count=g.count,this}getColorAt(g,I){I.fromArray(this.instanceColor.array,3*g)}getMatrixAt(g,I){I.fromArray(this.instanceMatrix.array,16*g)}raycast(g,I){const C=this.matrixWorld,e=this.count;if(Jn.geometry=this.geometry,Jn.material=this.material,void 0!==Jn.material)for(let t=0;t<e;t++){this.getMatrixAt(t,zn),fn.multiplyMatrices(C,zn),Jn.matrixWorld=fn,Jn.raycast(g,xn);for(let g=0,C=xn.length;g<C;g++){const C=xn[g];C.instanceId=t,C.object=this,I.push(C)}xn.length=0}}setColorAt(g,I){null===this.instanceColor&&(this.instanceColor=new Ft(new Float32Array(3*this.count),3)),I.toArray(this.instanceColor.array,3*g)}setMatrixAt(g,I){I.toArray(this.instanceMatrix.array,16*g)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}Ln.prototype.isInstancedMesh=!0;class kn extends yt{constructor(g){super(),this.type="LineBasicMaterial",this.color=new wt(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.morphTargets=!1,this.setValues(g)}copy(g){return super.copy(g),this.color.copy(g.color),this.linewidth=g.linewidth,this.linecap=g.linecap,this.linejoin=g.linejoin,this.morphTargets=g.morphTargets,this}}kn.prototype.isLineBasicMaterial=!0;const Mn=new Ae,Qn=new Ae,Un=new ze,Tn=new Fe,En=new Ye;class jn extends ot{constructor(g=new CA,I=new kn){super(),this.type="Line",this.geometry=g,this.material=I,this.updateMorphTargets()}copy(g){return super.copy(g),this.material=g.material,this.geometry=g.geometry,this}computeLineDistances(){const g=this.geometry;if(g.isBufferGeometry)if(null===g.index){const I=g.attributes.position,C=[0];for(let g=1,e=I.count;g<e;g++)Mn.fromBufferAttribute(I,g-1),Qn.fromBufferAttribute(I,g),C[g]=C[g-1],C[g]+=Mn.distanceTo(Qn);g.setAttribute("lineDistance",new Ut(C,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else g.isGeometry&&console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}raycast(g,I){const C=this.geometry,e=this.matrixWorld,t=g.params.Line.threshold,A=C.drawRange;if(null===C.boundingSphere&&C.computeBoundingSphere(),En.copy(C.boundingSphere),En.applyMatrix4(e),En.radius+=t,!1===g.ray.intersectsSphere(En))return;Un.copy(e).invert(),Tn.copy(g.ray).applyMatrix4(Un);const i=t/((this.scale.x+this.scale.y+this.scale.z)/3),o=i*i,n=new Ae,l=new Ae,a=new Ae,c=new Ae,s=this.isLineSegments?2:1;if(C.isBufferGeometry){const e=C.index,t=C.attributes.position;if(null!==e)for(let C=Math.max(0,A.start),i=Math.min(e.count,A.start+A.count)-1;C<i;C+=s){const A=e.getX(C),i=e.getX(C+1);if(n.fromBufferAttribute(t,A),l.fromBufferAttribute(t,i),Tn.distanceSqToSegment(n,l,c,a)>o)continue;c.applyMatrix4(this.matrixWorld);const s=g.ray.origin.distanceTo(c);s<g.near||s>g.far||I.push({distance:s,point:a.clone().applyMatrix4(this.matrixWorld),index:C,face:null,faceIndex:null,object:this})}else for(let C=Math.max(0,A.start),e=Math.min(t.count,A.start+A.count)-1;C<e;C+=s){if(n.fromBufferAttribute(t,C),l.fromBufferAttribute(t,C+1),Tn.distanceSqToSegment(n,l,c,a)>o)continue;c.applyMatrix4(this.matrixWorld);const e=g.ray.origin.distanceTo(c);e<g.near||e>g.far||I.push({distance:e,point:a.clone().applyMatrix4(this.matrixWorld),index:C,face:null,faceIndex:null,object:this})}}else C.isGeometry&&console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const g=this.geometry;if(g.isBufferGeometry){const I=g.morphAttributes,C=Object.keys(I);if(C.length>0){const g=I[C[0]];if(void 0!==g){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let I=0,C=g.length;I<C;I++){const C=g[I].name||String(I);this.morphTargetInfluences.push(0),this.morphTargetDictionary[C]=I}}}}else{const I=g.morphTargets;void 0!==I&&I.length>0&&console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}jn.prototype.isLine=!0;const Dn=new Ae,On=new Ae;class Pn extends jn{constructor(g,I){super(g,I),this.type="LineSegments"}computeLineDistances(){const g=this.geometry;if(g.isBufferGeometry)if(null===g.index){const I=g.attributes.position,C=[];for(let g=0,e=I.count;g<e;g+=2)Dn.fromBufferAttribute(I,g),On.fromBufferAttribute(I,g+1),C[g]=0===g?0:C[g-1],C[g+1]=C[g]+Dn.distanceTo(On);g.setAttribute("lineDistance",new Ut(C,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else g.isGeometry&&console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}}Pn.prototype.isLineSegments=!0;class _n extends jn{constructor(g,I){super(g,I),this.type="LineLoop"}}_n.prototype.isLineLoop=!0;class qn extends yt{constructor(g){super(),this.type="PointsMaterial",this.color=new wt(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.morphTargets=!1,this.setValues(g)}copy(g){return super.copy(g),this.color.copy(g.color),this.map=g.map,this.alphaMap=g.alphaMap,this.size=g.size,this.sizeAttenuation=g.sizeAttenuation,this.morphTargets=g.morphTargets,this}}qn.prototype.isPointsMaterial=!0;const $n=new ze,gl=new Fe,Il=new Ye,Cl=new Ae;class el extends ot{constructor(g=new CA,I=new qn){super(),this.type="Points",this.geometry=g,this.material=I,this.updateMorphTargets()}copy(g){return super.copy(g),this.material=g.material,this.geometry=g.geometry,this}raycast(g,I){const C=this.geometry,e=this.matrixWorld,t=g.params.Points.threshold,A=C.drawRange;if(null===C.boundingSphere&&C.computeBoundingSphere(),Il.copy(C.boundingSphere),Il.applyMatrix4(e),Il.radius+=t,!1===g.ray.intersectsSphere(Il))return;$n.copy(e).invert(),gl.copy(g.ray).applyMatrix4($n);const i=t/((this.scale.x+this.scale.y+this.scale.z)/3),o=i*i;if(C.isBufferGeometry){const t=C.index,i=C.attributes.position;if(null!==t)for(let C=Math.max(0,A.start),n=Math.min(t.count,A.start+A.count);C<n;C++){const A=t.getX(C);Cl.fromBufferAttribute(i,A),tl(Cl,A,o,e,g,I,this)}else for(let C=Math.max(0,A.start),t=Math.min(i.count,A.start+A.count);C<t;C++)Cl.fromBufferAttribute(i,C),tl(Cl,C,o,e,g,I,this)}else console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const g=this.geometry;if(g.isBufferGeometry){const I=g.morphAttributes,C=Object.keys(I);if(C.length>0){const g=I[C[0]];if(void 0!==g){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let I=0,C=g.length;I<C;I++){const C=g[I].name||String(I);this.morphTargetInfluences.push(0),this.morphTargetDictionary[C]=I}}}}else{const I=g.morphTargets;void 0!==I&&I.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}function tl(g,I,C,e,t,A,i){const o=gl.distanceSqToPoint(g);if(o<C){const C=new Ae;gl.closestPointToPoint(g,C),C.applyMatrix4(e);const n=t.ray.origin.distanceTo(C);if(n<t.near||n>t.far)return;A.push({distance:n,distanceToRay:Math.sqrt(o),point:C,index:I,face:null,object:i})}}el.prototype.isPoints=!0;class Al extends $C{constructor(g,I,C,e,t,A,i,o,n){super(g,I,C,e,t,A,i,o,n),this.format=void 0!==i?i:fg,this.minFilter=void 0!==A?A:ug,this.magFilter=void 0!==t?t:ug,this.generateMipmaps=!1;const l=this;"requestVideoFrameCallback"in g&&g.requestVideoFrameCallback((function I(){l.needsUpdate=!0,g.requestVideoFrameCallback(I)}))}clone(){return new this.constructor(this.image).copy(this)}update(){const g=this.image;!1=="requestVideoFrameCallback"in g&&g.readyState>=g.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}Al.prototype.isVideoTexture=!0;class il extends $C{constructor(g,I,C,e,t,A,i,o,n,l,a,c){super(null,A,i,o,n,l,e,t,a,c),this.image={width:I,height:C},this.mipmaps=g,this.flipY=!1,this.generateMipmaps=!1}}il.prototype.isCompressedTexture=!0;class ol extends $C{constructor(g,I,C,e,t,A,i,o,n){super(g,I,C,e,t,A,i,o,n),this.needsUpdate=!0}}ol.prototype.isCanvasTexture=!0;class nl extends $C{constructor(g,I,C,e,t,A,i,o,n,l){if((l=void 0!==l?l:Mg)!==Mg&&l!==Qg)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===C&&l===Mg&&(C=Yg),void 0===C&&l===Qg&&(C=Fg),super(null,e,t,A,i,o,l,C,n),this.image={width:g,height:I},this.magFilter=void 0!==i?i:bg,this.minFilter=void 0!==o?o:bg,this.flipY=!1,this.generateMipmaps=!1}}nl.prototype.isDepthTexture=!0;class ll extends CA{constructor(g=1,I=8,C=0,e=2*Math.PI){super(),this.type="CircleGeometry",this.parameters={radius:g,segments:I,thetaStart:C,thetaLength:e},I=Math.max(3,I);const t=[],A=[],i=[],o=[],n=new Ae,l=new DC;A.push(0,0,0),i.push(0,0,1),o.push(.5,.5);for(let t=0,a=3;t<=I;t++,a+=3){const c=C+t/I*e;n.x=g*Math.cos(c),n.y=g*Math.sin(c),A.push(n.x,n.y,n.z),i.push(0,0,1),l.x=(A[a]/g+1)/2,l.y=(A[a+1]/g+1)/2,o.push(l.x,l.y)}for(let g=1;g<=I;g++)t.push(g,g+1,0);this.setIndex(t),this.setAttribute("position",new Ut(A,3)),this.setAttribute("normal",new Ut(i,3)),this.setAttribute("uv",new Ut(o,2))}}class al extends CA{constructor(g=1,I=1,C=1,e=8,t=1,A=!1,i=0,o=2*Math.PI){super(),this.type="CylinderGeometry",this.parameters={radiusTop:g,radiusBottom:I,height:C,radialSegments:e,heightSegments:t,openEnded:A,thetaStart:i,thetaLength:o};const n=this;e=Math.floor(e),t=Math.floor(t);const l=[],a=[],c=[],s=[];let d=0;const b=[],r=C/2;let G=0;function h(C){const t=d,A=new DC,b=new Ae;let h=0;const m=!0===C?g:I,u=!0===C?1:-1;for(let g=1;g<=e;g++)a.push(0,r*u,0),c.push(0,u,0),s.push(.5,.5),d++;const B=d;for(let g=0;g<=e;g++){const I=g/e*o+i,C=Math.cos(I),t=Math.sin(I);b.x=m*t,b.y=r*u,b.z=m*C,a.push(b.x,b.y,b.z),c.push(0,u,0),A.x=.5*C+.5,A.y=.5*t*u+.5,s.push(A.x,A.y),d++}for(let g=0;g<e;g++){const I=t+g,e=B+g;!0===C?l.push(e,e+1,I):l.push(e+1,e,I),h+=3}n.addGroup(G,h,!0===C?1:2),G+=h}!function(){const A=new Ae,h=new Ae;let m=0;const u=(I-g)/C;for(let n=0;n<=t;n++){const l=[],G=n/t,m=G*(I-g)+g;for(let g=0;g<=e;g++){const I=g/e,t=I*o+i,n=Math.sin(t),b=Math.cos(t);h.x=m*n,h.y=-G*C+r,h.z=m*b,a.push(h.x,h.y,h.z),A.set(n,u,b).normalize(),c.push(A.x,A.y,A.z),s.push(I,1-G),l.push(d++)}b.push(l)}for(let g=0;g<e;g++)for(let I=0;I<t;I++){const C=b[I][g],e=b[I+1][g],t=b[I+1][g+1],A=b[I][g+1];l.push(C,e,A),l.push(e,t,A),m+=6}n.addGroup(G,m,0),G+=m}(),!1===A&&(g>0&&h(!0),I>0&&h(!1)),this.setIndex(l),this.setAttribute("position",new Ut(a,3)),this.setAttribute("normal",new Ut(c,3)),this.setAttribute("uv",new Ut(s,2))}}class cl extends al{constructor(g=1,I=1,C=8,e=1,t=!1,A=0,i=2*Math.PI){super(0,g,I,C,e,t,A,i),this.type="ConeGeometry",this.parameters={radius:g,height:I,radialSegments:C,heightSegments:e,openEnded:t,thetaStart:A,thetaLength:i}}}class sl extends CA{constructor(g,I,C=1,e=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:g,indices:I,radius:C,detail:e};const t=[],A=[];function i(g,I,C,e){const t=e+1,A=[];for(let e=0;e<=t;e++){A[e]=[];const i=g.clone().lerp(C,e/t),o=I.clone().lerp(C,e/t),n=t-e;for(let g=0;g<=n;g++)A[e][g]=0===g&&e===t?i:i.clone().lerp(o,g/n)}for(let g=0;g<t;g++)for(let I=0;I<2*(t-g)-1;I++){const C=Math.floor(I/2);I%2==0?(o(A[g][C+1]),o(A[g+1][C]),o(A[g][C])):(o(A[g][C+1]),o(A[g+1][C+1]),o(A[g+1][C]))}}function o(g){t.push(g.x,g.y,g.z)}function n(I,C){const e=3*I;C.x=g[e+0],C.y=g[e+1],C.z=g[e+2]}function l(g,I,C,e){e<0&&1===g.x&&(A[I]=g.x-1),0===C.x&&0===C.z&&(A[I]=e/2/Math.PI+.5)}function a(g){return Math.atan2(g.z,-g.x)}!function(g){const C=new Ae,e=new Ae,t=new Ae;for(let A=0;A<I.length;A+=3)n(I[A+0],C),n(I[A+1],e),n(I[A+2],t),i(C,e,t,g)}(e),function(g){const I=new Ae;for(let C=0;C<t.length;C+=3)I.x=t[C+0],I.y=t[C+1],I.z=t[C+2],I.normalize().multiplyScalar(g),t[C+0]=I.x,t[C+1]=I.y,t[C+2]=I.z}(C),function(){const g=new Ae;for(let C=0;C<t.length;C+=3){g.x=t[C+0],g.y=t[C+1],g.z=t[C+2];const e=a(g)/2/Math.PI+.5,i=(I=g,Math.atan2(-I.y,Math.sqrt(I.x*I.x+I.z*I.z))/Math.PI+.5);A.push(e,1-i)}var I;(function(){const g=new Ae,I=new Ae,C=new Ae,e=new Ae,i=new DC,o=new DC,n=new DC;for(let c=0,s=0;c<t.length;c+=9,s+=6){g.set(t[c+0],t[c+1],t[c+2]),I.set(t[c+3],t[c+4],t[c+5]),C.set(t[c+6],t[c+7],t[c+8]),i.set(A[s+0],A[s+1]),o.set(A[s+2],A[s+3]),n.set(A[s+4],A[s+5]),e.copy(g).add(I).add(C).divideScalar(3);const d=a(e);l(i,s+0,g,d),l(o,s+2,I,d),l(n,s+4,C,d)}})(),function(){for(let g=0;g<A.length;g+=6){const I=A[g+0],C=A[g+2],e=A[g+4],t=Math.max(I,C,e),i=Math.min(I,C,e);t>.9&&i<.1&&(I<.2&&(A[g+0]+=1),C<.2&&(A[g+2]+=1),e<.2&&(A[g+4]+=1))}}()}(),this.setAttribute("position",new Ut(t,3)),this.setAttribute("normal",new Ut(t.slice(),3)),this.setAttribute("uv",new Ut(A,2)),0===e?this.computeVertexNormals():this.normalizeNormals()}}class dl extends sl{constructor(g=1,I=0){const C=(1+Math.sqrt(5))/2,e=1/C;super([-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-e,-C,0,-e,C,0,e,-C,0,e,C,-e,-C,0,-e,C,0,e,-C,0,e,C,0,-C,0,-e,C,0,-e,-C,0,e,C,0,e],[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],g,I),this.type="DodecahedronGeometry",this.parameters={radius:g,detail:I}}}const bl=new Ae,rl=new Ae,Gl=new Ae,hl=new pt;class ml extends CA{constructor(g,I){if(super(),this.type="EdgesGeometry",this.parameters={thresholdAngle:I},I=void 0!==I?I:1,!0===g.isGeometry)return void console.error("THREE.EdgesGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");const C=Math.pow(10,4),e=Math.cos(xC*I),t=g.getIndex(),A=g.getAttribute("position"),i=t?t.count:A.count,o=[0,0,0],n=["a","b","c"],l=new Array(3),a={},c=[];for(let g=0;g<i;g+=3){t?(o[0]=t.getX(g),o[1]=t.getX(g+1),o[2]=t.getX(g+2)):(o[0]=g,o[1]=g+1,o[2]=g+2);const{a:I,b:i,c:s}=hl;if(I.fromBufferAttribute(A,o[0]),i.fromBufferAttribute(A,o[1]),s.fromBufferAttribute(A,o[2]),hl.getNormal(Gl),l[0]=`${Math.round(I.x*C)},${Math.round(I.y*C)},${Math.round(I.z*C)}`,l[1]=`${Math.round(i.x*C)},${Math.round(i.y*C)},${Math.round(i.z*C)}`,l[2]=`${Math.round(s.x*C)},${Math.round(s.y*C)},${Math.round(s.z*C)}`,l[0]!==l[1]&&l[1]!==l[2]&&l[2]!==l[0])for(let g=0;g<3;g++){const I=(g+1)%3,C=l[g],t=l[I],A=hl[n[g]],i=hl[n[I]],s=`${C}_${t}`,d=`${t}_${C}`;d in a&&a[d]?(Gl.dot(a[d].normal)<=e&&(c.push(A.x,A.y,A.z),c.push(i.x,i.y,i.z)),a[d]=null):s in a||(a[s]={index0:o[g],index1:o[I],normal:Gl.clone()})}}for(const g in a)if(a[g]){const{index0:I,index1:C}=a[g];bl.fromBufferAttribute(A,I),rl.fromBufferAttribute(A,C),c.push(bl.x,bl.y,bl.z),c.push(rl.x,rl.y,rl.z)}this.setAttribute("position",new Ut(c,3))}}function ul(g,I,C,e,t){let A,i;if(t===function(g,I,C,e){let t=0;for(let A=I,i=C-e;A<C;A+=e)t+=(g[i]-g[A])*(g[A+1]+g[i+1]),i=A;return t}(g,I,C,e)>0)for(A=I;A<C;A+=e)i=Ll(A,g[A],g[A+1],i);else for(A=C-e;A>=I;A-=e)i=Ll(A,g[A],g[A+1],i);return i&&Nl(i,i.next)&&(kl(i),i=i.next),i}function Bl(g,I){if(!g)return g;I||(I=g);let C,e=g;do{if(C=!1,e.steiner||!Nl(e,e.next)&&0!==Sl(e.prev,e,e.next))e=e.next;else{if(kl(e),e=I=e.prev,e===e.next)break;C=!0}}while(C||e!==I);return I}function Zl(g,I,C,e,t,A,i){if(!g)return;!i&&A&&function(g,I,C,e){let t=g;do{null===t.z&&(t.z=Rl(t.x,t.y,I,C,e)),t.prevZ=t.prev,t.nextZ=t.next,t=t.next}while(t!==g);t.prevZ.nextZ=null,t.prevZ=null,function(g){let I,C,e,t,A,i,o,n,l=1;do{for(C=g,g=null,A=null,i=0;C;){for(i++,e=C,o=0,I=0;I<l&&(o++,e=e.nextZ,e);I++);for(n=l;o>0||n>0&&e;)0!==o&&(0===n||!e||C.z<=e.z)?(t=C,C=C.nextZ,o--):(t=e,e=e.nextZ,n--),A?A.nextZ=t:g=t,t.prevZ=A,A=t;C=e}A.nextZ=null,l*=2}while(i>1)}(t)}(g,e,t,A);let o,n,l=g;for(;g.prev!==g.next;)if(o=g.prev,n=g.next,A?Wl(g,e,t,A):pl(g))I.push(o.i/C),I.push(g.i/C),I.push(n.i/C),kl(g),g=n.next,l=n.next;else if((g=n)===l){i?1===i?Zl(g=yl(Bl(g),I,C),I,C,e,t,A,2):2===i&&Vl(g,I,C,e,t,A):Zl(Bl(g),I,C,e,t,A,1);break}}function pl(g){const I=g.prev,C=g,e=g.next;if(Sl(I,C,e)>=0)return!1;let t=g.next.next;for(;t!==g.prev;){if(wl(I.x,I.y,C.x,C.y,e.x,e.y,t.x,t.y)&&Sl(t.prev,t,t.next)>=0)return!1;t=t.next}return!0}function Wl(g,I,C,e){const t=g.prev,A=g,i=g.next;if(Sl(t,A,i)>=0)return!1;const o=t.x<A.x?t.x<i.x?t.x:i.x:A.x<i.x?A.x:i.x,n=t.y<A.y?t.y<i.y?t.y:i.y:A.y<i.y?A.y:i.y,l=t.x>A.x?t.x>i.x?t.x:i.x:A.x>i.x?A.x:i.x,a=t.y>A.y?t.y>i.y?t.y:i.y:A.y>i.y?A.y:i.y,c=Rl(o,n,I,C,e),s=Rl(l,a,I,C,e);let d=g.prevZ,b=g.nextZ;for(;d&&d.z>=c&&b&&b.z<=s;){if(d!==g.prev&&d!==g.next&&wl(t.x,t.y,A.x,A.y,i.x,i.y,d.x,d.y)&&Sl(d.prev,d,d.next)>=0)return!1;if(d=d.prevZ,b!==g.prev&&b!==g.next&&wl(t.x,t.y,A.x,A.y,i.x,i.y,b.x,b.y)&&Sl(b.prev,b,b.next)>=0)return!1;b=b.nextZ}for(;d&&d.z>=c;){if(d!==g.prev&&d!==g.next&&wl(t.x,t.y,A.x,A.y,i.x,i.y,d.x,d.y)&&Sl(d.prev,d,d.next)>=0)return!1;d=d.prevZ}for(;b&&b.z<=s;){if(b!==g.prev&&b!==g.next&&wl(t.x,t.y,A.x,A.y,i.x,i.y,b.x,b.y)&&Sl(b.prev,b,b.next)>=0)return!1;b=b.nextZ}return!0}function yl(g,I,C){let e=g;do{const t=e.prev,A=e.next.next;!Nl(t,A)&&Fl(t,e,e.next,A)&&xl(t,A)&&xl(A,t)&&(I.push(t.i/C),I.push(e.i/C),I.push(A.i/C),kl(e),kl(e.next),e=g=A),e=e.next}while(e!==g);return Bl(e)}function Vl(g,I,C,e,t,A){let i=g;do{let g=i.next.next;for(;g!==i.prev;){if(i.i!==g.i&&Kl(i,g)){let o=Jl(i,g);return i=Bl(i,i.next),o=Bl(o,o.next),Zl(i,I,C,e,t,A),void Zl(o,I,C,e,t,A)}g=g.next}i=i.next}while(i!==g)}function vl(g,I){return g.x-I.x}function Yl(g,I){if(I=function(g,I){let C=I;const e=g.x,t=g.y;let A,i=-1/0;do{if(t<=C.y&&t>=C.next.y&&C.next.y!==C.y){const g=C.x+(t-C.y)*(C.next.x-C.x)/(C.next.y-C.y);if(g<=e&&g>i){if(i=g,g===e){if(t===C.y)return C;if(t===C.next.y)return C.next}A=C.x<C.next.x?C:C.next}}C=C.next}while(C!==I);if(!A)return null;if(e===i)return A;const o=A,n=A.x,l=A.y;let a,c=1/0;C=A;do{e>=C.x&&C.x>=n&&e!==C.x&&wl(t<l?e:i,t,n,l,t<l?i:e,t,C.x,C.y)&&(a=Math.abs(t-C.y)/(e-C.x),xl(C,g)&&(a<c||a===c&&(C.x>A.x||C.x===A.x&&Xl(A,C)))&&(A=C,c=a)),C=C.next}while(C!==o);return A}(g,I)){const C=Jl(I,g);Bl(I,I.next),Bl(C,C.next)}}function Xl(g,I){return Sl(g.prev,g,I.prev)<0&&Sl(I.next,g,g.next)<0}function Rl(g,I,C,e,t){return(g=1431655765&((g=858993459&((g=252645135&((g=16711935&((g=32767*(g-C)*t)|g<<8))|g<<4))|g<<2))|g<<1))|(I=1431655765&((I=858993459&((I=252645135&((I=16711935&((I=32767*(I-e)*t)|I<<8))|I<<4))|I<<2))|I<<1))<<1}function Hl(g){let I=g,C=g;do{(I.x<C.x||I.x===C.x&&I.y<C.y)&&(C=I),I=I.next}while(I!==g);return C}function wl(g,I,C,e,t,A,i,o){return(t-i)*(I-o)-(g-i)*(A-o)>=0&&(g-i)*(e-o)-(C-i)*(I-o)>=0&&(C-i)*(A-o)-(t-i)*(e-o)>=0}function Kl(g,I){return g.next.i!==I.i&&g.prev.i!==I.i&&!function(g,I){let C=g;do{if(C.i!==g.i&&C.next.i!==g.i&&C.i!==I.i&&C.next.i!==I.i&&Fl(C,C.next,g,I))return!0;C=C.next}while(C!==g);return!1}(g,I)&&(xl(g,I)&&xl(I,g)&&function(g,I){let C=g,e=!1;const t=(g.x+I.x)/2,A=(g.y+I.y)/2;do{C.y>A!=C.next.y>A&&C.next.y!==C.y&&t<(C.next.x-C.x)*(A-C.y)/(C.next.y-C.y)+C.x&&(e=!e),C=C.next}while(C!==g);return e}(g,I)&&(Sl(g.prev,g,I.prev)||Sl(g,I.prev,I))||Nl(g,I)&&Sl(g.prev,g,g.next)>0&&Sl(I.prev,I,I.next)>0)}function Sl(g,I,C){return(I.y-g.y)*(C.x-I.x)-(I.x-g.x)*(C.y-I.y)}function Nl(g,I){return g.x===I.x&&g.y===I.y}function Fl(g,I,C,e){const t=fl(Sl(g,I,C)),A=fl(Sl(g,I,e)),i=fl(Sl(C,e,g)),o=fl(Sl(C,e,I));return t!==A&&i!==o||!(0!==t||!zl(g,C,I))||!(0!==A||!zl(g,e,I))||!(0!==i||!zl(C,g,e))||!(0!==o||!zl(C,I,e))}function zl(g,I,C){return I.x<=Math.max(g.x,C.x)&&I.x>=Math.min(g.x,C.x)&&I.y<=Math.max(g.y,C.y)&&I.y>=Math.min(g.y,C.y)}function fl(g){return g>0?1:g<0?-1:0}function xl(g,I){return Sl(g.prev,g,g.next)<0?Sl(g,I,g.next)>=0&&Sl(g,g.prev,I)>=0:Sl(g,I,g.prev)<0||Sl(g,g.next,I)<0}function Jl(g,I){const C=new Ml(g.i,g.x,g.y),e=new Ml(I.i,I.x,I.y),t=g.next,A=I.prev;return g.next=I,I.prev=g,C.next=t,t.prev=C,e.next=C,C.prev=e,A.next=e,e.prev=A,e}function Ll(g,I,C,e){const t=new Ml(g,I,C);return e?(t.next=e.next,t.prev=e,e.next.prev=t,e.next=t):(t.prev=t,t.next=t),t}function kl(g){g.next.prev=g.prev,g.prev.next=g.next,g.prevZ&&(g.prevZ.nextZ=g.nextZ),g.nextZ&&(g.nextZ.prevZ=g.prevZ)}function Ml(g,I,C){this.i=g,this.x=I,this.y=C,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}class Ql{static area(g){const I=g.length;let C=0;for(let e=I-1,t=0;t<I;e=t++)C+=g[e].x*g[t].y-g[t].x*g[e].y;return.5*C}static isClockWise(g){return Ql.area(g)<0}static triangulateShape(g,I){const C=[],e=[],t=[];Ul(g),Tl(C,g);let A=g.length;I.forEach(Ul);for(let g=0;g<I.length;g++)e.push(A),A+=I[g].length,Tl(C,I[g]);const i=function(g,I,C){C=C||2;const e=I&&I.length,t=e?I[0]*C:g.length;let A=ul(g,0,t,C,!0);const i=[];if(!A||A.next===A.prev)return i;let o,n,l,a,c,s,d;if(e&&(A=function(g,I,C,e){const t=[];let A,i,o,n,l;for(A=0,i=I.length;A<i;A++)o=I[A]*e,n=A<i-1?I[A+1]*e:g.length,l=ul(g,o,n,e,!1),l===l.next&&(l.steiner=!0),t.push(Hl(l));for(t.sort(vl),A=0;A<t.length;A++)Yl(t[A],C),C=Bl(C,C.next);return C}(g,I,A,C)),g.length>80*C){o=l=g[0],n=a=g[1];for(let I=C;I<t;I+=C)c=g[I],s=g[I+1],c<o&&(o=c),s<n&&(n=s),c>l&&(l=c),s>a&&(a=s);d=Math.max(l-o,a-n),d=0!==d?1/d:0}return Zl(A,i,C,o,n,d),i}(C,e);for(let g=0;g<i.length;g+=3)t.push(i.slice(g,g+3));return t}}function Ul(g){const I=g.length;I>2&&g[I-1].equals(g[0])&&g.pop()}function Tl(g,I){for(let C=0;C<I.length;C++)g.push(I[C].x),g.push(I[C].y)}class El extends CA{constructor(g,I){super(),this.type="ExtrudeGeometry",this.parameters={shapes:g,options:I},g=Array.isArray(g)?g:[g];const C=this,e=[],t=[];for(let I=0,C=g.length;I<C;I++)A(g[I]);function A(g){const A=[],i=void 0!==I.curveSegments?I.curveSegments:12,o=void 0!==I.steps?I.steps:1;let n=void 0!==I.depth?I.depth:100,l=void 0===I.bevelEnabled||I.bevelEnabled,a=void 0!==I.bevelThickness?I.bevelThickness:6,c=void 0!==I.bevelSize?I.bevelSize:a-2,s=void 0!==I.bevelOffset?I.bevelOffset:0,d=void 0!==I.bevelSegments?I.bevelSegments:3;const b=I.extrudePath,r=void 0!==I.UVGenerator?I.UVGenerator:jl;void 0!==I.amount&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),n=I.amount);let G,h,m,u,B,Z=!1;b&&(G=b.getSpacedPoints(o),Z=!0,l=!1,h=b.computeFrenetFrames(o,!1),m=new Ae,u=new Ae,B=new Ae),l||(d=0,a=0,c=0,s=0);const p=g.extractPoints(i);let W=p.shape;const y=p.holes;if(!Ql.isClockWise(W)){W=W.reverse();for(let g=0,I=y.length;g<I;g++){const I=y[g];Ql.isClockWise(I)&&(y[g]=I.reverse())}}const V=Ql.triangulateShape(W,y),v=W;for(let g=0,I=y.length;g<I;g++){const I=y[g];W=W.concat(I)}function Y(g,I,C){return I||console.error("THREE.ExtrudeGeometry: vec does not exist"),I.clone().multiplyScalar(C).add(g)}const X=W.length,R=V.length;function H(g,I,C){let e,t,A;const i=g.x-I.x,o=g.y-I.y,n=C.x-g.x,l=C.y-g.y,a=i*i+o*o,c=i*l-o*n;if(Math.abs(c)>Number.EPSILON){const c=Math.sqrt(a),s=Math.sqrt(n*n+l*l),d=I.x-o/c,b=I.y+i/c,r=((C.x-l/s-d)*l-(C.y+n/s-b)*n)/(i*l-o*n);e=d+i*r-g.x,t=b+o*r-g.y;const G=e*e+t*t;if(G<=2)return new DC(e,t);A=Math.sqrt(G/2)}else{let g=!1;i>Number.EPSILON?n>Number.EPSILON&&(g=!0):i<-Number.EPSILON?n<-Number.EPSILON&&(g=!0):Math.sign(o)===Math.sign(l)&&(g=!0),g?(e=-o,t=i,A=Math.sqrt(a)):(e=i,t=o,A=Math.sqrt(a/2))}return new DC(e/A,t/A)}const w=[];for(let g=0,I=v.length,C=I-1,e=g+1;g<I;g++,C++,e++)C===I&&(C=0),e===I&&(e=0),w[g]=H(v[g],v[C],v[e]);const K=[];let S,N=w.concat();for(let g=0,I=y.length;g<I;g++){const I=y[g];S=[];for(let g=0,C=I.length,e=C-1,t=g+1;g<C;g++,e++,t++)e===C&&(e=0),t===C&&(t=0),S[g]=H(I[g],I[e],I[t]);K.push(S),N=N.concat(S)}for(let g=0;g<d;g++){const I=g/d,C=a*Math.cos(I*Math.PI/2),e=c*Math.sin(I*Math.PI/2)+s;for(let g=0,I=v.length;g<I;g++){const I=Y(v[g],w[g],e);f(I.x,I.y,-C)}for(let g=0,I=y.length;g<I;g++){const I=y[g];S=K[g];for(let g=0,t=I.length;g<t;g++){const t=Y(I[g],S[g],e);f(t.x,t.y,-C)}}}const F=c+s;for(let g=0;g<X;g++){const I=l?Y(W[g],N[g],F):W[g];Z?(u.copy(h.normals[0]).multiplyScalar(I.x),m.copy(h.binormals[0]).multiplyScalar(I.y),B.copy(G[0]).add(u).add(m),f(B.x,B.y,B.z)):f(I.x,I.y,0)}for(let g=1;g<=o;g++)for(let I=0;I<X;I++){const C=l?Y(W[I],N[I],F):W[I];Z?(u.copy(h.normals[g]).multiplyScalar(C.x),m.copy(h.binormals[g]).multiplyScalar(C.y),B.copy(G[g]).add(u).add(m),f(B.x,B.y,B.z)):f(C.x,C.y,n/o*g)}for(let g=d-1;g>=0;g--){const I=g/d,C=a*Math.cos(I*Math.PI/2),e=c*Math.sin(I*Math.PI/2)+s;for(let g=0,I=v.length;g<I;g++){const I=Y(v[g],w[g],e);f(I.x,I.y,n+C)}for(let g=0,I=y.length;g<I;g++){const I=y[g];S=K[g];for(let g=0,t=I.length;g<t;g++){const t=Y(I[g],S[g],e);Z?f(t.x,t.y+G[o-1].y,G[o-1].x+C):f(t.x,t.y,n+C)}}}function z(g,I){let C=g.length;for(;--C>=0;){const e=C;let t=C-1;t<0&&(t=g.length-1);for(let g=0,C=o+2*d;g<C;g++){const C=X*g,A=X*(g+1);J(I+e+C,I+t+C,I+t+A,I+e+A)}}}function f(g,I,C){A.push(g),A.push(I),A.push(C)}function x(g,I,t){L(g),L(I),L(t);const A=e.length/3,i=r.generateTopUV(C,e,A-3,A-2,A-1);k(i[0]),k(i[1]),k(i[2])}function J(g,I,t,A){L(g),L(I),L(A),L(I),L(t),L(A);const i=e.length/3,o=r.generateSideWallUV(C,e,i-6,i-3,i-2,i-1);k(o[0]),k(o[1]),k(o[3]),k(o[1]),k(o[2]),k(o[3])}function L(g){e.push(A[3*g+0]),e.push(A[3*g+1]),e.push(A[3*g+2])}function k(g){t.push(g.x),t.push(g.y)}!function(){const g=e.length/3;if(l){let g=0,I=X*g;for(let g=0;g<R;g++){const C=V[g];x(C[2]+I,C[1]+I,C[0]+I)}g=o+2*d,I=X*g;for(let g=0;g<R;g++){const C=V[g];x(C[0]+I,C[1]+I,C[2]+I)}}else{for(let g=0;g<R;g++){const I=V[g];x(I[2],I[1],I[0])}for(let g=0;g<R;g++){const I=V[g];x(I[0]+X*o,I[1]+X*o,I[2]+X*o)}}C.addGroup(g,e.length/3-g,0)}(),function(){const g=e.length/3;let I=0;z(v,I),I+=v.length;for(let g=0,C=y.length;g<C;g++){const C=y[g];z(C,I),I+=C.length}C.addGroup(g,e.length/3-g,1)}()}this.setAttribute("position",new Ut(e,3)),this.setAttribute("uv",new Ut(t,2)),this.computeVertexNormals()}toJSON(){const g=CA.prototype.toJSON.call(this);return function(g,I,C){if(C.shapes=[],Array.isArray(g))for(let I=0,e=g.length;I<e;I++){const e=g[I];C.shapes.push(e.uuid)}else C.shapes.push(g.uuid);return void 0!==I.extrudePath&&(C.options.extrudePath=I.extrudePath.toJSON()),C}(this.parameters.shapes,this.parameters.options,g)}}const jl={generateTopUV:function(g,I,C,e,t){const A=I[3*C],i=I[3*C+1],o=I[3*e],n=I[3*e+1],l=I[3*t],a=I[3*t+1];return[new DC(A,i),new DC(o,n),new DC(l,a)]},generateSideWallUV:function(g,I,C,e,t,A){const i=I[3*C],o=I[3*C+1],n=I[3*C+2],l=I[3*e],a=I[3*e+1],c=I[3*e+2],s=I[3*t],d=I[3*t+1],b=I[3*t+2],r=I[3*A],G=I[3*A+1],h=I[3*A+2];return Math.abs(o-a)<.01?[new DC(i,1-n),new DC(l,1-c),new DC(s,1-b),new DC(r,1-h)]:[new DC(o,1-n),new DC(a,1-c),new DC(d,1-b),new DC(G,1-h)]}};class Dl extends sl{constructor(g=1,I=0){const C=(1+Math.sqrt(5))/2;super([-1,C,0,1,C,0,-1,-C,0,1,-C,0,0,-1,C,0,1,C,0,-1,-C,0,1,-C,C,0,-1,C,0,1,-C,0,-1,-C,0,1],[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],g,I),this.type="IcosahedronGeometry",this.parameters={radius:g,detail:I}}}class Ol extends CA{constructor(g,I=12,C=0,e=2*Math.PI){super(),this.type="LatheGeometry",this.parameters={points:g,segments:I,phiStart:C,phiLength:e},I=Math.floor(I),e=kC(e,0,2*Math.PI);const t=[],A=[],i=[],o=1/I,n=new Ae,l=new DC;for(let t=0;t<=I;t++){const a=C+t*o*e,c=Math.sin(a),s=Math.cos(a);for(let C=0;C<=g.length-1;C++)n.x=g[C].x*c,n.y=g[C].y,n.z=g[C].x*s,A.push(n.x,n.y,n.z),l.x=t/I,l.y=C/(g.length-1),i.push(l.x,l.y)}for(let C=0;C<I;C++)for(let I=0;I<g.length-1;I++){const e=I+C*g.length,A=e,i=e+g.length,o=e+g.length+1,n=e+1;t.push(A,i,n),t.push(i,o,n)}if(this.setIndex(t),this.setAttribute("position",new Ut(A,3)),this.setAttribute("uv",new Ut(i,2)),this.computeVertexNormals(),e===2*Math.PI){const C=this.attributes.normal.array,e=new Ae,t=new Ae,A=new Ae,i=I*g.length*3;for(let I=0,o=0;I<g.length;I++,o+=3)e.x=C[o+0],e.y=C[o+1],e.z=C[o+2],t.x=C[i+o+0],t.y=C[i+o+1],t.z=C[i+o+2],A.addVectors(e,t).normalize(),C[o+0]=C[i+o+0]=A.x,C[o+1]=C[i+o+1]=A.y,C[o+2]=C[i+o+2]=A.z}}}class Pl extends sl{constructor(g=1,I=0){super([1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],g,I),this.type="OctahedronGeometry",this.parameters={radius:g,detail:I}}}class _l extends CA{constructor(g,I,C){super(),this.type="ParametricGeometry",this.parameters={func:g,slices:I,stacks:C};const e=[],t=[],A=[],i=[],o=1e-5,n=new Ae,l=new Ae,a=new Ae,c=new Ae,s=new Ae;g.length<3&&console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");const d=I+1;for(let e=0;e<=C;e++){const d=e/C;for(let C=0;C<=I;C++){const e=C/I;g(e,d,l),t.push(l.x,l.y,l.z),e-o>=0?(g(e-o,d,a),c.subVectors(l,a)):(g(e+o,d,a),c.subVectors(a,l)),d-o>=0?(g(e,d-o,a),s.subVectors(l,a)):(g(e,d+o,a),s.subVectors(a,l)),n.crossVectors(c,s).normalize(),A.push(n.x,n.y,n.z),i.push(e,d)}}for(let g=0;g<C;g++)for(let C=0;C<I;C++){const I=g*d+C,t=g*d+C+1,A=(g+1)*d+C+1,i=(g+1)*d+C;e.push(I,t,i),e.push(t,A,i)}this.setIndex(e),this.setAttribute("position",new Ut(t,3)),this.setAttribute("normal",new Ut(A,3)),this.setAttribute("uv",new Ut(i,2))}}class ql extends CA{constructor(g=.5,I=1,C=8,e=1,t=0,A=2*Math.PI){super(),this.type="RingGeometry",this.parameters={innerRadius:g,outerRadius:I,thetaSegments:C,phiSegments:e,thetaStart:t,thetaLength:A},C=Math.max(3,C);const i=[],o=[],n=[],l=[];let a=g;const c=(I-g)/(e=Math.max(1,e)),s=new Ae,d=new DC;for(let g=0;g<=e;g++){for(let g=0;g<=C;g++){const e=t+g/C*A;s.x=a*Math.cos(e),s.y=a*Math.sin(e),o.push(s.x,s.y,s.z),n.push(0,0,1),d.x=(s.x/I+1)/2,d.y=(s.y/I+1)/2,l.push(d.x,d.y)}a+=c}for(let g=0;g<e;g++){const I=g*(C+1);for(let g=0;g<C;g++){const e=g+I,t=e,A=e+C+1,o=e+C+2,n=e+1;i.push(t,A,n),i.push(A,o,n)}}this.setIndex(i),this.setAttribute("position",new Ut(o,3)),this.setAttribute("normal",new Ut(n,3)),this.setAttribute("uv",new Ut(l,2))}}class $l extends CA{constructor(g,I=12){super(),this.type="ShapeGeometry",this.parameters={shapes:g,curveSegments:I};const C=[],e=[],t=[],A=[];let i=0,o=0;if(!1===Array.isArray(g))n(g);else for(let I=0;I<g.length;I++)n(g[I]),this.addGroup(i,o,I),i+=o,o=0;function n(g){const i=e.length/3,n=g.extractPoints(I);let l=n.shape;const a=n.holes;!1===Ql.isClockWise(l)&&(l=l.reverse());for(let g=0,I=a.length;g<I;g++){const I=a[g];!0===Ql.isClockWise(I)&&(a[g]=I.reverse())}const c=Ql.triangulateShape(l,a);for(let g=0,I=a.length;g<I;g++){const I=a[g];l=l.concat(I)}for(let g=0,I=l.length;g<I;g++){const I=l[g];e.push(I.x,I.y,0),t.push(0,0,1),A.push(I.x,I.y)}for(let g=0,I=c.length;g<I;g++){const I=c[g],e=I[0]+i,t=I[1]+i,A=I[2]+i;C.push(e,t,A),o+=3}}this.setIndex(C),this.setAttribute("position",new Ut(e,3)),this.setAttribute("normal",new Ut(t,3)),this.setAttribute("uv",new Ut(A,2))}toJSON(){const g=CA.prototype.toJSON.call(this);return function(g,I){if(I.shapes=[],Array.isArray(g))for(let C=0,e=g.length;C<e;C++){const e=g[C];I.shapes.push(e.uuid)}else I.shapes.push(g.uuid);return I}(this.parameters.shapes,g)}}class ga extends CA{constructor(g=1,I=8,C=6,e=0,t=2*Math.PI,A=0,i=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:g,widthSegments:I,heightSegments:C,phiStart:e,phiLength:t,thetaStart:A,thetaLength:i},I=Math.max(3,Math.floor(I)),C=Math.max(2,Math.floor(C));const o=Math.min(A+i,Math.PI);let n=0;const l=[],a=new Ae,c=new Ae,s=[],d=[],b=[],r=[];for(let s=0;s<=C;s++){const G=[],h=s/C;let m=0;0==s&&0==A?m=.5/I:s==C&&o==Math.PI&&(m=-.5/I);for(let C=0;C<=I;C++){const o=C/I;a.x=-g*Math.cos(e+o*t)*Math.sin(A+h*i),a.y=g*Math.cos(A+h*i),a.z=g*Math.sin(e+o*t)*Math.sin(A+h*i),d.push(a.x,a.y,a.z),c.copy(a).normalize(),b.push(c.x,c.y,c.z),r.push(o+m,1-h),G.push(n++)}l.push(G)}for(let g=0;g<C;g++)for(let e=0;e<I;e++){const I=l[g][e+1],t=l[g][e],i=l[g+1][e],n=l[g+1][e+1];(0!==g||A>0)&&s.push(I,t,n),(g!==C-1||o<Math.PI)&&s.push(t,i,n)}this.setIndex(s),this.setAttribute("position",new Ut(d,3)),this.setAttribute("normal",new Ut(b,3)),this.setAttribute("uv",new Ut(r,2))}}class Ia extends sl{constructor(g=1,I=0){super([1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],g,I),this.type="TetrahedronGeometry",this.parameters={radius:g,detail:I}}}class Ca extends El{constructor(g,I={}){const C=I.font;if(!C||!C.isFont)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new CA;const e=C.generateShapes(g,I.size);I.depth=void 0!==I.height?I.height:50,void 0===I.bevelThickness&&(I.bevelThickness=10),void 0===I.bevelSize&&(I.bevelSize=8),void 0===I.bevelEnabled&&(I.bevelEnabled=!1),super(e,I),this.type="TextGeometry"}}class ea extends CA{constructor(g=1,I=.4,C=8,e=6,t=2*Math.PI){super(),this.type="TorusGeometry",this.parameters={radius:g,tube:I,radialSegments:C,tubularSegments:e,arc:t},C=Math.floor(C),e=Math.floor(e);const A=[],i=[],o=[],n=[],l=new Ae,a=new Ae,c=new Ae;for(let A=0;A<=C;A++)for(let s=0;s<=e;s++){const d=s/e*t,b=A/C*Math.PI*2;a.x=(g+I*Math.cos(b))*Math.cos(d),a.y=(g+I*Math.cos(b))*Math.sin(d),a.z=I*Math.sin(b),i.push(a.x,a.y,a.z),l.x=g*Math.cos(d),l.y=g*Math.sin(d),c.subVectors(a,l).normalize(),o.push(c.x,c.y,c.z),n.push(s/e),n.push(A/C)}for(let g=1;g<=C;g++)for(let I=1;I<=e;I++){const C=(e+1)*g+I-1,t=(e+1)*(g-1)+I-1,i=(e+1)*(g-1)+I,o=(e+1)*g+I;A.push(C,t,o),A.push(t,i,o)}this.setIndex(A),this.setAttribute("position",new Ut(i,3)),this.setAttribute("normal",new Ut(o,3)),this.setAttribute("uv",new Ut(n,2))}}class ta extends CA{constructor(g=1,I=.4,C=64,e=8,t=2,A=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:g,tube:I,tubularSegments:C,radialSegments:e,p:t,q:A},C=Math.floor(C),e=Math.floor(e);const i=[],o=[],n=[],l=[],a=new Ae,c=new Ae,s=new Ae,d=new Ae,b=new Ae,r=new Ae,G=new Ae;for(let i=0;i<=C;++i){const m=i/C*t*Math.PI*2;h(m,t,A,g,s),h(m+.01,t,A,g,d),r.subVectors(d,s),G.addVectors(d,s),b.crossVectors(r,G),G.crossVectors(b,r),b.normalize(),G.normalize();for(let g=0;g<=e;++g){const t=g/e*Math.PI*2,A=-I*Math.cos(t),d=I*Math.sin(t);a.x=s.x+(A*G.x+d*b.x),a.y=s.y+(A*G.y+d*b.y),a.z=s.z+(A*G.z+d*b.z),o.push(a.x,a.y,a.z),c.subVectors(a,s).normalize(),n.push(c.x,c.y,c.z),l.push(i/C),l.push(g/e)}}for(let g=1;g<=C;g++)for(let I=1;I<=e;I++){const C=(e+1)*(g-1)+(I-1),t=(e+1)*g+(I-1),A=(e+1)*g+I,o=(e+1)*(g-1)+I;i.push(C,t,o),i.push(t,A,o)}function h(g,I,C,e,t){const A=Math.cos(g),i=Math.sin(g),o=C/I*g,n=Math.cos(o);t.x=e*(2+n)*.5*A,t.y=e*(2+n)*i*.5,t.z=e*Math.sin(o)*.5}this.setIndex(i),this.setAttribute("position",new Ut(o,3)),this.setAttribute("normal",new Ut(n,3)),this.setAttribute("uv",new Ut(l,2))}}class Aa extends CA{constructor(g,I=64,C=1,e=8,t=!1){super(),this.type="TubeGeometry",this.parameters={path:g,tubularSegments:I,radius:C,radialSegments:e,closed:t};const A=g.computeFrenetFrames(I,t);this.tangents=A.tangents,this.normals=A.normals,this.binormals=A.binormals;const i=new Ae,o=new Ae,n=new DC;let l=new Ae;const a=[],c=[],s=[],d=[];function b(t){l=g.getPointAt(t/I,l);const n=A.normals[t],s=A.binormals[t];for(let g=0;g<=e;g++){const I=g/e*Math.PI*2,t=Math.sin(I),A=-Math.cos(I);o.x=A*n.x+t*s.x,o.y=A*n.y+t*s.y,o.z=A*n.z+t*s.z,o.normalize(),c.push(o.x,o.y,o.z),i.x=l.x+C*o.x,i.y=l.y+C*o.y,i.z=l.z+C*o.z,a.push(i.x,i.y,i.z)}}!function(){for(let g=0;g<I;g++)b(g);b(!1===t?I:0),function(){for(let g=0;g<=I;g++)for(let C=0;C<=e;C++)n.x=g/I,n.y=C/e,s.push(n.x,n.y)}(),function(){for(let g=1;g<=I;g++)for(let I=1;I<=e;I++){const C=(e+1)*(g-1)+(I-1),t=(e+1)*g+(I-1),A=(e+1)*g+I,i=(e+1)*(g-1)+I;d.push(C,t,i),d.push(t,A,i)}}()}(),this.setIndex(d),this.setAttribute("position",new Ut(a,3)),this.setAttribute("normal",new Ut(c,3)),this.setAttribute("uv",new Ut(s,2))}toJSON(){const g=CA.prototype.toJSON.call(this);return g.path=this.parameters.path.toJSON(),g}}class ia extends CA{constructor(g){if(super(),this.type="WireframeGeometry",!0===g.isGeometry)return void console.error("THREE.WireframeGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");const I=[],C=[0,0],e={},t=new Ae;if(null!==g.index){const A=g.attributes.position,i=g.index;let o=g.groups;0===o.length&&(o=[{start:0,count:i.count,materialIndex:0}]);for(let g=0,I=o.length;g<I;++g){const I=o[g],t=I.start;for(let g=t,A=t+I.count;g<A;g+=3)for(let I=0;I<3;I++){const t=i.getX(g+I),A=i.getX(g+(I+1)%3);C[0]=Math.min(t,A),C[1]=Math.max(t,A);const o=C[0]+","+C[1];void 0===e[o]&&(e[o]={index1:C[0],index2:C[1]})}}for(const g in e){const C=e[g];t.fromBufferAttribute(A,C.index1),I.push(t.x,t.y,t.z),t.fromBufferAttribute(A,C.index2),I.push(t.x,t.y,t.z)}}else{const C=g.attributes.position;for(let g=0,e=C.count/3;g<e;g++)for(let e=0;e<3;e++){const A=3*g+e;t.fromBufferAttribute(C,A),I.push(t.x,t.y,t.z);const i=3*g+(e+1)%3;t.fromBufferAttribute(C,i),I.push(t.x,t.y,t.z)}}this.setAttribute("position",new Ut(I,3))}}var oa=Object.freeze({__proto__:null,BoxGeometry:pA,BoxBufferGeometry:pA,CircleGeometry:ll,CircleBufferGeometry:ll,ConeGeometry:cl,ConeBufferGeometry:cl,CylinderGeometry:al,CylinderBufferGeometry:al,DodecahedronGeometry:dl,DodecahedronBufferGeometry:dl,EdgesGeometry:ml,ExtrudeGeometry:El,ExtrudeBufferGeometry:El,IcosahedronGeometry:Dl,IcosahedronBufferGeometry:Dl,LatheGeometry:Ol,LatheBufferGeometry:Ol,OctahedronGeometry:Pl,OctahedronBufferGeometry:Pl,ParametricGeometry:_l,ParametricBufferGeometry:_l,PlaneGeometry:JA,PlaneBufferGeometry:JA,PolyhedronGeometry:sl,PolyhedronBufferGeometry:sl,RingGeometry:ql,RingBufferGeometry:ql,ShapeGeometry:$l,ShapeBufferGeometry:$l,SphereGeometry:ga,SphereBufferGeometry:ga,TetrahedronGeometry:Ia,TetrahedronBufferGeometry:Ia,TextGeometry:Ca,TextBufferGeometry:Ca,TorusGeometry:ea,TorusBufferGeometry:ea,TorusKnotGeometry:ta,TorusKnotBufferGeometry:ta,TubeGeometry:Aa,TubeBufferGeometry:Aa,WireframeGeometry:ia});class na extends yt{constructor(g){super(),this.type="ShadowMaterial",this.color=new wt(0),this.transparent=!0,this.setValues(g)}copy(g){return super.copy(g),this.color.copy(g.color),this}}na.prototype.isShadowMaterial=!0;class la extends vA{constructor(g){super(g),this.type="RawShaderMaterial"}}la.prototype.isRawShaderMaterial=!0;class aa extends yt{constructor(g){super(),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new wt(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new wt(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=iC,this.normalScale=new DC(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.flatShading=!1,this.vertexTangents=!1,this.setValues(g)}copy(g){return super.copy(g),this.defines={STANDARD:""},this.color.copy(g.color),this.roughness=g.roughness,this.metalness=g.metalness,this.map=g.map,this.lightMap=g.lightMap,this.lightMapIntensity=g.lightMapIntensity,this.aoMap=g.aoMap,this.aoMapIntensity=g.aoMapIntensity,this.emissive.copy(g.emissive),this.emissiveMap=g.emissiveMap,this.emissiveIntensity=g.emissiveIntensity,this.bumpMap=g.bumpMap,this.bumpScale=g.bumpScale,this.normalMap=g.normalMap,this.normalMapType=g.normalMapType,this.normalScale.copy(g.normalScale),this.displacementMap=g.displacementMap,this.displacementScale=g.displacementScale,this.displacementBias=g.displacementBias,this.roughnessMap=g.roughnessMap,this.metalnessMap=g.metalnessMap,this.alphaMap=g.alphaMap,this.envMap=g.envMap,this.envMapIntensity=g.envMapIntensity,this.refractionRatio=g.refractionRatio,this.wireframe=g.wireframe,this.wireframeLinewidth=g.wireframeLinewidth,this.wireframeLinecap=g.wireframeLinecap,this.wireframeLinejoin=g.wireframeLinejoin,this.skinning=g.skinning,this.morphTargets=g.morphTargets,this.morphNormals=g.morphNormals,this.flatShading=g.flatShading,this.vertexTangents=g.vertexTangents,this}}aa.prototype.isMeshStandardMaterial=!0;class ca extends aa{constructor(g){super(),this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoat=0,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new DC(1,1),this.clearcoatNormalMap=null,this.reflectivity=.5,Object.defineProperty(this,"ior",{get:function(){return(1+.4*this.reflectivity)/(1-.4*this.reflectivity)},set:function(g){this.reflectivity=kC(2.5*(g-1)/(g+1),0,1)}}),this.sheen=null,this.transmission=0,this.transmissionMap=null,this.setValues(g)}copy(g){return super.copy(g),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=g.clearcoat,this.clearcoatMap=g.clearcoatMap,this.clearcoatRoughness=g.clearcoatRoughness,this.clearcoatRoughnessMap=g.clearcoatRoughnessMap,this.clearcoatNormalMap=g.clearcoatNormalMap,this.clearcoatNormalScale.copy(g.clearcoatNormalScale),this.reflectivity=g.reflectivity,g.sheen?this.sheen=(this.sheen||new wt).copy(g.sheen):this.sheen=null,this.transmission=g.transmission,this.transmissionMap=g.transmissionMap,this}}ca.prototype.isMeshPhysicalMaterial=!0;class sa extends yt{constructor(g){super(),this.type="MeshPhongMaterial",this.color=new wt(16777215),this.specular=new wt(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new wt(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=iC,this.normalScale=new DC(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=O,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.flatShading=!1,this.setValues(g)}copy(g){return super.copy(g),this.color.copy(g.color),this.specular.copy(g.specular),this.shininess=g.shininess,this.map=g.map,this.lightMap=g.lightMap,this.lightMapIntensity=g.lightMapIntensity,this.aoMap=g.aoMap,this.aoMapIntensity=g.aoMapIntensity,this.emissive.copy(g.emissive),this.emissiveMap=g.emissiveMap,this.emissiveIntensity=g.emissiveIntensity,this.bumpMap=g.bumpMap,this.bumpScale=g.bumpScale,this.normalMap=g.normalMap,this.normalMapType=g.normalMapType,this.normalScale.copy(g.normalScale),this.displacementMap=g.displacementMap,this.displacementScale=g.displacementScale,this.displacementBias=g.displacementBias,this.specularMap=g.specularMap,this.alphaMap=g.alphaMap,this.envMap=g.envMap,this.combine=g.combine,this.reflectivity=g.reflectivity,this.refractionRatio=g.refractionRatio,this.wireframe=g.wireframe,this.wireframeLinewidth=g.wireframeLinewidth,this.wireframeLinecap=g.wireframeLinecap,this.wireframeLinejoin=g.wireframeLinejoin,this.skinning=g.skinning,this.morphTargets=g.morphTargets,this.morphNormals=g.morphNormals,this.flatShading=g.flatShading,this}}sa.prototype.isMeshPhongMaterial=!0;class da extends yt{constructor(g){super(),this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new wt(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new wt(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=iC,this.normalScale=new DC(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(g)}copy(g){return super.copy(g),this.color.copy(g.color),this.map=g.map,this.gradientMap=g.gradientMap,this.lightMap=g.lightMap,this.lightMapIntensity=g.lightMapIntensity,this.aoMap=g.aoMap,this.aoMapIntensity=g.aoMapIntensity,this.emissive.copy(g.emissive),this.emissiveMap=g.emissiveMap,this.emissiveIntensity=g.emissiveIntensity,this.bumpMap=g.bumpMap,this.bumpScale=g.bumpScale,this.normalMap=g.normalMap,this.normalMapType=g.normalMapType,this.normalScale.copy(g.normalScale),this.displacementMap=g.displacementMap,this.displacementScale=g.displacementScale,this.displacementBias=g.displacementBias,this.alphaMap=g.alphaMap,this.wireframe=g.wireframe,this.wireframeLinewidth=g.wireframeLinewidth,this.wireframeLinecap=g.wireframeLinecap,this.wireframeLinejoin=g.wireframeLinejoin,this.skinning=g.skinning,this.morphTargets=g.morphTargets,this.morphNormals=g.morphNormals,this}}da.prototype.isMeshToonMaterial=!0;class ba extends yt{constructor(g){super(),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=iC,this.normalScale=new DC(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.flatShading=!1,this.setValues(g)}copy(g){return super.copy(g),this.bumpMap=g.bumpMap,this.bumpScale=g.bumpScale,this.normalMap=g.normalMap,this.normalMapType=g.normalMapType,this.normalScale.copy(g.normalScale),this.displacementMap=g.displacementMap,this.displacementScale=g.displacementScale,this.displacementBias=g.displacementBias,this.wireframe=g.wireframe,this.wireframeLinewidth=g.wireframeLinewidth,this.skinning=g.skinning,this.morphTargets=g.morphTargets,this.morphNormals=g.morphNormals,this.flatShading=g.flatShading,this}}ba.prototype.isMeshNormalMaterial=!0;class ra extends yt{constructor(g){super(),this.type="MeshLambertMaterial",this.color=new wt(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new wt(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=O,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(g)}copy(g){return super.copy(g),this.color.copy(g.color),this.map=g.map,this.lightMap=g.lightMap,this.lightMapIntensity=g.lightMapIntensity,this.aoMap=g.aoMap,this.aoMapIntensity=g.aoMapIntensity,this.emissive.copy(g.emissive),this.emissiveMap=g.emissiveMap,this.emissiveIntensity=g.emissiveIntensity,this.specularMap=g.specularMap,this.alphaMap=g.alphaMap,this.envMap=g.envMap,this.combine=g.combine,this.reflectivity=g.reflectivity,this.refractionRatio=g.refractionRatio,this.wireframe=g.wireframe,this.wireframeLinewidth=g.wireframeLinewidth,this.wireframeLinecap=g.wireframeLinecap,this.wireframeLinejoin=g.wireframeLinejoin,this.skinning=g.skinning,this.morphTargets=g.morphTargets,this.morphNormals=g.morphNormals,this}}ra.prototype.isMeshLambertMaterial=!0;class Ga extends yt{constructor(g){super(),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new wt(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=iC,this.normalScale=new DC(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.flatShading=!1,this.setValues(g)}copy(g){return super.copy(g),this.defines={MATCAP:""},this.color.copy(g.color),this.matcap=g.matcap,this.map=g.map,this.bumpMap=g.bumpMap,this.bumpScale=g.bumpScale,this.normalMap=g.normalMap,this.normalMapType=g.normalMapType,this.normalScale.copy(g.normalScale),this.displacementMap=g.displacementMap,this.displacementScale=g.displacementScale,this.displacementBias=g.displacementBias,this.alphaMap=g.alphaMap,this.skinning=g.skinning,this.morphTargets=g.morphTargets,this.morphNormals=g.morphNormals,this.flatShading=g.flatShading,this}}Ga.prototype.isMeshMatcapMaterial=!0;class ha extends kn{constructor(g){super(),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(g)}copy(g){return super.copy(g),this.scale=g.scale,this.dashSize=g.dashSize,this.gapSize=g.gapSize,this}}ha.prototype.isLineDashedMaterial=!0;var ma=Object.freeze({__proto__:null,ShadowMaterial:na,SpriteMaterial:on,RawShaderMaterial:la,ShaderMaterial:vA,PointsMaterial:qn,MeshPhysicalMaterial:ca,MeshStandardMaterial:aa,MeshPhongMaterial:sa,MeshToonMaterial:da,MeshNormalMaterial:ba,MeshLambertMaterial:ra,MeshDepthMaterial:Lo,MeshDistanceMaterial:ko,MeshBasicMaterial:Kt,MeshMatcapMaterial:Ga,LineDashedMaterial:ha,LineBasicMaterial:kn,Material:yt});const ua={arraySlice:function(g,I,C){return ua.isTypedArray(g)?new g.constructor(g.subarray(I,void 0!==C?C:g.length)):g.slice(I,C)},convertArray:function(g,I,C){return!g||!C&&g.constructor===I?g:"number"==typeof I.BYTES_PER_ELEMENT?new I(g):Array.prototype.slice.call(g)},isTypedArray:function(g){return ArrayBuffer.isView(g)&&!(g instanceof DataView)},getKeyframeOrder:function(g){const I=g.length,C=new Array(I);for(let g=0;g!==I;++g)C[g]=g;return C.sort((function(I,C){return g[I]-g[C]})),C},sortedArray:function(g,I,C){const e=g.length,t=new g.constructor(e);for(let A=0,i=0;i!==e;++A){const e=C[A]*I;for(let C=0;C!==I;++C)t[i++]=g[e+C]}return t},flattenJSON:function(g,I,C,e){let t=1,A=g[0];for(;void 0!==A&&void 0===A[e];)A=g[t++];if(void 0===A)return;let i=A[e];if(void 0!==i)if(Array.isArray(i))do{i=A[e],void 0!==i&&(I.push(A.time),C.push.apply(C,i)),A=g[t++]}while(void 0!==A);else if(void 0!==i.toArray)do{i=A[e],void 0!==i&&(I.push(A.time),i.toArray(C,C.length)),A=g[t++]}while(void 0!==A);else do{i=A[e],void 0!==i&&(I.push(A.time),C.push(i)),A=g[t++]}while(void 0!==A)},subclip:function(g,I,C,e,t=30){const A=g.clone();A.name=I;const i=[];for(let g=0;g<A.tracks.length;++g){const I=A.tracks[g],o=I.getValueSize(),n=[],l=[];for(let g=0;g<I.times.length;++g){const A=I.times[g]*t;if(!(A<C||A>=e)){n.push(I.times[g]);for(let C=0;C<o;++C)l.push(I.values[g*o+C])}}0!==n.length&&(I.times=ua.convertArray(n,I.times.constructor),I.values=ua.convertArray(l,I.values.constructor),i.push(I))}A.tracks=i;let o=1/0;for(let g=0;g<A.tracks.length;++g)o>A.tracks[g].times[0]&&(o=A.tracks[g].times[0]);for(let g=0;g<A.tracks.length;++g)A.tracks[g].shift(-1*o);return A.resetDuration(),A},makeClipAdditive:function(g,I=0,C=g,e=30){e<=0&&(e=30);const t=C.tracks.length,A=I/e;for(let I=0;I<t;++I){const e=C.tracks[I],t=e.ValueTypeName;if("bool"===t||"string"===t)continue;const i=g.tracks.find((function(g){return g.name===e.name&&g.ValueTypeName===t}));if(void 0===i)continue;let o=0;const n=e.getValueSize();e.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(o=n/3);let l=0;const a=i.getValueSize();i.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(l=a/3);const c=e.times.length-1;let s;if(A<=e.times[0]){const g=o,I=n-o;s=ua.arraySlice(e.values,g,I)}else if(A>=e.times[c]){const g=c*n+o,I=g+n-o;s=ua.arraySlice(e.values,g,I)}else{const g=e.createInterpolant(),I=o,C=n-o;g.evaluate(A),s=ua.arraySlice(g.resultBuffer,I,C)}"quaternion"===t&&(new te).fromArray(s).normalize().conjugate().toArray(s);const d=i.times.length;for(let g=0;g<d;++g){const I=g*a+l;if("quaternion"===t)te.multiplyQuaternionsFlat(i.values,I,s,0,i.values,I);else{const g=a-2*l;for(let C=0;C<g;++C)i.values[I+C]-=s[C]}}}return g.blendMode=EI,g}};class Ba{constructor(g,I,C,e){this.parameterPositions=g,this._cachedIndex=0,this.resultBuffer=void 0!==e?e:new I.constructor(C),this.sampleValues=I,this.valueSize=C,this.settings=null,this.DefaultSettings_={}}evaluate(g){const I=this.parameterPositions;let C=this._cachedIndex,e=I[C],t=I[C-1];g:{I:{let A;C:{e:if(!(g<e)){for(let A=C+2;;){if(void 0===e){if(g<t)break e;return C=I.length,this._cachedIndex=C,this.afterEnd_(C-1,g,t)}if(C===A)break;if(t=e,e=I[++C],g<e)break I}A=I.length;break C}if(g>=t)break g;{const i=I[1];g<i&&(C=2,t=i);for(let A=C-2;;){if(void 0===t)return this._cachedIndex=0,this.beforeStart_(0,g,e);if(C===A)break;if(e=t,t=I[--C-1],g>=t)break I}A=C,C=0}}for(;C<A;){const e=C+A>>>1;g<I[e]?A=e:C=e+1}if(e=I[C],t=I[C-1],void 0===t)return this._cachedIndex=0,this.beforeStart_(0,g,e);if(void 0===e)return C=I.length,this._cachedIndex=C,this.afterEnd_(C-1,t,g)}this._cachedIndex=C,this.intervalChanged_(C,t,e)}return this.interpolate_(C,t,g,e)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(g){const I=this.resultBuffer,C=this.sampleValues,e=this.valueSize,t=g*e;for(let g=0;g!==e;++g)I[g]=C[t+g];return I}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}Ba.prototype.beforeStart_=Ba.prototype.copySampleValue_,Ba.prototype.afterEnd_=Ba.prototype.copySampleValue_;class Za extends Ba{constructor(g,I,C,e){super(g,I,C,e),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:MI,endingEnd:MI}}intervalChanged_(g,I,C){const e=this.parameterPositions;let t=g-2,A=g+1,i=e[t],o=e[A];if(void 0===i)switch(this.getSettings_().endingStart){case QI:t=g,i=2*I-C;break;case UI:t=e.length-2,i=I+e[t]-e[t+1];break;default:t=g,i=C}if(void 0===o)switch(this.getSettings_().endingEnd){case QI:A=g,o=2*C-I;break;case UI:A=1,o=C+e[1]-e[0];break;default:A=g-1,o=I}const n=.5*(C-I),l=this.valueSize;this._weightPrev=n/(I-i),this._weightNext=n/(o-C),this._offsetPrev=t*l,this._offsetNext=A*l}interpolate_(g,I,C,e){const t=this.resultBuffer,A=this.sampleValues,i=this.valueSize,o=g*i,n=o-i,l=this._offsetPrev,a=this._offsetNext,c=this._weightPrev,s=this._weightNext,d=(C-I)/(e-I),b=d*d,r=b*d,G=-c*r+2*c*b-c*d,h=(1+c)*r+(-1.5-2*c)*b+(-.5+c)*d+1,m=(-1-s)*r+(1.5+s)*b+.5*d,u=s*r-s*b;for(let g=0;g!==i;++g)t[g]=G*A[l+g]+h*A[n+g]+m*A[o+g]+u*A[a+g];return t}}class pa extends Ba{constructor(g,I,C,e){super(g,I,C,e)}interpolate_(g,I,C,e){const t=this.resultBuffer,A=this.sampleValues,i=this.valueSize,o=g*i,n=o-i,l=(C-I)/(e-I),a=1-l;for(let g=0;g!==i;++g)t[g]=A[n+g]*a+A[o+g]*l;return t}}class Wa extends Ba{constructor(g,I,C,e){super(g,I,C,e)}interpolate_(g){return this.copySampleValue_(g-1)}}class ya{constructor(g,I,C,e){if(void 0===g)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===I||0===I.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+g);this.name=g,this.times=ua.convertArray(I,this.TimeBufferType),this.values=ua.convertArray(C,this.ValueBufferType),this.setInterpolation(e||this.DefaultInterpolation)}static toJSON(g){const I=g.constructor;let C;if(I.toJSON!==this.toJSON)C=I.toJSON(g);else{C={name:g.name,times:ua.convertArray(g.times,Array),values:ua.convertArray(g.values,Array)};const I=g.getInterpolation();I!==g.DefaultInterpolation&&(C.interpolation=I)}return C.type=g.ValueTypeName,C}InterpolantFactoryMethodDiscrete(g){return new Wa(this.times,this.values,this.getValueSize(),g)}InterpolantFactoryMethodLinear(g){return new pa(this.times,this.values,this.getValueSize(),g)}InterpolantFactoryMethodSmooth(g){return new Za(this.times,this.values,this.getValueSize(),g)}setInterpolation(g){let I;switch(g){case JI:I=this.InterpolantFactoryMethodDiscrete;break;case LI:I=this.InterpolantFactoryMethodLinear;break;case kI:I=this.InterpolantFactoryMethodSmooth}if(void 0===I){const I="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(g===this.DefaultInterpolation)throw new Error(I);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",I),this}return this.createInterpolant=I,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return JI;case this.InterpolantFactoryMethodLinear:return LI;case this.InterpolantFactoryMethodSmooth:return kI}}getValueSize(){return this.values.length/this.times.length}shift(g){if(0!==g){const I=this.times;for(let C=0,e=I.length;C!==e;++C)I[C]+=g}return this}scale(g){if(1!==g){const I=this.times;for(let C=0,e=I.length;C!==e;++C)I[C]*=g}return this}trim(g,I){const C=this.times,e=C.length;let t=0,A=e-1;for(;t!==e&&C[t]<g;)++t;for(;-1!==A&&C[A]>I;)--A;if(++A,0!==t||A!==e){t>=A&&(A=Math.max(A,1),t=A-1);const g=this.getValueSize();this.times=ua.arraySlice(C,t,A),this.values=ua.arraySlice(this.values,t*g,A*g)}return this}validate(){let g=!0;const I=this.getValueSize();I-Math.floor(I)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),g=!1);const C=this.times,e=this.values,t=C.length;0===t&&(console.error("THREE.KeyframeTrack: Track is empty.",this),g=!1);let A=null;for(let I=0;I!==t;I++){const e=C[I];if("number"==typeof e&&isNaN(e)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,I,e),g=!1;break}if(null!==A&&A>e){console.error("THREE.KeyframeTrack: Out of order keys.",this,I,e,A),g=!1;break}A=e}if(void 0!==e&&ua.isTypedArray(e))for(let I=0,C=e.length;I!==C;++I){const C=e[I];if(isNaN(C)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,I,C),g=!1;break}}return g}optimize(){const g=ua.arraySlice(this.times),I=ua.arraySlice(this.values),C=this.getValueSize(),e=this.getInterpolation()===kI,t=g.length-1;let A=1;for(let i=1;i<t;++i){let t=!1;const o=g[i];if(o!==g[i+1]&&(1!==i||o!==g[0]))if(e)t=!0;else{const g=i*C,e=g-C,A=g+C;for(let i=0;i!==C;++i){const C=I[g+i];if(C!==I[e+i]||C!==I[A+i]){t=!0;break}}}if(t){if(i!==A){g[A]=g[i];const e=i*C,t=A*C;for(let g=0;g!==C;++g)I[t+g]=I[e+g]}++A}}if(t>0){g[A]=g[t];for(let g=t*C,e=A*C,i=0;i!==C;++i)I[e+i]=I[g+i];++A}return A!==g.length?(this.times=ua.arraySlice(g,0,A),this.values=ua.arraySlice(I,0,A*C)):(this.times=g,this.values=I),this}clone(){const g=ua.arraySlice(this.times,0),I=ua.arraySlice(this.values,0),C=new(0,this.constructor)(this.name,g,I);return C.createInterpolant=this.createInterpolant,C}}ya.prototype.TimeBufferType=Float32Array,ya.prototype.ValueBufferType=Float32Array,ya.prototype.DefaultInterpolation=LI;class Va extends ya{}Va.prototype.ValueTypeName="bool",Va.prototype.ValueBufferType=Array,Va.prototype.DefaultInterpolation=JI,Va.prototype.InterpolantFactoryMethodLinear=void 0,Va.prototype.InterpolantFactoryMethodSmooth=void 0;class va extends ya{}va.prototype.ValueTypeName="color";class Ya extends ya{}Ya.prototype.ValueTypeName="number";class Xa extends Ba{constructor(g,I,C,e){super(g,I,C,e)}interpolate_(g,I,C,e){const t=this.resultBuffer,A=this.sampleValues,i=this.valueSize,o=(C-I)/(e-I);let n=g*i;for(let g=n+i;n!==g;n+=4)te.slerpFlat(t,0,A,n-i,A,n,o);return t}}class Ra extends ya{InterpolantFactoryMethodLinear(g){return new Xa(this.times,this.values,this.getValueSize(),g)}}Ra.prototype.ValueTypeName="quaternion",Ra.prototype.DefaultInterpolation=LI,Ra.prototype.InterpolantFactoryMethodSmooth=void 0;class Ha extends ya{}Ha.prototype.ValueTypeName="string",Ha.prototype.ValueBufferType=Array,Ha.prototype.DefaultInterpolation=JI,Ha.prototype.InterpolantFactoryMethodLinear=void 0,Ha.prototype.InterpolantFactoryMethodSmooth=void 0;class wa extends ya{}wa.prototype.ValueTypeName="vector";class Ka{constructor(g,I=-1,C,e=TI){this.name=g,this.tracks=C,this.duration=I,this.blendMode=e,this.uuid=LC(),this.duration<0&&this.resetDuration()}static parse(g){const I=[],C=g.tracks,e=1/(g.fps||1);for(let g=0,t=C.length;g!==t;++g)I.push(Sa(C[g]).scale(e));const t=new this(g.name,g.duration,I,g.blendMode);return t.uuid=g.uuid,t}static toJSON(g){const I=[],C=g.tracks,e={name:g.name,duration:g.duration,tracks:I,uuid:g.uuid,blendMode:g.blendMode};for(let g=0,e=C.length;g!==e;++g)I.push(ya.toJSON(C[g]));return e}static CreateFromMorphTargetSequence(g,I,C,e){const t=I.length,A=[];for(let g=0;g<t;g++){let i=[],o=[];i.push((g+t-1)%t,g,(g+1)%t),o.push(0,1,0);const n=ua.getKeyframeOrder(i);i=ua.sortedArray(i,1,n),o=ua.sortedArray(o,1,n),e||0!==i[0]||(i.push(t),o.push(o[0])),A.push(new Ya(".morphTargetInfluences["+I[g].name+"]",i,o).scale(1/C))}return new this(g,-1,A)}static findByName(g,I){let C=g;if(!Array.isArray(g)){const I=g;C=I.geometry&&I.geometry.animations||I.animations}for(let g=0;g<C.length;g++)if(C[g].name===I)return C[g];return null}static CreateClipsFromMorphTargetSequences(g,I,C){const e={},t=/^([\w-]*?)([\d]+)$/;for(let I=0,C=g.length;I<C;I++){const C=g[I],A=C.name.match(t);if(A&&A.length>1){const g=A[1];let I=e[g];I||(e[g]=I=[]),I.push(C)}}const A=[];for(const g in e)A.push(this.CreateFromMorphTargetSequence(g,e[g],I,C));return A}static parseAnimation(g,I){if(!g)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const C=function(g,I,C,e,t){if(0!==C.length){const A=[],i=[];ua.flattenJSON(C,A,i,e),0!==A.length&&t.push(new g(I,A,i))}},e=[],t=g.name||"default",A=g.fps||30,i=g.blendMode;let o=g.length||-1;const n=g.hierarchy||[];for(let g=0;g<n.length;g++){const t=n[g].keys;if(t&&0!==t.length)if(t[0].morphTargets){const g={};let I;for(I=0;I<t.length;I++)if(t[I].morphTargets)for(let C=0;C<t[I].morphTargets.length;C++)g[t[I].morphTargets[C]]=-1;for(const C in g){const g=[],A=[];for(let e=0;e!==t[I].morphTargets.length;++e){const e=t[I];g.push(e.time),A.push(e.morphTarget===C?1:0)}e.push(new Ya(".morphTargetInfluence["+C+"]",g,A))}o=g.length*(A||1)}else{const A=".bones["+I[g].name+"]";C(wa,A+".position",t,"pos",e),C(Ra,A+".quaternion",t,"rot",e),C(wa,A+".scale",t,"scl",e)}}return 0===e.length?null:new this(t,o,e,i)}resetDuration(){let g=0;for(let I=0,C=this.tracks.length;I!==C;++I){const C=this.tracks[I];g=Math.max(g,C.times[C.times.length-1])}return this.duration=g,this}trim(){for(let g=0;g<this.tracks.length;g++)this.tracks[g].trim(0,this.duration);return this}validate(){let g=!0;for(let I=0;I<this.tracks.length;I++)g=g&&this.tracks[I].validate();return g}optimize(){for(let g=0;g<this.tracks.length;g++)this.tracks[g].optimize();return this}clone(){const g=[];for(let I=0;I<this.tracks.length;I++)g.push(this.tracks[I].clone());return new this.constructor(this.name,this.duration,g,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function Sa(g){if(void 0===g.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const I=function(g){switch(g.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return Ya;case"vector":case"vector2":case"vector3":case"vector4":return wa;case"color":return va;case"quaternion":return Ra;case"bool":case"boolean":return Va;case"string":return Ha}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+g)}(g.type);if(void 0===g.times){const I=[],C=[];ua.flattenJSON(g.keys,I,C,"value"),g.times=I,g.values=C}return void 0!==I.parse?I.parse(g):new I(g.name,g.times,g.values,g.interpolation)}const Na={enabled:!1,files:{},add:function(g,I){!1!==this.enabled&&(this.files[g]=I)},get:function(g){if(!1!==this.enabled)return this.files[g]},remove:function(g){delete this.files[g]},clear:function(){this.files={}}};class Fa{constructor(g,I,C){const e=this;let t,A=!1,i=0,o=0;const n=[];this.onStart=void 0,this.onLoad=g,this.onProgress=I,this.onError=C,this.itemStart=function(g){o++,!1===A&&void 0!==e.onStart&&e.onStart(g,i,o),A=!0},this.itemEnd=function(g){i++,void 0!==e.onProgress&&e.onProgress(g,i,o),i===o&&(A=!1,void 0!==e.onLoad&&e.onLoad())},this.itemError=function(g){void 0!==e.onError&&e.onError(g)},this.resolveURL=function(g){return t?t(g):g},this.setURLModifier=function(g){return t=g,this},this.addHandler=function(g,I){return n.push(g,I),this},this.removeHandler=function(g){const I=n.indexOf(g);return-1!==I&&n.splice(I,2),this},this.getHandler=function(g){for(let I=0,C=n.length;I<C;I+=2){const C=n[I],e=n[I+1];if(C.global&&(C.lastIndex=0),C.test(g))return e}return null}}}const za=new Fa;class fa{constructor(g){this.manager=void 0!==g?g:za,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(g,I){const C=this;return new Promise((function(e,t){C.load(g,e,I,t)}))}parse(){}setCrossOrigin(g){return this.crossOrigin=g,this}setWithCredentials(g){return this.withCredentials=g,this}setPath(g){return this.path=g,this}setResourcePath(g){return this.resourcePath=g,this}setRequestHeader(g){return this.requestHeader=g,this}}const xa={};class Ja extends fa{constructor(g){super(g)}load(g,I,C,e){void 0===g&&(g=""),void 0!==this.path&&(g=this.path+g),g=this.manager.resolveURL(g);const t=this,A=Na.get(g);if(void 0!==A)return t.manager.itemStart(g),setTimeout((function(){I&&I(A),t.manager.itemEnd(g)}),0),A;if(void 0!==xa[g])return void xa[g].push({onLoad:I,onProgress:C,onError:e});const i=g.match(/^data:(.*?)(;base64)?,(.*)$/);let o;if(i){const C=i[1],A=!!i[2];let o=i[3];o=decodeURIComponent(o),A&&(o=atob(o));try{let e;const A=(this.responseType||"").toLowerCase();switch(A){case"arraybuffer":case"blob":const g=new Uint8Array(o.length);for(let I=0;I<o.length;I++)g[I]=o.charCodeAt(I);e="blob"===A?new Blob([g.buffer],{type:C}):g.buffer;break;case"document":const I=new DOMParser;e=I.parseFromString(o,C);break;case"json":e=JSON.parse(o);break;default:e=o}setTimeout((function(){I&&I(e),t.manager.itemEnd(g)}),0)}catch(I){setTimeout((function(){e&&e(I),t.manager.itemError(g),t.manager.itemEnd(g)}),0)}}else{xa[g]=[],xa[g].push({onLoad:I,onProgress:C,onError:e}),o=new XMLHttpRequest,o.open("GET",g,!0),o.addEventListener("load",(function(I){const C=this.response,e=xa[g];if(delete xa[g],200===this.status||0===this.status){0===this.status&&console.warn("THREE.FileLoader: HTTP Status 0 received."),Na.add(g,C);for(let g=0,I=e.length;g<I;g++){const I=e[g];I.onLoad&&I.onLoad(C)}t.manager.itemEnd(g)}else{for(let g=0,C=e.length;g<C;g++){const C=e[g];C.onError&&C.onError(I)}t.manager.itemError(g),t.manager.itemEnd(g)}}),!1),o.addEventListener("progress",(function(I){const C=xa[g];for(let g=0,e=C.length;g<e;g++){const e=C[g];e.onProgress&&e.onProgress(I)}}),!1),o.addEventListener("error",(function(I){const C=xa[g];delete xa[g];for(let g=0,e=C.length;g<e;g++){const e=C[g];e.onError&&e.onError(I)}t.manager.itemError(g),t.manager.itemEnd(g)}),!1),o.addEventListener("abort",(function(I){const C=xa[g];delete xa[g];for(let g=0,e=C.length;g<e;g++){const e=C[g];e.onError&&e.onError(I)}t.manager.itemError(g),t.manager.itemEnd(g)}),!1),void 0!==this.responseType&&(o.responseType=this.responseType),void 0!==this.withCredentials&&(o.withCredentials=this.withCredentials),o.overrideMimeType&&o.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain");for(const g in this.requestHeader)o.setRequestHeader(g,this.requestHeader[g]);o.send(null)}return t.manager.itemStart(g),o}setResponseType(g){return this.responseType=g,this}setMimeType(g){return this.mimeType=g,this}}class La extends fa{constructor(g){super(g)}load(g,I,C,e){const t=this,A=new Ja(this.manager);A.setPath(this.path),A.setRequestHeader(this.requestHeader),A.setWithCredentials(this.withCredentials),A.load(g,(function(C){try{I(t.parse(JSON.parse(C)))}catch(I){e?e(I):console.error(I),t.manager.itemError(g)}}),C,e)}parse(g){const I=[];for(let C=0;C<g.length;C++){const e=Ka.parse(g[C]);I.push(e)}return I}}class ka extends fa{constructor(g){super(g)}load(g,I,C,e){const t=this,A=[],i=new il,o=new Ja(this.manager);o.setPath(this.path),o.setResponseType("arraybuffer"),o.setRequestHeader(this.requestHeader),o.setWithCredentials(t.withCredentials);let n=0;function l(l){o.load(g[l],(function(g){const C=t.parse(g,!0);A[l]={width:C.width,height:C.height,format:C.format,mipmaps:C.mipmaps},n+=1,6===n&&(1===C.mipmapCount&&(i.minFilter=ug),i.image=A,i.format=C.format,i.needsUpdate=!0,I&&I(i))}),C,e)}if(Array.isArray(g))for(let I=0,C=g.length;I<C;++I)l(I);else o.load(g,(function(g){const C=t.parse(g,!0);if(C.isCubemap){const g=C.mipmaps.length/C.mipmapCount;for(let I=0;I<g;I++){A[I]={mipmaps:[]};for(let g=0;g<C.mipmapCount;g++)A[I].mipmaps.push(C.mipmaps[I*C.mipmapCount+g]),A[I].format=C.format,A[I].width=C.width,A[I].height=C.height}i.image=A}else i.image.width=C.width,i.image.height=C.height,i.mipmaps=C.mipmaps;1===C.mipmapCount&&(i.minFilter=ug),i.format=C.format,i.needsUpdate=!0,I&&I(i)}),C,e);return i}}class Ma extends fa{constructor(g){super(g)}load(g,I,C,e){void 0!==this.path&&(g=this.path+g),g=this.manager.resolveURL(g);const t=this,A=Na.get(g);if(void 0!==A)return t.manager.itemStart(g),setTimeout((function(){I&&I(A),t.manager.itemEnd(g)}),0),A;const i=document.createElementNS("http://www.w3.org/1999/xhtml","img");function o(){i.removeEventListener("load",o,!1),i.removeEventListener("error",n,!1),Na.add(g,this),I&&I(this),t.manager.itemEnd(g)}function n(I){i.removeEventListener("load",o,!1),i.removeEventListener("error",n,!1),e&&e(I),t.manager.itemError(g),t.manager.itemEnd(g)}return i.addEventListener("load",o,!1),i.addEventListener("error",n,!1),"data:"!==g.substr(0,5)&&void 0!==this.crossOrigin&&(i.crossOrigin=this.crossOrigin),t.manager.itemStart(g),i.src=g,i}}class Qa extends fa{constructor(g){super(g)}load(g,I,C,e){const t=new wA,A=new Ma(this.manager);A.setCrossOrigin(this.crossOrigin),A.setPath(this.path);let i=0;function o(C){A.load(g[C],(function(g){t.images[C]=g,i++,6===i&&(t.needsUpdate=!0,I&&I(t))}),void 0,e)}for(let I=0;I<g.length;++I)o(I);return t}}class Ua extends fa{constructor(g){super(g)}load(g,I,C,e){const t=this,A=new SA,i=new Ja(this.manager);return i.setResponseType("arraybuffer"),i.setRequestHeader(this.requestHeader),i.setPath(this.path),i.setWithCredentials(t.withCredentials),i.load(g,(function(g){const C=t.parse(g);C&&(void 0!==C.image?A.image=C.image:void 0!==C.data&&(A.image.width=C.width,A.image.height=C.height,A.image.data=C.data),A.wrapS=void 0!==C.wrapS?C.wrapS:sg,A.wrapT=void 0!==C.wrapT?C.wrapT:sg,A.magFilter=void 0!==C.magFilter?C.magFilter:ug,A.minFilter=void 0!==C.minFilter?C.minFilter:ug,A.anisotropy=void 0!==C.anisotropy?C.anisotropy:1,void 0!==C.encoding&&(A.encoding=C.encoding),void 0!==C.flipY&&(A.flipY=C.flipY),void 0!==C.format&&(A.format=C.format),void 0!==C.type&&(A.type=C.type),void 0!==C.mipmaps&&(A.mipmaps=C.mipmaps,A.minFilter=pg),1===C.mipmapCount&&(A.minFilter=ug),void 0!==C.generateMipmaps&&(A.generateMipmaps=C.generateMipmaps),A.needsUpdate=!0,I&&I(A,C))}),C,e),A}}class Ta extends fa{constructor(g){super(g)}load(g,I,C,e){const t=new $C,A=new Ma(this.manager);return A.setCrossOrigin(this.crossOrigin),A.setPath(this.path),A.load(g,(function(C){t.image=C;const e=g.search(/\.jpe?g($|\?)/i)>0||0===g.search(/^data\:image\/jpeg/);t.format=e?fg:xg,t.needsUpdate=!0,void 0!==I&&I(t)}),C,e),t}}class Ea{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(g,I){const C=this.getUtoTmapping(g);return this.getPoint(C,I)}getPoints(g=5){const I=[];for(let C=0;C<=g;C++)I.push(this.getPoint(C/g));return I}getSpacedPoints(g=5){const I=[];for(let C=0;C<=g;C++)I.push(this.getPointAt(C/g));return I}getLength(){const g=this.getLengths();return g[g.length-1]}getLengths(g=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===g+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const I=[];let C,e=this.getPoint(0),t=0;I.push(0);for(let A=1;A<=g;A++)C=this.getPoint(A/g),t+=C.distanceTo(e),I.push(t),e=C;return this.cacheArcLengths=I,I}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(g,I){const C=this.getLengths();let e=0;const t=C.length;let A;A=I||g*C[t-1];let i,o=0,n=t-1;for(;o<=n;)if(e=Math.floor(o+(n-o)/2),i=C[e]-A,i<0)o=e+1;else{if(!(i>0)){n=e;break}n=e-1}if(e=n,C[e]===A)return e/(t-1);const l=C[e];return(e+(A-l)/(C[e+1]-l))/(t-1)}getTangent(g,I){const C=1e-4;let e=g-C,t=g+C;e<0&&(e=0),t>1&&(t=1);const A=this.getPoint(e),i=this.getPoint(t),o=I||(A.isVector2?new DC:new Ae);return o.copy(i).sub(A).normalize(),o}getTangentAt(g,I){const C=this.getUtoTmapping(g);return this.getTangent(C,I)}computeFrenetFrames(g,I){const C=new Ae,e=[],t=[],A=[],i=new Ae,o=new ze;for(let I=0;I<=g;I++){const C=I/g;e[I]=this.getTangentAt(C,new Ae),e[I].normalize()}t[0]=new Ae,A[0]=new Ae;let n=Number.MAX_VALUE;const l=Math.abs(e[0].x),a=Math.abs(e[0].y),c=Math.abs(e[0].z);l<=n&&(n=l,C.set(1,0,0)),a<=n&&(n=a,C.set(0,1,0)),c<=n&&C.set(0,0,1),i.crossVectors(e[0],C).normalize(),t[0].crossVectors(e[0],i),A[0].crossVectors(e[0],t[0]);for(let I=1;I<=g;I++){if(t[I]=t[I-1].clone(),A[I]=A[I-1].clone(),i.crossVectors(e[I-1],e[I]),i.length()>Number.EPSILON){i.normalize();const g=Math.acos(kC(e[I-1].dot(e[I]),-1,1));t[I].applyMatrix4(o.makeRotationAxis(i,g))}A[I].crossVectors(e[I],t[I])}if(!0===I){let I=Math.acos(kC(t[0].dot(t[g]),-1,1));I/=g,e[0].dot(i.crossVectors(t[0],t[g]))>0&&(I=-I);for(let C=1;C<=g;C++)t[C].applyMatrix4(o.makeRotationAxis(e[C],I*C)),A[C].crossVectors(e[C],t[C])}return{tangents:e,normals:t,binormals:A}}clone(){return(new this.constructor).copy(this)}copy(g){return this.arcLengthDivisions=g.arcLengthDivisions,this}toJSON(){const g={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return g.arcLengthDivisions=this.arcLengthDivisions,g.type=this.type,g}fromJSON(g){return this.arcLengthDivisions=g.arcLengthDivisions,this}}class ja extends Ea{constructor(g=0,I=0,C=1,e=1,t=0,A=2*Math.PI,i=!1,o=0){super(),this.type="EllipseCurve",this.aX=g,this.aY=I,this.xRadius=C,this.yRadius=e,this.aStartAngle=t,this.aEndAngle=A,this.aClockwise=i,this.aRotation=o}getPoint(g,I){const C=I||new DC,e=2*Math.PI;let t=this.aEndAngle-this.aStartAngle;const A=Math.abs(t)<Number.EPSILON;for(;t<0;)t+=e;for(;t>e;)t-=e;t<Number.EPSILON&&(t=A?0:e),!0!==this.aClockwise||A||(t===e?t=-e:t-=e);const i=this.aStartAngle+g*t;let o=this.aX+this.xRadius*Math.cos(i),n=this.aY+this.yRadius*Math.sin(i);if(0!==this.aRotation){const g=Math.cos(this.aRotation),I=Math.sin(this.aRotation),C=o-this.aX,e=n-this.aY;o=C*g-e*I+this.aX,n=C*I+e*g+this.aY}return C.set(o,n)}copy(g){return super.copy(g),this.aX=g.aX,this.aY=g.aY,this.xRadius=g.xRadius,this.yRadius=g.yRadius,this.aStartAngle=g.aStartAngle,this.aEndAngle=g.aEndAngle,this.aClockwise=g.aClockwise,this.aRotation=g.aRotation,this}toJSON(){const g=super.toJSON();return g.aX=this.aX,g.aY=this.aY,g.xRadius=this.xRadius,g.yRadius=this.yRadius,g.aStartAngle=this.aStartAngle,g.aEndAngle=this.aEndAngle,g.aClockwise=this.aClockwise,g.aRotation=this.aRotation,g}fromJSON(g){return super.fromJSON(g),this.aX=g.aX,this.aY=g.aY,this.xRadius=g.xRadius,this.yRadius=g.yRadius,this.aStartAngle=g.aStartAngle,this.aEndAngle=g.aEndAngle,this.aClockwise=g.aClockwise,this.aRotation=g.aRotation,this}}ja.prototype.isEllipseCurve=!0;class Da extends ja{constructor(g,I,C,e,t,A){super(g,I,C,C,e,t,A),this.type="ArcCurve"}}function Oa(){let g=0,I=0,C=0,e=0;function t(t,A,i,o){g=t,I=i,C=-3*t+3*A-2*i-o,e=2*t-2*A+i+o}return{initCatmullRom:function(g,I,C,e,A){t(I,C,A*(C-g),A*(e-I))},initNonuniformCatmullRom:function(g,I,C,e,A,i,o){let n=(I-g)/A-(C-g)/(A+i)+(C-I)/i,l=(C-I)/i-(e-I)/(i+o)+(e-C)/o;n*=i,l*=i,t(I,C,n,l)},calc:function(t){const A=t*t;return g+I*t+C*A+e*(A*t)}}}Da.prototype.isArcCurve=!0;const Pa=new Ae,_a=new Oa,qa=new Oa,$a=new Oa;class gc extends Ea{constructor(g=[],I=!1,C="centripetal",e=.5){super(),this.type="CatmullRomCurve3",this.points=g,this.closed=I,this.curveType=C,this.tension=e}getPoint(g,I=new Ae){const C=I,e=this.points,t=e.length,A=(t-(this.closed?0:1))*g;let i,o,n=Math.floor(A),l=A-n;this.closed?n+=n>0?0:(Math.floor(Math.abs(n)/t)+1)*t:0===l&&n===t-1&&(n=t-2,l=1),this.closed||n>0?i=e[(n-1)%t]:(Pa.subVectors(e[0],e[1]).add(e[0]),i=Pa);const a=e[n%t],c=e[(n+1)%t];if(this.closed||n+2<t?o=e[(n+2)%t]:(Pa.subVectors(e[t-1],e[t-2]).add(e[t-1]),o=Pa),"centripetal"===this.curveType||"chordal"===this.curveType){const g="chordal"===this.curveType?.5:.25;let I=Math.pow(i.distanceToSquared(a),g),C=Math.pow(a.distanceToSquared(c),g),e=Math.pow(c.distanceToSquared(o),g);C<1e-4&&(C=1),I<1e-4&&(I=C),e<1e-4&&(e=C),_a.initNonuniformCatmullRom(i.x,a.x,c.x,o.x,I,C,e),qa.initNonuniformCatmullRom(i.y,a.y,c.y,o.y,I,C,e),$a.initNonuniformCatmullRom(i.z,a.z,c.z,o.z,I,C,e)}else"catmullrom"===this.curveType&&(_a.initCatmullRom(i.x,a.x,c.x,o.x,this.tension),qa.initCatmullRom(i.y,a.y,c.y,o.y,this.tension),$a.initCatmullRom(i.z,a.z,c.z,o.z,this.tension));return C.set(_a.calc(l),qa.calc(l),$a.calc(l)),C}copy(g){super.copy(g),this.points=[];for(let I=0,C=g.points.length;I<C;I++){const C=g.points[I];this.points.push(C.clone())}return this.closed=g.closed,this.curveType=g.curveType,this.tension=g.tension,this}toJSON(){const g=super.toJSON();g.points=[];for(let I=0,C=this.points.length;I<C;I++){const C=this.points[I];g.points.push(C.toArray())}return g.closed=this.closed,g.curveType=this.curveType,g.tension=this.tension,g}fromJSON(g){super.fromJSON(g),this.points=[];for(let I=0,C=g.points.length;I<C;I++){const C=g.points[I];this.points.push((new Ae).fromArray(C))}return this.closed=g.closed,this.curveType=g.curveType,this.tension=g.tension,this}}function Ic(g,I,C,e,t){const A=.5*(e-I),i=.5*(t-C),o=g*g;return(2*C-2*e+A+i)*(g*o)+(-3*C+3*e-2*A-i)*o+A*g+C}function Cc(g,I,C,e){return function(g,I){const C=1-g;return C*C*I}(g,I)+function(g,I){return 2*(1-g)*g*I}(g,C)+function(g,I){return g*g*I}(g,e)}function ec(g,I,C,e,t){return function(g,I){const C=1-g;return C*C*C*I}(g,I)+function(g,I){const C=1-g;return 3*C*C*g*I}(g,C)+function(g,I){return 3*(1-g)*g*g*I}(g,e)+function(g,I){return g*g*g*I}(g,t)}gc.prototype.isCatmullRomCurve3=!0;class tc extends Ea{constructor(g=new DC,I=new DC,C=new DC,e=new DC){super(),this.type="CubicBezierCurve",this.v0=g,this.v1=I,this.v2=C,this.v3=e}getPoint(g,I=new DC){const C=I,e=this.v0,t=this.v1,A=this.v2,i=this.v3;return C.set(ec(g,e.x,t.x,A.x,i.x),ec(g,e.y,t.y,A.y,i.y)),C}copy(g){return super.copy(g),this.v0.copy(g.v0),this.v1.copy(g.v1),this.v2.copy(g.v2),this.v3.copy(g.v3),this}toJSON(){const g=super.toJSON();return g.v0=this.v0.toArray(),g.v1=this.v1.toArray(),g.v2=this.v2.toArray(),g.v3=this.v3.toArray(),g}fromJSON(g){return super.fromJSON(g),this.v0.fromArray(g.v0),this.v1.fromArray(g.v1),this.v2.fromArray(g.v2),this.v3.fromArray(g.v3),this}}tc.prototype.isCubicBezierCurve=!0;class Ac extends Ea{constructor(g=new Ae,I=new Ae,C=new Ae,e=new Ae){super(),this.type="CubicBezierCurve3",this.v0=g,this.v1=I,this.v2=C,this.v3=e}getPoint(g,I=new Ae){const C=I,e=this.v0,t=this.v1,A=this.v2,i=this.v3;return C.set(ec(g,e.x,t.x,A.x,i.x),ec(g,e.y,t.y,A.y,i.y),ec(g,e.z,t.z,A.z,i.z)),C}copy(g){return super.copy(g),this.v0.copy(g.v0),this.v1.copy(g.v1),this.v2.copy(g.v2),this.v3.copy(g.v3),this}toJSON(){const g=super.toJSON();return g.v0=this.v0.toArray(),g.v1=this.v1.toArray(),g.v2=this.v2.toArray(),g.v3=this.v3.toArray(),g}fromJSON(g){return super.fromJSON(g),this.v0.fromArray(g.v0),this.v1.fromArray(g.v1),this.v2.fromArray(g.v2),this.v3.fromArray(g.v3),this}}Ac.prototype.isCubicBezierCurve3=!0;class ic extends Ea{constructor(g=new DC,I=new DC){super(),this.type="LineCurve",this.v1=g,this.v2=I}getPoint(g,I=new DC){const C=I;return 1===g?C.copy(this.v2):(C.copy(this.v2).sub(this.v1),C.multiplyScalar(g).add(this.v1)),C}getPointAt(g,I){return this.getPoint(g,I)}getTangent(g,I){const C=I||new DC;return C.copy(this.v2).sub(this.v1).normalize(),C}copy(g){return super.copy(g),this.v1.copy(g.v1),this.v2.copy(g.v2),this}toJSON(){const g=super.toJSON();return g.v1=this.v1.toArray(),g.v2=this.v2.toArray(),g}fromJSON(g){return super.fromJSON(g),this.v1.fromArray(g.v1),this.v2.fromArray(g.v2),this}}ic.prototype.isLineCurve=!0;class oc extends Ea{constructor(g=new Ae,I=new Ae){super(),this.type="LineCurve3",this.isLineCurve3=!0,this.v1=g,this.v2=I}getPoint(g,I=new Ae){const C=I;return 1===g?C.copy(this.v2):(C.copy(this.v2).sub(this.v1),C.multiplyScalar(g).add(this.v1)),C}getPointAt(g,I){return this.getPoint(g,I)}copy(g){return super.copy(g),this.v1.copy(g.v1),this.v2.copy(g.v2),this}toJSON(){const g=super.toJSON();return g.v1=this.v1.toArray(),g.v2=this.v2.toArray(),g}fromJSON(g){return super.fromJSON(g),this.v1.fromArray(g.v1),this.v2.fromArray(g.v2),this}}class nc extends Ea{constructor(g=new DC,I=new DC,C=new DC){super(),this.type="QuadraticBezierCurve",this.v0=g,this.v1=I,this.v2=C}getPoint(g,I=new DC){const C=I,e=this.v0,t=this.v1,A=this.v2;return C.set(Cc(g,e.x,t.x,A.x),Cc(g,e.y,t.y,A.y)),C}copy(g){return super.copy(g),this.v0.copy(g.v0),this.v1.copy(g.v1),this.v2.copy(g.v2),this}toJSON(){const g=super.toJSON();return g.v0=this.v0.toArray(),g.v1=this.v1.toArray(),g.v2=this.v2.toArray(),g}fromJSON(g){return super.fromJSON(g),this.v0.fromArray(g.v0),this.v1.fromArray(g.v1),this.v2.fromArray(g.v2),this}}nc.prototype.isQuadraticBezierCurve=!0;class lc extends Ea{constructor(g=new Ae,I=new Ae,C=new Ae){super(),this.type="QuadraticBezierCurve3",this.v0=g,this.v1=I,this.v2=C}getPoint(g,I=new Ae){const C=I,e=this.v0,t=this.v1,A=this.v2;return C.set(Cc(g,e.x,t.x,A.x),Cc(g,e.y,t.y,A.y),Cc(g,e.z,t.z,A.z)),C}copy(g){return super.copy(g),this.v0.copy(g.v0),this.v1.copy(g.v1),this.v2.copy(g.v2),this}toJSON(){const g=super.toJSON();return g.v0=this.v0.toArray(),g.v1=this.v1.toArray(),g.v2=this.v2.toArray(),g}fromJSON(g){return super.fromJSON(g),this.v0.fromArray(g.v0),this.v1.fromArray(g.v1),this.v2.fromArray(g.v2),this}}lc.prototype.isQuadraticBezierCurve3=!0;class ac extends Ea{constructor(g=[]){super(),this.type="SplineCurve",this.points=g}getPoint(g,I=new DC){const C=I,e=this.points,t=(e.length-1)*g,A=Math.floor(t),i=t-A,o=e[0===A?A:A-1],n=e[A],l=e[A>e.length-2?e.length-1:A+1],a=e[A>e.length-3?e.length-1:A+2];return C.set(Ic(i,o.x,n.x,l.x,a.x),Ic(i,o.y,n.y,l.y,a.y)),C}copy(g){super.copy(g),this.points=[];for(let I=0,C=g.points.length;I<C;I++){const C=g.points[I];this.points.push(C.clone())}return this}toJSON(){const g=super.toJSON();g.points=[];for(let I=0,C=this.points.length;I<C;I++){const C=this.points[I];g.points.push(C.toArray())}return g}fromJSON(g){super.fromJSON(g),this.points=[];for(let I=0,C=g.points.length;I<C;I++){const C=g.points[I];this.points.push((new DC).fromArray(C))}return this}}ac.prototype.isSplineCurve=!0;var cc=Object.freeze({__proto__:null,ArcCurve:Da,CatmullRomCurve3:gc,CubicBezierCurve:tc,CubicBezierCurve3:Ac,EllipseCurve:ja,LineCurve:ic,LineCurve3:oc,QuadraticBezierCurve:nc,QuadraticBezierCurve3:lc,SplineCurve:ac});class sc extends Ea{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(g){this.curves.push(g)}closePath(){const g=this.curves[0].getPoint(0),I=this.curves[this.curves.length-1].getPoint(1);g.equals(I)||this.curves.push(new ic(I,g))}getPoint(g){const I=g*this.getLength(),C=this.getCurveLengths();let e=0;for(;e<C.length;){if(C[e]>=I){const g=C[e]-I,t=this.curves[e],A=t.getLength(),i=0===A?0:1-g/A;return t.getPointAt(i)}e++}return null}getLength(){const g=this.getCurveLengths();return g[g.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const g=[];let I=0;for(let C=0,e=this.curves.length;C<e;C++)I+=this.curves[C].getLength(),g.push(I);return this.cacheLengths=g,g}getSpacedPoints(g=40){const I=[];for(let C=0;C<=g;C++)I.push(this.getPoint(C/g));return this.autoClose&&I.push(I[0]),I}getPoints(g=12){const I=[];let C;for(let e=0,t=this.curves;e<t.length;e++){const A=t[e],i=A&&A.isEllipseCurve?2*g:A&&(A.isLineCurve||A.isLineCurve3)?1:A&&A.isSplineCurve?g*A.points.length:g,o=A.getPoints(i);for(let g=0;g<o.length;g++){const e=o[g];C&&C.equals(e)||(I.push(e),C=e)}}return this.autoClose&&I.length>1&&!I[I.length-1].equals(I[0])&&I.push(I[0]),I}copy(g){super.copy(g),this.curves=[];for(let I=0,C=g.curves.length;I<C;I++){const C=g.curves[I];this.curves.push(C.clone())}return this.autoClose=g.autoClose,this}toJSON(){const g=super.toJSON();g.autoClose=this.autoClose,g.curves=[];for(let I=0,C=this.curves.length;I<C;I++){const C=this.curves[I];g.curves.push(C.toJSON())}return g}fromJSON(g){super.fromJSON(g),this.autoClose=g.autoClose,this.curves=[];for(let I=0,C=g.curves.length;I<C;I++){const C=g.curves[I];this.curves.push((new cc[C.type]).fromJSON(C))}return this}}class dc extends sc{constructor(g){super(),this.type="Path",this.currentPoint=new DC,g&&this.setFromPoints(g)}setFromPoints(g){this.moveTo(g[0].x,g[0].y);for(let I=1,C=g.length;I<C;I++)this.lineTo(g[I].x,g[I].y);return this}moveTo(g,I){return this.currentPoint.set(g,I),this}lineTo(g,I){const C=new ic(this.currentPoint.clone(),new DC(g,I));return this.curves.push(C),this.currentPoint.set(g,I),this}quadraticCurveTo(g,I,C,e){const t=new nc(this.currentPoint.clone(),new DC(g,I),new DC(C,e));return this.curves.push(t),this.currentPoint.set(C,e),this}bezierCurveTo(g,I,C,e,t,A){const i=new tc(this.currentPoint.clone(),new DC(g,I),new DC(C,e),new DC(t,A));return this.curves.push(i),this.currentPoint.set(t,A),this}splineThru(g){const I=[this.currentPoint.clone()].concat(g),C=new ac(I);return this.curves.push(C),this.currentPoint.copy(g[g.length-1]),this}arc(g,I,C,e,t,A){const i=this.currentPoint.x,o=this.currentPoint.y;return this.absarc(g+i,I+o,C,e,t,A),this}absarc(g,I,C,e,t,A){return this.absellipse(g,I,C,C,e,t,A),this}ellipse(g,I,C,e,t,A,i,o){const n=this.currentPoint.x,l=this.currentPoint.y;return this.absellipse(g+n,I+l,C,e,t,A,i,o),this}absellipse(g,I,C,e,t,A,i,o){const n=new ja(g,I,C,e,t,A,i,o);if(this.curves.length>0){const g=n.getPoint(0);g.equals(this.currentPoint)||this.lineTo(g.x,g.y)}this.curves.push(n);const l=n.getPoint(1);return this.currentPoint.copy(l),this}copy(g){return super.copy(g),this.currentPoint.copy(g.currentPoint),this}toJSON(){const g=super.toJSON();return g.currentPoint=this.currentPoint.toArray(),g}fromJSON(g){return super.fromJSON(g),this.currentPoint.fromArray(g.currentPoint),this}}class bc extends dc{constructor(g){super(g),this.uuid=LC(),this.type="Shape",this.holes=[]}getPointsHoles(g){const I=[];for(let C=0,e=this.holes.length;C<e;C++)I[C]=this.holes[C].getPoints(g);return I}extractPoints(g){return{shape:this.getPoints(g),holes:this.getPointsHoles(g)}}copy(g){super.copy(g),this.holes=[];for(let I=0,C=g.holes.length;I<C;I++){const C=g.holes[I];this.holes.push(C.clone())}return this}toJSON(){const g=super.toJSON();g.uuid=this.uuid,g.holes=[];for(let I=0,C=this.holes.length;I<C;I++){const C=this.holes[I];g.holes.push(C.toJSON())}return g}fromJSON(g){super.fromJSON(g),this.uuid=g.uuid,this.holes=[];for(let I=0,C=g.holes.length;I<C;I++){const C=g.holes[I];this.holes.push((new dc).fromJSON(C))}return this}}class rc extends ot{constructor(g,I=1){super(),this.type="Light",this.color=new wt(g),this.intensity=I}dispose(){}copy(g){return super.copy(g),this.color.copy(g.color),this.intensity=g.intensity,this}toJSON(g){const I=super.toJSON(g);return I.object.color=this.color.getHex(),I.object.intensity=this.intensity,void 0!==this.groundColor&&(I.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(I.object.distance=this.distance),void 0!==this.angle&&(I.object.angle=this.angle),void 0!==this.decay&&(I.object.decay=this.decay),void 0!==this.penumbra&&(I.object.penumbra=this.penumbra),void 0!==this.shadow&&(I.object.shadow=this.shadow.toJSON()),I}}rc.prototype.isLight=!0;class Gc extends rc{constructor(g,I,C){super(g,C),this.type="HemisphereLight",this.position.copy(ot.DefaultUp),this.updateMatrix(),this.groundColor=new wt(I)}copy(g){return rc.prototype.copy.call(this,g),this.groundColor.copy(g.groundColor),this}}Gc.prototype.isHemisphereLight=!0;const hc=new ze,mc=new Ae,uc=new Ae;class Bc{constructor(g){this.camera=g,this.bias=0,this.normalBias=0,this.radius=1,this.mapSize=new DC(512,512),this.map=null,this.mapPass=null,this.matrix=new ze,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new zA,this._frameExtents=new DC(1,1),this._viewportCount=1,this._viewports=[new Ie(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(g){const I=this.camera,C=this.matrix;mc.setFromMatrixPosition(g.matrixWorld),I.position.copy(mc),uc.setFromMatrixPosition(g.target.matrixWorld),I.lookAt(uc),I.updateMatrixWorld(),hc.multiplyMatrices(I.projectionMatrix,I.matrixWorldInverse),this._frustum.setFromProjectionMatrix(hc),C.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),C.multiply(I.projectionMatrix),C.multiply(I.matrixWorldInverse)}getViewport(g){return this._viewports[g]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(g){return this.camera=g.camera.clone(),this.bias=g.bias,this.radius=g.radius,this.mapSize.copy(g.mapSize),this}clone(){return(new this.constructor).copy(this)}toJSON(){const g={};return 0!==this.bias&&(g.bias=this.bias),0!==this.normalBias&&(g.normalBias=this.normalBias),1!==this.radius&&(g.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(g.mapSize=this.mapSize.toArray()),g.camera=this.camera.toJSON(!1).object,delete g.camera.matrix,g}}class Zc extends Bc{constructor(){super(new XA(50,1,.5,500)),this.focus=1}updateMatrices(g){const I=this.camera,C=2*JC*g.angle*this.focus,e=this.mapSize.width/this.mapSize.height,t=g.distance||I.far;C===I.fov&&e===I.aspect&&t===I.far||(I.fov=C,I.aspect=e,I.far=t,I.updateProjectionMatrix()),super.updateMatrices(g)}copy(g){return super.copy(g),this.focus=g.focus,this}}Zc.prototype.isSpotLightShadow=!0;class pc extends rc{constructor(g,I,C=0,e=Math.PI/3,t=0,A=1){super(g,I),this.type="SpotLight",this.position.copy(ot.DefaultUp),this.updateMatrix(),this.target=new ot,this.distance=C,this.angle=e,this.penumbra=t,this.decay=A,this.shadow=new Zc}get power(){return this.intensity*Math.PI}set power(g){this.intensity=g/Math.PI}dispose(){this.shadow.dispose()}copy(g){return super.copy(g),this.distance=g.distance,this.angle=g.angle,this.penumbra=g.penumbra,this.decay=g.decay,this.target=g.target.clone(),this.shadow=g.shadow.clone(),this}}pc.prototype.isSpotLight=!0;const Wc=new ze,yc=new Ae,Vc=new Ae;class vc extends Bc{constructor(){super(new XA(90,1,.5,500)),this._frameExtents=new DC(4,2),this._viewportCount=6,this._viewports=[new Ie(2,1,1,1),new Ie(0,1,1,1),new Ie(3,1,1,1),new Ie(1,1,1,1),new Ie(3,0,1,1),new Ie(1,0,1,1)],this._cubeDirections=[new Ae(1,0,0),new Ae(-1,0,0),new Ae(0,0,1),new Ae(0,0,-1),new Ae(0,1,0),new Ae(0,-1,0)],this._cubeUps=[new Ae(0,1,0),new Ae(0,1,0),new Ae(0,1,0),new Ae(0,1,0),new Ae(0,0,1),new Ae(0,0,-1)]}updateMatrices(g,I=0){const C=this.camera,e=this.matrix,t=g.distance||C.far;t!==C.far&&(C.far=t,C.updateProjectionMatrix()),yc.setFromMatrixPosition(g.matrixWorld),C.position.copy(yc),Vc.copy(C.position),Vc.add(this._cubeDirections[I]),C.up.copy(this._cubeUps[I]),C.lookAt(Vc),C.updateMatrixWorld(),e.makeTranslation(-yc.x,-yc.y,-yc.z),Wc.multiplyMatrices(C.projectionMatrix,C.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Wc)}}vc.prototype.isPointLightShadow=!0;class Yc extends rc{constructor(g,I,C=0,e=1){super(g,I),this.type="PointLight",this.distance=C,this.decay=e,this.shadow=new vc}get power(){return 4*this.intensity*Math.PI}set power(g){this.intensity=g/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(g){return super.copy(g),this.distance=g.distance,this.decay=g.decay,this.shadow=g.shadow.clone(),this}}Yc.prototype.isPointLight=!0;class Xc extends YA{constructor(g=-1,I=1,C=1,e=-1,t=.1,A=2e3){super(),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=g,this.right=I,this.top=C,this.bottom=e,this.near=t,this.far=A,this.updateProjectionMatrix()}copy(g,I){return super.copy(g,I),this.left=g.left,this.right=g.right,this.top=g.top,this.bottom=g.bottom,this.near=g.near,this.far=g.far,this.zoom=g.zoom,this.view=null===g.view?null:Object.assign({},g.view),this}setViewOffset(g,I,C,e,t,A){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=g,this.view.fullHeight=I,this.view.offsetX=C,this.view.offsetY=e,this.view.width=t,this.view.height=A,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const g=(this.right-this.left)/(2*this.zoom),I=(this.top-this.bottom)/(2*this.zoom),C=(this.right+this.left)/2,e=(this.top+this.bottom)/2;let t=C-g,A=C+g,i=e+I,o=e-I;if(null!==this.view&&this.view.enabled){const g=(this.right-this.left)/this.view.fullWidth/this.zoom,I=(this.top-this.bottom)/this.view.fullHeight/this.zoom;t+=g*this.view.offsetX,A=t+g*this.view.width,i-=I*this.view.offsetY,o=i-I*this.view.height}this.projectionMatrix.makeOrthographic(t,A,i,o,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(g){const I=super.toJSON(g);return I.object.zoom=this.zoom,I.object.left=this.left,I.object.right=this.right,I.object.top=this.top,I.object.bottom=this.bottom,I.object.near=this.near,I.object.far=this.far,null!==this.view&&(I.object.view=Object.assign({},this.view)),I}}Xc.prototype.isOrthographicCamera=!0;class Rc extends Bc{constructor(){super(new Xc(-5,5,5,-5,.5,500))}}Rc.prototype.isDirectionalLightShadow=!0;class Hc extends rc{constructor(g,I){super(g,I),this.type="DirectionalLight",this.position.copy(ot.DefaultUp),this.updateMatrix(),this.target=new ot,this.shadow=new Rc}dispose(){this.shadow.dispose()}copy(g){return super.copy(g),this.target=g.target.clone(),this.shadow=g.shadow.clone(),this}}Hc.prototype.isDirectionalLight=!0;class wc extends rc{constructor(g,I){super(g,I),this.type="AmbientLight"}}wc.prototype.isAmbientLight=!0;class Kc extends rc{constructor(g,I,C=10,e=10){super(g,I),this.type="RectAreaLight",this.width=C,this.height=e}copy(g){return super.copy(g),this.width=g.width,this.height=g.height,this}toJSON(g){const I=super.toJSON(g);return I.object.width=this.width,I.object.height=this.height,I}}Kc.prototype.isRectAreaLight=!0;class Sc{constructor(){this.coefficients=[];for(let g=0;g<9;g++)this.coefficients.push(new Ae)}set(g){for(let I=0;I<9;I++)this.coefficients[I].copy(g[I]);return this}zero(){for(let g=0;g<9;g++)this.coefficients[g].set(0,0,0);return this}getAt(g,I){const C=g.x,e=g.y,t=g.z,A=this.coefficients;return I.copy(A[0]).multiplyScalar(.282095),I.addScaledVector(A[1],.488603*e),I.addScaledVector(A[2],.488603*t),I.addScaledVector(A[3],.488603*C),I.addScaledVector(A[4],C*e*1.092548),I.addScaledVector(A[5],e*t*1.092548),I.addScaledVector(A[6],.315392*(3*t*t-1)),I.addScaledVector(A[7],C*t*1.092548),I.addScaledVector(A[8],.546274*(C*C-e*e)),I}getIrradianceAt(g,I){const C=g.x,e=g.y,t=g.z,A=this.coefficients;return I.copy(A[0]).multiplyScalar(.886227),I.addScaledVector(A[1],1.023328*e),I.addScaledVector(A[2],1.023328*t),I.addScaledVector(A[3],1.023328*C),I.addScaledVector(A[4],.858086*C*e),I.addScaledVector(A[5],.858086*e*t),I.addScaledVector(A[6],.743125*t*t-.247708),I.addScaledVector(A[7],.858086*C*t),I.addScaledVector(A[8],.429043*(C*C-e*e)),I}add(g){for(let I=0;I<9;I++)this.coefficients[I].add(g.coefficients[I]);return this}addScaledSH(g,I){for(let C=0;C<9;C++)this.coefficients[C].addScaledVector(g.coefficients[C],I);return this}scale(g){for(let I=0;I<9;I++)this.coefficients[I].multiplyScalar(g);return this}lerp(g,I){for(let C=0;C<9;C++)this.coefficients[C].lerp(g.coefficients[C],I);return this}equals(g){for(let I=0;I<9;I++)if(!this.coefficients[I].equals(g.coefficients[I]))return!1;return!0}copy(g){return this.set(g.coefficients)}clone(){return(new this.constructor).copy(this)}fromArray(g,I=0){const C=this.coefficients;for(let e=0;e<9;e++)C[e].fromArray(g,I+3*e);return this}toArray(g=[],I=0){const C=this.coefficients;for(let e=0;e<9;e++)C[e].toArray(g,I+3*e);return g}static getBasisAt(g,I){const C=g.x,e=g.y,t=g.z;I[0]=.282095,I[1]=.488603*e,I[2]=.488603*t,I[3]=.488603*C,I[4]=1.092548*C*e,I[5]=1.092548*e*t,I[6]=.315392*(3*t*t-1),I[7]=1.092548*C*t,I[8]=.546274*(C*C-e*e)}}Sc.prototype.isSphericalHarmonics3=!0;class Nc extends rc{constructor(g=new Sc,I=1){super(void 0,I),this.sh=g}copy(g){return super.copy(g),this.sh.copy(g.sh),this}fromJSON(g){return this.intensity=g.intensity,this.sh.fromArray(g.sh),this}toJSON(g){const I=super.toJSON(g);return I.object.sh=this.sh.toArray(),I}}Nc.prototype.isLightProbe=!0;class Fc extends fa{constructor(g){super(g),this.textures={}}load(g,I,C,e){const t=this,A=new Ja(t.manager);A.setPath(t.path),A.setRequestHeader(t.requestHeader),A.setWithCredentials(t.withCredentials),A.load(g,(function(C){try{I(t.parse(JSON.parse(C)))}catch(I){e?e(I):console.error(I),t.manager.itemError(g)}}),C,e)}parse(g){const I=this.textures;function C(g){return void 0===I[g]&&console.warn("THREE.MaterialLoader: Undefined texture",g),I[g]}const e=new ma[g.type];if(void 0!==g.uuid&&(e.uuid=g.uuid),void 0!==g.name&&(e.name=g.name),void 0!==g.color&&void 0!==e.color&&e.color.setHex(g.color),void 0!==g.roughness&&(e.roughness=g.roughness),void 0!==g.metalness&&(e.metalness=g.metalness),void 0!==g.sheen&&(e.sheen=(new wt).setHex(g.sheen)),void 0!==g.emissive&&void 0!==e.emissive&&e.emissive.setHex(g.emissive),void 0!==g.specular&&void 0!==e.specular&&e.specular.setHex(g.specular),void 0!==g.shininess&&(e.shininess=g.shininess),void 0!==g.clearcoat&&(e.clearcoat=g.clearcoat),void 0!==g.clearcoatRoughness&&(e.clearcoatRoughness=g.clearcoatRoughness),void 0!==g.fog&&(e.fog=g.fog),void 0!==g.flatShading&&(e.flatShading=g.flatShading),void 0!==g.blending&&(e.blending=g.blending),void 0!==g.combine&&(e.combine=g.combine),void 0!==g.side&&(e.side=g.side),void 0!==g.shadowSide&&(e.shadowSide=g.shadowSide),void 0!==g.opacity&&(e.opacity=g.opacity),void 0!==g.transparent&&(e.transparent=g.transparent),void 0!==g.alphaTest&&(e.alphaTest=g.alphaTest),void 0!==g.depthTest&&(e.depthTest=g.depthTest),void 0!==g.depthWrite&&(e.depthWrite=g.depthWrite),void 0!==g.colorWrite&&(e.colorWrite=g.colorWrite),void 0!==g.stencilWrite&&(e.stencilWrite=g.stencilWrite),void 0!==g.stencilWriteMask&&(e.stencilWriteMask=g.stencilWriteMask),void 0!==g.stencilFunc&&(e.stencilFunc=g.stencilFunc),void 0!==g.stencilRef&&(e.stencilRef=g.stencilRef),void 0!==g.stencilFuncMask&&(e.stencilFuncMask=g.stencilFuncMask),void 0!==g.stencilFail&&(e.stencilFail=g.stencilFail),void 0!==g.stencilZFail&&(e.stencilZFail=g.stencilZFail),void 0!==g.stencilZPass&&(e.stencilZPass=g.stencilZPass),void 0!==g.wireframe&&(e.wireframe=g.wireframe),void 0!==g.wireframeLinewidth&&(e.wireframeLinewidth=g.wireframeLinewidth),void 0!==g.wireframeLinecap&&(e.wireframeLinecap=g.wireframeLinecap),void 0!==g.wireframeLinejoin&&(e.wireframeLinejoin=g.wireframeLinejoin),void 0!==g.rotation&&(e.rotation=g.rotation),1!==g.linewidth&&(e.linewidth=g.linewidth),void 0!==g.dashSize&&(e.dashSize=g.dashSize),void 0!==g.gapSize&&(e.gapSize=g.gapSize),void 0!==g.scale&&(e.scale=g.scale),void 0!==g.polygonOffset&&(e.polygonOffset=g.polygonOffset),void 0!==g.polygonOffsetFactor&&(e.polygonOffsetFactor=g.polygonOffsetFactor),void 0!==g.polygonOffsetUnits&&(e.polygonOffsetUnits=g.polygonOffsetUnits),void 0!==g.skinning&&(e.skinning=g.skinning),void 0!==g.morphTargets&&(e.morphTargets=g.morphTargets),void 0!==g.morphNormals&&(e.morphNormals=g.morphNormals),void 0!==g.dithering&&(e.dithering=g.dithering),void 0!==g.alphaToCoverage&&(e.alphaToCoverage=g.alphaToCoverage),void 0!==g.premultipliedAlpha&&(e.premultipliedAlpha=g.premultipliedAlpha),void 0!==g.vertexTangents&&(e.vertexTangents=g.vertexTangents),void 0!==g.visible&&(e.visible=g.visible),void 0!==g.toneMapped&&(e.toneMapped=g.toneMapped),void 0!==g.userData&&(e.userData=g.userData),void 0!==g.vertexColors&&("number"==typeof g.vertexColors?e.vertexColors=g.vertexColors>0:e.vertexColors=g.vertexColors),void 0!==g.uniforms)for(const I in g.uniforms){const t=g.uniforms[I];switch(e.uniforms[I]={},t.type){case"t":e.uniforms[I].value=C(t.value);break;case"c":e.uniforms[I].value=(new wt).setHex(t.value);break;case"v2":e.uniforms[I].value=(new DC).fromArray(t.value);break;case"v3":e.uniforms[I].value=(new Ae).fromArray(t.value);break;case"v4":e.uniforms[I].value=(new Ie).fromArray(t.value);break;case"m3":e.uniforms[I].value=(new OC).fromArray(t.value);break;case"m4":e.uniforms[I].value=(new ze).fromArray(t.value);break;default:e.uniforms[I].value=t.value}}if(void 0!==g.defines&&(e.defines=g.defines),void 0!==g.vertexShader&&(e.vertexShader=g.vertexShader),void 0!==g.fragmentShader&&(e.fragmentShader=g.fragmentShader),void 0!==g.extensions)for(const I in g.extensions)e.extensions[I]=g.extensions[I];if(void 0!==g.shading&&(e.flatShading=1===g.shading),void 0!==g.size&&(e.size=g.size),void 0!==g.sizeAttenuation&&(e.sizeAttenuation=g.sizeAttenuation),void 0!==g.map&&(e.map=C(g.map)),void 0!==g.matcap&&(e.matcap=C(g.matcap)),void 0!==g.alphaMap&&(e.alphaMap=C(g.alphaMap)),void 0!==g.bumpMap&&(e.bumpMap=C(g.bumpMap)),void 0!==g.bumpScale&&(e.bumpScale=g.bumpScale),void 0!==g.normalMap&&(e.normalMap=C(g.normalMap)),void 0!==g.normalMapType&&(e.normalMapType=g.normalMapType),void 0!==g.normalScale){let I=g.normalScale;!1===Array.isArray(I)&&(I=[I,I]),e.normalScale=(new DC).fromArray(I)}return void 0!==g.displacementMap&&(e.displacementMap=C(g.displacementMap)),void 0!==g.displacementScale&&(e.displacementScale=g.displacementScale),void 0!==g.displacementBias&&(e.displacementBias=g.displacementBias),void 0!==g.roughnessMap&&(e.roughnessMap=C(g.roughnessMap)),void 0!==g.metalnessMap&&(e.metalnessMap=C(g.metalnessMap)),void 0!==g.emissiveMap&&(e.emissiveMap=C(g.emissiveMap)),void 0!==g.emissiveIntensity&&(e.emissiveIntensity=g.emissiveIntensity),void 0!==g.specularMap&&(e.specularMap=C(g.specularMap)),void 0!==g.envMap&&(e.envMap=C(g.envMap)),void 0!==g.envMapIntensity&&(e.envMapIntensity=g.envMapIntensity),void 0!==g.reflectivity&&(e.reflectivity=g.reflectivity),void 0!==g.refractionRatio&&(e.refractionRatio=g.refractionRatio),void 0!==g.lightMap&&(e.lightMap=C(g.lightMap)),void 0!==g.lightMapIntensity&&(e.lightMapIntensity=g.lightMapIntensity),void 0!==g.aoMap&&(e.aoMap=C(g.aoMap)),void 0!==g.aoMapIntensity&&(e.aoMapIntensity=g.aoMapIntensity),void 0!==g.gradientMap&&(e.gradientMap=C(g.gradientMap)),void 0!==g.clearcoatMap&&(e.clearcoatMap=C(g.clearcoatMap)),void 0!==g.clearcoatRoughnessMap&&(e.clearcoatRoughnessMap=C(g.clearcoatRoughnessMap)),void 0!==g.clearcoatNormalMap&&(e.clearcoatNormalMap=C(g.clearcoatNormalMap)),void 0!==g.clearcoatNormalScale&&(e.clearcoatNormalScale=(new DC).fromArray(g.clearcoatNormalScale)),void 0!==g.transmission&&(e.transmission=g.transmission),void 0!==g.transmissionMap&&(e.transmissionMap=C(g.transmissionMap)),e}setTextures(g){return this.textures=g,this}}class zc{static decodeText(g){if("undefined"!=typeof TextDecoder)return(new TextDecoder).decode(g);let I="";for(let C=0,e=g.length;C<e;C++)I+=String.fromCharCode(g[C]);try{return decodeURIComponent(escape(I))}catch(g){return I}}static extractUrlBase(g){const I=g.lastIndexOf("/");return-1===I?"./":g.substr(0,I+1)}}class fc extends CA{constructor(){super(),this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(g){return super.copy(g),this.instanceCount=g.instanceCount,this}clone(){return(new this.constructor).copy(this)}toJSON(){const g=super.toJSON(this);return g.instanceCount=this.instanceCount,g.isInstancedBufferGeometry=!0,g}}fc.prototype.isInstancedBufferGeometry=!0;class xc extends Ft{constructor(g,I,C,e){"number"==typeof C&&(e=C,C=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),super(g,I,C),this.meshPerAttribute=e||1}copy(g){return super.copy(g),this.meshPerAttribute=g.meshPerAttribute,this}toJSON(){const g=super.toJSON();return g.meshPerAttribute=this.meshPerAttribute,g.isInstancedBufferAttribute=!0,g}}xc.prototype.isInstancedBufferAttribute=!0;class Jc extends fa{constructor(g){super(g)}load(g,I,C,e){const t=this,A=new Ja(t.manager);A.setPath(t.path),A.setRequestHeader(t.requestHeader),A.setWithCredentials(t.withCredentials),A.load(g,(function(C){try{I(t.parse(JSON.parse(C)))}catch(I){e?e(I):console.error(I),t.manager.itemError(g)}}),C,e)}parse(g){const I={},C={};function e(g,e){if(void 0!==I[e])return I[e];const t=g.interleavedBuffers[e],A=function(g,I){if(void 0!==C[I])return C[I];const e=g.arrayBuffers[I],t=new Uint32Array(e).buffer;return C[I]=t,t}(g,t.buffer),i=Dt(t.type,A),o=new en(i,t.stride);return o.uuid=t.uuid,I[e]=o,o}const t=g.isInstancedBufferGeometry?new fc:new CA,A=g.data.index;if(void 0!==A){const g=Dt(A.type,A.array);t.setIndex(new Ft(g,1))}const i=g.data.attributes;for(const I in i){const C=i[I];let A;if(C.isInterleavedBufferAttribute){const I=e(g.data,C.data);A=new An(I,C.itemSize,C.offset,C.normalized)}else{const g=Dt(C.type,C.array);A=new(C.isInstancedBufferAttribute?xc:Ft)(g,C.itemSize,C.normalized)}void 0!==C.name&&(A.name=C.name),void 0!==C.usage&&A.setUsage(C.usage),void 0!==C.updateRange&&(A.updateRange.offset=C.updateRange.offset,A.updateRange.count=C.updateRange.count),t.setAttribute(I,A)}const o=g.data.morphAttributes;if(o)for(const I in o){const C=o[I],A=[];for(let I=0,t=C.length;I<t;I++){const t=C[I];let i;if(t.isInterleavedBufferAttribute){const I=e(g.data,t.data);i=new An(I,t.itemSize,t.offset,t.normalized)}else{const g=Dt(t.type,t.array);i=new Ft(g,t.itemSize,t.normalized)}void 0!==t.name&&(i.name=t.name),A.push(i)}t.morphAttributes[I]=A}g.data.morphTargetsRelative&&(t.morphTargetsRelative=!0);const n=g.data.groups||g.data.drawcalls||g.data.offsets;if(void 0!==n)for(let g=0,I=n.length;g!==I;++g){const I=n[g];t.addGroup(I.start,I.count,I.materialIndex)}const l=g.data.boundingSphere;if(void 0!==l){const g=new Ae;void 0!==l.center&&g.fromArray(l.center),t.boundingSphere=new Ye(g,l.radius)}return g.name&&(t.name=g.name),g.userData&&(t.userData=g.userData),t}}class Lc extends fa{constructor(g){super(g)}load(g,I,C,e){const t=this,A=""===this.path?zc.extractUrlBase(g):this.path;this.resourcePath=this.resourcePath||A;const i=new Ja(this.manager);i.setPath(this.path),i.setRequestHeader(this.requestHeader),i.setWithCredentials(this.withCredentials),i.load(g,(function(C){let A=null;try{A=JSON.parse(C)}catch(I){return void 0!==e&&e(I),void console.error("THREE:ObjectLoader: Can't parse "+g+".",I.message)}const i=A.metadata;void 0!==i&&void 0!==i.type&&"geometry"!==i.type.toLowerCase()?t.parse(A,I):console.error("THREE.ObjectLoader: Can't load "+g)}),C,e)}parse(g,I){const C=this.parseAnimations(g.animations),e=this.parseShapes(g.shapes),t=this.parseGeometries(g.geometries,e),A=this.parseImages(g.images,(function(){void 0!==I&&I(n)})),i=this.parseTextures(g.textures,A),o=this.parseMaterials(g.materials,i),n=this.parseObject(g.object,t,o,C),l=this.parseSkeletons(g.skeletons,n);if(this.bindSkeletons(n,l),void 0!==I){let g=!1;for(const I in A)if(A[I]instanceof HTMLImageElement){g=!0;break}!1===g&&I(n)}return n}parseShapes(g){const I={};if(void 0!==g)for(let C=0,e=g.length;C<e;C++){const e=(new bc).fromJSON(g[C]);I[e.uuid]=e}return I}parseSkeletons(g,I){const C={},e={};if(I.traverse((function(g){g.isBone&&(e[g.uuid]=g)})),void 0!==g)for(let I=0,t=g.length;I<t;I++){const t=(new Fn).fromJSON(g[I],e);C[t.uuid]=t}return C}parseGeometries(g,I){const C={};let e;if(void 0!==g){const t=new Jc;for(let A=0,i=g.length;A<i;A++){let i;const o=g[A];switch(o.type){case"PlaneGeometry":case"PlaneBufferGeometry":i=new oa[o.type](o.width,o.height,o.widthSegments,o.heightSegments);break;case"BoxGeometry":case"BoxBufferGeometry":i=new oa[o.type](o.width,o.height,o.depth,o.widthSegments,o.heightSegments,o.depthSegments);break;case"CircleGeometry":case"CircleBufferGeometry":i=new oa[o.type](o.radius,o.segments,o.thetaStart,o.thetaLength);break;case"CylinderGeometry":case"CylinderBufferGeometry":i=new oa[o.type](o.radiusTop,o.radiusBottom,o.height,o.radialSegments,o.heightSegments,o.openEnded,o.thetaStart,o.thetaLength);break;case"ConeGeometry":case"ConeBufferGeometry":i=new oa[o.type](o.radius,o.height,o.radialSegments,o.heightSegments,o.openEnded,o.thetaStart,o.thetaLength);break;case"SphereGeometry":case"SphereBufferGeometry":i=new oa[o.type](o.radius,o.widthSegments,o.heightSegments,o.phiStart,o.phiLength,o.thetaStart,o.thetaLength);break;case"DodecahedronGeometry":case"DodecahedronBufferGeometry":case"IcosahedronGeometry":case"IcosahedronBufferGeometry":case"OctahedronGeometry":case"OctahedronBufferGeometry":case"TetrahedronGeometry":case"TetrahedronBufferGeometry":i=new oa[o.type](o.radius,o.detail);break;case"RingGeometry":case"RingBufferGeometry":i=new oa[o.type](o.innerRadius,o.outerRadius,o.thetaSegments,o.phiSegments,o.thetaStart,o.thetaLength);break;case"TorusGeometry":case"TorusBufferGeometry":i=new oa[o.type](o.radius,o.tube,o.radialSegments,o.tubularSegments,o.arc);break;case"TorusKnotGeometry":case"TorusKnotBufferGeometry":i=new oa[o.type](o.radius,o.tube,o.tubularSegments,o.radialSegments,o.p,o.q);break;case"TubeGeometry":case"TubeBufferGeometry":i=new oa[o.type]((new cc[o.path.type]).fromJSON(o.path),o.tubularSegments,o.radius,o.radialSegments,o.closed);break;case"LatheGeometry":case"LatheBufferGeometry":i=new oa[o.type](o.points,o.segments,o.phiStart,o.phiLength);break;case"PolyhedronGeometry":case"PolyhedronBufferGeometry":i=new oa[o.type](o.vertices,o.indices,o.radius,o.details);break;case"ShapeGeometry":case"ShapeBufferGeometry":e=[];for(let g=0,C=o.shapes.length;g<C;g++){const C=I[o.shapes[g]];e.push(C)}i=new oa[o.type](e,o.curveSegments);break;case"ExtrudeGeometry":case"ExtrudeBufferGeometry":e=[];for(let g=0,C=o.shapes.length;g<C;g++){const C=I[o.shapes[g]];e.push(C)}const g=o.options.extrudePath;void 0!==g&&(o.options.extrudePath=(new cc[g.type]).fromJSON(g)),i=new oa[o.type](e,o.options);break;case"BufferGeometry":case"InstancedBufferGeometry":i=t.parse(o);break;case"Geometry":console.error('THREE.ObjectLoader: Loading "Geometry" is not supported anymore.');break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+o.type+'"');continue}i.uuid=o.uuid,void 0!==o.name&&(i.name=o.name),!0===i.isBufferGeometry&&void 0!==o.userData&&(i.userData=o.userData),C[o.uuid]=i}}return C}parseMaterials(g,I){const C={},e={};if(void 0!==g){const t=new Fc;t.setTextures(I);for(let I=0,A=g.length;I<A;I++){const A=g[I];if("MultiMaterial"===A.type){const g=[];for(let I=0;I<A.materials.length;I++){const e=A.materials[I];void 0===C[e.uuid]&&(C[e.uuid]=t.parse(e)),g.push(C[e.uuid])}e[A.uuid]=g}else void 0===C[A.uuid]&&(C[A.uuid]=t.parse(A)),e[A.uuid]=C[A.uuid]}}return e}parseAnimations(g){const I={};if(void 0!==g)for(let C=0;C<g.length;C++){const e=g[C],t=Ka.parse(e);I[t.uuid]=t}return I}parseImages(g,I){const C=this,e={};let t;function A(g){if("string"==typeof g){const I=g;return function(g){return C.manager.itemStart(g),t.load(g,(function(){C.manager.itemEnd(g)}),void 0,(function(){C.manager.itemError(g),C.manager.itemEnd(g)}))}(/^(\/\/)|([a-z]+:(\/\/)?)/i.test(I)?I:C.resourcePath+I)}return g.data?{data:Dt(g.type,g.data),width:g.width,height:g.height}:null}if(void 0!==g&&g.length>0){const C=new Fa(I);t=new Ma(C),t.setCrossOrigin(this.crossOrigin);for(let I=0,C=g.length;I<C;I++){const C=g[I],t=C.url;if(Array.isArray(t)){e[C.uuid]=[];for(let g=0,I=t.length;g<I;g++){const I=A(t[g]);null!==I&&(I instanceof HTMLImageElement?e[C.uuid].push(I):e[C.uuid].push(new SA(I.data,I.width,I.height)))}}else{const g=A(C.url);null!==g&&(e[C.uuid]=g)}}}return e}parseTextures(g,I){function C(g,I){return"number"==typeof g?g:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",g),I[g])}const e={};if(void 0!==g)for(let t=0,A=g.length;t<A;t++){const A=g[t];let i;void 0===A.image&&console.warn('THREE.ObjectLoader: No "image" specified for',A.uuid),void 0===I[A.image]&&console.warn("THREE.ObjectLoader: Undefined image",A.image);const o=I[A.image];Array.isArray(o)?(i=new wA(o),6===o.length&&(i.needsUpdate=!0)):(i=o&&o.data?new SA(o.data,o.width,o.height):new $C(o),o&&(i.needsUpdate=!0)),i.uuid=A.uuid,void 0!==A.name&&(i.name=A.name),void 0!==A.mapping&&(i.mapping=C(A.mapping,kc)),void 0!==A.offset&&i.offset.fromArray(A.offset),void 0!==A.repeat&&i.repeat.fromArray(A.repeat),void 0!==A.center&&i.center.fromArray(A.center),void 0!==A.rotation&&(i.rotation=A.rotation),void 0!==A.wrap&&(i.wrapS=C(A.wrap[0],Mc),i.wrapT=C(A.wrap[1],Mc)),void 0!==A.format&&(i.format=A.format),void 0!==A.type&&(i.type=A.type),void 0!==A.encoding&&(i.encoding=A.encoding),void 0!==A.minFilter&&(i.minFilter=C(A.minFilter,Qc)),void 0!==A.magFilter&&(i.magFilter=C(A.magFilter,Qc)),void 0!==A.anisotropy&&(i.anisotropy=A.anisotropy),void 0!==A.flipY&&(i.flipY=A.flipY),void 0!==A.premultiplyAlpha&&(i.premultiplyAlpha=A.premultiplyAlpha),void 0!==A.unpackAlignment&&(i.unpackAlignment=A.unpackAlignment),e[A.uuid]=i}return e}parseObject(g,I,C,e){let t,A,i;function o(g){return void 0===I[g]&&console.warn("THREE.ObjectLoader: Undefined geometry",g),I[g]}function n(g){if(void 0!==g){if(Array.isArray(g)){const I=[];for(let e=0,t=g.length;e<t;e++){const t=g[e];void 0===C[t]&&console.warn("THREE.ObjectLoader: Undefined material",t),I.push(C[t])}return I}return void 0===C[g]&&console.warn("THREE.ObjectLoader: Undefined material",g),C[g]}}switch(g.type){case"Scene":t=new Cn,void 0!==g.background&&Number.isInteger(g.background)&&(t.background=new wt(g.background)),void 0!==g.fog&&("Fog"===g.fog.type?t.fog=new In(g.fog.color,g.fog.near,g.fog.far):"FogExp2"===g.fog.type&&(t.fog=new gn(g.fog.color,g.fog.density)));break;case"PerspectiveCamera":t=new XA(g.fov,g.aspect,g.near,g.far),void 0!==g.focus&&(t.focus=g.focus),void 0!==g.zoom&&(t.zoom=g.zoom),void 0!==g.filmGauge&&(t.filmGauge=g.filmGauge),void 0!==g.filmOffset&&(t.filmOffset=g.filmOffset),void 0!==g.view&&(t.view=Object.assign({},g.view));break;case"OrthographicCamera":t=new Xc(g.left,g.right,g.top,g.bottom,g.near,g.far),void 0!==g.zoom&&(t.zoom=g.zoom),void 0!==g.view&&(t.view=Object.assign({},g.view));break;case"AmbientLight":t=new wc(g.color,g.intensity);break;case"DirectionalLight":t=new Hc(g.color,g.intensity);break;case"PointLight":t=new Yc(g.color,g.intensity,g.distance,g.decay);break;case"RectAreaLight":t=new Kc(g.color,g.intensity,g.width,g.height);break;case"SpotLight":t=new pc(g.color,g.intensity,g.distance,g.angle,g.penumbra,g.decay);break;case"HemisphereLight":t=new Gc(g.color,g.groundColor,g.intensity);break;case"LightProbe":t=(new Nc).fromJSON(g);break;case"SkinnedMesh":A=o(g.geometry),i=n(g.material),t=new wn(A,i),void 0!==g.bindMode&&(t.bindMode=g.bindMode),void 0!==g.bindMatrix&&t.bindMatrix.fromArray(g.bindMatrix),void 0!==g.skeleton&&(t.skeleton=g.skeleton);break;case"Mesh":A=o(g.geometry),i=n(g.material),t=new BA(A,i);break;case"InstancedMesh":A=o(g.geometry),i=n(g.material);const I=g.count,C=g.instanceMatrix,e=g.instanceColor;t=new Ln(A,i,I),t.instanceMatrix=new Ft(new Float32Array(C.array),16),void 0!==e&&(t.instanceColor=new Ft(new Float32Array(e.array),e.itemSize));break;case"LOD":t=new Vn;break;case"Line":t=new jn(o(g.geometry),n(g.material));break;case"LineLoop":t=new _n(o(g.geometry),n(g.material));break;case"LineSegments":t=new Pn(o(g.geometry),n(g.material));break;case"PointCloud":case"Points":t=new el(o(g.geometry),n(g.material));break;case"Sprite":t=new Zn(n(g.material));break;case"Group":t=new jo;break;case"Bone":t=new Kn;break;default:t=new ot}if(t.uuid=g.uuid,void 0!==g.name&&(t.name=g.name),void 0!==g.matrix?(t.matrix.fromArray(g.matrix),void 0!==g.matrixAutoUpdate&&(t.matrixAutoUpdate=g.matrixAutoUpdate),t.matrixAutoUpdate&&t.matrix.decompose(t.position,t.quaternion,t.scale)):(void 0!==g.position&&t.position.fromArray(g.position),void 0!==g.rotation&&t.rotation.fromArray(g.rotation),void 0!==g.quaternion&&t.quaternion.fromArray(g.quaternion),void 0!==g.scale&&t.scale.fromArray(g.scale)),void 0!==g.castShadow&&(t.castShadow=g.castShadow),void 0!==g.receiveShadow&&(t.receiveShadow=g.receiveShadow),g.shadow&&(void 0!==g.shadow.bias&&(t.shadow.bias=g.shadow.bias),void 0!==g.shadow.normalBias&&(t.shadow.normalBias=g.shadow.normalBias),void 0!==g.shadow.radius&&(t.shadow.radius=g.shadow.radius),void 0!==g.shadow.mapSize&&t.shadow.mapSize.fromArray(g.shadow.mapSize),void 0!==g.shadow.camera&&(t.shadow.camera=this.parseObject(g.shadow.camera))),void 0!==g.visible&&(t.visible=g.visible),void 0!==g.frustumCulled&&(t.frustumCulled=g.frustumCulled),void 0!==g.renderOrder&&(t.renderOrder=g.renderOrder),void 0!==g.userData&&(t.userData=g.userData),void 0!==g.layers&&(t.layers.mask=g.layers),void 0!==g.children){const A=g.children;for(let g=0;g<A.length;g++)t.add(this.parseObject(A[g],I,C,e))}if(void 0!==g.animations){const I=g.animations;for(let g=0;g<I.length;g++){const C=I[g];t.animations.push(e[C])}}if("LOD"===g.type){void 0!==g.autoUpdate&&(t.autoUpdate=g.autoUpdate);const I=g.levels;for(let g=0;g<I.length;g++){const C=I[g],e=t.getObjectByProperty("uuid",C.object);void 0!==e&&t.addLevel(e,C.distance)}}return t}bindSkeletons(g,I){0!==Object.keys(I).length&&g.traverse((function(g){if(!0===g.isSkinnedMesh&&void 0!==g.skeleton){const C=I[g.skeleton];void 0===C?console.warn("THREE.ObjectLoader: No skeleton found with UUID:",g.skeleton):g.bind(C,g.bindMatrix)}}))}setTexturePath(g){return console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath()."),this.setResourcePath(g)}}const kc={UVMapping:tg,CubeReflectionMapping:Ag,CubeRefractionMapping:ig,EquirectangularReflectionMapping:og,EquirectangularRefractionMapping:ng,CubeUVReflectionMapping:lg,CubeUVRefractionMapping:ag},Mc={RepeatWrapping:cg,ClampToEdgeWrapping:sg,MirroredRepeatWrapping:dg},Qc={NearestFilter:bg,NearestMipmapNearestFilter:rg,NearestMipmapLinearFilter:hg,LinearFilter:ug,LinearMipmapNearestFilter:Bg,LinearMipmapLinearFilter:pg};class Uc extends fa{constructor(g){super(g),"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(g){return this.options=g,this}load(g,I,C,e){void 0===g&&(g=""),void 0!==this.path&&(g=this.path+g),g=this.manager.resolveURL(g);const t=this,A=Na.get(g);if(void 0!==A)return t.manager.itemStart(g),setTimeout((function(){I&&I(A),t.manager.itemEnd(g)}),0),A;const i={};i.credentials="anonymous"===this.crossOrigin?"same-origin":"include",i.headers=this.requestHeader,fetch(g,i).then((function(g){return g.blob()})).then((function(g){return createImageBitmap(g,Object.assign(t.options,{colorSpaceConversion:"none"}))})).then((function(C){Na.add(g,C),I&&I(C),t.manager.itemEnd(g)})).catch((function(I){e&&e(I),t.manager.itemError(g),t.manager.itemEnd(g)})),t.manager.itemStart(g)}}Uc.prototype.isImageBitmapLoader=!0;class Tc{constructor(){this.type="ShapePath",this.color=new wt,this.subPaths=[],this.currentPath=null}moveTo(g,I){return this.currentPath=new dc,this.subPaths.push(this.currentPath),this.currentPath.moveTo(g,I),this}lineTo(g,I){return this.currentPath.lineTo(g,I),this}quadraticCurveTo(g,I,C,e){return this.currentPath.quadraticCurveTo(g,I,C,e),this}bezierCurveTo(g,I,C,e,t,A){return this.currentPath.bezierCurveTo(g,I,C,e,t,A),this}splineThru(g){return this.currentPath.splineThru(g),this}toShapes(g,I){function C(g){const I=[];for(let C=0,e=g.length;C<e;C++){const e=g[C],t=new bc;t.curves=e.curves,I.push(t)}return I}function e(g,I){const C=I.length;let e=!1;for(let t=C-1,A=0;A<C;t=A++){let C=I[t],i=I[A],o=i.x-C.x,n=i.y-C.y;if(Math.abs(n)>Number.EPSILON){if(n<0&&(C=I[A],o=-o,i=I[t],n=-n),g.y<C.y||g.y>i.y)continue;if(g.y===C.y){if(g.x===C.x)return!0}else{const I=n*(g.x-C.x)-o*(g.y-C.y);if(0===I)return!0;if(I<0)continue;e=!e}}else{if(g.y!==C.y)continue;if(i.x<=g.x&&g.x<=C.x||C.x<=g.x&&g.x<=i.x)return!0}}return e}const t=Ql.isClockWise,A=this.subPaths;if(0===A.length)return[];if(!0===I)return C(A);let i,o,n;const l=[];if(1===A.length)return o=A[0],n=new bc,n.curves=o.curves,l.push(n),l;let a=!t(A[0].getPoints());a=g?!a:a;const c=[],s=[];let d,b,r=[],G=0;s[G]=void 0,r[G]=[];for(let I=0,C=A.length;I<C;I++)o=A[I],d=o.getPoints(),i=t(d),i=g?!i:i,i?(!a&&s[G]&&G++,s[G]={s:new bc,p:d},s[G].s.curves=o.curves,a&&G++,r[G]=[]):r[G].push({h:o,p:d[0]});if(!s[0])return C(A);if(s.length>1){let g=!1;const I=[];for(let g=0,I=s.length;g<I;g++)c[g]=[];for(let C=0,t=s.length;C<t;C++){const t=r[C];for(let A=0;A<t.length;A++){const i=t[A];let o=!0;for(let t=0;t<s.length;t++)e(i.p,s[t].p)&&(C!==t&&I.push({froms:C,tos:t,hole:A}),o?(o=!1,c[t].push(i)):g=!0);o&&c[C].push(i)}}I.length>0&&(g||(r=c))}for(let g=0,I=s.length;g<I;g++){n=s[g].s,l.push(n),b=r[g];for(let g=0,I=b.length;g<I;g++)n.holes.push(b[g].h)}return l}}class Ec{constructor(g){this.type="Font",this.data=g}generateShapes(g,I=100){const C=[],e=function(g,I,C){const e=Array.from(g),t=I/C.resolution,A=(C.boundingBox.yMax-C.boundingBox.yMin+C.underlineThickness)*t,i=[];let o=0,n=0;for(let g=0;g<e.length;g++){const I=e[g];if("\n"===I)o=0,n-=A;else{const g=jc(I,t,o,n,C);o+=g.offsetX,i.push(g.path)}}return i}(g,I,this.data);for(let g=0,I=e.length;g<I;g++)Array.prototype.push.apply(C,e[g].toShapes());return C}}function jc(g,I,C,e,t){const A=t.glyphs[g]||t.glyphs["?"];if(!A)return void console.error('THREE.Font: character "'+g+'" does not exists in font family '+t.familyName+".");const i=new Tc;let o,n,l,a,c,s,d,b;if(A.o){const g=A._cachedOutline||(A._cachedOutline=A.o.split(" "));for(let t=0,A=g.length;t<A;)switch(g[t++]){case"m":o=g[t++]*I+C,n=g[t++]*I+e,i.moveTo(o,n);break;case"l":o=g[t++]*I+C,n=g[t++]*I+e,i.lineTo(o,n);break;case"q":l=g[t++]*I+C,a=g[t++]*I+e,c=g[t++]*I+C,s=g[t++]*I+e,i.quadraticCurveTo(c,s,l,a);break;case"b":l=g[t++]*I+C,a=g[t++]*I+e,c=g[t++]*I+C,s=g[t++]*I+e,d=g[t++]*I+C,b=g[t++]*I+e,i.bezierCurveTo(c,s,d,b,l,a)}}return{offsetX:A.ha*I,path:i}}Ec.prototype.isFont=!0;class Dc extends fa{constructor(g){super(g)}load(g,I,C,e){const t=this,A=new Ja(this.manager);A.setPath(this.path),A.setRequestHeader(this.requestHeader),A.setWithCredentials(t.withCredentials),A.load(g,(function(g){let C;try{C=JSON.parse(g)}catch(I){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),C=JSON.parse(g.substring(65,g.length-2))}const e=t.parse(C);I&&I(e)}),C,e)}parse(g){return new Ec(g)}}let Oc;const Pc={getContext:function(){return void 0===Oc&&(Oc=new(window.AudioContext||window.webkitAudioContext)),Oc},setContext:function(g){Oc=g}};class _c extends fa{constructor(g){super(g)}load(g,I,C,e){const t=this,A=new Ja(this.manager);A.setResponseType("arraybuffer"),A.setPath(this.path),A.setRequestHeader(this.requestHeader),A.setWithCredentials(this.withCredentials),A.load(g,(function(C){try{const g=C.slice(0);Pc.getContext().decodeAudioData(g,(function(g){I(g)}))}catch(I){e?e(I):console.error(I),t.manager.itemError(g)}}),C,e)}}class qc extends Nc{constructor(g,I,C=1){super(void 0,C);const e=(new wt).set(g),t=(new wt).set(I),A=new Ae(e.r,e.g,e.b),i=new Ae(t.r,t.g,t.b),o=Math.sqrt(Math.PI),n=o*Math.sqrt(.75);this.sh.coefficients[0].copy(A).add(i).multiplyScalar(o),this.sh.coefficients[1].copy(A).sub(i).multiplyScalar(n)}}qc.prototype.isHemisphereLightProbe=!0;class $c extends Nc{constructor(g,I=1){super(void 0,I);const C=(new wt).set(g);this.sh.coefficients[0].set(C.r,C.g,C.b).multiplyScalar(2*Math.sqrt(Math.PI))}}$c.prototype.isAmbientLightProbe=!0;const gs=new ze,Is=new ze;class Cs{constructor(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new XA,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new XA,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(g){const I=this._cache;if(I.focus!==g.focus||I.fov!==g.fov||I.aspect!==g.aspect*this.aspect||I.near!==g.near||I.far!==g.far||I.zoom!==g.zoom||I.eyeSep!==this.eyeSep){I.focus=g.focus,I.fov=g.fov,I.aspect=g.aspect*this.aspect,I.near=g.near,I.far=g.far,I.zoom=g.zoom,I.eyeSep=this.eyeSep;const C=g.projectionMatrix.clone(),e=I.eyeSep/2,t=e*I.near/I.focus,A=I.near*Math.tan(xC*I.fov*.5)/I.zoom;let i,o;Is.elements[12]=-e,gs.elements[12]=e,i=-A*I.aspect+t,o=A*I.aspect+t,C.elements[0]=2*I.near/(o-i),C.elements[8]=(o+i)/(o-i),this.cameraL.projectionMatrix.copy(C),i=-A*I.aspect-t,o=A*I.aspect-t,C.elements[0]=2*I.near/(o-i),C.elements[8]=(o+i)/(o-i),this.cameraR.projectionMatrix.copy(C)}this.cameraL.matrixWorld.copy(g.matrixWorld).multiply(Is),this.cameraR.matrixWorld.copy(g.matrixWorld).multiply(gs)}}class es{constructor(g=!0){this.autoStart=g,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=ts(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let g=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const I=ts();g=(I-this.oldTime)/1e3,this.oldTime=I,this.elapsedTime+=g}return g}}function ts(){return("undefined"==typeof performance?Date:performance).now()}const As=new Ae,is=new te,os=new Ae,ns=new Ae;class ls extends ot{constructor(){super(),this.type="AudioListener",this.context=Pc.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new es}getInput(){return this.gain}removeFilter(){return null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(g){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=g,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(g){return this.gain.gain.setTargetAtTime(g,this.context.currentTime,.01),this}updateMatrixWorld(g){super.updateMatrixWorld(g);const I=this.context.listener,C=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(As,is,os),ns.set(0,0,-1).applyQuaternion(is),I.positionX){const g=this.context.currentTime+this.timeDelta;I.positionX.linearRampToValueAtTime(As.x,g),I.positionY.linearRampToValueAtTime(As.y,g),I.positionZ.linearRampToValueAtTime(As.z,g),I.forwardX.linearRampToValueAtTime(ns.x,g),I.forwardY.linearRampToValueAtTime(ns.y,g),I.forwardZ.linearRampToValueAtTime(ns.z,g),I.upX.linearRampToValueAtTime(C.x,g),I.upY.linearRampToValueAtTime(C.y,g),I.upZ.linearRampToValueAtTime(C.z,g)}else I.setPosition(As.x,As.y,As.z),I.setOrientation(ns.x,ns.y,ns.z,C.x,C.y,C.z)}}class as extends ot{constructor(g){super(),this.type="Audio",this.listener=g,this.context=g.context,this.gain=this.context.createGain(),this.gain.connect(g.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(g){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=g,this.connect(),this}setMediaElementSource(g){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(g),this.connect(),this}setMediaStreamSource(g){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(g),this.connect(),this}setBuffer(g){return this.buffer=g,this.sourceType="buffer",this.autoplay&&this.play(),this}play(g=0){if(!0===this.isPlaying)return void console.warn("THREE.Audio: Audio is already playing.");if(!1===this.hasPlaybackControl)return void console.warn("THREE.Audio: this Audio has no playback control.");this._startedAt=this.context.currentTime+g;const I=this.context.createBufferSource();return I.buffer=this.buffer,I.loop=this.loop,I.loopStart=this.loopStart,I.loopEnd=this.loopEnd,I.onended=this.onEnded.bind(this),I.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=I,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,!0===this.loop&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")}stop(){if(!1!==this.hasPlaybackControl)return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let g=1,I=this.filters.length;g<I;g++)this.filters[g-1].connect(this.filters[g]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let g=1,I=this.filters.length;g<I;g++)this.filters[g-1].disconnect(this.filters[g]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(g){return g||(g=[]),!0===this._connected?(this.disconnect(),this.filters=g.slice(),this.connect()):this.filters=g.slice(),this}setDetune(g){if(this.detune=g,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(g){return this.setFilters(g?[g]:[])}setPlaybackRate(g){if(!1!==this.hasPlaybackControl)return this.playbackRate=g,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn("THREE.Audio: this Audio has no playback control.")}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(g){if(!1!==this.hasPlaybackControl)return this.loop=g,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")}setLoopStart(g){return this.loopStart=g,this}setLoopEnd(g){return this.loopEnd=g,this}getVolume(){return this.gain.gain.value}setVolume(g){return this.gain.gain.setTargetAtTime(g,this.context.currentTime,.01),this}}const cs=new Ae,ss=new te,ds=new Ae,bs=new Ae;class rs extends as{constructor(g){super(g),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(g){return this.panner.refDistance=g,this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(g){return this.panner.rolloffFactor=g,this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(g){return this.panner.distanceModel=g,this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(g){return this.panner.maxDistance=g,this}setDirectionalCone(g,I,C){return this.panner.coneInnerAngle=g,this.panner.coneOuterAngle=I,this.panner.coneOuterGain=C,this}updateMatrixWorld(g){if(super.updateMatrixWorld(g),!0===this.hasPlaybackControl&&!1===this.isPlaying)return;this.matrixWorld.decompose(cs,ss,ds),bs.set(0,0,1).applyQuaternion(ss);const I=this.panner;if(I.positionX){const g=this.context.currentTime+this.listener.timeDelta;I.positionX.linearRampToValueAtTime(cs.x,g),I.positionY.linearRampToValueAtTime(cs.y,g),I.positionZ.linearRampToValueAtTime(cs.z,g),I.orientationX.linearRampToValueAtTime(bs.x,g),I.orientationY.linearRampToValueAtTime(bs.y,g),I.orientationZ.linearRampToValueAtTime(bs.z,g)}else I.setPosition(cs.x,cs.y,cs.z),I.setOrientation(bs.x,bs.y,bs.z)}}class Gs{constructor(g,I=2048){this.analyser=g.context.createAnalyser(),this.analyser.fftSize=I,this.data=new Uint8Array(this.analyser.frequencyBinCount),g.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let g=0;const I=this.getFrequencyData();for(let C=0;C<I.length;C++)g+=I[C];return g/I.length}}class hs{constructor(g,I,C){let e,t,A;switch(this.binding=g,this.valueSize=C,I){case"quaternion":e=this._slerp,t=this._slerpAdditive,A=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(6*C),this._workIndex=5;break;case"string":case"bool":e=this._select,t=this._select,A=this._setAdditiveIdentityOther,this.buffer=new Array(5*C);break;default:e=this._lerp,t=this._lerpAdditive,A=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(5*C)}this._mixBufferRegion=e,this._mixBufferRegionAdditive=t,this._setIdentity=A,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(g,I){const C=this.buffer,e=this.valueSize,t=g*e+e;let A=this.cumulativeWeight;if(0===A){for(let g=0;g!==e;++g)C[t+g]=C[g];A=I}else{A+=I;const g=I/A;this._mixBufferRegion(C,t,0,g,e)}this.cumulativeWeight=A}accumulateAdditive(g){const I=this.buffer,C=this.valueSize,e=C*this._addIndex;0===this.cumulativeWeightAdditive&&this._setIdentity(),this._mixBufferRegionAdditive(I,e,0,g,C),this.cumulativeWeightAdditive+=g}apply(g){const I=this.valueSize,C=this.buffer,e=g*I+I,t=this.cumulativeWeight,A=this.cumulativeWeightAdditive,i=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,t<1){const g=I*this._origIndex;this._mixBufferRegion(C,e,g,1-t,I)}A>0&&this._mixBufferRegionAdditive(C,e,this._addIndex*I,1,I);for(let g=I,t=I+I;g!==t;++g)if(C[g]!==C[g+I]){i.setValue(C,e);break}}saveOriginalState(){const g=this.binding,I=this.buffer,C=this.valueSize,e=C*this._origIndex;g.getValue(I,e);for(let g=C,t=e;g!==t;++g)I[g]=I[e+g%C];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const g=3*this.valueSize;this.binding.setValue(this.buffer,g)}_setAdditiveIdentityNumeric(){const g=this._addIndex*this.valueSize,I=g+this.valueSize;for(let C=g;C<I;C++)this.buffer[C]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const g=this._origIndex*this.valueSize,I=this._addIndex*this.valueSize;for(let C=0;C<this.valueSize;C++)this.buffer[I+C]=this.buffer[g+C]}_select(g,I,C,e,t){if(e>=.5)for(let e=0;e!==t;++e)g[I+e]=g[C+e]}_slerp(g,I,C,e){te.slerpFlat(g,I,g,I,g,C,e)}_slerpAdditive(g,I,C,e,t){const A=this._workIndex*t;te.multiplyQuaternionsFlat(g,A,g,I,g,C),te.slerpFlat(g,I,g,I,g,A,e)}_lerp(g,I,C,e,t){const A=1-e;for(let i=0;i!==t;++i){const t=I+i;g[t]=g[t]*A+g[C+i]*e}}_lerpAdditive(g,I,C,e,t){for(let A=0;A!==t;++A){const t=I+A;g[t]=g[t]+g[C+A]*e}}}const ms=new RegExp("[\\[\\]\\.:\\/]","g"),us="[^\\[\\]\\.:\\/]",Bs="[^"+"\\[\\]\\.:\\/".replace("\\.","")+"]",Zs=/((?:WC+[\/:])*)/.source.replace("WC",us),ps=/(WCOD+)?/.source.replace("WCOD",Bs),Ws=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",us),ys=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",us),Vs=new RegExp("^"+Zs+ps+Ws+ys+"$"),vs=["material","materials","bones"];class Ys{constructor(g,I,C){this.path=I,this.parsedPath=C||Ys.parseTrackName(I),this.node=Ys.findNode(g,this.parsedPath.nodeName)||g,this.rootNode=g,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(g,I,C){return g&&g.isAnimationObjectGroup?new Ys.Composite(g,I,C):new Ys(g,I,C)}static sanitizeNodeName(g){return g.replace(/\s/g,"_").replace(ms,"")}static parseTrackName(g){const I=Vs.exec(g);if(!I)throw new Error("PropertyBinding: Cannot parse trackName: "+g);const C={nodeName:I[2],objectName:I[3],objectIndex:I[4],propertyName:I[5],propertyIndex:I[6]},e=C.nodeName&&C.nodeName.lastIndexOf(".");if(void 0!==e&&-1!==e){const g=C.nodeName.substring(e+1);-1!==vs.indexOf(g)&&(C.nodeName=C.nodeName.substring(0,e),C.objectName=g)}if(null===C.propertyName||0===C.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+g);return C}static findNode(g,I){if(!I||""===I||"."===I||-1===I||I===g.name||I===g.uuid)return g;if(g.skeleton){const C=g.skeleton.getBoneByName(I);if(void 0!==C)return C}if(g.children){const C=function(g){for(let e=0;e<g.length;e++){const t=g[e];if(t.name===I||t.uuid===I)return t;const A=C(t.children);if(A)return A}return null},e=C(g.children);if(e)return e}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(g,I){g[I]=this.node[this.propertyName]}_getValue_array(g,I){const C=this.resolvedProperty;for(let e=0,t=C.length;e!==t;++e)g[I++]=C[e]}_getValue_arrayElement(g,I){g[I]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(g,I){this.resolvedProperty.toArray(g,I)}_setValue_direct(g,I){this.targetObject[this.propertyName]=g[I]}_setValue_direct_setNeedsUpdate(g,I){this.targetObject[this.propertyName]=g[I],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(g,I){this.targetObject[this.propertyName]=g[I],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(g,I){const C=this.resolvedProperty;for(let e=0,t=C.length;e!==t;++e)C[e]=g[I++]}_setValue_array_setNeedsUpdate(g,I){const C=this.resolvedProperty;for(let e=0,t=C.length;e!==t;++e)C[e]=g[I++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(g,I){const C=this.resolvedProperty;for(let e=0,t=C.length;e!==t;++e)C[e]=g[I++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(g,I){this.resolvedProperty[this.propertyIndex]=g[I]}_setValue_arrayElement_setNeedsUpdate(g,I){this.resolvedProperty[this.propertyIndex]=g[I],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(g,I){this.resolvedProperty[this.propertyIndex]=g[I],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(g,I){this.resolvedProperty.fromArray(g,I)}_setValue_fromArray_setNeedsUpdate(g,I){this.resolvedProperty.fromArray(g,I),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(g,I){this.resolvedProperty.fromArray(g,I),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(g,I){this.bind(),this.getValue(g,I)}_setValue_unbound(g,I){this.bind(),this.setValue(g,I)}bind(){let g=this.node;const I=this.parsedPath,C=I.objectName,e=I.propertyName;let t=I.propertyIndex;if(g||(g=Ys.findNode(this.rootNode,I.nodeName)||this.rootNode,this.node=g),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!g)return void console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");if(C){let e=I.objectIndex;switch(C){case"materials":if(!g.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!g.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);g=g.material.materials;break;case"bones":if(!g.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);g=g.skeleton.bones;for(let I=0;I<g.length;I++)if(g[I].name===e){e=I;break}break;default:if(void 0===g[C])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);g=g[C]}if(void 0!==e){if(void 0===g[e])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,g);g=g[e]}}const A=g[e];if(void 0===A){const C=I.nodeName;return void console.error("THREE.PropertyBinding: Trying to update property for track: "+C+"."+e+" but it wasn't found.",g)}let i=this.Versioning.None;this.targetObject=g,void 0!==g.needsUpdate?i=this.Versioning.NeedsUpdate:void 0!==g.matrixWorldNeedsUpdate&&(i=this.Versioning.MatrixWorldNeedsUpdate);let o=this.BindingType.Direct;if(void 0!==t){if("morphTargetInfluences"===e){if(!g.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(!g.geometry.isBufferGeometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.",this);if(!g.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);void 0!==g.morphTargetDictionary[t]&&(t=g.morphTargetDictionary[t])}o=this.BindingType.ArrayElement,this.resolvedProperty=A,this.propertyIndex=t}else void 0!==A.fromArray&&void 0!==A.toArray?(o=this.BindingType.HasFromToArray,this.resolvedProperty=A):Array.isArray(A)?(o=this.BindingType.EntireArray,this.resolvedProperty=A):this.propertyName=e;this.getValue=this.GetterByBindingType[o],this.setValue=this.SetterByBindingTypeAndVersioning[o][i]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}Ys.Composite=class{constructor(g,I,C){const e=C||Ys.parseTrackName(I);this._targetGroup=g,this._bindings=g.subscribe_(I,e)}getValue(g,I){this.bind();const C=this._targetGroup.nCachedObjects_,e=this._bindings[C];void 0!==e&&e.getValue(g,I)}setValue(g,I){const C=this._bindings;for(let e=this._targetGroup.nCachedObjects_,t=C.length;e!==t;++e)C[e].setValue(g,I)}bind(){const g=this._bindings;for(let I=this._targetGroup.nCachedObjects_,C=g.length;I!==C;++I)g[I].bind()}unbind(){const g=this._bindings;for(let I=this._targetGroup.nCachedObjects_,C=g.length;I!==C;++I)g[I].unbind()}},Ys.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Ys.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},Ys.prototype.GetterByBindingType=[Ys.prototype._getValue_direct,Ys.prototype._getValue_array,Ys.prototype._getValue_arrayElement,Ys.prototype._getValue_toArray],Ys.prototype.SetterByBindingTypeAndVersioning=[[Ys.prototype._setValue_direct,Ys.prototype._setValue_direct_setNeedsUpdate,Ys.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[Ys.prototype._setValue_array,Ys.prototype._setValue_array_setNeedsUpdate,Ys.prototype._setValue_array_setMatrixWorldNeedsUpdate],[Ys.prototype._setValue_arrayElement,Ys.prototype._setValue_arrayElement_setNeedsUpdate,Ys.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[Ys.prototype._setValue_fromArray,Ys.prototype._setValue_fromArray_setNeedsUpdate,Ys.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class Xs{constructor(){this.uuid=LC(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const g={};this._indicesByUUID=g;for(let I=0,C=arguments.length;I!==C;++I)g[arguments[I].uuid]=I;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};const I=this;this.stats={objects:{get total(){return I._objects.length},get inUse(){return this.total-I.nCachedObjects_}},get bindingsPerObject(){return I._bindings.length}}}add(){const g=this._objects,I=this._indicesByUUID,C=this._paths,e=this._parsedPaths,t=this._bindings,A=t.length;let i,o=g.length,n=this.nCachedObjects_;for(let l=0,a=arguments.length;l!==a;++l){const a=arguments[l],c=a.uuid;let s=I[c];if(void 0===s){s=o++,I[c]=s,g.push(a);for(let g=0,I=A;g!==I;++g)t[g].push(new Ys(a,C[g],e[g]))}else if(s<n){i=g[s];const o=--n,l=g[o];I[l.uuid]=s,g[s]=l,I[c]=o,g[o]=a;for(let g=0,I=A;g!==I;++g){const I=t[g],A=I[o];let i=I[s];I[s]=A,void 0===i&&(i=new Ys(a,C[g],e[g])),I[o]=i}}else g[s]!==i&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=n}remove(){const g=this._objects,I=this._indicesByUUID,C=this._bindings,e=C.length;let t=this.nCachedObjects_;for(let A=0,i=arguments.length;A!==i;++A){const i=arguments[A],o=i.uuid,n=I[o];if(void 0!==n&&n>=t){const A=t++,l=g[A];I[l.uuid]=n,g[n]=l,I[o]=A,g[A]=i;for(let g=0,I=e;g!==I;++g){const I=C[g],e=I[A],t=I[n];I[n]=e,I[A]=t}}}this.nCachedObjects_=t}uncache(){const g=this._objects,I=this._indicesByUUID,C=this._bindings,e=C.length;let t=this.nCachedObjects_,A=g.length;for(let i=0,o=arguments.length;i!==o;++i){const o=arguments[i].uuid,n=I[o];if(void 0!==n)if(delete I[o],n<t){const i=--t,o=g[i],l=--A,a=g[l];I[o.uuid]=n,g[n]=o,I[a.uuid]=i,g[i]=a,g.pop();for(let g=0,I=e;g!==I;++g){const I=C[g],e=I[i],t=I[l];I[n]=e,I[i]=t,I.pop()}}else{const t=--A,i=g[t];t>0&&(I[i.uuid]=n),g[n]=i,g.pop();for(let g=0,I=e;g!==I;++g){const I=C[g];I[n]=I[t],I.pop()}}}this.nCachedObjects_=t}subscribe_(g,I){const C=this._bindingsIndicesByPath;let e=C[g];const t=this._bindings;if(void 0!==e)return t[e];const A=this._paths,i=this._parsedPaths,o=this._objects,n=o.length,l=this.nCachedObjects_,a=new Array(n);e=t.length,C[g]=e,A.push(g),i.push(I),t.push(a);for(let C=l,e=o.length;C!==e;++C){const e=o[C];a[C]=new Ys(e,g,I)}return a}unsubscribe_(g){const I=this._bindingsIndicesByPath,C=I[g];if(void 0!==C){const e=this._paths,t=this._parsedPaths,A=this._bindings,i=A.length-1,o=A[i];I[g[i]]=C,A[C]=o,A.pop(),t[C]=t[i],t.pop(),e[C]=e[i],e.pop()}}}Xs.prototype.isAnimationObjectGroup=!0;class Rs{constructor(g,I,C=null,e=I.blendMode){this._mixer=g,this._clip=I,this._localRoot=C,this.blendMode=e;const t=I.tracks,A=t.length,i=new Array(A),o={endingStart:MI,endingEnd:MI};for(let g=0;g!==A;++g){const I=t[g].createInterpolant(null);i[g]=I,I.settings=o}this._interpolantSettings=o,this._interpolants=i,this._propertyBindings=new Array(A),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=fI,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(g){return this._startTime=g,this}setLoop(g,I){return this.loop=g,this.repetitions=I,this}setEffectiveWeight(g){return this.weight=g,this._effectiveWeight=this.enabled?g:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(g){return this._scheduleFading(g,0,1)}fadeOut(g){return this._scheduleFading(g,1,0)}crossFadeFrom(g,I,C){if(g.fadeOut(I),this.fadeIn(I),C){const C=this._clip.duration,e=g._clip.duration,t=e/C,A=C/e;g.warp(1,t,I),this.warp(A,1,I)}return this}crossFadeTo(g,I,C){return g.crossFadeFrom(this,I,C)}stopFading(){const g=this._weightInterpolant;return null!==g&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(g)),this}setEffectiveTimeScale(g){return this.timeScale=g,this._effectiveTimeScale=this.paused?0:g,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(g){return this.timeScale=this._clip.duration/g,this.stopWarping()}syncWith(g){return this.time=g.time,this.timeScale=g.timeScale,this.stopWarping()}halt(g){return this.warp(this._effectiveTimeScale,0,g)}warp(g,I,C){const e=this._mixer,t=e.time,A=this.timeScale;let i=this._timeScaleInterpolant;null===i&&(i=e._lendControlInterpolant(),this._timeScaleInterpolant=i);const o=i.parameterPositions,n=i.sampleValues;return o[0]=t,o[1]=t+C,n[0]=g/A,n[1]=I/A,this}stopWarping(){const g=this._timeScaleInterpolant;return null!==g&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(g)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(g,I,C,e){if(!this.enabled)return void this._updateWeight(g);const t=this._startTime;if(null!==t){const e=(g-t)*C;if(e<0||0===C)return;this._startTime=null,I=C*e}I*=this._updateTimeScale(g);const A=this._updateTime(I),i=this._updateWeight(g);if(i>0){const g=this._interpolants,I=this._propertyBindings;switch(this.blendMode){case EI:for(let C=0,e=g.length;C!==e;++C)g[C].evaluate(A),I[C].accumulateAdditive(i);break;case TI:default:for(let C=0,t=g.length;C!==t;++C)g[C].evaluate(A),I[C].accumulate(e,i)}}}_updateWeight(g){let I=0;if(this.enabled){I=this.weight;const C=this._weightInterpolant;if(null!==C){const e=C.evaluate(g)[0];I*=e,g>C.parameterPositions[1]&&(this.stopFading(),0===e&&(this.enabled=!1))}}return this._effectiveWeight=I,I}_updateTimeScale(g){let I=0;if(!this.paused){I=this.timeScale;const C=this._timeScaleInterpolant;null!==C&&(I*=C.evaluate(g)[0],g>C.parameterPositions[1]&&(this.stopWarping(),0===I?this.paused=!0:this.timeScale=I))}return this._effectiveTimeScale=I,I}_updateTime(g){const I=this._clip.duration,C=this.loop;let e=this.time+g,t=this._loopCount;const A=C===xI;if(0===g)return-1===t?e:A&&1==(1&t)?I-e:e;if(C===zI){-1===t&&(this._loopCount=0,this._setEndings(!0,!0,!1));g:{if(e>=I)e=I;else{if(!(e<0)){this.time=e;break g}e=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=e,this._mixer.dispatchEvent({type:"finished",action:this,direction:g<0?-1:1})}}else{if(-1===t&&(g>=0?(t=0,this._setEndings(!0,0===this.repetitions,A)):this._setEndings(0===this.repetitions,!0,A)),e>=I||e<0){const C=Math.floor(e/I);e-=I*C,t+=Math.abs(C);const i=this.repetitions-t;if(i<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,e=g>0?I:0,this.time=e,this._mixer.dispatchEvent({type:"finished",action:this,direction:g>0?1:-1});else{if(1===i){const I=g<0;this._setEndings(I,!I,A)}else this._setEndings(!1,!1,A);this._loopCount=t,this.time=e,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:C})}}else this.time=e;if(A&&1==(1&t))return I-e}return e}_setEndings(g,I,C){const e=this._interpolantSettings;C?(e.endingStart=QI,e.endingEnd=QI):(e.endingStart=g?this.zeroSlopeAtStart?QI:MI:UI,e.endingEnd=I?this.zeroSlopeAtEnd?QI:MI:UI)}_scheduleFading(g,I,C){const e=this._mixer,t=e.time;let A=this._weightInterpolant;null===A&&(A=e._lendControlInterpolant(),this._weightInterpolant=A);const i=A.parameterPositions,o=A.sampleValues;return i[0]=t,o[0]=I,i[1]=t+g,o[1]=C,this}}class Hs extends FC{constructor(g){super(),this._root=g,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(g,I){const C=g._localRoot||this._root,e=g._clip.tracks,t=e.length,A=g._propertyBindings,i=g._interpolants,o=C.uuid,n=this._bindingsByRootAndName;let l=n[o];void 0===l&&(l={},n[o]=l);for(let g=0;g!==t;++g){const t=e[g],n=t.name;let a=l[n];if(void 0!==a)A[g]=a;else{if(a=A[g],void 0!==a){null===a._cacheIndex&&(++a.referenceCount,this._addInactiveBinding(a,o,n));continue}const e=I&&I._propertyBindings[g].binding.parsedPath;a=new hs(Ys.create(C,n,e),t.ValueTypeName,t.getValueSize()),++a.referenceCount,this._addInactiveBinding(a,o,n),A[g]=a}i[g].resultBuffer=a.buffer}}_activateAction(g){if(!this._isActiveAction(g)){if(null===g._cacheIndex){const I=(g._localRoot||this._root).uuid,C=g._clip.uuid,e=this._actionsByClip[C];this._bindAction(g,e&&e.knownActions[0]),this._addInactiveAction(g,C,I)}const I=g._propertyBindings;for(let g=0,C=I.length;g!==C;++g){const C=I[g];0==C.useCount++&&(this._lendBinding(C),C.saveOriginalState())}this._lendAction(g)}}_deactivateAction(g){if(this._isActiveAction(g)){const I=g._propertyBindings;for(let g=0,C=I.length;g!==C;++g){const C=I[g];0==--C.useCount&&(C.restoreOriginalState(),this._takeBackBinding(C))}this._takeBackAction(g)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const g=this;this.stats={actions:{get total(){return g._actions.length},get inUse(){return g._nActiveActions}},bindings:{get total(){return g._bindings.length},get inUse(){return g._nActiveBindings}},controlInterpolants:{get total(){return g._controlInterpolants.length},get inUse(){return g._nActiveControlInterpolants}}}}_isActiveAction(g){const I=g._cacheIndex;return null!==I&&I<this._nActiveActions}_addInactiveAction(g,I,C){const e=this._actions,t=this._actionsByClip;let A=t[I];if(void 0===A)A={knownActions:[g],actionByRoot:{}},g._byClipCacheIndex=0,t[I]=A;else{const I=A.knownActions;g._byClipCacheIndex=I.length,I.push(g)}g._cacheIndex=e.length,e.push(g),A.actionByRoot[C]=g}_removeInactiveAction(g){const I=this._actions,C=I[I.length-1],e=g._cacheIndex;C._cacheIndex=e,I[e]=C,I.pop(),g._cacheIndex=null;const t=g._clip.uuid,A=this._actionsByClip,i=A[t],o=i.knownActions,n=o[o.length-1],l=g._byClipCacheIndex;n._byClipCacheIndex=l,o[l]=n,o.pop(),g._byClipCacheIndex=null,delete i.actionByRoot[(g._localRoot||this._root).uuid],0===o.length&&delete A[t],this._removeInactiveBindingsForAction(g)}_removeInactiveBindingsForAction(g){const I=g._propertyBindings;for(let g=0,C=I.length;g!==C;++g){const C=I[g];0==--C.referenceCount&&this._removeInactiveBinding(C)}}_lendAction(g){const I=this._actions,C=g._cacheIndex,e=this._nActiveActions++,t=I[e];g._cacheIndex=e,I[e]=g,t._cacheIndex=C,I[C]=t}_takeBackAction(g){const I=this._actions,C=g._cacheIndex,e=--this._nActiveActions,t=I[e];g._cacheIndex=e,I[e]=g,t._cacheIndex=C,I[C]=t}_addInactiveBinding(g,I,C){const e=this._bindingsByRootAndName,t=this._bindings;let A=e[I];void 0===A&&(A={},e[I]=A),A[C]=g,g._cacheIndex=t.length,t.push(g)}_removeInactiveBinding(g){const I=this._bindings,C=g.binding,e=C.rootNode.uuid,t=C.path,A=this._bindingsByRootAndName,i=A[e],o=I[I.length-1],n=g._cacheIndex;o._cacheIndex=n,I[n]=o,I.pop(),delete i[t],0===Object.keys(i).length&&delete A[e]}_lendBinding(g){const I=this._bindings,C=g._cacheIndex,e=this._nActiveBindings++,t=I[e];g._cacheIndex=e,I[e]=g,t._cacheIndex=C,I[C]=t}_takeBackBinding(g){const I=this._bindings,C=g._cacheIndex,e=--this._nActiveBindings,t=I[e];g._cacheIndex=e,I[e]=g,t._cacheIndex=C,I[C]=t}_lendControlInterpolant(){const g=this._controlInterpolants,I=this._nActiveControlInterpolants++;let C=g[I];return void 0===C&&(C=new pa(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),C.__cacheIndex=I,g[I]=C),C}_takeBackControlInterpolant(g){const I=this._controlInterpolants,C=g.__cacheIndex,e=--this._nActiveControlInterpolants,t=I[e];g.__cacheIndex=e,I[e]=g,t.__cacheIndex=C,I[C]=t}clipAction(g,I,C){const e=I||this._root,t=e.uuid;let A="string"==typeof g?Ka.findByName(e,g):g;const i=null!==A?A.uuid:g,o=this._actionsByClip[i];let n=null;if(void 0===C&&(C=null!==A?A.blendMode:TI),void 0!==o){const g=o.actionByRoot[t];if(void 0!==g&&g.blendMode===C)return g;n=o.knownActions[0],null===A&&(A=n._clip)}if(null===A)return null;const l=new Rs(this,A,I,C);return this._bindAction(l,n),this._addInactiveAction(l,i,t),l}existingAction(g,I){const C=I||this._root,e=C.uuid,t="string"==typeof g?Ka.findByName(C,g):g,A=t?t.uuid:g,i=this._actionsByClip[A];return void 0!==i&&i.actionByRoot[e]||null}stopAllAction(){const g=this._actions;for(let I=this._nActiveActions-1;I>=0;--I)g[I].stop();return this}update(g){g*=this.timeScale;const I=this._actions,C=this._nActiveActions,e=this.time+=g,t=Math.sign(g),A=this._accuIndex^=1;for(let i=0;i!==C;++i)I[i]._update(e,g,t,A);const i=this._bindings,o=this._nActiveBindings;for(let g=0;g!==o;++g)i[g].apply(A);return this}setTime(g){this.time=0;for(let g=0;g<this._actions.length;g++)this._actions[g].time=0;return this.update(g)}getRoot(){return this._root}uncacheClip(g){const I=this._actions,C=g.uuid,e=this._actionsByClip,t=e[C];if(void 0!==t){const g=t.knownActions;for(let C=0,e=g.length;C!==e;++C){const e=g[C];this._deactivateAction(e);const t=e._cacheIndex,A=I[I.length-1];e._cacheIndex=null,e._byClipCacheIndex=null,A._cacheIndex=t,I[t]=A,I.pop(),this._removeInactiveBindingsForAction(e)}delete e[C]}}uncacheRoot(g){const I=g.uuid,C=this._actionsByClip;for(const g in C){const e=C[g].actionByRoot[I];void 0!==e&&(this._deactivateAction(e),this._removeInactiveAction(e))}const e=this._bindingsByRootAndName[I];if(void 0!==e)for(const g in e){const I=e[g];I.restoreOriginalState(),this._removeInactiveBinding(I)}}uncacheAction(g,I){const C=this.existingAction(g,I);null!==C&&(this._deactivateAction(C),this._removeInactiveAction(C))}}Hs.prototype._controlInterpolantsResultBuffer=new Float32Array(1);class ws{constructor(g){"string"==typeof g&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),g=arguments[1]),this.value=g}clone(){return new ws(void 0===this.value.clone?this.value:this.value.clone())}}class Ks extends en{constructor(g,I,C=1){super(g,I),this.meshPerAttribute=C||1}copy(g){return super.copy(g),this.meshPerAttribute=g.meshPerAttribute,this}clone(g){const I=super.clone(g);return I.meshPerAttribute=this.meshPerAttribute,I}toJSON(g){const I=super.toJSON(g);return I.isInstancedInterleavedBuffer=!0,I.meshPerAttribute=this.meshPerAttribute,I}}Ks.prototype.isInstancedInterleavedBuffer=!0;class Ss{constructor(g,I,C,e,t){this.buffer=g,this.type=I,this.itemSize=C,this.elementSize=e,this.count=t,this.version=0}set needsUpdate(g){!0===g&&this.version++}setBuffer(g){return this.buffer=g,this}setType(g,I){return this.type=g,this.elementSize=I,this}setItemSize(g){return this.itemSize=g,this}setCount(g){return this.count=g,this}}Ss.prototype.isGLBufferAttribute=!0;class Ns{constructor(g,I,C=0,e=1/0){this.ray=new Fe(g,I),this.near=C,this.far=e,this.camera=null,this.layers=new je,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(g,I){this.ray.set(g,I)}setFromCamera(g,I){I&&I.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(I.matrixWorld),this.ray.direction.set(g.x,g.y,.5).unproject(I).sub(this.ray.origin).normalize(),this.camera=I):I&&I.isOrthographicCamera?(this.ray.origin.set(g.x,g.y,(I.near+I.far)/(I.near-I.far)).unproject(I),this.ray.direction.set(0,0,-1).transformDirection(I.matrixWorld),this.camera=I):console.error("THREE.Raycaster: Unsupported camera type: "+I.type)}intersectObject(g,I=!1,C=[]){return zs(g,this,C,I),C.sort(Fs),C}intersectObjects(g,I=!1,C=[]){for(let e=0,t=g.length;e<t;e++)zs(g[e],this,C,I);return C.sort(Fs),C}}function Fs(g,I){return g.distance-I.distance}function zs(g,I,C,e){if(g.layers.test(I.layers)&&g.raycast(I,C),!0===e){const e=g.children;for(let g=0,t=e.length;g<t;g++)zs(e[g],I,C,!0)}}class fs{constructor(g=1,I=0,C=0){return this.radius=g,this.phi=I,this.theta=C,this}set(g,I,C){return this.radius=g,this.phi=I,this.theta=C,this}copy(g){return this.radius=g.radius,this.phi=g.phi,this.theta=g.theta,this}makeSafe(){const g=1e-6;return this.phi=Math.max(g,Math.min(Math.PI-g,this.phi)),this}setFromVector3(g){return this.setFromCartesianCoords(g.x,g.y,g.z)}setFromCartesianCoords(g,I,C){return this.radius=Math.sqrt(g*g+I*I+C*C),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(g,C),this.phi=Math.acos(kC(I/this.radius,-1,1))),this}clone(){return(new this.constructor).copy(this)}}class xs{constructor(g=1,I=0,C=0){return this.radius=g,this.theta=I,this.y=C,this}set(g,I,C){return this.radius=g,this.theta=I,this.y=C,this}copy(g){return this.radius=g.radius,this.theta=g.theta,this.y=g.y,this}setFromVector3(g){return this.setFromCartesianCoords(g.x,g.y,g.z)}setFromCartesianCoords(g,I,C){return this.radius=Math.sqrt(g*g+C*C),this.theta=Math.atan2(g,C),this.y=I,this}clone(){return(new this.constructor).copy(this)}}const Js=new DC;class Ls{constructor(g=new DC(1/0,1/0),I=new DC(-1/0,-1/0)){this.min=g,this.max=I}set(g,I){return this.min.copy(g),this.max.copy(I),this}setFromPoints(g){this.makeEmpty();for(let I=0,C=g.length;I<C;I++)this.expandByPoint(g[I]);return this}setFromCenterAndSize(g,I){const C=Js.copy(I).multiplyScalar(.5);return this.min.copy(g).sub(C),this.max.copy(g).add(C),this}clone(){return(new this.constructor).copy(this)}copy(g){return this.min.copy(g.min),this.max.copy(g.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(g){return void 0===g&&(console.warn("THREE.Box2: .getCenter() target is now required"),g=new DC),this.isEmpty()?g.set(0,0):g.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(g){return void 0===g&&(console.warn("THREE.Box2: .getSize() target is now required"),g=new DC),this.isEmpty()?g.set(0,0):g.subVectors(this.max,this.min)}expandByPoint(g){return this.min.min(g),this.max.max(g),this}expandByVector(g){return this.min.sub(g),this.max.add(g),this}expandByScalar(g){return this.min.addScalar(-g),this.max.addScalar(g),this}containsPoint(g){return!(g.x<this.min.x||g.x>this.max.x||g.y<this.min.y||g.y>this.max.y)}containsBox(g){return this.min.x<=g.min.x&&g.max.x<=this.max.x&&this.min.y<=g.min.y&&g.max.y<=this.max.y}getParameter(g,I){return void 0===I&&(console.warn("THREE.Box2: .getParameter() target is now required"),I=new DC),I.set((g.x-this.min.x)/(this.max.x-this.min.x),(g.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(g){return!(g.max.x<this.min.x||g.min.x>this.max.x||g.max.y<this.min.y||g.min.y>this.max.y)}clampPoint(g,I){return void 0===I&&(console.warn("THREE.Box2: .clampPoint() target is now required"),I=new DC),I.copy(g).clamp(this.min,this.max)}distanceToPoint(g){return Js.copy(g).clamp(this.min,this.max).sub(g).length()}intersect(g){return this.min.max(g.min),this.max.min(g.max),this}union(g){return this.min.min(g.min),this.max.max(g.max),this}translate(g){return this.min.add(g),this.max.add(g),this}equals(g){return g.min.equals(this.min)&&g.max.equals(this.max)}}Ls.prototype.isBox2=!0;const ks=new Ae,Ms=new Ae;class Qs{constructor(g=new Ae,I=new Ae){this.start=g,this.end=I}set(g,I){return this.start.copy(g),this.end.copy(I),this}copy(g){return this.start.copy(g.start),this.end.copy(g.end),this}getCenter(g){return void 0===g&&(console.warn("THREE.Line3: .getCenter() target is now required"),g=new Ae),g.addVectors(this.start,this.end).multiplyScalar(.5)}delta(g){return void 0===g&&(console.warn("THREE.Line3: .delta() target is now required"),g=new Ae),g.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(g,I){return void 0===I&&(console.warn("THREE.Line3: .at() target is now required"),I=new Ae),this.delta(I).multiplyScalar(g).add(this.start)}closestPointToPointParameter(g,I){ks.subVectors(g,this.start),Ms.subVectors(this.end,this.start);const C=Ms.dot(Ms);let e=Ms.dot(ks)/C;return I&&(e=kC(e,0,1)),e}closestPointToPoint(g,I,C){const e=this.closestPointToPointParameter(g,I);return void 0===C&&(console.warn("THREE.Line3: .closestPointToPoint() target is now required"),C=new Ae),this.delta(C).multiplyScalar(e).add(this.start)}applyMatrix4(g){return this.start.applyMatrix4(g),this.end.applyMatrix4(g),this}equals(g){return g.start.equals(this.start)&&g.end.equals(this.end)}clone(){return(new this.constructor).copy(this)}}class Us extends ot{constructor(g){super(),this.material=g,this.render=function(){},this.hasPositions=!1,this.hasNormals=!1,this.hasColors=!1,this.hasUvs=!1,this.positionArray=null,this.normalArray=null,this.colorArray=null,this.uvArray=null,this.count=0}}Us.prototype.isImmediateRenderObject=!0;const Ts=new Ae;class Es extends ot{constructor(g,I){super(),this.light=g,this.light.updateMatrixWorld(),this.matrix=g.matrixWorld,this.matrixAutoUpdate=!1,this.color=I;const C=new CA,e=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let g=0,I=1,C=32;g<C;g++,I++){const t=g/C*Math.PI*2,A=I/C*Math.PI*2;e.push(Math.cos(t),Math.sin(t),1,Math.cos(A),Math.sin(A),1)}C.setAttribute("position",new Ut(e,3));const t=new kn({fog:!1,toneMapped:!1});this.cone=new Pn(C,t),this.add(this.cone),this.update()}dispose(){this.cone.geometry.dispose(),this.cone.material.dispose()}update(){this.light.updateMatrixWorld();const g=this.light.distance?this.light.distance:1e3,I=g*Math.tan(this.light.angle);this.cone.scale.set(I,I,g),Ts.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(Ts),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}const js=new Ae,Ds=new ze,Os=new ze;class Ps extends Pn{constructor(g){const I=_s(g),C=new CA,e=[],t=[],A=new wt(0,0,1),i=new wt(0,1,0);for(let g=0;g<I.length;g++){const C=I[g];C.parent&&C.parent.isBone&&(e.push(0,0,0),e.push(0,0,0),t.push(A.r,A.g,A.b),t.push(i.r,i.g,i.b))}C.setAttribute("position",new Ut(e,3)),C.setAttribute("color",new Ut(t,3)),super(C,new kn({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0})),this.type="SkeletonHelper",this.isSkeletonHelper=!0,this.root=g,this.bones=I,this.matrix=g.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(g){const I=this.bones,C=this.geometry,e=C.getAttribute("position");Os.copy(this.root.matrixWorld).invert();for(let g=0,C=0;g<I.length;g++){const t=I[g];t.parent&&t.parent.isBone&&(Ds.multiplyMatrices(Os,t.matrixWorld),js.setFromMatrixPosition(Ds),e.setXYZ(C,js.x,js.y,js.z),Ds.multiplyMatrices(Os,t.parent.matrixWorld),js.setFromMatrixPosition(Ds),e.setXYZ(C+1,js.x,js.y,js.z),C+=2)}C.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(g)}}function _s(g){const I=[];g&&g.isBone&&I.push(g);for(let C=0;C<g.children.length;C++)I.push.apply(I,_s(g.children[C]));return I}class qs extends BA{constructor(g,I,C){super(new ga(I,4,2),new Kt({wireframe:!0,fog:!1,toneMapped:!1})),this.light=g,this.light.updateMatrixWorld(),this.color=C,this.type="PointLightHelper",this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}dispose(){this.geometry.dispose(),this.material.dispose()}update(){void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)}}const $s=new Ae,gd=new wt,Id=new wt;class Cd extends ot{constructor(g,I,C){super(),this.light=g,this.light.updateMatrixWorld(),this.matrix=g.matrixWorld,this.matrixAutoUpdate=!1,this.color=C;const e=new Pl(I);e.rotateY(.5*Math.PI),this.material=new Kt({wireframe:!0,fog:!1,toneMapped:!1}),void 0===this.color&&(this.material.vertexColors=!0);const t=e.getAttribute("position"),A=new Float32Array(3*t.count);e.setAttribute("color",new Ft(A,3)),this.add(new BA(e,this.material)),this.update()}dispose(){this.children[0].geometry.dispose(),this.children[0].material.dispose()}update(){const g=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{const I=g.geometry.getAttribute("color");gd.copy(this.light.color),Id.copy(this.light.groundColor);for(let g=0,C=I.count;g<C;g++){const e=g<C/2?gd:Id;I.setXYZ(g,e.r,e.g,e.b)}I.needsUpdate=!0}g.lookAt($s.setFromMatrixPosition(this.light.matrixWorld).negate())}}class ed extends Pn{constructor(g=10,I=10,C=4473924,e=8947848){C=new wt(C),e=new wt(e);const t=I/2,A=g/I,i=g/2,o=[],n=[];for(let g=0,l=0,a=-i;g<=I;g++,a+=A){o.push(-i,0,a,i,0,a),o.push(a,0,-i,a,0,i);const I=g===t?C:e;I.toArray(n,l),l+=3,I.toArray(n,l),l+=3,I.toArray(n,l),l+=3,I.toArray(n,l),l+=3}const l=new CA;l.setAttribute("position",new Ut(o,3)),l.setAttribute("color",new Ut(n,3)),super(l,new kn({vertexColors:!0,toneMapped:!1})),this.type="GridHelper"}}class td extends Pn{constructor(g=10,I=16,C=8,e=64,t=4473924,A=8947848){t=new wt(t),A=new wt(A);const i=[],o=[];for(let C=0;C<=I;C++){const e=C/I*(2*Math.PI),n=Math.sin(e)*g,l=Math.cos(e)*g;i.push(0,0,0),i.push(n,0,l);const a=1&C?t:A;o.push(a.r,a.g,a.b),o.push(a.r,a.g,a.b)}for(let I=0;I<=C;I++){const n=1&I?t:A,l=g-g/C*I;for(let g=0;g<e;g++){let I=g/e*(2*Math.PI),C=Math.sin(I)*l,t=Math.cos(I)*l;i.push(C,0,t),o.push(n.r,n.g,n.b),I=(g+1)/e*(2*Math.PI),C=Math.sin(I)*l,t=Math.cos(I)*l,i.push(C,0,t),o.push(n.r,n.g,n.b)}}const n=new CA;n.setAttribute("position",new Ut(i,3)),n.setAttribute("color",new Ut(o,3)),super(n,new kn({vertexColors:!0,toneMapped:!1})),this.type="PolarGridHelper"}}const Ad=new Ae,id=new Ae,od=new Ae;class nd extends ot{constructor(g,I,C){super(),this.light=g,this.light.updateMatrixWorld(),this.matrix=g.matrixWorld,this.matrixAutoUpdate=!1,this.color=C,void 0===I&&(I=1);let e=new CA;e.setAttribute("position",new Ut([-I,I,0,I,I,0,I,-I,0,-I,-I,0,-I,I,0],3));const t=new kn({fog:!1,toneMapped:!1});this.lightPlane=new jn(e,t),this.add(this.lightPlane),e=new CA,e.setAttribute("position",new Ut([0,0,0,0,0,1],3)),this.targetLine=new jn(e,t),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){Ad.setFromMatrixPosition(this.light.matrixWorld),id.setFromMatrixPosition(this.light.target.matrixWorld),od.subVectors(id,Ad),this.lightPlane.lookAt(id),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(id),this.targetLine.scale.z=od.length()}}const ld=new Ae,ad=new YA;class cd extends Pn{constructor(g){const I=new CA,C=new kn({color:16777215,vertexColors:!0,toneMapped:!1}),e=[],t=[],A={},i=new wt(16755200),o=new wt(16711680),n=new wt(43775),l=new wt(16777215),a=new wt(3355443);function c(g,I,C){s(g,C),s(I,C)}function s(g,I){e.push(0,0,0),t.push(I.r,I.g,I.b),void 0===A[g]&&(A[g]=[]),A[g].push(e.length/3-1)}c("n1","n2",i),c("n2","n4",i),c("n4","n3",i),c("n3","n1",i),c("f1","f2",i),c("f2","f4",i),c("f4","f3",i),c("f3","f1",i),c("n1","f1",i),c("n2","f2",i),c("n3","f3",i),c("n4","f4",i),c("p","n1",o),c("p","n2",o),c("p","n3",o),c("p","n4",o),c("u1","u2",n),c("u2","u3",n),c("u3","u1",n),c("c","t",l),c("p","c",a),c("cn1","cn2",a),c("cn3","cn4",a),c("cf1","cf2",a),c("cf3","cf4",a),I.setAttribute("position",new Ut(e,3)),I.setAttribute("color",new Ut(t,3)),super(I,C),this.type="CameraHelper",this.camera=g,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=g.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=A,this.update()}update(){const g=this.geometry,I=this.pointMap;ad.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),sd("c",I,g,ad,0,0,-1),sd("t",I,g,ad,0,0,1),sd("n1",I,g,ad,-1,-1,-1),sd("n2",I,g,ad,1,-1,-1),sd("n3",I,g,ad,-1,1,-1),sd("n4",I,g,ad,1,1,-1),sd("f1",I,g,ad,-1,-1,1),sd("f2",I,g,ad,1,-1,1),sd("f3",I,g,ad,-1,1,1),sd("f4",I,g,ad,1,1,1),sd("u1",I,g,ad,.7,1.1,-1),sd("u2",I,g,ad,-.7,1.1,-1),sd("u3",I,g,ad,0,2,-1),sd("cf1",I,g,ad,-1,0,1),sd("cf2",I,g,ad,1,0,1),sd("cf3",I,g,ad,0,-1,1),sd("cf4",I,g,ad,0,1,1),sd("cn1",I,g,ad,-1,0,-1),sd("cn2",I,g,ad,1,0,-1),sd("cn3",I,g,ad,0,-1,-1),sd("cn4",I,g,ad,0,1,-1),g.getAttribute("position").needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}}function sd(g,I,C,e,t,A,i){ld.set(t,A,i).unproject(e);const o=I[g];if(void 0!==o){const g=C.getAttribute("position");for(let I=0,C=o.length;I<C;I++)g.setXYZ(o[I],ld.x,ld.y,ld.z)}}const dd=new ne;class bd extends Pn{constructor(g,I=16776960){const C=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),e=new Float32Array(24),t=new CA;t.setIndex(new Ft(C,1)),t.setAttribute("position",new Ft(e,3)),super(t,new kn({color:I,toneMapped:!1})),this.object=g,this.type="BoxHelper",this.matrixAutoUpdate=!1,this.update()}update(g){if(void 0!==g&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),void 0!==this.object&&dd.setFromObject(this.object),dd.isEmpty())return;const I=dd.min,C=dd.max,e=this.geometry.attributes.position,t=e.array;t[0]=C.x,t[1]=C.y,t[2]=C.z,t[3]=I.x,t[4]=C.y,t[5]=C.z,t[6]=I.x,t[7]=I.y,t[8]=C.z,t[9]=C.x,t[10]=I.y,t[11]=C.z,t[12]=C.x,t[13]=C.y,t[14]=I.z,t[15]=I.x,t[16]=C.y,t[17]=I.z,t[18]=I.x,t[19]=I.y,t[20]=I.z,t[21]=C.x,t[22]=I.y,t[23]=I.z,e.needsUpdate=!0,this.geometry.computeBoundingSphere()}setFromObject(g){return this.object=g,this.update(),this}copy(g){return Pn.prototype.copy.call(this,g),this.object=g.object,this}}class rd extends Pn{constructor(g,I=16776960){const C=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),e=new CA;e.setIndex(new Ft(C,1)),e.setAttribute("position",new Ut([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3)),super(e,new kn({color:I,toneMapped:!1})),this.box=g,this.type="Box3Helper",this.geometry.computeBoundingSphere()}updateMatrixWorld(g){const I=this.box;I.isEmpty()||(I.getCenter(this.position),I.getSize(this.scale),this.scale.multiplyScalar(.5),super.updateMatrixWorld(g))}}class Gd extends jn{constructor(g,I=1,C=16776960){const e=C,t=new CA;t.setAttribute("position",new Ut([1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],3)),t.computeBoundingSphere(),super(t,new kn({color:e,toneMapped:!1})),this.type="PlaneHelper",this.plane=g,this.size=I;const A=new CA;A.setAttribute("position",new Ut([1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],3)),A.computeBoundingSphere(),this.add(new BA(A,new Kt({color:e,opacity:.2,transparent:!0,depthWrite:!1,toneMapped:!1})))}updateMatrixWorld(g){let I=-this.plane.constant;Math.abs(I)<1e-8&&(I=1e-8),this.scale.set(.5*this.size,.5*this.size,I),this.children[0].material.side=I<0?r:b,this.lookAt(this.plane.normal),super.updateMatrixWorld(g)}}const hd=new Ae;let md,ud;class Bd extends ot{constructor(g=new Ae(0,0,1),I=new Ae(0,0,0),C=1,e=16776960,t=.2*C,A=.2*t){super(),this.type="ArrowHelper",void 0===md&&(md=new CA,md.setAttribute("position",new Ut([0,0,0,0,1,0],3)),ud=new al(0,.5,1,5,1),ud.translate(0,-.5,0)),this.position.copy(I),this.line=new jn(md,new kn({color:e,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new BA(ud,new Kt({color:e,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(g),this.setLength(C,t,A)}setDirection(g){if(g.y>.99999)this.quaternion.set(0,0,0,1);else if(g.y<-.99999)this.quaternion.set(1,0,0,0);else{hd.set(g.z,0,-g.x).normalize();const I=Math.acos(g.y);this.quaternion.setFromAxisAngle(hd,I)}}setLength(g,I=.2*g,C=.2*I){this.line.scale.set(1,Math.max(1e-4,g-I),1),this.line.updateMatrix(),this.cone.scale.set(C,I,C),this.cone.position.y=g,this.cone.updateMatrix()}setColor(g){this.line.material.color.set(g),this.cone.material.color.set(g)}copy(g){return super.copy(g,!1),this.line.copy(g.line),this.cone.copy(g.cone),this}}class Zd extends Pn{constructor(g=1){const I=[0,0,0,g,0,0,0,0,0,0,g,0,0,0,0,0,0,g],C=new CA;C.setAttribute("position",new Ut(I,3)),C.setAttribute("color",new Ut([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3)),super(C,new kn({vertexColors:!0,toneMapped:!1})),this.type="AxesHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}const pd=new Float32Array(1),Wd=new Int32Array(pd.buffer);class yd{static toHalfFloat(g){pd[0]=g;const I=Wd[0];let C=I>>16&32768,e=I>>12&2047;const t=I>>23&255;return t<103?C:t>142?(C|=31744,C|=(255==t?0:1)&&8388607&I,C):t<113?(e|=2048,C|=(e>>114-t)+(e>>113-t&1),C):(C|=t-112<<10|e>>1,C+=1&e,C)}}const Vd=Math.pow(2,8),vd=[.125,.215,.35,.446,.526,.582],Yd=5+vd.length,Xd={[PI]:0,[_I]:1,[$I]:2,[IC]:3,[CC]:4,[eC]:5,[qI]:6},Rd=new Kt({side:r,depthWrite:!1,depthTest:!1}),Hd=new BA(new pA,Rd),wd=new Xc,{_lodPlanes:Kd,_sizeLods:Sd,_sigmas:Nd}=Qd(),Fd=new wt;let zd=null;const fd=(1+Math.sqrt(5))/2,xd=1/fd,Jd=[new Ae(1,1,1),new Ae(-1,1,1),new Ae(1,1,-1),new Ae(-1,1,-1),new Ae(0,fd,xd),new Ae(0,fd,-xd),new Ae(xd,0,fd),new Ae(-xd,0,fd),new Ae(fd,xd,0),new Ae(-fd,xd,0)];function Ld(g){const I=Math.max(g.r,g.g,g.b),C=Math.min(Math.max(Math.ceil(Math.log2(I)),-128),127);return g.multiplyScalar(Math.pow(2,-C)),(C+128)/255}class kd{constructor(g){this._renderer=g,this._pingPongRenderTarget=null,this._blurMaterial=function(g){const I=new Float32Array(20),C=new Ae(0,1,0);return new la({name:"SphericalGaussianBlur",defines:{n:20},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:I},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:C},inputEncoding:{value:Xd[PI]},outputEncoding:{value:Xd[PI]}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t",blending:u,depthTest:!1,depthWrite:!1})}(),this._equirectShader=null,this._cubemapShader=null,this._compileMaterial(this._blurMaterial)}fromScene(g,I=0,C=.1,e=100){zd=this._renderer.getRenderTarget();const t=this._allocateTargets();return this._sceneToCubeUV(g,C,e,t),I>0&&this._blur(t,0,0,I),this._applyPMREM(t),this._cleanup(t),t}fromEquirectangular(g){return this._fromTexture(g)}fromCubemap(g){return this._fromTexture(g)}compileCubemapShader(){null===this._cubemapShader&&(this._cubemapShader=jd(),this._compileMaterial(this._cubemapShader))}compileEquirectangularShader(){null===this._equirectShader&&(this._equirectShader=Ed(),this._compileMaterial(this._equirectShader))}dispose(){this._blurMaterial.dispose(),null!==this._cubemapShader&&this._cubemapShader.dispose(),null!==this._equirectShader&&this._equirectShader.dispose();for(let g=0;g<Kd.length;g++)Kd[g].dispose()}_cleanup(g){this._pingPongRenderTarget.dispose(),this._renderer.setRenderTarget(zd),g.scissorTest=!1,Td(g,0,0,g.width,g.height)}_fromTexture(g){zd=this._renderer.getRenderTarget();const I=this._allocateTargets(g);return this._textureToCubeUV(g,I),this._applyPMREM(I),this._cleanup(I),I}_allocateTargets(g){const I={magFilter:bg,minFilter:bg,generateMipmaps:!1,type:yg,format:kg,encoding:Md(g)?g.encoding:$I,depthBuffer:!1},C=Ud(I);return C.depthBuffer=!g,this._pingPongRenderTarget=Ud(I),C}_compileMaterial(g){const I=new BA(Kd[0],g);this._renderer.compile(I,wd)}_sceneToCubeUV(g,I,C,e){const t=new XA(90,1,I,C),A=[1,-1,1,1,1,1],i=[1,1,1,-1,-1,-1],o=this._renderer,n=o.autoClear,l=o.outputEncoding,a=o.toneMapping;o.getClearColor(Fd),o.toneMapping=q,o.outputEncoding=PI,o.autoClear=!1;let c=!1;const s=g.background;if(s){if(s.isColor){Rd.color.copy(s).convertSRGBToLinear(),g.background=null;const I=Ld(Rd.color);Rd.opacity=I,c=!0}}else{Rd.color.copy(Fd).convertSRGBToLinear();const g=Ld(Rd.color);Rd.opacity=g,c=!0}for(let I=0;I<6;I++){const C=I%3;0==C?(t.up.set(0,A[I],0),t.lookAt(i[I],0,0)):1==C?(t.up.set(0,0,A[I]),t.lookAt(0,i[I],0)):(t.up.set(0,A[I],0),t.lookAt(0,0,i[I])),Td(e,C*Vd,I>2?Vd:0,Vd,Vd),o.setRenderTarget(e),c&&o.render(Hd,t),o.render(g,t)}o.toneMapping=a,o.outputEncoding=l,o.autoClear=n}_textureToCubeUV(g,I){const C=this._renderer;g.isCubeTexture?null==this._cubemapShader&&(this._cubemapShader=jd()):null==this._equirectShader&&(this._equirectShader=Ed());const e=g.isCubeTexture?this._cubemapShader:this._equirectShader,t=new BA(Kd[0],e),A=e.uniforms;A.envMap.value=g,g.isCubeTexture||A.texelSize.value.set(1/g.image.width,1/g.image.height),A.inputEncoding.value=Xd[g.encoding],A.outputEncoding.value=Xd[I.texture.encoding],Td(I,0,0,3*Vd,2*Vd),C.setRenderTarget(I),C.render(t,wd)}_applyPMREM(g){const I=this._renderer,C=I.autoClear;I.autoClear=!1;for(let I=1;I<Yd;I++){const C=Math.sqrt(Nd[I]*Nd[I]-Nd[I-1]*Nd[I-1]),e=Jd[(I-1)%Jd.length];this._blur(g,I-1,I,C,e)}I.autoClear=C}_blur(g,I,C,e,t){const A=this._pingPongRenderTarget;this._halfBlur(g,A,I,C,e,"latitudinal",t),this._halfBlur(A,g,C,C,e,"longitudinal",t)}_halfBlur(g,I,C,e,t,A,i){const o=this._renderer,n=this._blurMaterial;"latitudinal"!==A&&"longitudinal"!==A&&console.error("blur direction must be either latitudinal or longitudinal!");const l=new BA(Kd[e],n),a=n.uniforms,c=Sd[C]-1,s=isFinite(t)?Math.PI/(2*c):2*Math.PI/39,d=t/s,b=isFinite(t)?1+Math.floor(3*d):20;b>20&&console.warn(`sigmaRadians, ${t}, is too large and will clip, as it requested ${b} samples when the maximum is set to 20`);const r=[];let G=0;for(let g=0;g<20;++g){const I=g/d,C=Math.exp(-I*I/2);r.push(C),0==g?G+=C:g<b&&(G+=2*C)}for(let g=0;g<r.length;g++)r[g]=r[g]/G;a.envMap.value=g.texture,a.samples.value=b,a.weights.value=r,a.latitudinal.value="latitudinal"===A,i&&(a.poleAxis.value=i),a.dTheta.value=s,a.mipInt.value=8-C,a.inputEncoding.value=Xd[g.texture.encoding],a.outputEncoding.value=Xd[g.texture.encoding];const h=Sd[e];Td(I,3*Math.max(0,Vd-2*h),(0===e?0:2*Vd)+2*h*(e>4?e-8+4:0),3*h,2*h),o.setRenderTarget(I),o.render(l,wd)}}function Md(g){return void 0!==g&&g.type===yg&&(g.encoding===PI||g.encoding===_I||g.encoding===qI)}function Qd(){const g=[],I=[],C=[];let e=8;for(let t=0;t<Yd;t++){const A=Math.pow(2,e);I.push(A);let i=1/A;t>4?i=vd[t-8+4-1]:0==t&&(i=0),C.push(i);const o=1/(A-1),n=-o/2,l=1+o/2,a=[n,n,l,n,l,l,n,n,l,l,n,l],c=6,s=6,d=3,b=2,r=1,G=new Float32Array(d*s*c),h=new Float32Array(b*s*c),m=new Float32Array(r*s*c);for(let g=0;g<c;g++){const I=g%3*2/3-1,C=g>2?0:-1,e=[I,C,0,I+2/3,C,0,I+2/3,C+1,0,I,C,0,I+2/3,C+1,0,I,C+1,0];G.set(e,d*s*g),h.set(a,b*s*g);const t=[g,g,g,g,g,g];m.set(t,r*s*g)}const u=new CA;u.setAttribute("position",new Ft(G,d)),u.setAttribute("uv",new Ft(h,b)),u.setAttribute("faceIndex",new Ft(m,r)),g.push(u),e>4&&e--}return{_lodPlanes:g,_sizeLods:I,_sigmas:C}}function Ud(g){const I=new Ce(3*Vd,3*Vd,g);return I.texture.mapping=lg,I.texture.name="PMREM.cubeUv",I.scissorTest=!0,I}function Td(g,I,C,e,t){g.viewport.set(I,C,e,t),g.scissor.set(I,C,e,t)}function Ed(){const g=new DC(1,1);return new la({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null},texelSize:{value:g},inputEncoding:{value:Xd[PI]},outputEncoding:{value:Xd[PI]}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tvec2 f = fract( uv / texelSize - 0.5 );\n\t\t\t\tuv -= f * texelSize;\n\t\t\t\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x += texelSize.x;\n\t\t\t\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.y += texelSize.y;\n\t\t\t\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x -= texelSize.x;\n\t\t\t\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\n\t\t\t\tvec3 tm = mix( tl, tr, f.x );\n\t\t\t\tvec3 bm = mix( bl, br, f.x );\n\t\t\t\tgl_FragColor.rgb = mix( tm, bm, f.y );\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t",blending:u,depthTest:!1,depthWrite:!1})}function jd(){return new la({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},inputEncoding:{value:Xd[PI]},outputEncoding:{value:Xd[PI]}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\t\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t",blending:u,depthTest:!1,depthWrite:!1})}const Dd=0,Od=1,Pd=0,_d=1,qd=2;function $d(g){return console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead."),g}function gb(g=[]){return console.warn("THREE.MultiMaterial has been removed. Use an Array instead."),g.isMultiMaterial=!0,g.materials=g,g.clone=function(){return g.slice()},g}function Ib(g,I){return console.warn("THREE.PointCloud has been renamed to THREE.Points."),new el(g,I)}function Cb(g){return console.warn("THREE.Particle has been renamed to THREE.Sprite."),new Zn(g)}function eb(g,I){return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."),new el(g,I)}function tb(g){return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."),new qn(g)}function Ab(g){return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."),new qn(g)}function ib(g){return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."),new qn(g)}function ob(g,I,C){return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."),new Ae(g,I,C)}function nb(g,I){return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead."),new Ft(g,I).setUsage(VC)}function lb(g,I){return console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead."),new zt(g,I)}function ab(g,I){return console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead."),new ft(g,I)}function cb(g,I){return console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead."),new xt(g,I)}function sb(g,I){return console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead."),new Jt(g,I)}function db(g,I){return console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead."),new Lt(g,I)}function bb(g,I){return console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead."),new kt(g,I)}function rb(g,I){return console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead."),new Mt(g,I)}function Gb(g,I){return console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead."),new Ut(g,I)}function hb(g,I){return console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead."),new Tt(g,I)}function mb(g){return console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper."),new Zd(g)}function ub(g,I){return console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead."),new bd(g,I)}function Bb(g,I){return console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead."),new Pn(new ml(g.geometry),new kn({color:void 0!==I?I:16777215}))}function Zb(g,I){return console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead."),new Pn(new ia(g.geometry),new kn({color:void 0!==I?I:16777215}))}function pb(g){return console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader."),new Ja(g)}function Wb(g){return console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader."),new Ua(g)}function yb(g,I,C){return console.warn("THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options )."),new KA(g,C)}function Vb(){console.error("THREE.CanvasRenderer has been removed")}function vb(){console.error("THREE.JSONLoader has been removed.")}Ea.create=function(g,I){return console.log("THREE.Curve.create() has been deprecated"),g.prototype=Object.create(Ea.prototype),g.prototype.constructor=g,g.prototype.getPoint=I,g},dc.prototype.fromPoints=function(g){return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(g)},ed.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},Ps.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},fa.prototype.extractUrlBase=function(g){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),zc.extractUrlBase(g)},fa.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}},Ls.prototype.center=function(g){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(g)},Ls.prototype.empty=function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},Ls.prototype.isIntersectionBox=function(g){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(g)},Ls.prototype.size=function(g){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(g)},ne.prototype.center=function(g){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(g)},ne.prototype.empty=function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},ne.prototype.isIntersectionBox=function(g){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(g)},ne.prototype.isIntersectionSphere=function(g){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(g)},ne.prototype.size=function(g){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(g)},Ye.prototype.empty=function(){return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."),this.isEmpty()},zA.prototype.setFromMatrix=function(g){return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."),this.setFromProjectionMatrix(g)},Qs.prototype.center=function(g){return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),this.getCenter(g)},OC.prototype.flattenToArrayOffset=function(g,I){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(g,I)},OC.prototype.multiplyVector3=function(g){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),g.applyMatrix3(this)},OC.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},OC.prototype.applyToBufferAttribute=function(g){return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."),g.applyMatrix3(this)},OC.prototype.applyToVector3Array=function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")},OC.prototype.getInverse=function(g){return console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(g).invert()},ze.prototype.extractPosition=function(g){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(g)},ze.prototype.flattenToArrayOffset=function(g,I){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(g,I)},ze.prototype.getPosition=function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),(new Ae).setFromMatrixColumn(this,3)},ze.prototype.setRotationFromQuaternion=function(g){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(g)},ze.prototype.multiplyToArray=function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},ze.prototype.multiplyVector3=function(g){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),g.applyMatrix4(this)},ze.prototype.multiplyVector4=function(g){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),g.applyMatrix4(this)},ze.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},ze.prototype.rotateAxis=function(g){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),g.transformDirection(this)},ze.prototype.crossVector=function(g){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),g.applyMatrix4(this)},ze.prototype.translate=function(){console.error("THREE.Matrix4: .translate() has been removed.")},ze.prototype.rotateX=function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},ze.prototype.rotateY=function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},ze.prototype.rotateZ=function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},ze.prototype.rotateByAxis=function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},ze.prototype.applyToBufferAttribute=function(g){return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."),g.applyMatrix4(this)},ze.prototype.applyToVector3Array=function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},ze.prototype.makeFrustum=function(g,I,C,e,t,A){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(g,I,e,C,t,A)},ze.prototype.getInverse=function(g){return console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(g).invert()},ct.prototype.isIntersectionLine=function(g){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(g)},te.prototype.multiplyVector3=function(g){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),g.applyQuaternion(this)},te.prototype.inverse=function(){return console.warn("THREE.Quaternion: .inverse() has been renamed to invert()."),this.invert()},Fe.prototype.isIntersectionBox=function(g){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(g)},Fe.prototype.isIntersectionPlane=function(g){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(g)},Fe.prototype.isIntersectionSphere=function(g){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(g)},pt.prototype.area=function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},pt.prototype.barycoordFromPoint=function(g,I){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(g,I)},pt.prototype.midpoint=function(g){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(g)},pt.prototypenormal=function(g){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(g)},pt.prototype.plane=function(g){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(g)},pt.barycoordFromPoint=function(g,I,C,e,t){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),pt.getBarycoord(g,I,C,e,t)},pt.normal=function(g,I,C,e){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),pt.getNormal(g,I,C,e)},bc.prototype.extractAllPoints=function(g){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(g)},bc.prototype.extrude=function(g){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new El(this,g)},bc.prototype.makeGeometry=function(g){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new $l(this,g)},DC.prototype.fromAttribute=function(g,I,C){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(g,I,C)},DC.prototype.distanceToManhattan=function(g){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(g)},DC.prototype.lengthManhattan=function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},Ae.prototype.setEulerFromRotationMatrix=function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},Ae.prototype.setEulerFromQuaternion=function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},Ae.prototype.getPositionFromMatrix=function(g){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(g)},Ae.prototype.getScaleFromMatrix=function(g){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(g)},Ae.prototype.getColumnFromMatrix=function(g,I){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(I,g)},Ae.prototype.applyProjection=function(g){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(g)},Ae.prototype.fromAttribute=function(g,I,C){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(g,I,C)},Ae.prototype.distanceToManhattan=function(g){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(g)},Ae.prototype.lengthManhattan=function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},Ie.prototype.fromAttribute=function(g,I,C){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(g,I,C)},Ie.prototype.lengthManhattan=function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},ot.prototype.getChildByName=function(g){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(g)},ot.prototype.renderDepth=function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},ot.prototype.translate=function(g,I){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(I,g)},ot.prototype.getWorldRotation=function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")},ot.prototype.applyMatrix=function(g){return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(g)},Object.defineProperties(ot.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(g){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=g}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),BA.prototype.setDrawMode=function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")},Object.defineProperties(BA.prototype,{drawMode:{get:function(){return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."),jI},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}}),wn.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")},XA.prototype.setLens=function(g,I){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==I&&(this.filmGauge=I),this.setFocalLength(g)},Object.defineProperties(rc.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(g){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=g}},shadowCameraLeft:{set:function(g){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=g}},shadowCameraRight:{set:function(g){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=g}},shadowCameraTop:{set:function(g){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=g}},shadowCameraBottom:{set:function(g){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=g}},shadowCameraNear:{set:function(g){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=g}},shadowCameraFar:{set:function(g){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=g}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(g){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=g}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(g){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=g}},shadowMapHeight:{set:function(g){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=g}}}),Object.defineProperties(Ft.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},dynamic:{get:function(){return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.usage===VC},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.setUsage(VC)}}}),Ft.prototype.setDynamic=function(g){return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===g?VC:yC),this},Ft.prototype.copyIndicesArray=function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},Ft.prototype.setArray=function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},CA.prototype.addIndex=function(g){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(g)},CA.prototype.addAttribute=function(g,I){return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),I&&I.isBufferAttribute||I&&I.isInterleavedBufferAttribute?"index"===g?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(I),this):this.setAttribute(g,I):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(g,new Ft(arguments[1],arguments[2])))},CA.prototype.addDrawCall=function(g,I,C){void 0!==C&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(g,I)},CA.prototype.clearDrawCalls=function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},CA.prototype.computeOffsets=function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")},CA.prototype.removeAttribute=function(g){return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),this.deleteAttribute(g)},CA.prototype.applyMatrix=function(g){return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(g)},Object.defineProperties(CA.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),en.prototype.setDynamic=function(g){return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===g?VC:yC),this},en.prototype.setArray=function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},El.prototype.getArrays=function(){console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.")},El.prototype.addShapeList=function(){console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.")},El.prototype.addShape=function(){console.error("THREE.ExtrudeGeometry: .addShape() has been removed.")},Cn.prototype.dispose=function(){console.error("THREE.Scene: .dispose() has been removed.")},ws.prototype.onUpdate=function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this},Object.defineProperties(yt.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new wt}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(g){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=g===h}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(g){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=g}}}),Object.defineProperties(vA.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(g){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=g}}}),qo.prototype.clearTarget=function(g,I,C,e){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(g),this.clear(I,C,e)},qo.prototype.animate=function(g){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(g)},qo.prototype.getCurrentRenderTarget=function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},qo.prototype.getMaxAnisotropy=function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},qo.prototype.getPrecision=function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},qo.prototype.resetGLState=function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},qo.prototype.supportsFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},qo.prototype.supportsHalfFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},qo.prototype.supportsStandardDerivatives=function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},qo.prototype.supportsCompressedTextureS3TC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},qo.prototype.supportsCompressedTexturePVRTC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},qo.prototype.supportsBlendMinMax=function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},qo.prototype.supportsVertexTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},qo.prototype.supportsInstancedArrays=function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},qo.prototype.enableScissorTest=function(g){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(g)},qo.prototype.initMaterial=function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},qo.prototype.addPrePlugin=function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},qo.prototype.addPostPlugin=function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},qo.prototype.updateShadowMap=function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},qo.prototype.setFaceCulling=function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")},qo.prototype.allocTextureUnit=function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")},qo.prototype.setTexture=function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")},qo.prototype.setTexture2D=function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")},qo.prototype.setTextureCube=function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")},qo.prototype.getActiveMipMapLevel=function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()},Object.defineProperties(qo.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(g){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=g}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(g){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=g}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}},vr:{get:function(){return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"),this.xr}},gammaInput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."),!1},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),!1},set:function(g){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),this.outputEncoding=!0===g?_I:PI}},toneMappingWhitePoint:{get:function(){return console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed."),1},set:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.")}}}),Object.defineProperties(Mo.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(Ce.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(g){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=g}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(g){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=g}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(g){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=g}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(g){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=g}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(g){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=g}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(g){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=g}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(g){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=g}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(g){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=g}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(g){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=g}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(g){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=g}}}),as.prototype.load=function(g){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");const I=this;return(new _c).load(g,(function(g){I.setBuffer(g)})),this},Gs.prototype.getData=function(){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()},HA.prototype.updateCubeMap=function(g,I){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(g,I)},HA.prototype.clear=function(g,I,C,e){return console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear()."),this.renderTarget.clear(g,I,C,e)},_C.crossOrigin=void 0,_C.loadTexture=function(g,I,C,e){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");const t=new Ta;t.setCrossOrigin(this.crossOrigin);const A=t.load(g,C,void 0,e);return I&&(A.mapping=I),A},_C.loadTextureCube=function(g,I,C,e){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");const t=new Qa;t.setCrossOrigin(this.crossOrigin);const A=t.load(g,C,void 0,e);return I&&(A.mapping=I),A},_C.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},_C.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};const Yb={createMultiMaterialObject:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")},detach:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")},attach:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")}};function Xb(){console.error("THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js")}"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:e}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=e)},467:(g,I,C)=>{"use strict";C.d(I,{Z:()=>A});var e=C(784);const t="undefined"==typeof window||!window.navigator||/ServerSideRendering|^Deno\//.test(window.navigator.userAgent)?e.useEffect:e.useLayoutEffect,A=function(g){const I="function"==typeof g?function(g){let I;const C=new Set,e=(g,e)=>{const t="function"==typeof g?g(I):g;if(t!==I){const g=I;I=e?t:Object.assign({},I,t),C.forEach((C=>C(I,g)))}},t=()=>I,A={setState:e,getState:t,subscribe:(g,e,A)=>e||A?((g,e=t,A=Object.is)=>{let i=e(I);function o(){const C=e(I);if(!A(i,C)){const I=i;g(i=C,I)}}return C.add(o),()=>C.delete(o)})(g,e,A):(C.add(g),()=>C.delete(g)),destroy:()=>C.clear()};return I=g(e,t,A),A}(g):g,C=(g=I.getState,C=Object.is)=>{const[,A]=(0,e.useReducer)((g=>g+1),0),i=I.getState(),o=(0,e.useRef)(i),n=(0,e.useRef)(g),l=(0,e.useRef)(C),a=(0,e.useRef)(!1),c=(0,e.useRef)();let s;void 0===c.current&&(c.current=g(i));let d=!1;(o.current!==i||n.current!==g||l.current!==C||a.current)&&(s=g(i),d=!C(c.current,s)),t((()=>{d&&(c.current=s),o.current=i,n.current=g,l.current=C,a.current=!1}));const b=(0,e.useRef)(i);return t((()=>{const g=()=>{try{const g=I.getState(),C=n.current(g);l.current(c.current,C)||(o.current=g,c.current=C,A())}catch(g){a.current=!0,A()}},C=I.subscribe(g);return I.getState()!==b.current&&g(),C}),[]),d?s:c.current};return Object.assign(C,I),C[Symbol.iterator]=function*(){console.warn("[useStore, api] = create() is deprecated and will be removed in v4"),yield C,yield I},C}}}]);